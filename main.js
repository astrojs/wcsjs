/**
 * @license AngularJS v1.2.8-build.2088+sha.9693a42
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, document, undefined) {'use strict';

/**
 * @description
 *
 * This object provides a utility for producing rich Error messages within
 * Angular. It can be called as follows:
 *
 * var exampleMinErr = minErr('example');
 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
 *
 * The above creates an instance of minErr in the example namespace. The
 * resulting error will have a namespaced error code of example.one.  The
 * resulting error will replace {0} with the value of foo, and {1} with the
 * value of bar. The object is not restricted in the number of arguments it can
 * take.
 *
 * If fewer arguments are specified than necessary for interpolation, the extra
 * interpolation markers will be preserved in the final string.
 *
 * Since data will be parsed statically during a build step, some restrictions
 * are applied with respect to how minErr instances are created and called.
 * Instances should have names of the form namespaceMinErr for a minErr created
 * using minErr('namespace') . Error codes, namespaces and template strings
 * should all be static strings, not variables or general expressions.
 *
 * @param {string} module The namespace to use for the new minErr instance.
 * @returns {function(string, string, ...): Error} instance
 */

function minErr(module) {
  return function () {
    var code = arguments[0],
      prefix = '[' + (module ? module + ':' : '') + code + '] ',
      template = arguments[1],
      templateArgs = arguments,
      stringify = function (obj) {
        if (typeof obj === 'function') {
          return obj.toString().replace(/ \{[\s\S]*$/, '');
        } else if (typeof obj === 'undefined') {
          return 'undefined';
        } else if (typeof obj !== 'string') {
          return JSON.stringify(obj);
        }
        return obj;
      },
      message, i;

    message = prefix + template.replace(/\{\d+\}/g, function (match) {
      var index = +match.slice(1, -1), arg;

      if (index + 2 < templateArgs.length) {
        arg = templateArgs[index + 2];
        if (typeof arg === 'function') {
          return arg.toString().replace(/ ?\{[\s\S]*$/, '');
        } else if (typeof arg === 'undefined') {
          return 'undefined';
        } else if (typeof arg !== 'string') {
          return toJson(arg);
        }
        return arg;
      }
      return match;
    });

    message = message + '\nhttp://errors.angularjs.org/1.2.8-build.2088+sha.9693a42/' +
      (module ? module + '/' : '') + code;
    for (i = 2; i < arguments.length; i++) {
      message = message + (i == 2 ? '?' : '&') + 'p' + (i-2) + '=' +
        encodeURIComponent(stringify(arguments[i]));
    }

    return new Error(message);
  };
}

/* We need to tell jshint what variables are being exported */
/* global
    -angular,
    -msie,
    -jqLite,
    -jQuery,
    -slice,
    -push,
    -toString,
    -ngMinErr,
    -_angular,
    -angularModule,
    -nodeName_,
    -uid,

    -lowercase,
    -uppercase,
    -manualLowercase,
    -manualUppercase,
    -nodeName_,
    -isArrayLike,
    -forEach,
    -sortedKeys,
    -forEachSorted,
    -reverseParams,
    -nextUid,
    -setHashKey,
    -extend,
    -int,
    -inherit,
    -noop,
    -identity,
    -valueFn,
    -isUndefined,
    -isDefined,
    -isObject,
    -isString,
    -isNumber,
    -isDate,
    -isArray,
    -isFunction,
    -isRegExp,
    -isWindow,
    -isScope,
    -isFile,
    -isBoolean,
    -trim,
    -isElement,
    -makeMap,
    -map,
    -size,
    -includes,
    -indexOf,
    -arrayRemove,
    -isLeafNode,
    -copy,
    -shallowCopy,
    -equals,
    -csp,
    -concat,
    -sliceArgs,
    -bind,
    -toJsonReplacer,
    -toJson,
    -fromJson,
    -toBoolean,
    -startingTag,
    -tryDecodeURIComponent,
    -parseKeyValue,
    -toKeyValue,
    -encodeUriSegment,
    -encodeUriQuery,
    -angularInit,
    -bootstrap,
    -snake_case,
    -bindJQuery,
    -assertArg,
    -assertArgFn,
    -assertNotHasOwnProperty,
    -getter,
    -getBlockElements,

*/

////////////////////////////////////

/**
 * @ngdoc function
 * @name angular.lowercase
 * @function
 *
 * @description Converts the specified string to lowercase.
 * @param {string} string String to be converted to lowercase.
 * @returns {string} Lowercased string.
 */
var lowercase = function(string){return isString(string) ? string.toLowerCase() : string;};


/**
 * @ngdoc function
 * @name angular.uppercase
 * @function
 *
 * @description Converts the specified string to uppercase.
 * @param {string} string String to be converted to uppercase.
 * @returns {string} Uppercased string.
 */
var uppercase = function(string){return isString(string) ? string.toUpperCase() : string;};


var manualLowercase = function(s) {
  /* jshint bitwise: false */
  return isString(s)
      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})
      : s;
};
var manualUppercase = function(s) {
  /* jshint bitwise: false */
  return isString(s)
      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})
      : s;
};


// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
// with correct but slower alternatives.
if ('i' !== 'I'.toLowerCase()) {
  lowercase = manualLowercase;
  uppercase = manualUppercase;
}


var /** holds major version number for IE or NaN for real browsers */
    msie,
    jqLite,           // delay binding since jQuery could be loaded after us.
    jQuery,           // delay binding
    slice             = [].slice,
    push              = [].push,
    toString          = Object.prototype.toString,
    ngMinErr          = minErr('ng'),


    _angular          = window.angular,
    /** @name angular */
    angular           = window.angular || (window.angular = {}),
    angularModule,
    nodeName_,
    uid               = ['0', '0', '0'];

/**
 * IE 11 changed the format of the UserAgent string.
 * See http://msdn.microsoft.com/en-us/library/ms537503.aspx
 */
msie = int((/msie (\d+)/.exec(lowercase(navigator.userAgent)) || [])[1]);
if (isNaN(msie)) {
  msie = int((/trident\/.*; rv:(\d+)/.exec(lowercase(navigator.userAgent)) || [])[1]);
}


/**
 * @private
 * @param {*} obj
 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
 *                   String ...)
 */
function isArrayLike(obj) {
  if (obj == null || isWindow(obj)) {
    return false;
  }

  var length = obj.length;

  if (obj.nodeType === 1 && length) {
    return true;
  }

  return isString(obj) || isArray(obj) || length === 0 ||
         typeof length === 'number' && length > 0 && (length - 1) in obj;
}

/**
 * @ngdoc function
 * @name angular.forEach
 * @function
 *
 * @description
 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
 * object or an array. The `iterator` function is invoked with `iterator(value, key)`, where `value`
 * is the value of an object property or an array element and `key` is the object property key or
 * array element index. Specifying a `context` for the function is optional.
 *
 * Note: this function was previously known as `angular.foreach`.
 *
   <pre>
     var values = {name: 'misko', gender: 'male'};
     var log = [];
     angular.forEach(values, function(value, key){
       this.push(key + ': ' + value);
     }, log);
     expect(log).toEqual(['name: misko', 'gender:male']);
   </pre>
 *
 * @param {Object|Array} obj Object to iterate over.
 * @param {Function} iterator Iterator function.
 * @param {Object=} context Object to become context (`this`) for the iterator function.
 * @returns {Object|Array} Reference to `obj`.
 */
function forEach(obj, iterator, context) {
  var key;
  if (obj) {
    if (isFunction(obj)){
      for (key in obj) {
        // Need to check if hasOwnProperty exists,
        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
          iterator.call(context, obj[key], key);
        }
      }
    } else if (obj.forEach && obj.forEach !== forEach) {
      obj.forEach(iterator, context);
    } else if (isArrayLike(obj)) {
      for (key = 0; key < obj.length; key++)
        iterator.call(context, obj[key], key);
    } else {
      for (key in obj) {
        if (obj.hasOwnProperty(key)) {
          iterator.call(context, obj[key], key);
        }
      }
    }
  }
  return obj;
}

function sortedKeys(obj) {
  var keys = [];
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      keys.push(key);
    }
  }
  return keys.sort();
}

function forEachSorted(obj, iterator, context) {
  var keys = sortedKeys(obj);
  for ( var i = 0; i < keys.length; i++) {
    iterator.call(context, obj[keys[i]], keys[i]);
  }
  return keys;
}


/**
 * when using forEach the params are value, key, but it is often useful to have key, value.
 * @param {function(string, *)} iteratorFn
 * @returns {function(*, string)}
 */
function reverseParams(iteratorFn) {
  return function(value, key) { iteratorFn(key, value); };
}

/**
 * A consistent way of creating unique IDs in angular. The ID is a sequence of alpha numeric
 * characters such as '012ABC'. The reason why we are not using simply a number counter is that
 * the number string gets longer over time, and it can also overflow, where as the nextId
 * will grow much slower, it is a string, and it will never overflow.
 *
 * @returns an unique alpha-numeric string
 */
function nextUid() {
  var index = uid.length;
  var digit;

  while(index) {
    index--;
    digit = uid[index].charCodeAt(0);
    if (digit == 57 /*'9'*/) {
      uid[index] = 'A';
      return uid.join('');
    }
    if (digit == 90  /*'Z'*/) {
      uid[index] = '0';
    } else {
      uid[index] = String.fromCharCode(digit + 1);
      return uid.join('');
    }
  }
  uid.unshift('0');
  return uid.join('');
}


/**
 * Set or clear the hashkey for an object.
 * @param obj object
 * @param h the hashkey (!truthy to delete the hashkey)
 */
function setHashKey(obj, h) {
  if (h) {
    obj.$$hashKey = h;
  }
  else {
    delete obj.$$hashKey;
  }
}

/**
 * @ngdoc function
 * @name angular.extend
 * @function
 *
 * @description
 * Extends the destination object `dst` by copying all of the properties from the `src` object(s)
 * to `dst`. You can specify multiple `src` objects.
 *
 * @param {Object} dst Destination object.
 * @param {...Object} src Source object(s).
 * @returns {Object} Reference to `dst`.
 */
function extend(dst) {
  var h = dst.$$hashKey;
  forEach(arguments, function(obj){
    if (obj !== dst) {
      forEach(obj, function(value, key){
        dst[key] = value;
      });
    }
  });

  setHashKey(dst,h);
  return dst;
}

function int(str) {
  return parseInt(str, 10);
}


function inherit(parent, extra) {
  return extend(new (extend(function() {}, {prototype:parent}))(), extra);
}

/**
 * @ngdoc function
 * @name angular.noop
 * @function
 *
 * @description
 * A function that performs no operations. This function can be useful when writing code in the
 * functional style.
   <pre>
     function foo(callback) {
       var result = calculateResult();
       (callback || angular.noop)(result);
     }
   </pre>
 */
function noop() {}
noop.$inject = [];


/**
 * @ngdoc function
 * @name angular.identity
 * @function
 *
 * @description
 * A function that returns its first argument. This function is useful when writing code in the
 * functional style.
 *
   <pre>
     function transformer(transformationFn, value) {
       return (transformationFn || angular.identity)(value);
     };
   </pre>
 */
function identity($) {return $;}
identity.$inject = [];


function valueFn(value) {return function() {return value;};}

/**
 * @ngdoc function
 * @name angular.isUndefined
 * @function
 *
 * @description
 * Determines if a reference is undefined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is undefined.
 */
function isUndefined(value){return typeof value === 'undefined';}


/**
 * @ngdoc function
 * @name angular.isDefined
 * @function
 *
 * @description
 * Determines if a reference is defined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is defined.
 */
function isDefined(value){return typeof value !== 'undefined';}


/**
 * @ngdoc function
 * @name angular.isObject
 * @function
 *
 * @description
 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
 * considered to be objects.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Object` but not `null`.
 */
function isObject(value){return value != null && typeof value === 'object';}


/**
 * @ngdoc function
 * @name angular.isString
 * @function
 *
 * @description
 * Determines if a reference is a `String`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `String`.
 */
function isString(value){return typeof value === 'string';}


/**
 * @ngdoc function
 * @name angular.isNumber
 * @function
 *
 * @description
 * Determines if a reference is a `Number`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Number`.
 */
function isNumber(value){return typeof value === 'number';}


/**
 * @ngdoc function
 * @name angular.isDate
 * @function
 *
 * @description
 * Determines if a value is a date.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Date`.
 */
function isDate(value){
  return toString.call(value) === '[object Date]';
}


/**
 * @ngdoc function
 * @name angular.isArray
 * @function
 *
 * @description
 * Determines if a reference is an `Array`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Array`.
 */
function isArray(value) {
  return toString.call(value) === '[object Array]';
}


/**
 * @ngdoc function
 * @name angular.isFunction
 * @function
 *
 * @description
 * Determines if a reference is a `Function`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Function`.
 */
function isFunction(value){return typeof value === 'function';}


/**
 * Determines if a value is a regular expression object.
 *
 * @private
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `RegExp`.
 */
function isRegExp(value) {
  return toString.call(value) === '[object RegExp]';
}


/**
 * Checks if `obj` is a window object.
 *
 * @private
 * @param {*} obj Object to check
 * @returns {boolean} True if `obj` is a window obj.
 */
function isWindow(obj) {
  return obj && obj.document && obj.location && obj.alert && obj.setInterval;
}


function isScope(obj) {
  return obj && obj.$evalAsync && obj.$watch;
}


function isFile(obj) {
  return toString.call(obj) === '[object File]';
}


function isBoolean(value) {
  return typeof value === 'boolean';
}


var trim = (function() {
  // native trim is way faster: http://jsperf.com/angular-trim-test
  // but IE doesn't have it... :-(
  // TODO: we should move this into IE/ES5 polyfill
  if (!String.prototype.trim) {
    return function(value) {
      return isString(value) ? value.replace(/^\s\s*/, '').replace(/\s\s*$/, '') : value;
    };
  }
  return function(value) {
    return isString(value) ? value.trim() : value;
  };
})();


/**
 * @ngdoc function
 * @name angular.isElement
 * @function
 *
 * @description
 * Determines if a reference is a DOM element (or wrapped jQuery element).
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
 */
function isElement(node) {
  return !!(node &&
    (node.nodeName  // we are a direct element
    || (node.on && node.find)));  // we have an on and find method part of jQuery API
}

/**
 * @param str 'key1,key2,...'
 * @returns {object} in the form of {key1:true, key2:true, ...}
 */
function makeMap(str){
  var obj = {}, items = str.split(","), i;
  for ( i = 0; i < items.length; i++ )
    obj[ items[i] ] = true;
  return obj;
}


if (msie < 9) {
  nodeName_ = function(element) {
    element = element.nodeName ? element : element[0];
    return (element.scopeName && element.scopeName != 'HTML')
      ? uppercase(element.scopeName + ':' + element.nodeName) : element.nodeName;
  };
} else {
  nodeName_ = function(element) {
    return element.nodeName ? element.nodeName : element[0].nodeName;
  };
}


function map(obj, iterator, context) {
  var results = [];
  forEach(obj, function(value, index, list) {
    results.push(iterator.call(context, value, index, list));
  });
  return results;
}


/**
 * @description
 * Determines the number of elements in an array, the number of properties an object has, or
 * the length of a string.
 *
 * Note: This function is used to augment the Object type in Angular expressions. See
 * {@link angular.Object} for more information about Angular arrays.
 *
 * @param {Object|Array|string} obj Object, array, or string to inspect.
 * @param {boolean} [ownPropsOnly=false] Count only "own" properties in an object
 * @returns {number} The size of `obj` or `0` if `obj` is neither an object nor an array.
 */
function size(obj, ownPropsOnly) {
  var count = 0, key;

  if (isArray(obj) || isString(obj)) {
    return obj.length;
  } else if (isObject(obj)){
    for (key in obj)
      if (!ownPropsOnly || obj.hasOwnProperty(key))
        count++;
  }

  return count;
}


function includes(array, obj) {
  return indexOf(array, obj) != -1;
}

function indexOf(array, obj) {
  if (array.indexOf) return array.indexOf(obj);

  for (var i = 0; i < array.length; i++) {
    if (obj === array[i]) return i;
  }
  return -1;
}

function arrayRemove(array, value) {
  var index = indexOf(array, value);
  if (index >=0)
    array.splice(index, 1);
  return value;
}

function isLeafNode (node) {
  if (node) {
    switch (node.nodeName) {
    case "OPTION":
    case "PRE":
    case "TITLE":
      return true;
    }
  }
  return false;
}

/**
 * @ngdoc function
 * @name angular.copy
 * @function
 *
 * @description
 * Creates a deep copy of `source`, which should be an object or an array.
 *
 * * If no destination is supplied, a copy of the object or array is created.
 * * If a destination is provided, all of its elements (for array) or properties (for objects)
 *   are deleted and then all elements/properties from the source are copied to it.
 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
 * * If `source` is identical to 'destination' an exception will be thrown.
 *
 * @param {*} source The source that will be used to make a copy.
 *                   Can be any type, including primitives, `null`, and `undefined`.
 * @param {(Object|Array)=} destination Destination into which the source is copied. If
 *     provided, must be of the same type as `source`.
 * @returns {*} The copy or updated `destination`, if `destination` was specified.
 *
 * @example
 <doc:example>
 <doc:source>
 <div ng-controller="Controller">
 <form novalidate class="simple-form">
 Name: <input type="text" ng-model="user.name" /><br />
 E-mail: <input type="email" ng-model="user.email" /><br />
 Gender: <input type="radio" ng-model="user.gender" value="male" />male
 <input type="radio" ng-model="user.gender" value="female" />female<br />
 <button ng-click="reset()">RESET</button>
 <button ng-click="update(user)">SAVE</button>
 </form>
 <pre>form = {{user | json}}</pre>
 <pre>master = {{master | json}}</pre>
 </div>

 <script>
 function Controller($scope) {
    $scope.master= {};

    $scope.update = function(user) {
      // Example with 1 argument
      $scope.master= angular.copy(user);
    };

    $scope.reset = function() {
      // Example with 2 arguments
      angular.copy($scope.master, $scope.user);
    };

    $scope.reset();
  }
 </script>
 </doc:source>
 </doc:example>
 */
function copy(source, destination){
  if (isWindow(source) || isScope(source)) {
    throw ngMinErr('cpws',
      "Can't copy! Making copies of Window or Scope instances is not supported.");
  }

  if (!destination) {
    destination = source;
    if (source) {
      if (isArray(source)) {
        destination = copy(source, []);
      } else if (isDate(source)) {
        destination = new Date(source.getTime());
      } else if (isRegExp(source)) {
        destination = new RegExp(source.source);
      } else if (isObject(source)) {
        destination = copy(source, {});
      }
    }
  } else {
    if (source === destination) throw ngMinErr('cpi',
      "Can't copy! Source and destination are identical.");
    if (isArray(source)) {
      destination.length = 0;
      for ( var i = 0; i < source.length; i++) {
        destination.push(copy(source[i]));
      }
    } else {
      var h = destination.$$hashKey;
      forEach(destination, function(value, key){
        delete destination[key];
      });
      for ( var key in source) {
        destination[key] = copy(source[key]);
      }
      setHashKey(destination,h);
    }
  }
  return destination;
}

/**
 * Create a shallow copy of an object
 */
function shallowCopy(src, dst) {
  dst = dst || {};

  for(var key in src) {
    // shallowCopy is only ever called by $compile nodeLinkFn, which has control over src
    // so we don't need to worry about using our custom hasOwnProperty here
    if (src.hasOwnProperty(key) && key.charAt(0) !== '$' && key.charAt(1) !== '$') {
      dst[key] = src[key];
    }
  }

  return dst;
}


/**
 * @ngdoc function
 * @name angular.equals
 * @function
 *
 * @description
 * Determines if two objects or two values are equivalent. Supports value types, regular
 * expressions, arrays and objects.
 *
 * Two objects or values are considered equivalent if at least one of the following is true:
 *
 * * Both objects or values pass `===` comparison.
 * * Both objects or values are of the same type and all of their properties are equal by
 *   comparing them with `angular.equals`.
 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
 * * Both values represent the same regular expression (In JavasScript,
 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
 *   representation matches).
 *
 * During a property comparison, properties of `function` type and properties with names
 * that begin with `$` are ignored.
 *
 * Scope and DOMWindow objects are being compared only by identify (`===`).
 *
 * @param {*} o1 Object or value to compare.
 * @param {*} o2 Object or value to compare.
 * @returns {boolean} True if arguments are equal.
 */
function equals(o1, o2) {
  if (o1 === o2) return true;
  if (o1 === null || o2 === null) return false;
  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
  if (t1 == t2) {
    if (t1 == 'object') {
      if (isArray(o1)) {
        if (!isArray(o2)) return false;
        if ((length = o1.length) == o2.length) {
          for(key=0; key<length; key++) {
            if (!equals(o1[key], o2[key])) return false;
          }
          return true;
        }
      } else if (isDate(o1)) {
        return isDate(o2) && o1.getTime() == o2.getTime();
      } else if (isRegExp(o1) && isRegExp(o2)) {
        return o1.toString() == o2.toString();
      } else {
        if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) || isArray(o2)) return false;
        keySet = {};
        for(key in o1) {
          if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
          if (!equals(o1[key], o2[key])) return false;
          keySet[key] = true;
        }
        for(key in o2) {
          if (!keySet.hasOwnProperty(key) &&
              key.charAt(0) !== '$' &&
              o2[key] !== undefined &&
              !isFunction(o2[key])) return false;
        }
        return true;
      }
    }
  }
  return false;
}


function csp() {
  return (document.securityPolicy && document.securityPolicy.isActive) ||
      (document.querySelector &&
      !!(document.querySelector('[ng-csp]') || document.querySelector('[data-ng-csp]')));
}


function concat(array1, array2, index) {
  return array1.concat(slice.call(array2, index));
}

function sliceArgs(args, startIndex) {
  return slice.call(args, startIndex || 0);
}


/* jshint -W101 */
/**
 * @ngdoc function
 * @name angular.bind
 * @function
 *
 * @description
 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
 *
 * @param {Object} self Context which `fn` should be evaluated in.
 * @param {function()} fn Function to be bound.
 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
 */
/* jshint +W101 */
function bind(self, fn) {
  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
  if (isFunction(fn) && !(fn instanceof RegExp)) {
    return curryArgs.length
      ? function() {
          return arguments.length
            ? fn.apply(self, curryArgs.concat(slice.call(arguments, 0)))
            : fn.apply(self, curryArgs);
        }
      : function() {
          return arguments.length
            ? fn.apply(self, arguments)
            : fn.call(self);
        };
  } else {
    // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)
    return fn;
  }
}


function toJsonReplacer(key, value) {
  var val = value;

  if (typeof key === 'string' && key.charAt(0) === '$') {
    val = undefined;
  } else if (isWindow(value)) {
    val = '$WINDOW';
  } else if (value &&  document === value) {
    val = '$DOCUMENT';
  } else if (isScope(value)) {
    val = '$SCOPE';
  }

  return val;
}


/**
 * @ngdoc function
 * @name angular.toJson
 * @function
 *
 * @description
 * Serializes input into a JSON-formatted string. Properties with leading $ characters will be
 * stripped since angular uses this notation internally.
 *
 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
 * @param {boolean=} pretty If set to true, the JSON output will contain newlines and whitespace.
 * @returns {string|undefined} JSON-ified string representing `obj`.
 */
function toJson(obj, pretty) {
  if (typeof obj === 'undefined') return undefined;
  return JSON.stringify(obj, toJsonReplacer, pretty ? '  ' : null);
}


/**
 * @ngdoc function
 * @name angular.fromJson
 * @function
 *
 * @description
 * Deserializes a JSON string.
 *
 * @param {string} json JSON string to deserialize.
 * @returns {Object|Array|Date|string|number} Deserialized thingy.
 */
function fromJson(json) {
  return isString(json)
      ? JSON.parse(json)
      : json;
}


function toBoolean(value) {
  if (typeof value === 'function') {
    value = true;
  } else if (value && value.length !== 0) {
    var v = lowercase("" + value);
    value = !(v == 'f' || v == '0' || v == 'false' || v == 'no' || v == 'n' || v == '[]');
  } else {
    value = false;
  }
  return value;
}

/**
 * @returns {string} Returns the string representation of the element.
 */
function startingTag(element) {
  element = jqLite(element).clone();
  try {
    // turns out IE does not let you set .html() on elements which
    // are not allowed to have children. So we just ignore it.
    element.empty();
  } catch(e) {}
  // As Per DOM Standards
  var TEXT_NODE = 3;
  var elemHtml = jqLite('<div>').append(element).html();
  try {
    return element[0].nodeType === TEXT_NODE ? lowercase(elemHtml) :
        elemHtml.
          match(/^(<[^>]+>)/)[1].
          replace(/^<([\w\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });
  } catch(e) {
    return lowercase(elemHtml);
  }

}


/////////////////////////////////////////////////

/**
 * Tries to decode the URI component without throwing an exception.
 *
 * @private
 * @param str value potential URI component to check.
 * @returns {boolean} True if `value` can be decoded
 * with the decodeURIComponent function.
 */
function tryDecodeURIComponent(value) {
  try {
    return decodeURIComponent(value);
  } catch(e) {
    // Ignore any invalid uri component
  }
}


/**
 * Parses an escaped url query string into key-value pairs.
 * @returns Object.<(string|boolean)>
 */
function parseKeyValue(/**string*/keyValue) {
  var obj = {}, key_value, key;
  forEach((keyValue || "").split('&'), function(keyValue){
    if ( keyValue ) {
      key_value = keyValue.split('=');
      key = tryDecodeURIComponent(key_value[0]);
      if ( isDefined(key) ) {
        var val = isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;
        if (!obj[key]) {
          obj[key] = val;
        } else if(isArray(obj[key])) {
          obj[key].push(val);
        } else {
          obj[key] = [obj[key],val];
        }
      }
    }
  });
  return obj;
}

function toKeyValue(obj) {
  var parts = [];
  forEach(obj, function(value, key) {
    if (isArray(value)) {
      forEach(value, function(arrayValue) {
        parts.push(encodeUriQuery(key, true) +
                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
      });
    } else {
    parts.push(encodeUriQuery(key, true) +
               (value === true ? '' : '=' + encodeUriQuery(value, true)));
    }
  });
  return parts.length ? parts.join('&') : '';
}


/**
 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
 * segments:
 *    segment       = *pchar
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
function encodeUriSegment(val) {
  return encodeUriQuery(val, true).
             replace(/%26/gi, '&').
             replace(/%3D/gi, '=').
             replace(/%2B/gi, '+');
}


/**
 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
 * encoded per http://tools.ietf.org/html/rfc3986:
 *    query       = *( pchar / "/" / "?" )
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
function encodeUriQuery(val, pctEncodeSpaces) {
  return encodeURIComponent(val).
             replace(/%40/gi, '@').
             replace(/%3A/gi, ':').
             replace(/%24/g, '$').
             replace(/%2C/gi, ',').
             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
}


/**
 * @ngdoc directive
 * @name ng.directive:ngApp
 *
 * @element ANY
 * @param {angular.Module} ngApp an optional application
 *   {@link angular.module module} name to load.
 *
 * @description
 *
 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
 * designates the **root element** of the application and is typically placed near the root element
 * of the page - e.g. on the `<body>` or `<html>` tags.
 *
 * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
 * found in the document will be used to define the root element to auto-bootstrap as an
 * application. To run multiple applications in an HTML document you must manually bootstrap them using
 * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.
 *
 * You can specify an **AngularJS module** to be used as the root module for the application.  This
 * module will be loaded into the {@link AUTO.$injector} when the application is bootstrapped and
 * should contain the application code needed or have dependencies on other modules that will
 * contain the code. See {@link angular.module} for more information.
 *
 * In the example below if the `ngApp` directive were not placed on the `html` element then the
 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
 * would not be resolved to `3`.
 *
 * `ngApp` is the easiest, and most common, way to bootstrap an application.
 *
 <example module="ngAppDemo">
   <file name="index.html">
   <div ng-controller="ngAppDemoController">
     I can add: {{a}} + {{b}} =  {{ a+b }}
   </file>
   <file name="script.js">
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
     $scope.a = 1;
     $scope.b = 2;
   });
   </file>
 </example>
 *
 */
function angularInit(element, bootstrap) {
  var elements = [element],
      appElement,
      module,
      names = ['ng:app', 'ng-app', 'x-ng-app', 'data-ng-app'],
      NG_APP_CLASS_REGEXP = /\sng[:\-]app(:\s*([\w\d_]+);?)?\s/;

  function append(element) {
    element && elements.push(element);
  }

  forEach(names, function(name) {
    names[name] = true;
    append(document.getElementById(name));
    name = name.replace(':', '\\:');
    if (element.querySelectorAll) {
      forEach(element.querySelectorAll('.' + name), append);
      forEach(element.querySelectorAll('.' + name + '\\:'), append);
      forEach(element.querySelectorAll('[' + name + ']'), append);
    }
  });

  forEach(elements, function(element) {
    if (!appElement) {
      var className = ' ' + element.className + ' ';
      var match = NG_APP_CLASS_REGEXP.exec(className);
      if (match) {
        appElement = element;
        module = (match[2] || '').replace(/\s+/g, ',');
      } else {
        forEach(element.attributes, function(attr) {
          if (!appElement && names[attr.name]) {
            appElement = element;
            module = attr.value;
          }
        });
      }
    }
  });
  if (appElement) {
    bootstrap(appElement, module ? [module] : []);
  }
}

/**
 * @ngdoc function
 * @name angular.bootstrap
 * @description
 * Use this function to manually start up angular application.
 *
 * See: {@link guide/bootstrap Bootstrap}
 *
 * Note that ngScenario-based end-to-end tests cannot use this function to bootstrap manually.
 * They must use {@link api/ng.directive:ngApp ngApp}.
 *
 * @param {Element} element DOM element which is the root of angular application.
 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
 *     Each item in the array should be the name of a predefined module or a (DI annotated)
 *     function that will be invoked by the injector as a run block.
 *     See: {@link angular.module modules}
 * @returns {AUTO.$injector} Returns the newly created injector for this app.
 */
function bootstrap(element, modules) {
  var doBootstrap = function() {
    element = jqLite(element);

    if (element.injector()) {
      var tag = (element[0] === document) ? 'document' : startingTag(element);
      throw ngMinErr('btstrpd', "App Already Bootstrapped with this Element '{0}'", tag);
    }

    modules = modules || [];
    modules.unshift(['$provide', function($provide) {
      $provide.value('$rootElement', element);
    }]);
    modules.unshift('ng');
    var injector = createInjector(modules);
    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector', '$animate',
       function(scope, element, compile, injector, animate) {
        scope.$apply(function() {
          element.data('$injector', injector);
          compile(element)(scope);
        });
      }]
    );
    return injector;
  };

  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;

  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
    return doBootstrap();
  }

  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
  angular.resumeBootstrap = function(extraModules) {
    forEach(extraModules, function(module) {
      modules.push(module);
    });
    doBootstrap();
  };
}

var SNAKE_CASE_REGEXP = /[A-Z]/g;
function snake_case(name, separator){
  separator = separator || '_';
  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
    return (pos ? separator : '') + letter.toLowerCase();
  });
}

function bindJQuery() {
  // bind to jQuery if present;
  jQuery = window.jQuery;
  // reset to jQuery or default to us.
  if (jQuery) {
    jqLite = jQuery;
    extend(jQuery.fn, {
      scope: JQLitePrototype.scope,
      isolateScope: JQLitePrototype.isolateScope,
      controller: JQLitePrototype.controller,
      injector: JQLitePrototype.injector,
      inheritedData: JQLitePrototype.inheritedData
    });
    // Method signature:
    //     jqLitePatchJQueryRemove(name, dispatchThis, filterElems, getterIfNoArguments)
    jqLitePatchJQueryRemove('remove', true, true, false);
    jqLitePatchJQueryRemove('empty', false, false, false);
    jqLitePatchJQueryRemove('html', false, false, true);
  } else {
    jqLite = JQLite;
  }
  angular.element = jqLite;
}

/**
 * throw error if the argument is falsy.
 */
function assertArg(arg, name, reason) {
  if (!arg) {
    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
  }
  return arg;
}

function assertArgFn(arg, name, acceptArrayAnnotation) {
  if (acceptArrayAnnotation && isArray(arg)) {
      arg = arg[arg.length - 1];
  }

  assertArg(isFunction(arg), name, 'not a function, got ' +
      (arg && typeof arg == 'object' ? arg.constructor.name || 'Object' : typeof arg));
  return arg;
}

/**
 * throw error if the name given is hasOwnProperty
 * @param  {String} name    the name to test
 * @param  {String} context the context in which the name is used, such as module or directive
 */
function assertNotHasOwnProperty(name, context) {
  if (name === 'hasOwnProperty') {
    throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);
  }
}

/**
 * Return the value accessible from the object by path. Any undefined traversals are ignored
 * @param {Object} obj starting object
 * @param {string} path path to traverse
 * @param {boolean=true} bindFnToScope
 * @returns value as accessible by path
 */
//TODO(misko): this function needs to be removed
function getter(obj, path, bindFnToScope) {
  if (!path) return obj;
  var keys = path.split('.');
  var key;
  var lastInstance = obj;
  var len = keys.length;

  for (var i = 0; i < len; i++) {
    key = keys[i];
    if (obj) {
      obj = (lastInstance = obj)[key];
    }
  }
  if (!bindFnToScope && isFunction(obj)) {
    return bind(lastInstance, obj);
  }
  return obj;
}

/**
 * Return the DOM siblings between the first and last node in the given array.
 * @param {Array} array like object
 * @returns jQlite object containing the elements
 */
function getBlockElements(nodes) {
  var startNode = nodes[0],
      endNode = nodes[nodes.length - 1];
  if (startNode === endNode) {
    return jqLite(startNode);
  }

  var element = startNode;
  var elements = [element];

  do {
    element = element.nextSibling;
    if (!element) break;
    elements.push(element);
  } while (element !== endNode);

  return jqLite(elements);
}

/**
 * @ngdoc interface
 * @name angular.Module
 * @description
 *
 * Interface for configuring angular {@link angular.module modules}.
 */

function setupModuleLoader(window) {

  var $injectorMinErr = minErr('$injector');
  var ngMinErr = minErr('ng');

  function ensure(obj, name, factory) {
    return obj[name] || (obj[name] = factory());
  }

  var angular = ensure(window, 'angular', Object);

  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
  angular.$$minErr = angular.$$minErr || minErr;

  return ensure(angular, 'module', function() {
    /** @type {Object.<string, angular.Module>} */
    var modules = {};

    /**
     * @ngdoc function
     * @name angular.module
     * @description
     *
     * The `angular.module` is a global place for creating, registering and retrieving Angular
     * modules.
     * All modules (angular core or 3rd party) that should be available to an application must be
     * registered using this mechanism.
     *
     * When passed two or more arguments, a new module is created.  If passed only one argument, an
     * existing module (the name passed as the first argument to `module`) is retrieved.
     *
     *
     * # Module
     *
     * A module is a collection of services, directives, filters, and configuration information.
     * `angular.module` is used to configure the {@link AUTO.$injector $injector}.
     *
     * <pre>
     * // Create a new module
     * var myModule = angular.module('myModule', []);
     *
     * // register a new service
     * myModule.value('appName', 'MyCoolApp');
     *
     * // configure existing services inside initialization blocks.
     * myModule.config(function($locationProvider) {
     *   // Configure existing providers
     *   $locationProvider.hashPrefix('!');
     * });
     * </pre>
     *
     * Then you can create an injector and load your modules like this:
     *
     * <pre>
     * var injector = angular.injector(['ng', 'MyModule'])
     * </pre>
     *
     * However it's more likely that you'll just use
     * {@link ng.directive:ngApp ngApp} or
     * {@link angular.bootstrap} to simplify this process for you.
     *
     * @param {!string} name The name of the module to create or retrieve.
     * @param {Array.<string>=} requires If specified then new module is being created. If
     *        unspecified then the the module is being retrieved for further configuration.
     * @param {Function} configFn Optional configuration function for the module. Same as
     *        {@link angular.Module#methods_config Module#config()}.
     * @returns {module} new module with the {@link angular.Module} api.
     */
    return function module(name, requires, configFn) {
      var assertNotHasOwnProperty = function(name, context) {
        if (name === 'hasOwnProperty') {
          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
        }
      };

      assertNotHasOwnProperty(name, 'module');
      if (requires && modules.hasOwnProperty(name)) {
        modules[name] = null;
      }
      return ensure(modules, name, function() {
        if (!requires) {
          throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +
             "the module name or forgot to load it. If registering a module ensure that you " +
             "specify the dependencies as the second argument.", name);
        }

        /** @type {!Array.<Array.<*>>} */
        var invokeQueue = [];

        /** @type {!Array.<Function>} */
        var runBlocks = [];

        var config = invokeLater('$injector', 'invoke');

        /** @type {angular.Module} */
        var moduleInstance = {
          // Private state
          _invokeQueue: invokeQueue,
          _runBlocks: runBlocks,

          /**
           * @ngdoc property
           * @name angular.Module#requires
           * @propertyOf angular.Module
           * @returns {Array.<string>} List of module names which must be loaded before this module.
           * @description
           * Holds the list of modules which the injector will load before the current module is
           * loaded.
           */
          requires: requires,

          /**
           * @ngdoc property
           * @name angular.Module#name
           * @propertyOf angular.Module
           * @returns {string} Name of the module.
           * @description
           */
          name: name,


          /**
           * @ngdoc method
           * @name angular.Module#provider
           * @methodOf angular.Module
           * @param {string} name service name
           * @param {Function} providerType Construction function for creating new instance of the
           *                                service.
           * @description
           * See {@link AUTO.$provide#provider $provide.provider()}.
           */
          provider: invokeLater('$provide', 'provider'),

          /**
           * @ngdoc method
           * @name angular.Module#factory
           * @methodOf angular.Module
           * @param {string} name service name
           * @param {Function} providerFunction Function for creating new instance of the service.
           * @description
           * See {@link AUTO.$provide#factory $provide.factory()}.
           */
          factory: invokeLater('$provide', 'factory'),

          /**
           * @ngdoc method
           * @name angular.Module#service
           * @methodOf angular.Module
           * @param {string} name service name
           * @param {Function} constructor A constructor function that will be instantiated.
           * @description
           * See {@link AUTO.$provide#service $provide.service()}.
           */
          service: invokeLater('$provide', 'service'),

          /**
           * @ngdoc method
           * @name angular.Module#value
           * @methodOf angular.Module
           * @param {string} name service name
           * @param {*} object Service instance object.
           * @description
           * See {@link AUTO.$provide#value $provide.value()}.
           */
          value: invokeLater('$provide', 'value'),

          /**
           * @ngdoc method
           * @name angular.Module#constant
           * @methodOf angular.Module
           * @param {string} name constant name
           * @param {*} object Constant value.
           * @description
           * Because the constant are fixed, they get applied before other provide methods.
           * See {@link AUTO.$provide#constant $provide.constant()}.
           */
          constant: invokeLater('$provide', 'constant', 'unshift'),

          /**
           * @ngdoc method
           * @name angular.Module#animation
           * @methodOf angular.Module
           * @param {string} name animation name
           * @param {Function} animationFactory Factory function for creating new instance of an
           *                                    animation.
           * @description
           *
           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
           *
           *
           * Defines an animation hook that can be later used with
           * {@link ngAnimate.$animate $animate} service and directives that use this service.
           *
           * <pre>
           * module.animation('.animation-name', function($inject1, $inject2) {
           *   return {
           *     eventName : function(element, done) {
           *       //code to run the animation
           *       //once complete, then run done()
           *       return function cancellationFunction(element) {
           *         //code to cancel the animation
           *       }
           *     }
           *   }
           * })
           * </pre>
           *
           * See {@link ngAnimate.$animateProvider#register $animateProvider.register()} and
           * {@link ngAnimate ngAnimate module} for more information.
           */
          animation: invokeLater('$animateProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#filter
           * @methodOf angular.Module
           * @param {string} name Filter name.
           * @param {Function} filterFactory Factory function for creating new instance of filter.
           * @description
           * See {@link ng.$filterProvider#register $filterProvider.register()}.
           */
          filter: invokeLater('$filterProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#controller
           * @methodOf angular.Module
           * @param {string|Object} name Controller name, or an object map of controllers where the
           *    keys are the names and the values are the constructors.
           * @param {Function} constructor Controller constructor function.
           * @description
           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
           */
          controller: invokeLater('$controllerProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#directive
           * @methodOf angular.Module
           * @param {string|Object} name Directive name, or an object map of directives where the
           *    keys are the names and the values are the factories.
           * @param {Function} directiveFactory Factory function for creating new instance of
           * directives.
           * @description
           * See {@link ng.$compileProvider#methods_directive $compileProvider.directive()}.
           */
          directive: invokeLater('$compileProvider', 'directive'),

          /**
           * @ngdoc method
           * @name angular.Module#config
           * @methodOf angular.Module
           * @param {Function} configFn Execute this function on module load. Useful for service
           *    configuration.
           * @description
           * Use this method to register work which needs to be performed on module loading.
           */
          config: config,

          /**
           * @ngdoc method
           * @name angular.Module#run
           * @methodOf angular.Module
           * @param {Function} initializationFn Execute this function after injector creation.
           *    Useful for application initialization.
           * @description
           * Use this method to register work which should be performed when the injector is done
           * loading all modules.
           */
          run: function(block) {
            runBlocks.push(block);
            return this;
          }
        };

        if (configFn) {
          config(configFn);
        }

        return  moduleInstance;

        /**
         * @param {string} provider
         * @param {string} method
         * @param {String=} insertMethod
         * @returns {angular.Module}
         */
        function invokeLater(provider, method, insertMethod) {
          return function() {
            invokeQueue[insertMethod || 'push']([provider, method, arguments]);
            return moduleInstance;
          };
        }
      });
    };
  });

}

/* global
    angularModule: true,
    version: true,
    
    $LocaleProvider,
    $CompileProvider,
    
    htmlAnchorDirective,
    inputDirective,
    inputDirective,
    formDirective,
    scriptDirective,
    selectDirective,
    styleDirective,
    optionDirective,
    ngBindDirective,
    ngBindHtmlDirective,
    ngBindTemplateDirective,
    ngClassDirective,
    ngClassEvenDirective,
    ngClassOddDirective,
    ngCspDirective,
    ngCloakDirective,
    ngControllerDirective,
    ngFormDirective,
    ngHideDirective,
    ngIfDirective,
    ngIncludeDirective,
    ngIncludeFillContentDirective,
    ngInitDirective,
    ngNonBindableDirective,
    ngPluralizeDirective,
    ngRepeatDirective,
    ngShowDirective,
    ngStyleDirective,
    ngSwitchDirective,
    ngSwitchWhenDirective,
    ngSwitchDefaultDirective,
    ngOptionsDirective,
    ngTranscludeDirective,
    ngModelDirective,
    ngListDirective,
    ngChangeDirective,
    requiredDirective,
    requiredDirective,
    ngValueDirective,
    ngAttributeAliasDirectives,
    ngEventDirectives,

    $AnchorScrollProvider,
    $AnimateProvider,
    $BrowserProvider,
    $CacheFactoryProvider,
    $ControllerProvider,
    $DocumentProvider,
    $ExceptionHandlerProvider,
    $FilterProvider,
    $InterpolateProvider,
    $IntervalProvider,
    $HttpProvider,
    $HttpBackendProvider,
    $LocationProvider,
    $LogProvider,
    $ParseProvider,
    $RootScopeProvider,
    $QProvider,
    $$SanitizeUriProvider,
    $SceProvider,
    $SceDelegateProvider,
    $SnifferProvider,
    $TemplateCacheProvider,
    $TimeoutProvider,
    $WindowProvider
*/


/**
 * @ngdoc property
 * @name angular.version
 * @description
 * An object that contains information about the current AngularJS version. This object has the
 * following properties:
 *
 * - `full` – `{string}` – Full version string, such as "0.9.18".
 * - `major` – `{number}` – Major version number, such as "0".
 * - `minor` – `{number}` – Minor version number, such as "9".
 * - `dot` – `{number}` – Dot version number, such as "18".
 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
 */
var version = {
  full: '1.2.8-build.2088+sha.9693a42',    // all of these placeholder strings will be replaced by grunt's
  major: 1,    // package task
  minor: 2,
  dot: 8,
  codeName: 'interdimensional-cartography'
};


function publishExternalAPI(angular){
  extend(angular, {
    'bootstrap': bootstrap,
    'copy': copy,
    'extend': extend,
    'equals': equals,
    'element': jqLite,
    'forEach': forEach,
    'injector': createInjector,
    'noop':noop,
    'bind':bind,
    'toJson': toJson,
    'fromJson': fromJson,
    'identity':identity,
    'isUndefined': isUndefined,
    'isDefined': isDefined,
    'isString': isString,
    'isFunction': isFunction,
    'isObject': isObject,
    'isNumber': isNumber,
    'isElement': isElement,
    'isArray': isArray,
    'version': version,
    'isDate': isDate,
    'lowercase': lowercase,
    'uppercase': uppercase,
    'callbacks': {counter: 0},
    '$$minErr': minErr,
    '$$csp': csp
  });

  angularModule = setupModuleLoader(window);
  try {
    angularModule('ngLocale');
  } catch (e) {
    angularModule('ngLocale', []).provider('$locale', $LocaleProvider);
  }

  angularModule('ng', ['ngLocale'], ['$provide',
    function ngModule($provide) {
      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
      $provide.provider({
        $$sanitizeUri: $$SanitizeUriProvider
      });
      $provide.provider('$compile', $CompileProvider).
        directive({
            a: htmlAnchorDirective,
            input: inputDirective,
            textarea: inputDirective,
            form: formDirective,
            script: scriptDirective,
            select: selectDirective,
            style: styleDirective,
            option: optionDirective,
            ngBind: ngBindDirective,
            ngBindHtml: ngBindHtmlDirective,
            ngBindTemplate: ngBindTemplateDirective,
            ngClass: ngClassDirective,
            ngClassEven: ngClassEvenDirective,
            ngClassOdd: ngClassOddDirective,
            ngCloak: ngCloakDirective,
            ngController: ngControllerDirective,
            ngForm: ngFormDirective,
            ngHide: ngHideDirective,
            ngIf: ngIfDirective,
            ngInclude: ngIncludeDirective,
            ngInit: ngInitDirective,
            ngNonBindable: ngNonBindableDirective,
            ngPluralize: ngPluralizeDirective,
            ngRepeat: ngRepeatDirective,
            ngShow: ngShowDirective,
            ngStyle: ngStyleDirective,
            ngSwitch: ngSwitchDirective,
            ngSwitchWhen: ngSwitchWhenDirective,
            ngSwitchDefault: ngSwitchDefaultDirective,
            ngOptions: ngOptionsDirective,
            ngTransclude: ngTranscludeDirective,
            ngModel: ngModelDirective,
            ngList: ngListDirective,
            ngChange: ngChangeDirective,
            required: requiredDirective,
            ngRequired: requiredDirective,
            ngValue: ngValueDirective
        }).
        directive({
          ngInclude: ngIncludeFillContentDirective
        }).
        directive(ngAttributeAliasDirectives).
        directive(ngEventDirectives);
      $provide.provider({
        $anchorScroll: $AnchorScrollProvider,
        $animate: $AnimateProvider,
        $browser: $BrowserProvider,
        $cacheFactory: $CacheFactoryProvider,
        $controller: $ControllerProvider,
        $document: $DocumentProvider,
        $exceptionHandler: $ExceptionHandlerProvider,
        $filter: $FilterProvider,
        $interpolate: $InterpolateProvider,
        $interval: $IntervalProvider,
        $http: $HttpProvider,
        $httpBackend: $HttpBackendProvider,
        $location: $LocationProvider,
        $log: $LogProvider,
        $parse: $ParseProvider,
        $rootScope: $RootScopeProvider,
        $q: $QProvider,
        $sce: $SceProvider,
        $sceDelegate: $SceDelegateProvider,
        $sniffer: $SnifferProvider,
        $templateCache: $TemplateCacheProvider,
        $timeout: $TimeoutProvider,
        $window: $WindowProvider
      });
    }
  ]);
}

/* global

  -JQLitePrototype,
  -addEventListenerFn,
  -removeEventListenerFn,
  -BOOLEAN_ATTR
*/

//////////////////////////////////
//JQLite
//////////////////////////////////

/**
 * @ngdoc function
 * @name angular.element
 * @function
 *
 * @description
 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
 *
 * If jQuery is available, `angular.element` is an alias for the
 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."
 *
 * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows
 * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most
 * commonly needed functionality with the goal of having a very small footprint.</div>
 *
 * To use jQuery, simply load it before `DOMContentLoaded` event fired.
 *
 * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or
 * jqLite; they are never raw DOM references.</div>
 *
 * ## Angular's jqLite
 * jqLite provides only the following jQuery methods:
 *
 * - [`addClass()`](http://api.jquery.com/addClass/)
 * - [`after()`](http://api.jquery.com/after/)
 * - [`append()`](http://api.jquery.com/append/)
 * - [`attr()`](http://api.jquery.com/attr/)
 * - [`bind()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
 * - [`clone()`](http://api.jquery.com/clone/)
 * - [`contents()`](http://api.jquery.com/contents/)
 * - [`css()`](http://api.jquery.com/css/)
 * - [`data()`](http://api.jquery.com/data/)
 * - [`empty()`](http://api.jquery.com/empty/)
 * - [`eq()`](http://api.jquery.com/eq/)
 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
 * - [`hasClass()`](http://api.jquery.com/hasClass/)
 * - [`html()`](http://api.jquery.com/html/)
 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces or selectors
 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
 * - [`prepend()`](http://api.jquery.com/prepend/)
 * - [`prop()`](http://api.jquery.com/prop/)
 * - [`ready()`](http://api.jquery.com/ready/)
 * - [`remove()`](http://api.jquery.com/remove/)
 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
 * - [`removeClass()`](http://api.jquery.com/removeClass/)
 * - [`removeData()`](http://api.jquery.com/removeData/)
 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
 * - [`text()`](http://api.jquery.com/text/)
 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)
 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
 * - [`unbind()`](http://api.jquery.com/off/) - Does not support namespaces
 * - [`val()`](http://api.jquery.com/val/)
 * - [`wrap()`](http://api.jquery.com/wrap/)
 *
 * ## jQuery/jqLite Extras
 * Angular also provides the following additional methods and events to both jQuery and jqLite:
 *
 * ### Events
 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
 *    element before it is removed.
 *
 * ### Methods
 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
 *   `'ngModel'`).
 * - `injector()` - retrieves the injector of the current element or its parent.
 * - `scope()` - retrieves the {@link api/ng.$rootScope.Scope scope} of the current
 *   element or its parent.
 * - `isolateScope()` - retrieves an isolate {@link api/ng.$rootScope.Scope scope} if one is attached directly to the
 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
 *   parent element is reached.
 *
 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
 * @returns {Object} jQuery object.
 */

var jqCache = JQLite.cache = {},
    jqName = JQLite.expando = 'ng-' + new Date().getTime(),
    jqId = 1,
    addEventListenerFn = (window.document.addEventListener
      ? function(element, type, fn) {element.addEventListener(type, fn, false);}
      : function(element, type, fn) {element.attachEvent('on' + type, fn);}),
    removeEventListenerFn = (window.document.removeEventListener
      ? function(element, type, fn) {element.removeEventListener(type, fn, false); }
      : function(element, type, fn) {element.detachEvent('on' + type, fn); });

function jqNextId() { return ++jqId; }


var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
var MOZ_HACK_REGEXP = /^moz([A-Z])/;
var jqLiteMinErr = minErr('jqLite');

/**
 * Converts snake_case to camelCase.
 * Also there is special case for Moz prefix starting with upper case letter.
 * @param name Name to normalize
 */
function camelCase(name) {
  return name.
    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
      return offset ? letter.toUpperCase() : letter;
    }).
    replace(MOZ_HACK_REGEXP, 'Moz$1');
}

/////////////////////////////////////////////
// jQuery mutation patch
//
// In conjunction with bindJQuery intercepts all jQuery's DOM destruction apis and fires a
// $destroy event on all DOM nodes being removed.
//
/////////////////////////////////////////////

function jqLitePatchJQueryRemove(name, dispatchThis, filterElems, getterIfNoArguments) {
  var originalJqFn = jQuery.fn[name];
  originalJqFn = originalJqFn.$original || originalJqFn;
  removePatch.$original = originalJqFn;
  jQuery.fn[name] = removePatch;

  function removePatch(param) {
    // jshint -W040
    var list = filterElems && param ? [this.filter(param)] : [this],
        fireEvent = dispatchThis,
        set, setIndex, setLength,
        element, childIndex, childLength, children;

    if (!getterIfNoArguments || param != null) {
      while(list.length) {
        set = list.shift();
        for(setIndex = 0, setLength = set.length; setIndex < setLength; setIndex++) {
          element = jqLite(set[setIndex]);
          if (fireEvent) {
            element.triggerHandler('$destroy');
          } else {
            fireEvent = !fireEvent;
          }
          for(childIndex = 0, childLength = (children = element.children()).length;
              childIndex < childLength;
              childIndex++) {
            list.push(jQuery(children[childIndex]));
          }
        }
      }
    }
    return originalJqFn.apply(this, arguments);
  }
}

/////////////////////////////////////////////
function JQLite(element) {
  if (element instanceof JQLite) {
    return element;
  }
  if (!(this instanceof JQLite)) {
    if (isString(element) && element.charAt(0) != '<') {
      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
    }
    return new JQLite(element);
  }

  if (isString(element)) {
    var div = document.createElement('div');
    // Read about the NoScope elements here:
    // http://msdn.microsoft.com/en-us/library/ms533897(VS.85).aspx
    div.innerHTML = '<div>&#160;</div>' + element; // IE insanity to make NoScope elements work!
    div.removeChild(div.firstChild); // remove the superfluous div
    jqLiteAddNodes(this, div.childNodes);
    var fragment = jqLite(document.createDocumentFragment());
    fragment.append(this); // detach the elements from the temporary DOM div.
  } else {
    jqLiteAddNodes(this, element);
  }
}

function jqLiteClone(element) {
  return element.cloneNode(true);
}

function jqLiteDealoc(element){
  jqLiteRemoveData(element);
  for ( var i = 0, children = element.childNodes || []; i < children.length; i++) {
    jqLiteDealoc(children[i]);
  }
}

function jqLiteOff(element, type, fn, unsupported) {
  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');

  var events = jqLiteExpandoStore(element, 'events'),
      handle = jqLiteExpandoStore(element, 'handle');

  if (!handle) return; //no listeners registered

  if (isUndefined(type)) {
    forEach(events, function(eventHandler, type) {
      removeEventListenerFn(element, type, eventHandler);
      delete events[type];
    });
  } else {
    forEach(type.split(' '), function(type) {
      if (isUndefined(fn)) {
        removeEventListenerFn(element, type, events[type]);
        delete events[type];
      } else {
        arrayRemove(events[type] || [], fn);
      }
    });
  }
}

function jqLiteRemoveData(element, name) {
  var expandoId = element[jqName],
      expandoStore = jqCache[expandoId];

  if (expandoStore) {
    if (name) {
      delete jqCache[expandoId].data[name];
      return;
    }

    if (expandoStore.handle) {
      expandoStore.events.$destroy && expandoStore.handle({}, '$destroy');
      jqLiteOff(element);
    }
    delete jqCache[expandoId];
    element[jqName] = undefined; // ie does not allow deletion of attributes on elements.
  }
}

function jqLiteExpandoStore(element, key, value) {
  var expandoId = element[jqName],
      expandoStore = jqCache[expandoId || -1];

  if (isDefined(value)) {
    if (!expandoStore) {
      element[jqName] = expandoId = jqNextId();
      expandoStore = jqCache[expandoId] = {};
    }
    expandoStore[key] = value;
  } else {
    return expandoStore && expandoStore[key];
  }
}

function jqLiteData(element, key, value) {
  var data = jqLiteExpandoStore(element, 'data'),
      isSetter = isDefined(value),
      keyDefined = !isSetter && isDefined(key),
      isSimpleGetter = keyDefined && !isObject(key);

  if (!data && !isSimpleGetter) {
    jqLiteExpandoStore(element, 'data', data = {});
  }

  if (isSetter) {
    data[key] = value;
  } else {
    if (keyDefined) {
      if (isSimpleGetter) {
        // don't create data in this case.
        return data && data[key];
      } else {
        extend(data, key);
      }
    } else {
      return data;
    }
  }
}

function jqLiteHasClass(element, selector) {
  if (!element.getAttribute) return false;
  return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").
      indexOf( " " + selector + " " ) > -1);
}

function jqLiteRemoveClass(element, cssClasses) {
  if (cssClasses && element.setAttribute) {
    forEach(cssClasses.split(' '), function(cssClass) {
      element.setAttribute('class', trim(
          (" " + (element.getAttribute('class') || '') + " ")
          .replace(/[\n\t]/g, " ")
          .replace(" " + trim(cssClass) + " ", " "))
      );
    });
  }
}

function jqLiteAddClass(element, cssClasses) {
  if (cssClasses && element.setAttribute) {
    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')
                            .replace(/[\n\t]/g, " ");

    forEach(cssClasses.split(' '), function(cssClass) {
      cssClass = trim(cssClass);
      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
        existingClasses += cssClass + ' ';
      }
    });

    element.setAttribute('class', trim(existingClasses));
  }
}

function jqLiteAddNodes(root, elements) {
  if (elements) {
    elements = (!elements.nodeName && isDefined(elements.length) && !isWindow(elements))
      ? elements
      : [ elements ];
    for(var i=0; i < elements.length; i++) {
      root.push(elements[i]);
    }
  }
}

function jqLiteController(element, name) {
  return jqLiteInheritedData(element, '$' + (name || 'ngController' ) + 'Controller');
}

function jqLiteInheritedData(element, name, value) {
  element = jqLite(element);

  // if element is the document object work with the html element instead
  // this makes $(document).scope() possible
  if(element[0].nodeType == 9) {
    element = element.find('html');
  }
  var names = isArray(name) ? name : [name];

  while (element.length) {

    for (var i = 0, ii = names.length; i < ii; i++) {
      if ((value = element.data(names[i])) !== undefined) return value;
    }
    element = element.parent();
  }
}

function jqLiteEmpty(element) {
  for (var i = 0, childNodes = element.childNodes; i < childNodes.length; i++) {
    jqLiteDealoc(childNodes[i]);
  }
  while (element.firstChild) {
    element.removeChild(element.firstChild);
  }
}

//////////////////////////////////////////
// Functions which are declared directly.
//////////////////////////////////////////
var JQLitePrototype = JQLite.prototype = {
  ready: function(fn) {
    var fired = false;

    function trigger() {
      if (fired) return;
      fired = true;
      fn();
    }

    // check if document already is loaded
    if (document.readyState === 'complete'){
      setTimeout(trigger);
    } else {
      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9
      // we can not use jqLite since we are not done loading and jQuery could be loaded later.
      // jshint -W064
      JQLite(window).on('load', trigger); // fallback to window.onload for others
      // jshint +W064
    }
  },
  toString: function() {
    var value = [];
    forEach(this, function(e){ value.push('' + e);});
    return '[' + value.join(', ') + ']';
  },

  eq: function(index) {
      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
  },

  length: 0,
  push: push,
  sort: [].sort,
  splice: [].splice
};

//////////////////////////////////////////
// Functions iterating getter/setters.
// these functions return self on setter and
// value on get.
//////////////////////////////////////////
var BOOLEAN_ATTR = {};
forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {
  BOOLEAN_ATTR[lowercase(value)] = value;
});
var BOOLEAN_ELEMENTS = {};
forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {
  BOOLEAN_ELEMENTS[uppercase(value)] = true;
});

function getBooleanAttrName(element, name) {
  // check dom last since we will most likely fail on name
  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];

  // booleanAttr is here twice to minimize DOM access
  return booleanAttr && BOOLEAN_ELEMENTS[element.nodeName] && booleanAttr;
}

forEach({
  data: jqLiteData,
  inheritedData: jqLiteInheritedData,

  scope: function(element) {
    // Can't use jqLiteData here directly so we stay compatible with jQuery!
    return jqLite(element).data('$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
  },

  isolateScope: function(element) {
    // Can't use jqLiteData here directly so we stay compatible with jQuery!
    return jqLite(element).data('$isolateScope') || jqLite(element).data('$isolateScopeNoTemplate');
  },

  controller: jqLiteController ,

  injector: function(element) {
    return jqLiteInheritedData(element, '$injector');
  },

  removeAttr: function(element,name) {
    element.removeAttribute(name);
  },

  hasClass: jqLiteHasClass,

  css: function(element, name, value) {
    name = camelCase(name);

    if (isDefined(value)) {
      element.style[name] = value;
    } else {
      var val;

      if (msie <= 8) {
        // this is some IE specific weirdness that jQuery 1.6.4 does not sure why
        val = element.currentStyle && element.currentStyle[name];
        if (val === '') val = 'auto';
      }

      val = val || element.style[name];

      if (msie <= 8) {
        // jquery weirdness :-/
        val = (val === '') ? undefined : val;
      }

      return  val;
    }
  },

  attr: function(element, name, value){
    var lowercasedName = lowercase(name);
    if (BOOLEAN_ATTR[lowercasedName]) {
      if (isDefined(value)) {
        if (!!value) {
          element[name] = true;
          element.setAttribute(name, lowercasedName);
        } else {
          element[name] = false;
          element.removeAttribute(lowercasedName);
        }
      } else {
        return (element[name] ||
                 (element.attributes.getNamedItem(name)|| noop).specified)
               ? lowercasedName
               : undefined;
      }
    } else if (isDefined(value)) {
      element.setAttribute(name, value);
    } else if (element.getAttribute) {
      // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
      // some elements (e.g. Document) don't have get attribute, so return undefined
      var ret = element.getAttribute(name, 2);
      // normalize non-existing attributes to undefined (as jQuery)
      return ret === null ? undefined : ret;
    }
  },

  prop: function(element, name, value) {
    if (isDefined(value)) {
      element[name] = value;
    } else {
      return element[name];
    }
  },

  text: (function() {
    var NODE_TYPE_TEXT_PROPERTY = [];
    if (msie < 9) {
      NODE_TYPE_TEXT_PROPERTY[1] = 'innerText';    /** Element **/
      NODE_TYPE_TEXT_PROPERTY[3] = 'nodeValue';    /** Text **/
    } else {
      NODE_TYPE_TEXT_PROPERTY[1] =                 /** Element **/
      NODE_TYPE_TEXT_PROPERTY[3] = 'textContent';  /** Text **/
    }
    getText.$dv = '';
    return getText;

    function getText(element, value) {
      var textProp = NODE_TYPE_TEXT_PROPERTY[element.nodeType];
      if (isUndefined(value)) {
        return textProp ? element[textProp] : '';
      }
      element[textProp] = value;
    }
  })(),

  val: function(element, value) {
    if (isUndefined(value)) {
      if (nodeName_(element) === 'SELECT' && element.multiple) {
        var result = [];
        forEach(element.options, function (option) {
          if (option.selected) {
            result.push(option.value || option.text);
          }
        });
        return result.length === 0 ? null : result;
      }
      return element.value;
    }
    element.value = value;
  },

  html: function(element, value) {
    if (isUndefined(value)) {
      return element.innerHTML;
    }
    for (var i = 0, childNodes = element.childNodes; i < childNodes.length; i++) {
      jqLiteDealoc(childNodes[i]);
    }
    element.innerHTML = value;
  },

  empty: jqLiteEmpty
}, function(fn, name){
  /**
   * Properties: writes return selection, reads return first value
   */
  JQLite.prototype[name] = function(arg1, arg2) {
    var i, key;

    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
    // in a way that survives minification.
    // jqLiteEmpty takes no arguments but is a setter.
    if (fn !== jqLiteEmpty &&
        (((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2) === undefined)) {
      if (isObject(arg1)) {

        // we are a write, but the object properties are the key/values
        for (i = 0; i < this.length; i++) {
          if (fn === jqLiteData) {
            // data() takes the whole object in jQuery
            fn(this[i], arg1);
          } else {
            for (key in arg1) {
              fn(this[i], key, arg1[key]);
            }
          }
        }
        // return self for chaining
        return this;
      } else {
        // we are a read, so read the first child.
        var value = fn.$dv;
        // Only if we have $dv do we iterate over all, otherwise it is just the first element.
        var jj = (value === undefined) ? Math.min(this.length, 1) : this.length;
        for (var j = 0; j < jj; j++) {
          var nodeValue = fn(this[j], arg1, arg2);
          value = value ? value + nodeValue : nodeValue;
        }
        return value;
      }
    } else {
      // we are a write, so apply to all children
      for (i = 0; i < this.length; i++) {
        fn(this[i], arg1, arg2);
      }
      // return self for chaining
      return this;
    }
  };
});

function createEventHandler(element, events) {
  var eventHandler = function (event, type) {
    if (!event.preventDefault) {
      event.preventDefault = function() {
        event.returnValue = false; //ie
      };
    }

    if (!event.stopPropagation) {
      event.stopPropagation = function() {
        event.cancelBubble = true; //ie
      };
    }

    if (!event.target) {
      event.target = event.srcElement || document;
    }

    if (isUndefined(event.defaultPrevented)) {
      var prevent = event.preventDefault;
      event.preventDefault = function() {
        event.defaultPrevented = true;
        prevent.call(event);
      };
      event.defaultPrevented = false;
    }

    event.isDefaultPrevented = function() {
      return event.defaultPrevented || event.returnValue === false;
    };

    // Copy event handlers in case event handlers array is modified during execution.
    var eventHandlersCopy = shallowCopy(events[type || event.type] || []);

    forEach(eventHandlersCopy, function(fn) {
      fn.call(element, event);
    });

    // Remove monkey-patched methods (IE),
    // as they would cause memory leaks in IE8.
    if (msie <= 8) {
      // IE7/8 does not allow to delete property on native object
      event.preventDefault = null;
      event.stopPropagation = null;
      event.isDefaultPrevented = null;
    } else {
      // It shouldn't affect normal browsers (native methods are defined on prototype).
      delete event.preventDefault;
      delete event.stopPropagation;
      delete event.isDefaultPrevented;
    }
  };
  eventHandler.elem = element;
  return eventHandler;
}

//////////////////////////////////////////
// Functions iterating traversal.
// These functions chain results into a single
// selector.
//////////////////////////////////////////
forEach({
  removeData: jqLiteRemoveData,

  dealoc: jqLiteDealoc,

  on: function onFn(element, type, fn, unsupported){
    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');

    var events = jqLiteExpandoStore(element, 'events'),
        handle = jqLiteExpandoStore(element, 'handle');

    if (!events) jqLiteExpandoStore(element, 'events', events = {});
    if (!handle) jqLiteExpandoStore(element, 'handle', handle = createEventHandler(element, events));

    forEach(type.split(' '), function(type){
      var eventFns = events[type];

      if (!eventFns) {
        if (type == 'mouseenter' || type == 'mouseleave') {
          var contains = document.body.contains || document.body.compareDocumentPosition ?
          function( a, b ) {
            // jshint bitwise: false
            var adown = a.nodeType === 9 ? a.documentElement : a,
            bup = b && b.parentNode;
            return a === bup || !!( bup && bup.nodeType === 1 && (
              adown.contains ?
              adown.contains( bup ) :
              a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
              ));
            } :
            function( a, b ) {
              if ( b ) {
                while ( (b = b.parentNode) ) {
                  if ( b === a ) {
                    return true;
                  }
                }
              }
              return false;
            };

          events[type] = [];

          // Refer to jQuery's implementation of mouseenter & mouseleave
          // Read about mouseenter and mouseleave:
          // http://www.quirksmode.org/js/events_mouse.html#link8
          var eventmap = { mouseleave : "mouseout", mouseenter : "mouseover"};

          onFn(element, eventmap[type], function(event) {
            var target = this, related = event.relatedTarget;
            // For mousenter/leave call the handler if related is outside the target.
            // NB: No relatedTarget if the mouse left/entered the browser window
            if ( !related || (related !== target && !contains(target, related)) ){
              handle(event, type);
            }
          });

        } else {
          addEventListenerFn(element, type, handle);
          events[type] = [];
        }
        eventFns = events[type];
      }
      eventFns.push(fn);
    });
  },

  off: jqLiteOff,

  one: function(element, type, fn) {
    element = jqLite(element);

    //add the listener twice so that when it is called
    //you can remove the original function and still be
    //able to call element.off(ev, fn) normally
    element.on(type, function onFn() {
      element.off(type, fn);
      element.off(type, onFn);
    });
    element.on(type, fn);
  },

  replaceWith: function(element, replaceNode) {
    var index, parent = element.parentNode;
    jqLiteDealoc(element);
    forEach(new JQLite(replaceNode), function(node){
      if (index) {
        parent.insertBefore(node, index.nextSibling);
      } else {
        parent.replaceChild(node, element);
      }
      index = node;
    });
  },

  children: function(element) {
    var children = [];
    forEach(element.childNodes, function(element){
      if (element.nodeType === 1)
        children.push(element);
    });
    return children;
  },

  contents: function(element) {
    return element.childNodes || [];
  },

  append: function(element, node) {
    forEach(new JQLite(node), function(child){
      if (element.nodeType === 1 || element.nodeType === 11) {
        element.appendChild(child);
      }
    });
  },

  prepend: function(element, node) {
    if (element.nodeType === 1) {
      var index = element.firstChild;
      forEach(new JQLite(node), function(child){
        element.insertBefore(child, index);
      });
    }
  },

  wrap: function(element, wrapNode) {
    wrapNode = jqLite(wrapNode)[0];
    var parent = element.parentNode;
    if (parent) {
      parent.replaceChild(wrapNode, element);
    }
    wrapNode.appendChild(element);
  },

  remove: function(element) {
    jqLiteDealoc(element);
    var parent = element.parentNode;
    if (parent) parent.removeChild(element);
  },

  after: function(element, newElement) {
    var index = element, parent = element.parentNode;
    forEach(new JQLite(newElement), function(node){
      parent.insertBefore(node, index.nextSibling);
      index = node;
    });
  },

  addClass: jqLiteAddClass,
  removeClass: jqLiteRemoveClass,

  toggleClass: function(element, selector, condition) {
    if (isUndefined(condition)) {
      condition = !jqLiteHasClass(element, selector);
    }
    (condition ? jqLiteAddClass : jqLiteRemoveClass)(element, selector);
  },

  parent: function(element) {
    var parent = element.parentNode;
    return parent && parent.nodeType !== 11 ? parent : null;
  },

  next: function(element) {
    if (element.nextElementSibling) {
      return element.nextElementSibling;
    }

    // IE8 doesn't have nextElementSibling
    var elm = element.nextSibling;
    while (elm != null && elm.nodeType !== 1) {
      elm = elm.nextSibling;
    }
    return elm;
  },

  find: function(element, selector) {
    if (element.getElementsByTagName) {
      return element.getElementsByTagName(selector);
    } else {
      return [];
    }
  },

  clone: jqLiteClone,

  triggerHandler: function(element, eventName, eventData) {
    var eventFns = (jqLiteExpandoStore(element, 'events') || {})[eventName];

    eventData = eventData || [];

    var event = [{
      preventDefault: noop,
      stopPropagation: noop
    }];

    forEach(eventFns, function(fn) {
      fn.apply(element, event.concat(eventData));
    });
  }
}, function(fn, name){
  /**
   * chaining functions
   */
  JQLite.prototype[name] = function(arg1, arg2, arg3) {
    var value;
    for(var i=0; i < this.length; i++) {
      if (isUndefined(value)) {
        value = fn(this[i], arg1, arg2, arg3);
        if (isDefined(value)) {
          // any function which returns a value needs to be wrapped
          value = jqLite(value);
        }
      } else {
        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
      }
    }
    return isDefined(value) ? value : this;
  };

  // bind legacy bind/unbind to on/off
  JQLite.prototype.bind = JQLite.prototype.on;
  JQLite.prototype.unbind = JQLite.prototype.off;
});

/**
 * Computes a hash of an 'obj'.
 * Hash of a:
 *  string is string
 *  number is number as string
 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
 *         that is also assigned to the $$hashKey property of the object.
 *
 * @param obj
 * @returns {string} hash string such that the same input will have the same hash string.
 *         The resulting string key is in 'type:hashKey' format.
 */
function hashKey(obj) {
  var objType = typeof obj,
      key;

  if (objType == 'object' && obj !== null) {
    if (typeof (key = obj.$$hashKey) == 'function') {
      // must invoke on object to keep the right this
      key = obj.$$hashKey();
    } else if (key === undefined) {
      key = obj.$$hashKey = nextUid();
    }
  } else {
    key = obj;
  }

  return objType + ':' + key;
}

/**
 * HashMap which can use objects as keys
 */
function HashMap(array){
  forEach(array, this.put, this);
}
HashMap.prototype = {
  /**
   * Store key value pair
   * @param key key to store can be any type
   * @param value value to store can be any type
   */
  put: function(key, value) {
    this[hashKey(key)] = value;
  },

  /**
   * @param key
   * @returns the value for the key
   */
  get: function(key) {
    return this[hashKey(key)];
  },

  /**
   * Remove the key/value pair
   * @param key
   */
  remove: function(key) {
    var value = this[key = hashKey(key)];
    delete this[key];
    return value;
  }
};

/**
 * @ngdoc function
 * @name angular.injector
 * @function
 *
 * @description
 * Creates an injector function that can be used for retrieving services as well as for
 * dependency injection (see {@link guide/di dependency injection}).
 *

 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
 *        {@link angular.module}. The `ng` module must be explicitly added.
 * @returns {function()} Injector function. See {@link AUTO.$injector $injector}.
 *
 * @example
 * Typical usage
 * <pre>
 *   // create an injector
 *   var $injector = angular.injector(['ng']);
 *
 *   // use the injector to kick off your application
 *   // use the type inference to auto inject arguments, or use implicit injection
 *   $injector.invoke(function($rootScope, $compile, $document){
 *     $compile($document)($rootScope);
 *     $rootScope.$digest();
 *   });
 * </pre>
 *
 * Sometimes you want to get access to the injector of a currently running Angular app
 * from outside Angular. Perhaps, you want to inject and compile some markup after the
 * application has been bootstrapped. You can do this using extra `injector()` added
 * to JQuery/jqLite elements. See {@link angular.element}.
 *
 * *This is fairly rare but could be the case if a third party library is injecting the
 * markup.*
 *
 * In the following example a new block of HTML containing a `ng-controller`
 * directive is added to the end of the document body by JQuery. We then compile and link
 * it into the current AngularJS scope.
 *
 * <pre>
 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
 * $(document.body).append($div);
 *
 * angular.element(document).injector().invoke(function($compile) {
 *   var scope = angular.element($div).scope();
 *   $compile($div)(scope);
 * });
 * </pre>
 */


/**
 * @ngdoc overview
 * @name AUTO
 * @description
 *
 * Implicit module which gets automatically added to each {@link AUTO.$injector $injector}.
 */

var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
var FN_ARG_SPLIT = /,/;
var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
var $injectorMinErr = minErr('$injector');
function annotate(fn) {
  var $inject,
      fnText,
      argDecl,
      last;

  if (typeof fn == 'function') {
    if (!($inject = fn.$inject)) {
      $inject = [];
      if (fn.length) {
        fnText = fn.toString().replace(STRIP_COMMENTS, '');
        argDecl = fnText.match(FN_ARGS);
        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg){
          arg.replace(FN_ARG, function(all, underscore, name){
            $inject.push(name);
          });
        });
      }
      fn.$inject = $inject;
    }
  } else if (isArray(fn)) {
    last = fn.length - 1;
    assertArgFn(fn[last], 'fn');
    $inject = fn.slice(0, last);
  } else {
    assertArgFn(fn, 'fn', true);
  }
  return $inject;
}

///////////////////////////////////////

/**
 * @ngdoc object
 * @name AUTO.$injector
 * @function
 *
 * @description
 *
 * `$injector` is used to retrieve object instances as defined by
 * {@link AUTO.$provide provider}, instantiate types, invoke methods,
 * and load modules.
 *
 * The following always holds true:
 *
 * <pre>
 *   var $injector = angular.injector();
 *   expect($injector.get('$injector')).toBe($injector);
 *   expect($injector.invoke(function($injector){
 *     return $injector;
 *   }).toBe($injector);
 * </pre>
 *
 * # Injection Function Annotation
 *
 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
 * following are all valid ways of annotating function with injection arguments and are equivalent.
 *
 * <pre>
 *   // inferred (only works if code not minified/obfuscated)
 *   $injector.invoke(function(serviceA){});
 *
 *   // annotated
 *   function explicit(serviceA) {};
 *   explicit.$inject = ['serviceA'];
 *   $injector.invoke(explicit);
 *
 *   // inline
 *   $injector.invoke(['serviceA', function(serviceA){}]);
 * </pre>
 *
 * ## Inference
 *
 * In JavaScript calling `toString()` on a function returns the function definition. The definition
 * can then be parsed and the function arguments can be extracted. *NOTE:* This does not work with
 * minification, and obfuscation tools since these tools change the argument names.
 *
 * ## `$inject` Annotation
 * By adding a `$inject` property onto a function the injection parameters can be specified.
 *
 * ## Inline
 * As an array of injection names, where the last item in the array is the function to call.
 */

/**
 * @ngdoc method
 * @name AUTO.$injector#get
 * @methodOf AUTO.$injector
 *
 * @description
 * Return an instance of the service.
 *
 * @param {string} name The name of the instance to retrieve.
 * @return {*} The instance.
 */

/**
 * @ngdoc method
 * @name AUTO.$injector#invoke
 * @methodOf AUTO.$injector
 *
 * @description
 * Invoke the method and supply the method arguments from the `$injector`.
 *
 * @param {!function} fn The function to invoke. Function parameters are injected according to the
 *   {@link guide/di $inject Annotation} rules.
 * @param {Object=} self The `this` for the invoked method.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 *                         object first, before the `$injector` is consulted.
 * @returns {*} the value returned by the invoked `fn` function.
 */

/**
 * @ngdoc method
 * @name AUTO.$injector#has
 * @methodOf AUTO.$injector
 *
 * @description
 * Allows the user to query if the particular service exist.
 *
 * @param {string} Name of the service to query.
 * @returns {boolean} returns true if injector has given service.
 */

/**
 * @ngdoc method
 * @name AUTO.$injector#instantiate
 * @methodOf AUTO.$injector
 * @description
 * Create a new instance of JS type. The method takes a constructor function invokes the new
 * operator and supplies all of the arguments to the constructor function as specified by the
 * constructor annotation.
 *
 * @param {function} Type Annotated constructor function.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 * object first, before the `$injector` is consulted.
 * @returns {Object} new instance of `Type`.
 */

/**
 * @ngdoc method
 * @name AUTO.$injector#annotate
 * @methodOf AUTO.$injector
 *
 * @description
 * Returns an array of service names which the function is requesting for injection. This API is
 * used by the injector to determine which services need to be injected into the function when the
 * function is invoked. There are three ways in which the function can be annotated with the needed
 * dependencies.
 *
 * # Argument names
 *
 * The simplest form is to extract the dependencies from the arguments of the function. This is done
 * by converting the function into a string using `toString()` method and extracting the argument
 * names.
 * <pre>
 *   // Given
 *   function MyController($scope, $route) {
 *     // ...
 *   }
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * </pre>
 *
 * This method does not work with code minification / obfuscation. For this reason the following
 * annotation strategies are supported.
 *
 * # The `$inject` property
 *
 * If a function has an `$inject` property and its value is an array of strings, then the strings
 * represent names of services to be injected into the function.
 * <pre>
 *   // Given
 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
 *     // ...
 *   }
 *   // Define function dependencies
 *   MyController['$inject'] = ['$scope', '$route'];
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * </pre>
 *
 * # The array notation
 *
 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
 * is very inconvenient. In these situations using the array notation to specify the dependencies in
 * a way that survives minification is a better choice:
 *
 * <pre>
 *   // We wish to write this (not minification / obfuscation safe)
 *   injector.invoke(function($compile, $rootScope) {
 *     // ...
 *   });
 *
 *   // We are forced to write break inlining
 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
 *     // ...
 *   };
 *   tmpFn.$inject = ['$compile', '$rootScope'];
 *   injector.invoke(tmpFn);
 *
 *   // To better support inline function the inline annotation is supported
 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
 *     // ...
 *   }]);
 *
 *   // Therefore
 *   expect(injector.annotate(
 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
 *    ).toEqual(['$compile', '$rootScope']);
 * </pre>
 *
 * @param {function|Array.<string|Function>} fn Function for which dependent service names need to
 * be retrieved as described above.
 *
 * @returns {Array.<string>} The names of the services which the function requires.
 */




/**
 * @ngdoc object
 * @name AUTO.$provide
 *
 * @description
 *
 * The {@link AUTO.$provide $provide} service has a number of methods for registering components
 * with the {@link AUTO.$injector $injector}. Many of these functions are also exposed on
 * {@link angular.Module}.
 *
 * An Angular **service** is a singleton object created by a **service factory**.  These **service
 * factories** are functions which, in turn, are created by a **service provider**.
 * The **service providers** are constructor functions. When instantiated they must contain a
 * property called `$get`, which holds the **service factory** function.
 *
 * When you request a service, the {@link AUTO.$injector $injector} is responsible for finding the
 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
 * function to get the instance of the **service**.
 *
 * Often services have no configuration options and there is no need to add methods to the service
 * provider.  The provider will be no more than a constructor function with a `$get` property. For
 * these cases the {@link AUTO.$provide $provide} service has additional helper methods to register
 * services without specifying a provider.
 *
 * * {@link AUTO.$provide#methods_provider provider(provider)} - registers a **service provider** with the
 *     {@link AUTO.$injector $injector}
 * * {@link AUTO.$provide#methods_constant constant(obj)} - registers a value/object that can be accessed by
 *     providers and services.
 * * {@link AUTO.$provide#methods_value value(obj)} - registers a value/object that can only be accessed by
 *     services, not providers.
 * * {@link AUTO.$provide#methods_factory factory(fn)} - registers a service **factory function**, `fn`,
 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
 *     given factory function.
 * * {@link AUTO.$provide#methods_service service(class)} - registers a **constructor function**, `class` that
 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
 *      a new object using the given constructor function.
 *
 * See the individual methods for more information and examples.
 */

/**
 * @ngdoc method
 * @name AUTO.$provide#provider
 * @methodOf AUTO.$provide
 * @description
 *
 * Register a **provider function** with the {@link AUTO.$injector $injector}. Provider functions
 * are constructor functions, whose instances are responsible for "providing" a factory for a
 * service.
 *
 * Service provider names start with the name of the service they provide followed by `Provider`.
 * For example, the {@link ng.$log $log} service has a provider called
 * {@link ng.$logProvider $logProvider}.
 *
 * Service provider objects can have additional methods which allow configuration of the provider
 * and its service. Importantly, you can configure what kind of service is created by the `$get`
 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
 * method {@link ng.$logProvider#debugEnabled debugEnabled}
 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
 * console or not.
 *
 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
                        'Provider'` key.
 * @param {(Object|function())} provider If the provider is:
 *
 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
 *               {@link AUTO.$injector#invoke $injector.invoke()} when an instance needs to be
 *               created.
 *   - `Constructor`: a new instance of the provider will be created using
 *               {@link AUTO.$injector#instantiate $injector.instantiate()}, then treated as
 *               `object`.
 *
 * @returns {Object} registered provider instance

 * @example
 *
 * The following example shows how to create a simple event tracking service and register it using
 * {@link AUTO.$provide#methods_provider $provide.provider()}.
 *
 * <pre>
 *  // Define the eventTracker provider
 *  function EventTrackerProvider() {
 *    var trackingUrl = '/track';
 *
 *    // A provider method for configuring where the tracked events should been saved
 *    this.setTrackingUrl = function(url) {
 *      trackingUrl = url;
 *    };
 *
 *    // The service factory function
 *    this.$get = ['$http', function($http) {
 *      var trackedEvents = {};
 *      return {
 *        // Call this to track an event
 *        event: function(event) {
 *          var count = trackedEvents[event] || 0;
 *          count += 1;
 *          trackedEvents[event] = count;
 *          return count;
 *        },
 *        // Call this to save the tracked events to the trackingUrl
 *        save: function() {
 *          $http.post(trackingUrl, trackedEvents);
 *        }
 *      };
 *    }];
 *  }
 *
 *  describe('eventTracker', function() {
 *    var postSpy;
 *
 *    beforeEach(module(function($provide) {
 *      // Register the eventTracker provider
 *      $provide.provider('eventTracker', EventTrackerProvider);
 *    }));
 *
 *    beforeEach(module(function(eventTrackerProvider) {
 *      // Configure eventTracker provider
 *      eventTrackerProvider.setTrackingUrl('/custom-track');
 *    }));
 *
 *    it('tracks events', inject(function(eventTracker) {
 *      expect(eventTracker.event('login')).toEqual(1);
 *      expect(eventTracker.event('login')).toEqual(2);
 *    }));
 *
 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
 *      postSpy = spyOn($http, 'post');
 *      eventTracker.event('login');
 *      eventTracker.save();
 *      expect(postSpy).toHaveBeenCalled();
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
 *    }));
 *  });
 * </pre>
 */

/**
 * @ngdoc method
 * @name AUTO.$provide#factory
 * @methodOf AUTO.$provide
 * @description
 *
 * Register a **service factory**, which will be called to return the service instance.
 * This is short for registering a service where its provider consists of only a `$get` property,
 * which is the given service factory function.
 * You should use {@link AUTO.$provide#factory $provide.factory(getFn)} if you do not need to
 * configure your service in a provider.
 *
 * @param {string} name The name of the instance.
 * @param {function()} $getFn The $getFn for the instance creation. Internally this is a short hand
 *                            for `$provide.provider(name, {$get: $getFn})`.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service
 * <pre>
 *   $provide.factory('ping', ['$http', function($http) {
 *     return function ping() {
 *       return $http.send('/ping');
 *     };
 *   }]);
 * </pre>
 * You would then inject and use this service like this:
 * <pre>
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping();
 *   }]);
 * </pre>
 */


/**
 * @ngdoc method
 * @name AUTO.$provide#service
 * @methodOf AUTO.$provide
 * @description
 *
 * Register a **service constructor**, which will be invoked with `new` to create the service
 * instance.
 * This is short for registering a service where its provider's `$get` property is the service
 * constructor function that will be used to instantiate the service instance.
 *
 * You should use {@link AUTO.$provide#methods_service $provide.service(class)} if you define your service
 * as a type/class. This is common when using {@link http://coffeescript.org CoffeeScript}.
 *
 * @param {string} name The name of the instance.
 * @param {Function} constructor A class (constructor function) that will be instantiated.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service using
 * {@link AUTO.$provide#methods_service $provide.service(class)} that is defined as a CoffeeScript class.
 * <pre>
 *   class Ping
 *     constructor: (@$http) ->
 *     send: () =>
 *       @$http.get('/ping')
 *
 *   $provide.service('ping', ['$http', Ping])
 * </pre>
 * You would then inject and use this service like this:
 * <pre>
 *   someModule.controller 'Ctrl', ['ping', (ping) ->
 *     ping.send()
 *   ]
 * </pre>
 */


/**
 * @ngdoc method
 * @name AUTO.$provide#value
 * @methodOf AUTO.$provide
 * @description
 *
 * Register a **value service** with the {@link AUTO.$injector $injector}, such as a string, a
 * number, an array, an object or a function.  This is short for registering a service where its
 * provider's `$get` property is a factory function that takes no arguments and returns the **value
 * service**.
 *
 * Value services are similar to constant services, except that they cannot be injected into a
 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
 * an Angular
 * {@link AUTO.$provide#decorator decorator}.
 *
 * @param {string} name The name of the instance.
 * @param {*} value The value.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here are some examples of creating value services.
 * <pre>
 *   $provide.value('ADMIN_USER', 'admin');
 *
 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
 *
 *   $provide.value('halfOf', function(value) {
 *     return value / 2;
 *   });
 * </pre>
 */


/**
 * @ngdoc method
 * @name AUTO.$provide#constant
 * @methodOf AUTO.$provide
 * @description
 *
 * Register a **constant service**, such as a string, a number, an array, an object or a function,
 * with the {@link AUTO.$injector $injector}. Unlike {@link AUTO.$provide#value value} it can be
 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
 * be overridden by an Angular {@link AUTO.$provide#decorator decorator}.
 *
 * @param {string} name The name of the constant.
 * @param {*} value The constant value.
 * @returns {Object} registered instance
 *
 * @example
 * Here a some examples of creating constants:
 * <pre>
 *   $provide.constant('SHARD_HEIGHT', 306);
 *
 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
 *
 *   $provide.constant('double', function(value) {
 *     return value * 2;
 *   });
 * </pre>
 */


/**
 * @ngdoc method
 * @name AUTO.$provide#decorator
 * @methodOf AUTO.$provide
 * @description
 *
 * Register a **service decorator** with the {@link AUTO.$injector $injector}. A service decorator
 * intercepts the creation of a service, allowing it to override or modify the behaviour of the
 * service. The object returned by the decorator may be the original service, or a new service
 * object which replaces or wraps and delegates to the original service.
 *
 * @param {string} name The name of the service to decorate.
 * @param {function()} decorator This function will be invoked when the service needs to be
 *    instantiated and should return the decorated service instance. The function is called using
 *    the {@link AUTO.$injector#invoke injector.invoke} method and is therefore fully injectable.
 *    Local injection arguments:
 *
 *    * `$delegate` - The original service instance, which can be monkey patched, configured,
 *      decorated or delegated to.
 *
 * @example
 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
 * calls to {@link ng.$log#error $log.warn()}.
 * <pre>
 *   $provider.decorator('$log', ['$delegate', function($delegate) {
 *     $delegate.warn = $delegate.error;
 *     return $delegate;
 *   }]);
 * </pre>
 */


function createInjector(modulesToLoad) {
  var INSTANTIATING = {},
      providerSuffix = 'Provider',
      path = [],
      loadedModules = new HashMap(),
      providerCache = {
        $provide: {
            provider: supportObject(provider),
            factory: supportObject(factory),
            service: supportObject(service),
            value: supportObject(value),
            constant: supportObject(constant),
            decorator: decorator
          }
      },
      providerInjector = (providerCache.$injector =
          createInternalInjector(providerCache, function() {
            throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));
          })),
      instanceCache = {},
      instanceInjector = (instanceCache.$injector =
          createInternalInjector(instanceCache, function(servicename) {
            var provider = providerInjector.get(servicename + providerSuffix);
            return instanceInjector.invoke(provider.$get, provider);
          }));


  forEach(loadModules(modulesToLoad), function(fn) { instanceInjector.invoke(fn || noop); });

  return instanceInjector;

  ////////////////////////////////////
  // $provider
  ////////////////////////////////////

  function supportObject(delegate) {
    return function(key, value) {
      if (isObject(key)) {
        forEach(key, reverseParams(delegate));
      } else {
        return delegate(key, value);
      }
    };
  }

  function provider(name, provider_) {
    assertNotHasOwnProperty(name, 'service');
    if (isFunction(provider_) || isArray(provider_)) {
      provider_ = providerInjector.instantiate(provider_);
    }
    if (!provider_.$get) {
      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
    }
    return providerCache[name + providerSuffix] = provider_;
  }

  function factory(name, factoryFn) { return provider(name, { $get: factoryFn }); }

  function service(name, constructor) {
    return factory(name, ['$injector', function($injector) {
      return $injector.instantiate(constructor);
    }]);
  }

  function value(name, val) { return factory(name, valueFn(val)); }

  function constant(name, value) {
    assertNotHasOwnProperty(name, 'constant');
    providerCache[name] = value;
    instanceCache[name] = value;
  }

  function decorator(serviceName, decorFn) {
    var origProvider = providerInjector.get(serviceName + providerSuffix),
        orig$get = origProvider.$get;

    origProvider.$get = function() {
      var origInstance = instanceInjector.invoke(orig$get, origProvider);
      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
    };
  }

  ////////////////////////////////////
  // Module Loading
  ////////////////////////////////////
  function loadModules(modulesToLoad){
    var runBlocks = [], moduleFn, invokeQueue, i, ii;
    forEach(modulesToLoad, function(module) {
      if (loadedModules.get(module)) return;
      loadedModules.put(module, true);

      try {
        if (isString(module)) {
          moduleFn = angularModule(module);
          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);

          for(invokeQueue = moduleFn._invokeQueue, i = 0, ii = invokeQueue.length; i < ii; i++) {
            var invokeArgs = invokeQueue[i],
                provider = providerInjector.get(invokeArgs[0]);

            provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
          }
        } else if (isFunction(module)) {
            runBlocks.push(providerInjector.invoke(module));
        } else if (isArray(module)) {
            runBlocks.push(providerInjector.invoke(module));
        } else {
          assertArgFn(module, 'module');
        }
      } catch (e) {
        if (isArray(module)) {
          module = module[module.length - 1];
        }
        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
          // Safari & FF's stack traces don't contain error.message content
          // unlike those of Chrome and IE
          // So if stack doesn't contain message, we create a new string that contains both.
          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
          /* jshint -W022 */
          e = e.message + '\n' + e.stack;
        }
        throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",
                  module, e.stack || e.message || e);
      }
    });
    return runBlocks;
  }

  ////////////////////////////////////
  // internal Injector
  ////////////////////////////////////

  function createInternalInjector(cache, factory) {

    function getService(serviceName) {
      if (cache.hasOwnProperty(serviceName)) {
        if (cache[serviceName] === INSTANTIATING) {
          throw $injectorMinErr('cdep', 'Circular dependency found: {0}', path.join(' <- '));
        }
        return cache[serviceName];
      } else {
        try {
          path.unshift(serviceName);
          cache[serviceName] = INSTANTIATING;
          return cache[serviceName] = factory(serviceName);
        } catch (err) {
          if (cache[serviceName] === INSTANTIATING) {
            delete cache[serviceName];
          }
          throw err;
        } finally {
          path.shift();
        }
      }
    }

    function invoke(fn, self, locals){
      var args = [],
          $inject = annotate(fn),
          length, i,
          key;

      for(i = 0, length = $inject.length; i < length; i++) {
        key = $inject[i];
        if (typeof key !== 'string') {
          throw $injectorMinErr('itkn',
                  'Incorrect injection token! Expected service name as string, got {0}', key);
        }
        args.push(
          locals && locals.hasOwnProperty(key)
          ? locals[key]
          : getService(key)
        );
      }
      if (!fn.$inject) {
        // this means that we must be an array.
        fn = fn[length];
      }

      // http://jsperf.com/angularjs-invoke-apply-vs-switch
      // #5388
      return fn.apply(self, args);
    }

    function instantiate(Type, locals) {
      var Constructor = function() {},
          instance, returnedValue;

      // Check if Type is annotated and use just the given function at n-1 as parameter
      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
      Constructor.prototype = (isArray(Type) ? Type[Type.length - 1] : Type).prototype;
      instance = new Constructor();
      returnedValue = invoke(Type, instance, locals);

      return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;
    }

    return {
      invoke: invoke,
      instantiate: instantiate,
      get: getService,
      annotate: annotate,
      has: function(name) {
        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
      }
    };
  }
}

/**
 * @ngdoc function
 * @name ng.$anchorScroll
 * @requires $window
 * @requires $location
 * @requires $rootScope
 *
 * @description
 * When called, it checks current value of `$location.hash()` and scroll to related element,
 * according to rules specified in
 * {@link http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document Html5 spec}.
 *
 * It also watches the `$location.hash()` and scrolls whenever it changes to match any anchor.
 * This can be disabled by calling `$anchorScrollProvider.disableAutoScrolling()`.
 * 
 * @example
   <example>
     <file name="index.html">
       <div id="scrollArea" ng-controller="ScrollCtrl">
         <a ng-click="gotoBottom()">Go to bottom</a>
         <a id="bottom"></a> You're at the bottom!
       </div>
     </file>
     <file name="script.js">
       function ScrollCtrl($scope, $location, $anchorScroll) {
         $scope.gotoBottom = function (){
           // set the location.hash to the id of
           // the element you wish to scroll to.
           $location.hash('bottom');
           
           // call $anchorScroll()
           $anchorScroll();
         }
       }
     </file>
     <file name="style.css">
       #scrollArea {
         height: 350px;
         overflow: auto;
       }

       #bottom {
         display: block;
         margin-top: 2000px;
       }
     </file>
   </example>
 */
function $AnchorScrollProvider() {

  var autoScrollingEnabled = true;

  this.disableAutoScrolling = function() {
    autoScrollingEnabled = false;
  };

  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {
    var document = $window.document;

    // helper function to get first anchor from a NodeList
    // can't use filter.filter, as it accepts only instances of Array
    // and IE can't convert NodeList to an array using [].slice
    // TODO(vojta): use filter if we change it to accept lists as well
    function getFirstAnchor(list) {
      var result = null;
      forEach(list, function(element) {
        if (!result && lowercase(element.nodeName) === 'a') result = element;
      });
      return result;
    }

    function scroll() {
      var hash = $location.hash(), elm;

      // empty hash, scroll to the top of the page
      if (!hash) $window.scrollTo(0, 0);

      // element with given id
      else if ((elm = document.getElementById(hash))) elm.scrollIntoView();

      // first anchor with given name :-D
      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) elm.scrollIntoView();

      // no element and hash == 'top', scroll to the top of the page
      else if (hash === 'top') $window.scrollTo(0, 0);
    }

    // does not scroll when user clicks on anchor link that is currently on
    // (no url change, no $location.hash() change), browser native does scroll
    if (autoScrollingEnabled) {
      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},
        function autoScrollWatchAction() {
          $rootScope.$evalAsync(scroll);
        });
    }

    return scroll;
  }];
}

var $animateMinErr = minErr('$animate');

/**
 * @ngdoc object
 * @name ng.$animateProvider
 *
 * @description
 * Default implementation of $animate that doesn't perform any animations, instead just
 * synchronously performs DOM
 * updates and calls done() callbacks.
 *
 * In order to enable animations the ngAnimate module has to be loaded.
 *
 * To see the functional implementation check out src/ngAnimate/animate.js
 */
var $AnimateProvider = ['$provide', function($provide) {

  
  this.$$selectors = {};


  /**
   * @ngdoc function
   * @name ng.$animateProvider#register
   * @methodOf ng.$animateProvider
   *
   * @description
   * Registers a new injectable animation factory function. The factory function produces the
   * animation object which contains callback functions for each event that is expected to be
   * animated.
   *
   *   * `eventFn`: `function(Element, doneFunction)` The element to animate, the `doneFunction`
   *   must be called once the element animation is complete. If a function is returned then the
   *   animation service will use this function to cancel the animation whenever a cancel event is
   *   triggered.
   *
   *
   *<pre>
   *   return {
     *     eventFn : function(element, done) {
     *       //code to run the animation
     *       //once complete, then run done()
     *       return function cancellationFunction() {
     *         //code to cancel the animation
     *       }
     *     }
     *   }
   *</pre>
   *
   * @param {string} name The name of the animation.
   * @param {function} factory The factory function that will be executed to return the animation
   *                           object.
   */
  this.register = function(name, factory) {
    var key = name + '-animation';
    if (name && name.charAt(0) != '.') throw $animateMinErr('notcsel',
        "Expecting class selector starting with '.' got '{0}'.", name);
    this.$$selectors[name.substr(1)] = key;
    $provide.factory(key, factory);
  };

  /**
   * @ngdoc function
   * @name ng.$animateProvider#classNameFilter
   * @methodOf ng.$animateProvider
   *
   * @description
   * Sets and/or returns the CSS class regular expression that is checked when performing
   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
   * therefore enable $animate to attempt to perform an animation on any element.
   * When setting the classNameFilter value, animations will only be performed on elements
   * that successfully match the filter expression. This in turn can boost performance
   * for low-powered devices as well as applications containing a lot of structural operations.
   * @param {RegExp=} expression The className expression which will be checked against all animations
   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
   */
  this.classNameFilter = function(expression) {
    if(arguments.length === 1) {
      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;
    }
    return this.$$classNameFilter;
  };

  this.$get = ['$timeout', function($timeout) {

    /**
     *
     * @ngdoc object
     * @name ng.$animate
     * @description The $animate service provides rudimentary DOM manipulation functions to
     * insert, remove and move elements within the DOM, as well as adding and removing classes.
     * This service is the core service used by the ngAnimate $animator service which provides
     * high-level animation hooks for CSS and JavaScript.
     *
     * $animate is available in the AngularJS core, however, the ngAnimate module must be included
     * to enable full out animation support. Otherwise, $animate will only perform simple DOM
     * manipulation operations.
     *
     * To learn more about enabling animation support, click here to visit the {@link ngAnimate
     * ngAnimate module page} as well as the {@link ngAnimate.$animate ngAnimate $animate service
     * page}.
     */
    return {

      /**
       *
       * @ngdoc function
       * @name ng.$animate#enter
       * @methodOf ng.$animate
       * @function
       * @description Inserts the element into the DOM either after the `after` element or within
       *   the `parent` element. Once complete, the done() callback will be fired (if provided).
       * @param {jQuery/jqLite element} element the element which will be inserted into the DOM
       * @param {jQuery/jqLite element} parent the parent element which will append the element as
       *   a child (if the after element is not present)
       * @param {jQuery/jqLite element} after the sibling element which will append the element
       *   after itself
       * @param {function=} done callback function that will be called after the element has been
       *   inserted into the DOM
       */
      enter : function(element, parent, after, done) {
        if (after) {
          after.after(element);
        } else {
          if (!parent || !parent[0]) {
            parent = after.parent();
          }
          parent.append(element);
        }
        done && $timeout(done, 0, false);
      },

      /**
       *
       * @ngdoc function
       * @name ng.$animate#leave
       * @methodOf ng.$animate
       * @function
       * @description Removes the element from the DOM. Once complete, the done() callback will be
       *   fired (if provided).
       * @param {jQuery/jqLite element} element the element which will be removed from the DOM
       * @param {function=} done callback function that will be called after the element has been
       *   removed from the DOM
       */
      leave : function(element, done) {
        element.remove();
        done && $timeout(done, 0, false);
      },

      /**
       *
       * @ngdoc function
       * @name ng.$animate#move
       * @methodOf ng.$animate
       * @function
       * @description Moves the position of the provided element within the DOM to be placed
       * either after the `after` element or inside of the `parent` element. Once complete, the
       * done() callback will be fired (if provided).
       * 
       * @param {jQuery/jqLite element} element the element which will be moved around within the
       *   DOM
       * @param {jQuery/jqLite element} parent the parent element where the element will be
       *   inserted into (if the after element is not present)
       * @param {jQuery/jqLite element} after the sibling element where the element will be
       *   positioned next to
       * @param {function=} done the callback function (if provided) that will be fired after the
       *   element has been moved to its new position
       */
      move : function(element, parent, after, done) {
        // Do not remove element before insert. Removing will cause data associated with the
        // element to be dropped. Insert will implicitly do the remove.
        this.enter(element, parent, after, done);
      },

      /**
       *
       * @ngdoc function
       * @name ng.$animate#addClass
       * @methodOf ng.$animate
       * @function
       * @description Adds the provided className CSS class value to the provided element. Once
       * complete, the done() callback will be fired (if provided).
       * @param {jQuery/jqLite element} element the element which will have the className value
       *   added to it
       * @param {string} className the CSS class which will be added to the element
       * @param {function=} done the callback function (if provided) that will be fired after the
       *   className value has been added to the element
       */
      addClass : function(element, className, done) {
        className = isString(className) ?
                      className :
                      isArray(className) ? className.join(' ') : '';
        forEach(element, function (element) {
          jqLiteAddClass(element, className);
        });
        done && $timeout(done, 0, false);
      },

      /**
       *
       * @ngdoc function
       * @name ng.$animate#removeClass
       * @methodOf ng.$animate
       * @function
       * @description Removes the provided className CSS class value from the provided element.
       * Once complete, the done() callback will be fired (if provided).
       * @param {jQuery/jqLite element} element the element which will have the className value
       *   removed from it
       * @param {string} className the CSS class which will be removed from the element
       * @param {function=} done the callback function (if provided) that will be fired after the
       *   className value has been removed from the element
       */
      removeClass : function(element, className, done) {
        className = isString(className) ?
                      className :
                      isArray(className) ? className.join(' ') : '';
        forEach(element, function (element) {
          jqLiteRemoveClass(element, className);
        });
        done && $timeout(done, 0, false);
      },

      enabled : noop
    };
  }];
}];

/**
 * ! This is a private undocumented service !
 *
 * @name ng.$browser
 * @requires $log
 * @description
 * This object has two goals:
 *
 * - hide all the global state in the browser caused by the window object
 * - abstract away all the browser specific features and inconsistencies
 *
 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
 * service, which can be used for convenient testing of the application without the interaction with
 * the real browser apis.
 */
/**
 * @param {object} window The global window object.
 * @param {object} document jQuery wrapped document.
 * @param {function()} XHR XMLHttpRequest constructor.
 * @param {object} $log console.log or an object with the same interface.
 * @param {object} $sniffer $sniffer service
 */
function Browser(window, document, $log, $sniffer) {
  var self = this,
      rawDocument = document[0],
      location = window.location,
      history = window.history,
      setTimeout = window.setTimeout,
      clearTimeout = window.clearTimeout,
      pendingDeferIds = {};

  self.isMock = false;

  var outstandingRequestCount = 0;
  var outstandingRequestCallbacks = [];

  // TODO(vojta): remove this temporary api
  self.$$completeOutstandingRequest = completeOutstandingRequest;
  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };

  /**
   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
   */
  function completeOutstandingRequest(fn) {
    try {
      fn.apply(null, sliceArgs(arguments, 1));
    } finally {
      outstandingRequestCount--;
      if (outstandingRequestCount === 0) {
        while(outstandingRequestCallbacks.length) {
          try {
            outstandingRequestCallbacks.pop()();
          } catch (e) {
            $log.error(e);
          }
        }
      }
    }
  }

  /**
   * @private
   * Note: this method is used only by scenario runner
   * TODO(vojta): prefix this method with $$ ?
   * @param {function()} callback Function that will be called when no outstanding request
   */
  self.notifyWhenNoOutstandingRequests = function(callback) {
    // force browser to execute all pollFns - this is needed so that cookies and other pollers fire
    // at some deterministic time in respect to the test runner's actions. Leaving things up to the
    // regular poller would result in flaky tests.
    forEach(pollFns, function(pollFn){ pollFn(); });

    if (outstandingRequestCount === 0) {
      callback();
    } else {
      outstandingRequestCallbacks.push(callback);
    }
  };

  //////////////////////////////////////////////////////////////
  // Poll Watcher API
  //////////////////////////////////////////////////////////////
  var pollFns = [],
      pollTimeout;

  /**
   * @name ng.$browser#addPollFn
   * @methodOf ng.$browser
   *
   * @param {function()} fn Poll function to add
   *
   * @description
   * Adds a function to the list of functions that poller periodically executes,
   * and starts polling if not started yet.
   *
   * @returns {function()} the added function
   */
  self.addPollFn = function(fn) {
    if (isUndefined(pollTimeout)) startPoller(100, setTimeout);
    pollFns.push(fn);
    return fn;
  };

  /**
   * @param {number} interval How often should browser call poll functions (ms)
   * @param {function()} setTimeout Reference to a real or fake `setTimeout` function.
   *
   * @description
   * Configures the poller to run in the specified intervals, using the specified
   * setTimeout fn and kicks it off.
   */
  function startPoller(interval, setTimeout) {
    (function check() {
      forEach(pollFns, function(pollFn){ pollFn(); });
      pollTimeout = setTimeout(check, interval);
    })();
  }

  //////////////////////////////////////////////////////////////
  // URL API
  //////////////////////////////////////////////////////////////

  var lastBrowserUrl = location.href,
      baseElement = document.find('base'),
      newLocation = null;

  /**
   * @name ng.$browser#url
   * @methodOf ng.$browser
   *
   * @description
   * GETTER:
   * Without any argument, this method just returns current value of location.href.
   *
   * SETTER:
   * With at least one argument, this method sets url to new value.
   * If html5 history api supported, pushState/replaceState is used, otherwise
   * location.href/location.replace is used.
   * Returns its own instance to allow chaining
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to change url.
   *
   * @param {string} url New url (when used as setter)
   * @param {boolean=} replace Should new url replace current history record ?
   */
  self.url = function(url, replace) {
    // Android Browser BFCache causes location, history reference to become stale.
    if (location !== window.location) location = window.location;
    if (history !== window.history) history = window.history;

    // setter
    if (url) {
      if (lastBrowserUrl == url) return;
      lastBrowserUrl = url;
      if ($sniffer.history) {
        if (replace) history.replaceState(null, '', url);
        else {
          history.pushState(null, '', url);
          // Crazy Opera Bug: http://my.opera.com/community/forums/topic.dml?id=1185462
          baseElement.attr('href', baseElement.attr('href'));
        }
      } else {
        newLocation = url;
        if (replace) {
          location.replace(url);
        } else {
          location.href = url;
        }
      }
      return self;
    // getter
    } else {
      // - newLocation is a workaround for an IE7-9 issue with location.replace and location.href
      //   methods not updating location.href synchronously.
      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
      return newLocation || location.href.replace(/%27/g,"'");
    }
  };

  var urlChangeListeners = [],
      urlChangeInit = false;

  function fireUrlChange() {
    newLocation = null;
    if (lastBrowserUrl == self.url()) return;

    lastBrowserUrl = self.url();
    forEach(urlChangeListeners, function(listener) {
      listener(self.url());
    });
  }

  /**
   * @name ng.$browser#onUrlChange
   * @methodOf ng.$browser
   * @TODO(vojta): refactor to use node's syntax for events
   *
   * @description
   * Register callback function that will be called, when url changes.
   *
   * It's only called when the url is changed from outside of angular:
   * - user types different url into address bar
   * - user clicks on history (forward/back) button
   * - user clicks on a link
   *
   * It's not called when url is changed by $browser.url() method
   *
   * The listener gets called with new url as parameter.
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to monitor url changes in angular apps.
   *
   * @param {function(string)} listener Listener function to be called when url changes.
   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
   */
  self.onUrlChange = function(callback) {
    if (!urlChangeInit) {
      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
      // don't fire popstate when user change the address bar and don't fire hashchange when url
      // changed by push/replaceState

      // html5 history api - popstate event
      if ($sniffer.history) jqLite(window).on('popstate', fireUrlChange);
      // hashchange event
      if ($sniffer.hashchange) jqLite(window).on('hashchange', fireUrlChange);
      // polling
      else self.addPollFn(fireUrlChange);

      urlChangeInit = true;
    }

    urlChangeListeners.push(callback);
    return callback;
  };

  //////////////////////////////////////////////////////////////
  // Misc API
  //////////////////////////////////////////////////////////////

  /**
   * @name ng.$browser#baseHref
   * @methodOf ng.$browser
   *
   * @description
   * Returns current <base href>
   * (always relative - without domain)
   *
   * @returns {string=} current <base href>
   */
  self.baseHref = function() {
    var href = baseElement.attr('href');
    return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
  };

  //////////////////////////////////////////////////////////////
  // Cookies API
  //////////////////////////////////////////////////////////////
  var lastCookies = {};
  var lastCookieString = '';
  var cookiePath = self.baseHref();

  /**
   * @name ng.$browser#cookies
   * @methodOf ng.$browser
   *
   * @param {string=} name Cookie name
   * @param {string=} value Cookie value
   *
   * @description
   * The cookies method provides a 'private' low level access to browser cookies.
   * It is not meant to be used directly, use the $cookie service instead.
   *
   * The return values vary depending on the arguments that the method was called with as follows:
   *
   * - cookies() -> hash of all cookies, this is NOT a copy of the internal state, so do not modify
   *   it
   * - cookies(name, value) -> set name to value, if value is undefined delete the cookie
   * - cookies(name) -> the same as (name, undefined) == DELETES (no one calls it right now that
   *   way)
   *
   * @returns {Object} Hash of all cookies (if called without any parameter)
   */
  self.cookies = function(name, value) {
    /* global escape: false, unescape: false */
    var cookieLength, cookieArray, cookie, i, index;

    if (name) {
      if (value === undefined) {
        rawDocument.cookie = escape(name) + "=;path=" + cookiePath +
                                ";expires=Thu, 01 Jan 1970 00:00:00 GMT";
      } else {
        if (isString(value)) {
          cookieLength = (rawDocument.cookie = escape(name) + '=' + escape(value) +
                                ';path=' + cookiePath).length + 1;

          // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
          // - 300 cookies
          // - 20 cookies per unique domain
          // - 4096 bytes per cookie
          if (cookieLength > 4096) {
            $log.warn("Cookie '"+ name +
              "' possibly not set or overflowed because it was too large ("+
              cookieLength + " > 4096 bytes)!");
          }
        }
      }
    } else {
      if (rawDocument.cookie !== lastCookieString) {
        lastCookieString = rawDocument.cookie;
        cookieArray = lastCookieString.split("; ");
        lastCookies = {};

        for (i = 0; i < cookieArray.length; i++) {
          cookie = cookieArray[i];
          index = cookie.indexOf('=');
          if (index > 0) { //ignore nameless cookies
            name = unescape(cookie.substring(0, index));
            // the first value that is seen for a cookie is the most
            // specific one.  values for the same cookie name that
            // follow are for less specific paths.
            if (lastCookies[name] === undefined) {
              lastCookies[name] = unescape(cookie.substring(index + 1));
            }
          }
        }
      }
      return lastCookies;
    }
  };


  /**
   * @name ng.$browser#defer
   * @methodOf ng.$browser
   * @param {function()} fn A function, who's execution should be deferred.
   * @param {number=} [delay=0] of milliseconds to defer the function execution.
   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
   *
   * @description
   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
   *
   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
   * via `$browser.defer.flush()`.
   *
   */
  self.defer = function(fn, delay) {
    var timeoutId;
    outstandingRequestCount++;
    timeoutId = setTimeout(function() {
      delete pendingDeferIds[timeoutId];
      completeOutstandingRequest(fn);
    }, delay || 0);
    pendingDeferIds[timeoutId] = true;
    return timeoutId;
  };


  /**
   * @name ng.$browser#defer.cancel
   * @methodOf ng.$browser.defer
   *
   * @description
   * Cancels a deferred task identified with `deferId`.
   *
   * @param {*} deferId Token returned by the `$browser.defer` function.
   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
   *                    canceled.
   */
  self.defer.cancel = function(deferId) {
    if (pendingDeferIds[deferId]) {
      delete pendingDeferIds[deferId];
      clearTimeout(deferId);
      completeOutstandingRequest(noop);
      return true;
    }
    return false;
  };

}

function $BrowserProvider(){
  this.$get = ['$window', '$log', '$sniffer', '$document',
      function( $window,   $log,   $sniffer,   $document){
        return new Browser($window, $document, $log, $sniffer);
      }];
}

/**
 * @ngdoc object
 * @name ng.$cacheFactory
 *
 * @description
 * Factory that constructs cache objects and gives access to them.
 * 
 * <pre>
 * 
 *  var cache = $cacheFactory('cacheId');
 *  expect($cacheFactory.get('cacheId')).toBe(cache);
 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
 *
 *  cache.put("key", "value");
 *  cache.put("another key", "another value");
 *
 *  // We've specified no options on creation
 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2}); 
 * 
 * </pre>
 *
 *
 * @param {string} cacheId Name or id of the newly created cache.
 * @param {object=} options Options object that specifies the cache behavior. Properties:
 *
 *   - `{number=}` `capacity` — turns the cache into LRU cache.
 *
 * @returns {object} Newly created cache object with the following set of methods:
 *
 * - `{object}` `info()` — Returns id, size, and options of cache.
 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
 *   it.
 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
 * - `{void}` `removeAll()` — Removes all cached values.
 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
 *
 */
function $CacheFactoryProvider() {

  this.$get = function() {
    var caches = {};

    function cacheFactory(cacheId, options) {
      if (cacheId in caches) {
        throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);
      }

      var size = 0,
          stats = extend({}, options, {id: cacheId}),
          data = {},
          capacity = (options && options.capacity) || Number.MAX_VALUE,
          lruHash = {},
          freshEnd = null,
          staleEnd = null;

      return caches[cacheId] = {

        put: function(key, value) {
          var lruEntry = lruHash[key] || (lruHash[key] = {key: key});

          refresh(lruEntry);

          if (isUndefined(value)) return;
          if (!(key in data)) size++;
          data[key] = value;

          if (size > capacity) {
            this.remove(staleEnd.key);
          }

          return value;
        },


        get: function(key) {
          var lruEntry = lruHash[key];

          if (!lruEntry) return;

          refresh(lruEntry);

          return data[key];
        },


        remove: function(key) {
          var lruEntry = lruHash[key];

          if (!lruEntry) return;

          if (lruEntry == freshEnd) freshEnd = lruEntry.p;
          if (lruEntry == staleEnd) staleEnd = lruEntry.n;
          link(lruEntry.n,lruEntry.p);

          delete lruHash[key];
          delete data[key];
          size--;
        },


        removeAll: function() {
          data = {};
          size = 0;
          lruHash = {};
          freshEnd = staleEnd = null;
        },


        destroy: function() {
          data = null;
          stats = null;
          lruHash = null;
          delete caches[cacheId];
        },


        info: function() {
          return extend({}, stats, {size: size});
        }
      };


      /**
       * makes the `entry` the freshEnd of the LRU linked list
       */
      function refresh(entry) {
        if (entry != freshEnd) {
          if (!staleEnd) {
            staleEnd = entry;
          } else if (staleEnd == entry) {
            staleEnd = entry.n;
          }

          link(entry.n, entry.p);
          link(entry, freshEnd);
          freshEnd = entry;
          freshEnd.n = null;
        }
      }


      /**
       * bidirectionally links two entries of the LRU linked list
       */
      function link(nextEntry, prevEntry) {
        if (nextEntry != prevEntry) {
          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
        }
      }
    }


  /**
   * @ngdoc method
   * @name ng.$cacheFactory#info
   * @methodOf ng.$cacheFactory
   *
   * @description
   * Get information about all the of the caches that have been created
   *
   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
   */
    cacheFactory.info = function() {
      var info = {};
      forEach(caches, function(cache, cacheId) {
        info[cacheId] = cache.info();
      });
      return info;
    };


  /**
   * @ngdoc method
   * @name ng.$cacheFactory#get
   * @methodOf ng.$cacheFactory
   *
   * @description
   * Get access to a cache object by the `cacheId` used when it was created.
   *
   * @param {string} cacheId Name or id of a cache to access.
   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
   */
    cacheFactory.get = function(cacheId) {
      return caches[cacheId];
    };


    return cacheFactory;
  };
}

/**
 * @ngdoc object
 * @name ng.$templateCache
 *
 * @description
 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
 * can load templates directly into the cache in a `script` tag, or by consuming the
 * `$templateCache` service directly.
 * 
 * Adding via the `script` tag:
 * <pre>
 * <html ng-app>
 * <head>
 * <script type="text/ng-template" id="templateId.html">
 *   This is the content of the template
 * </script>
 * </head>
 *   ...
 * </html>
 * </pre>
 * 
 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
 * the document, but it must be below the `ng-app` definition.
 * 
 * Adding via the $templateCache service:
 * 
 * <pre>
 * var myApp = angular.module('myApp', []);
 * myApp.run(function($templateCache) {
 *   $templateCache.put('templateId.html', 'This is the content of the template');
 * });
 * </pre>
 * 
 * To retrieve the template later, simply use it in your HTML:
 * <pre>
 * <div ng-include=" 'templateId.html' "></div>
 * </pre>
 * 
 * or get it via Javascript:
 * <pre>
 * $templateCache.get('templateId.html')
 * </pre>
 * 
 * See {@link ng.$cacheFactory $cacheFactory}.
 *
 */
function $TemplateCacheProvider() {
  this.$get = ['$cacheFactory', function($cacheFactory) {
    return $cacheFactory('templates');
  }];
}

/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
 *
 * DOM-related variables:
 *
 * - "node" - DOM Node
 * - "element" - DOM Element or Node
 * - "$node" or "$element" - jqLite-wrapped node or element
 *
 *
 * Compiler related stuff:
 *
 * - "linkFn" - linking fn of a single directive
 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
 */


/**
 * @ngdoc function
 * @name ng.$compile
 * @function
 *
 * @description
 * Compiles an HTML string or DOM into a template and produces a template function, which
 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
 *
 * The compilation is a process of walking the DOM tree and matching DOM elements to
 * {@link ng.$compileProvider#methods_directive directives}.
 *
 * <div class="alert alert-warning">
 * **Note:** This document is an in-depth reference of all directive options.
 * For a gentle introduction to directives with examples of common use cases,
 * see the {@link guide/directive directive guide}.
 * </div>
 *
 * ## Comprehensive Directive API
 *
 * There are many different options for a directive.
 *
 * The difference resides in the return value of the factory function.
 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,
 * or just the `postLink` function (all other properties will have the default values).
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's recommended to use the "directive definition object" form.
 * </div>
 *
 * Here's an example directive declared with a Directive Definition Object:
 *
 * <pre>
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       priority: 0,
 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
 *       // or
 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
 *       replace: false,
 *       transclude: false,
 *       restrict: 'A',
 *       scope: false,
 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       compile: function compile(tElement, tAttrs, transclude) {
 *         return {
 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *         }
 *         // or
 *         // return function postLink( ... ) { ... }
 *       },
 *       // or
 *       // link: {
 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *       // }
 *       // or
 *       // link: function postLink( ... ) { ... }
 *     };
 *     return directiveDefinitionObject;
 *   });
 * </pre>
 *
 * <div class="alert alert-warning">
 * **Note:** Any unspecified options will use the default value. You can see the default values below.
 * </div>
 *
 * Therefore the above can be simplified as:
 *
 * <pre>
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       link: function postLink(scope, iElement, iAttrs) { ... }
 *     };
 *     return directiveDefinitionObject;
 *     // or
 *     // return function postLink(scope, iElement, iAttrs) { ... }
 *   });
 * </pre>
 *
 *
 *
 * ### Directive Definition Object
 *
 * The directive definition object provides instructions to the {@link api/ng.$compile
 * compiler}. The attributes are:
 *
 * #### `priority`
 * When there are multiple directives defined on a single DOM element, sometimes it
 * is necessary to specify the order in which the directives are applied. The `priority` is used
 * to sort the directives before their `compile` functions get called. Priority is defined as a
 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
 * are also run in priority order, but post-link functions are run in reverse order. The order
 * of directives with the same priority is undefined. The default priority is `0`.
 *
 * #### `terminal`
 * If set to true then the current `priority` will be the last set of directives
 * which will execute (any directives at the current priority will still execute
 * as the order of execution on same `priority` is undefined).
 *
 * #### `scope`
 * **If set to `true`,** then a new scope will be created for this directive. If multiple directives on the
 * same element request a new scope, only one new scope is created. The new scope rule does not
 * apply for the root of the template since the root of the template always gets a new scope.
 *
 * **If set to `{}` (object hash),** then a new "isolate" scope is created. The 'isolate' scope differs from
 * normal scope in that it does not prototypically inherit from the parent scope. This is useful
 * when creating reusable components, which should not accidentally read or modify data in the
 * parent scope.
 *
 * The 'isolate' scope takes an object hash which defines a set of local scope properties
 * derived from the parent scope. These local properties are useful for aliasing values for
 * templates. Locals definition is a hash of local scope property to its source:
 *
 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
 *   always a string since DOM attributes are strings. If no `attr` name is specified  then the
 *   attribute name is assumed to be the same as the local name.
 *   Given `<widget my-attr="hello {{name}}">` and widget definition
 *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect
 *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the
 *   `localName` property on the widget scope. The `name` is read from the parent scope (not
 *   component scope).
 *
 * * `=` or `=attr` - set up bi-directional binding between a local scope property and the
 *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`
 *   name is specified then the attribute name is assumed to be the same as the local name.
 *   Given `<widget my-attr="parentModel">` and widget definition of
 *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the
 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
 *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent
 *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You
 *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional.
 *
 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.
 *   If no `attr` name is specified then the attribute name is assumed to be the same as the
 *   local name. Given `<widget my-attr="count = count + value">` and widget definition of
 *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to
 *   a function wrapper for the `count = count + value` expression. Often it's desirable to
 *   pass data from the isolated scope via an expression and to the parent scope, this can be
 *   done by passing a map of local variable names and values into the expression wrapper fn.
 *   For example, if the expression is `increment(amount)` then we can specify the amount value
 *   by calling the `localFn` as `localFn({amount: 22})`.
 *
 *
 *
 * #### `controller`
 * Controller constructor function. The controller is instantiated before the
 * pre-linking phase and it is shared with other directives (see
 * `require` attribute). This allows the directives to communicate with each other and augment
 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
 *
 * * `$scope` - Current scope associated with the element
 * * `$element` - Current element
 * * `$attrs` - Current attributes object for the element
 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope.
 *    The scope can be overridden by an optional first argument.
 *   `function([scope], cloneLinkingFn)`.
 *
 *
 * #### `require`
 * Require another directive and inject its controller as the fourth argument to the linking function. The
 * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the
 * injected argument will be an array in corresponding order. If no such directive can be
 * found, or if the directive does not have a controller, then an error is raised. The name can be prefixed with:
 *
 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
 * * `^` - Locate the required controller by searching the element's parents. Throw an error if not found.
 * * `?^` - Attempt to locate the required controller by searching the element's parents or pass `null` to the
 *   `link` fn if not found.
 *
 *
 * #### `controllerAs`
 * Controller alias at the directive scope. An alias for the controller so it
 * can be referenced at the directive template. The directive needs to define a scope for this
 * configuration to be used. Useful in the case when directive is used as component.
 *
 *
 * #### `restrict`
 * String of subset of `EACM` which restricts the directive to a specific directive
 * declaration style. If omitted, the default (attributes only) is used.
 *
 * * `E` - Element name: `<my-directive></my-directive>`
 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
 * * `C` - Class: `<div class="my-directive: exp;"></div>`
 * * `M` - Comment: `<!-- directive: my-directive exp -->`
 *
 *
 * #### `template`
 * replace the current element with the contents of the HTML. The replacement process
 * migrates all of the attributes / classes from the old element to the new one. See the
 * {@link guide/directive#creating-custom-directives_creating-directives_template-expanding-directive
 * Directives Guide} for an example.
 *
 * You can specify `template` as a string representing the template or as a function which takes
 * two arguments `tElement` and `tAttrs` (described in the `compile` function api below) and
 * returns a string value representing the template.
 *
 *
 * #### `templateUrl`
 * Same as `template` but the template is loaded from the specified URL. Because
 * the template loading is asynchronous the compilation/linking is suspended until the template
 * is loaded.
 *
 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
 * a string value representing the url.  In either case, the template URL is passed through {@link
 * api/ng.$sce#methods_getTrustedResourceUrl $sce.getTrustedResourceUrl}.
 *
 *
 * #### `replace`
 * specify where the template should be inserted. Defaults to `false`.
 *
 * * `true` - the template will replace the current element.
 * * `false` - the template will replace the contents of the current element.
 *
 *
 * #### `transclude`
 * compile the content of the element and make it available to the directive.
 * Typically used with {@link api/ng.directive:ngTransclude
 * ngTransclude}. The advantage of transclusion is that the linking function receives a
 * transclusion function which is pre-bound to the correct scope. In a typical setup the widget
 * creates an `isolate` scope, but the transclusion is not a child, but a sibling of the `isolate`
 * scope. This makes it possible for the widget to have private state, and the transclusion to
 * be bound to the parent (pre-`isolate`) scope.
 *
 * * `true` - transclude the content of the directive.
 * * `'element'` - transclude the whole element including any directives defined at lower priority.
 *
 *
 * #### `compile`
 *
 * <pre>
 *   function compile(tElement, tAttrs, transclude) { ... }
 * </pre>
 *
 * The compile function deals with transforming the template DOM. Since most directives do not do
 * template transformation, it is not used often. Examples that require compile functions are
 * directives that transform template DOM, such as {@link
 * api/ng.directive:ngRepeat ngRepeat}, or load the contents
 * asynchronously, such as {@link api/ngRoute.directive:ngView ngView}. The
 * compile function takes the following arguments.
 *
 *   * `tElement` - template element - The element where the directive has been declared. It is
 *     safe to do template transformation on the element and child elements only.
 *
 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
 *     between all directive compile functions.
 *
 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
 *
 * <div class="alert alert-warning">
 * **Note:** The template instance and the link instance may be different objects if the template has
 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
 * should be done in a linking function rather than in a compile function.
 * </div>
 *
 * <div class="alert alert-error">
 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
 *   to the link function instead.
 * </div>

 * A compile function can have a return value which can be either a function or an object.
 *
 * * returning a (post-link) function - is equivalent to registering the linking function via the
 *   `link` property of the config object when the compile function is empty.
 *
 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
 *   control when a linking function should be called during the linking phase. See info about
 *   pre-linking and post-linking functions below.
 *
 *
 * #### `link`
 * This property is used only if the `compile` property is not defined.
 *
 * <pre>
 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
 * </pre>
 *
 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
 * executed after the template has been cloned. This is where most of the directive logic will be
 * put.
 *
 *   * `scope` - {@link api/ng.$rootScope.Scope Scope} - The scope to be used by the
 *     directive for registering {@link api/ng.$rootScope.Scope#methods_$watch watches}.
 *
 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
 *     manipulate the children of the element only in `postLink` function since the children have
 *     already been linked.
 *
 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
 *     between all directive linking functions.
 *
 *   * `controller` - a controller instance - A controller instance if at least one directive on the
 *     element defines a controller. The controller is shared among all the directives, which allows
 *     the directives to use the controllers as a communication channel.
 *
 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
 *     The scope can be overridden by an optional first argument. This is the same as the `$transclude`
 *     parameter of directive controllers.
 *     `function([scope], cloneLinkingFn)`.
 *
 *
 * #### Pre-linking function
 *
 * Executed before the child elements are linked. Not safe to do DOM transformation since the
 * compiler linking function will fail to locate the correct elements for linking.
 *
 * #### Post-linking function
 *
 * Executed after the child elements are linked. It is safe to do DOM transformation in the post-linking function.
 *
 * <a name="Attributes"></a>
 * ### Attributes
 *
 * The {@link api/ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
 * `link()` or `compile()` functions. It has a variety of uses.
 *
 * accessing *Normalized attribute names:*
 * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.
 * the attributes object allows for normalized access to
 *   the attributes.
 *
 * * *Directive inter-communication:* All directives share the same instance of the attributes
 *   object which allows the directives to use the attributes object as inter directive
 *   communication.
 *
 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
 *   allowing other directives to read the interpolated value.
 *
 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
 *   the only way to easily get the actual value because during the linking phase the interpolation
 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
 *
 * <pre>
 * function linkingFn(scope, elm, attrs, ctrl) {
 *   // get the attribute value
 *   console.log(attrs.ngModel);
 *
 *   // change the attribute
 *   attrs.$set('ngModel', 'new value');
 *
 *   // observe changes to interpolated attribute
 *   attrs.$observe('ngModel', function(value) {
 *     console.log('ngModel has changed value to ' + value);
 *   });
 * }
 * </pre>
 *
 * Below is an example using `$compileProvider`.
 *
 * <div class="alert alert-warning">
 * **Note**: Typically directives are registered with `module.directive`. The example below is
 * to illustrate how `$compile` works.
 * </div>
 *
 <doc:example module="compile">
   <doc:source>
    <script>
      angular.module('compile', [], function($compileProvider) {
        // configure new 'compile' directive by passing a directive
        // factory function. The factory function injects the '$compile'
        $compileProvider.directive('compile', function($compile) {
          // directive factory creates a link function
          return function(scope, element, attrs) {
            scope.$watch(
              function(scope) {
                 // watch the 'compile' expression for changes
                return scope.$eval(attrs.compile);
              },
              function(value) {
                // when the 'compile' expression changes
                // assign it into the current DOM
                element.html(value);

                // compile the new DOM and link it to the current
                // scope.
                // NOTE: we only compile .childNodes so that
                // we don't get into infinite loop compiling ourselves
                $compile(element.contents())(scope);
              }
            );
          };
        })
      });

      function Ctrl($scope) {
        $scope.name = 'Angular';
        $scope.html = 'Hello {{name}}';
      }
    </script>
    <div ng-controller="Ctrl">
      <input ng-model="name"> <br>
      <textarea ng-model="html"></textarea> <br>
      <div compile="html"></div>
    </div>
   </doc:source>
   <doc:scenario>
     it('should auto compile', function() {
       expect(element('div[compile]').text()).toBe('Hello Angular');
       input('html').enter('{{name}}!');
       expect(element('div[compile]').text()).toBe('Angular!');
     });
   </doc:scenario>
 </doc:example>

 *
 *
 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
 * @param {function(angular.Scope[, cloneAttachFn]} transclude function available to directives.
 * @param {number} maxPriority only apply directives lower then given priority (Only effects the
 *                 root element(s), not their children)
 * @returns {function(scope[, cloneAttachFn])} a link function which is used to bind template
 * (a DOM element/tree) to a scope. Where:
 *
 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
 *  called as: <br> `cloneAttachFn(clonedElement, scope)` where:
 *
 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
 *      * `scope` - is the current scope with which the linking function is working with.
 *
 * Calling the linking function returns the element of the template. It is either the original
 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
 *
 * After linking the view is not updated until after a call to $digest which typically is done by
 * Angular automatically.
 *
 * If you need access to the bound view, there are two ways to do it:
 *
 * - If you are not asking the linking function to clone the template, create the DOM element(s)
 *   before you send them to the compiler and keep this reference around.
 *   <pre>
 *     var element = $compile('<p>{{total}}</p>')(scope);
 *   </pre>
 *
 * - if on the other hand, you need the element to be cloned, the view reference from the original
 *   example would not point to the clone, but rather to the original template that was cloned. In
 *   this case, you can access the clone via the cloneAttachFn:
 *   <pre>
 *     var templateElement = angular.element('<p>{{total}}</p>'),
 *         scope = ....;
 *
 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
 *       //attach the clone to DOM document at the right place
 *     });
 *
 *     //now we have reference to the cloned DOM via `clonedElement`
 *   </pre>
 *
 *
 * For information on how the compiler works, see the
 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
 */

var $compileMinErr = minErr('$compile');

/**
 * @ngdoc service
 * @name ng.$compileProvider
 * @function
 *
 * @description
 */
$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
function $CompileProvider($provide, $$sanitizeUriProvider) {
  var hasDirectives = {},
      Suffix = 'Directive',
      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\d\w\-_]+)\s+(.*)$/,
      CLASS_DIRECTIVE_REGEXP = /(([\d\w\-_]+)(?:\:([^;]+))?;?)/;

  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
  // The assumption is that future DOM event attribute names will begin with
  // 'on' and be composed of only English letters.
  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;

  /**
   * @ngdoc function
   * @name ng.$compileProvider#directive
   * @methodOf ng.$compileProvider
   * @function
   *
   * @description
   * Register a new directive with the compiler.
   *
   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
   *    names and the values are the factories.
   * @param {function|Array} directiveFactory An injectable directive factory function. See
   *    {@link guide/directive} for more info.
   * @returns {ng.$compileProvider} Self for chaining.
   */
   this.directive = function registerDirective(name, directiveFactory) {
    assertNotHasOwnProperty(name, 'directive');
    if (isString(name)) {
      assertArg(directiveFactory, 'directiveFactory');
      if (!hasDirectives.hasOwnProperty(name)) {
        hasDirectives[name] = [];
        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
          function($injector, $exceptionHandler) {
            var directives = [];
            forEach(hasDirectives[name], function(directiveFactory, index) {
              try {
                var directive = $injector.invoke(directiveFactory);
                if (isFunction(directive)) {
                  directive = { compile: valueFn(directive) };
                } else if (!directive.compile && directive.link) {
                  directive.compile = valueFn(directive.link);
                }
                directive.priority = directive.priority || 0;
                directive.index = index;
                directive.name = directive.name || name;
                directive.require = directive.require || (directive.controller && directive.name);
                directive.restrict = directive.restrict || 'A';
                directives.push(directive);
              } catch (e) {
                $exceptionHandler(e);
              }
            });
            return directives;
          }]);
      }
      hasDirectives[name].push(directiveFactory);
    } else {
      forEach(name, reverseParams(registerDirective));
    }
    return this;
  };


  /**
   * @ngdoc function
   * @name ng.$compileProvider#aHrefSanitizationWhitelist
   * @methodOf ng.$compileProvider
   * @function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.aHrefSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
      return this;
    } else {
      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
    }
  };


  /**
   * @ngdoc function
   * @name ng.$compileProvider#imgSrcSanitizationWhitelist
   * @methodOf ng.$compileProvider
   * @function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.imgSrcSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
      return this;
    } else {
      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
    }
  };

  this.$get = [
            '$injector', '$interpolate', '$exceptionHandler', '$http', '$templateCache', '$parse',
            '$controller', '$rootScope', '$document', '$sce', '$animate', '$$sanitizeUri',
    function($injector,   $interpolate,   $exceptionHandler,   $http,   $templateCache,   $parse,
             $controller,   $rootScope,   $document,   $sce,   $animate,   $$sanitizeUri) {

    var Attributes = function(element, attr) {
      this.$$element = element;
      this.$attr = attr || {};
    };

    Attributes.prototype = {
      $normalize: directiveNormalize,


      /**
       * @ngdoc function
       * @name ng.$compile.directive.Attributes#$addClass
       * @methodOf ng.$compile.directive.Attributes
       * @function
       *
       * @description
       * Adds the CSS class value specified by the classVal parameter to the element. If animations
       * are enabled then an animation will be triggered for the class addition.
       *
       * @param {string} classVal The className value that will be added to the element
       */
      $addClass : function(classVal) {
        if(classVal && classVal.length > 0) {
          $animate.addClass(this.$$element, classVal);
        }
      },

      /**
       * @ngdoc function
       * @name ng.$compile.directive.Attributes#$removeClass
       * @methodOf ng.$compile.directive.Attributes
       * @function
       *
       * @description
       * Removes the CSS class value specified by the classVal parameter from the element. If
       * animations are enabled then an animation will be triggered for the class removal.
       *
       * @param {string} classVal The className value that will be removed from the element
       */
      $removeClass : function(classVal) {
        if(classVal && classVal.length > 0) {
          $animate.removeClass(this.$$element, classVal);
        }
      },

      /**
       * @ngdoc function
       * @name ng.$compile.directive.Attributes#$updateClass
       * @methodOf ng.$compile.directive.Attributes
       * @function
       *
       * @description
       * Adds and removes the appropriate CSS class values to the element based on the difference
       * between the new and old CSS class values (specified as newClasses and oldClasses).
       *
       * @param {string} newClasses The current CSS className value
       * @param {string} oldClasses The former CSS className value
       */
      $updateClass : function(newClasses, oldClasses) {
        this.$removeClass(tokenDifference(oldClasses, newClasses));
        this.$addClass(tokenDifference(newClasses, oldClasses));
      },

      /**
       * Set a normalized attribute on the element in a way such that all directives
       * can share the attribute. This function properly handles boolean attributes.
       * @param {string} key Normalized key. (ie ngAttribute)
       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
       *     Defaults to true.
       * @param {string=} attrName Optional none normalized name. Defaults to key.
       */
      $set: function(key, value, writeAttr, attrName) {
        // TODO: decide whether or not to throw an error if "class"
        //is set through this function since it may cause $updateClass to
        //become unstable.

        var booleanKey = getBooleanAttrName(this.$$element[0], key),
            normalizedVal,
            nodeName;

        if (booleanKey) {
          this.$$element.prop(key, value);
          attrName = booleanKey;
        }

        this[key] = value;

        // translate normalized key to actual key
        if (attrName) {
          this.$attr[key] = attrName;
        } else {
          attrName = this.$attr[key];
          if (!attrName) {
            this.$attr[key] = attrName = snake_case(key, '-');
          }
        }

        nodeName = nodeName_(this.$$element);

        // sanitize a[href] and img[src] values
        if ((nodeName === 'A' && key === 'href') ||
            (nodeName === 'IMG' && key === 'src')) {
          this[key] = value = $$sanitizeUri(value, key === 'src');
        }

        if (writeAttr !== false) {
          if (value === null || value === undefined) {
            this.$$element.removeAttr(attrName);
          } else {
            this.$$element.attr(attrName, value);
          }
        }

        // fire observers
        var $$observers = this.$$observers;
        $$observers && forEach($$observers[key], function(fn) {
          try {
            fn(value);
          } catch (e) {
            $exceptionHandler(e);
          }
        });
      },


      /**
       * @ngdoc function
       * @name ng.$compile.directive.Attributes#$observe
       * @methodOf ng.$compile.directive.Attributes
       * @function
       *
       * @description
       * Observes an interpolated attribute.
       *
       * The observer function will be invoked once during the next `$digest` following
       * compilation. The observer is then invoked whenever the interpolated value
       * changes.
       *
       * @param {string} key Normalized key. (ie ngAttribute) .
       * @param {function(interpolatedValue)} fn Function that will be called whenever
                the interpolated value of the attribute changes.
       *        See the {@link guide/directive#Attributes Directives} guide for more info.
       * @returns {function()} the `fn` parameter.
       */
      $observe: function(key, fn) {
        var attrs = this,
            $$observers = (attrs.$$observers || (attrs.$$observers = {})),
            listeners = ($$observers[key] || ($$observers[key] = []));

        listeners.push(fn);
        $rootScope.$evalAsync(function() {
          if (!listeners.$$inter) {
            // no one registered attribute interpolation function, so lets call it manually
            fn(attrs[key]);
          }
        });
        return fn;
      }
    };

    var startSymbol = $interpolate.startSymbol(),
        endSymbol = $interpolate.endSymbol(),
        denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')
            ? identity
            : function denormalizeTemplate(template) {
              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
        },
        NG_ATTR_BINDING = /^ngAttr[A-Z]/;


    return compile;

    //================================

    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,
                        previousCompileContext) {
      if (!($compileNodes instanceof jqLite)) {
        // jquery always rewraps, whereas we need to preserve the original selector so that we can
        // modify it.
        $compileNodes = jqLite($compileNodes);
      }
      // We can not compile top level text elements since text nodes can be merged and we will
      // not be able to attach scope data to them, so we will wrap them in <span>
      forEach($compileNodes, function(node, index){
        if (node.nodeType == 3 /* text node */ && node.nodeValue.match(/\S+/) /* non-empty */ ) {
          $compileNodes[index] = node = jqLite(node).wrap('<span></span>').parent()[0];
        }
      });
      var compositeLinkFn =
              compileNodes($compileNodes, transcludeFn, $compileNodes,
                           maxPriority, ignoreDirective, previousCompileContext);
      safeAddClass($compileNodes, 'ng-scope');
      return function publicLinkFn(scope, cloneConnectFn, transcludeControllers){
        assertArg(scope, 'scope');
        // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
        // and sometimes changes the structure of the DOM.
        var $linkNode = cloneConnectFn
          ? JQLitePrototype.clone.call($compileNodes) // IMPORTANT!!!
          : $compileNodes;

        forEach(transcludeControllers, function(instance, name) {
          $linkNode.data('$' + name + 'Controller', instance);
        });

        // Attach scope only to non-text nodes.
        for(var i = 0, ii = $linkNode.length; i<ii; i++) {
          var node = $linkNode[i],
              nodeType = node.nodeType;
          if (nodeType === 1 /* element */ || nodeType === 9 /* document */) {
            $linkNode.eq(i).data('$scope', scope);
          }
        }

        if (cloneConnectFn) cloneConnectFn($linkNode, scope);
        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode);
        return $linkNode;
      };
    }

    function safeAddClass($element, className) {
      try {
        $element.addClass(className);
      } catch(e) {
        // ignore, since it means that we are trying to set class on
        // SVG element, where class name is read-only.
      }
    }

    /**
     * Compile function matches each node in nodeList against the directives. Once all directives
     * for a particular node are collected their compile functions are executed. The compile
     * functions return values - the linking functions - are combined into a composite linking
     * function, which is the a linking function for the node.
     *
     * @param {NodeList} nodeList an array of nodes or NodeList to compile
     * @param {function(angular.Scope[, cloneAttachFn]} transcludeFn A linking function, where the
     *        scope argument is auto-generated to the new child of the transcluded parent scope.
     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
     *        the rootElement must be set the jqLite collection of the compile root. This is
     *        needed so that the jqLite collection items can be replaced with widgets.
     * @param {number=} maxPriority Max directive priority.
     * @returns {?function} A composite linking function of all of the matched directives or null.
     */
    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,
                            previousCompileContext) {
      var linkFns = [],
          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound;

      for (var i = 0; i < nodeList.length; i++) {
        attrs = new Attributes();

        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,
                                        ignoreDirective);

        nodeLinkFn = (directives.length)
            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,
                                      null, [], [], previousCompileContext)
            : null;

        if (nodeLinkFn && nodeLinkFn.scope) {
          safeAddClass(jqLite(nodeList[i]), 'ng-scope');
        }

        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||
                      !(childNodes = nodeList[i].childNodes) ||
                      !childNodes.length)
            ? null
            : compileNodes(childNodes,
                 nodeLinkFn ? nodeLinkFn.transclude : transcludeFn);

        linkFns.push(nodeLinkFn, childLinkFn);
        linkFnFound = linkFnFound || nodeLinkFn || childLinkFn;
        //use the previous context only for the first element in the virtual group
        previousCompileContext = null;
      }

      // return a linking function if we have found anything, null otherwise
      return linkFnFound ? compositeLinkFn : null;

      function compositeLinkFn(scope, nodeList, $rootElement, boundTranscludeFn) {
        var nodeLinkFn, childLinkFn, node, $node, childScope, childTranscludeFn, i, ii, n;

        // copy nodeList so that linking doesn't break due to live list updates.
        var nodeListLength = nodeList.length,
            stableNodeList = new Array(nodeListLength);
        for (i = 0; i < nodeListLength; i++) {
          stableNodeList[i] = nodeList[i];
        }

        for(i = 0, n = 0, ii = linkFns.length; i < ii; n++) {
          node = stableNodeList[n];
          nodeLinkFn = linkFns[i++];
          childLinkFn = linkFns[i++];
          $node = jqLite(node);

          if (nodeLinkFn) {
            if (nodeLinkFn.scope) {
              childScope = scope.$new();
              $node.data('$scope', childScope);
            } else {
              childScope = scope;
            }
            childTranscludeFn = nodeLinkFn.transclude;
            if (childTranscludeFn || (!boundTranscludeFn && transcludeFn)) {
              nodeLinkFn(childLinkFn, childScope, node, $rootElement,
                createBoundTranscludeFn(scope, childTranscludeFn || transcludeFn)
              );
            } else {
              nodeLinkFn(childLinkFn, childScope, node, $rootElement, boundTranscludeFn);
            }
          } else if (childLinkFn) {
            childLinkFn(scope, node.childNodes, undefined, boundTranscludeFn);
          }
        }
      }
    }

    function createBoundTranscludeFn(scope, transcludeFn) {
      return function boundTranscludeFn(transcludedScope, cloneFn, controllers) {
        var scopeCreated = false;

        if (!transcludedScope) {
          transcludedScope = scope.$new();
          transcludedScope.$$transcluded = true;
          scopeCreated = true;
        }

        var clone = transcludeFn(transcludedScope, cloneFn, controllers);
        if (scopeCreated) {
          clone.on('$destroy', bind(transcludedScope, transcludedScope.$destroy));
        }
        return clone;
      };
    }

    /**
     * Looks for directives on the given node and adds them to the directive collection which is
     * sorted.
     *
     * @param node Node to search.
     * @param directives An array to which the directives are added to. This array is sorted before
     *        the function returns.
     * @param attrs The shared attrs object which is used to populate the normalized attributes.
     * @param {number=} maxPriority Max directive priority.
     */
    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
      var nodeType = node.nodeType,
          attrsMap = attrs.$attr,
          match,
          className;

      switch(nodeType) {
        case 1: /* Element */
          // use the node name: <directive>
          addDirective(directives,
              directiveNormalize(nodeName_(node).toLowerCase()), 'E', maxPriority, ignoreDirective);

          // iterate over the attributes
          for (var attr, name, nName, ngAttrName, value, nAttrs = node.attributes,
                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
            var attrStartName = false;
            var attrEndName = false;

            attr = nAttrs[j];
            if (!msie || msie >= 8 || attr.specified) {
              name = attr.name;
              // support ngAttr attribute binding
              ngAttrName = directiveNormalize(name);
              if (NG_ATTR_BINDING.test(ngAttrName)) {
                name = snake_case(ngAttrName.substr(6), '-');
              }

              var directiveNName = ngAttrName.replace(/(Start|End)$/, '');
              if (ngAttrName === directiveNName + 'Start') {
                attrStartName = name;
                attrEndName = name.substr(0, name.length - 5) + 'end';
                name = name.substr(0, name.length - 6);
              }

              nName = directiveNormalize(name.toLowerCase());
              attrsMap[nName] = name;
              attrs[nName] = value = trim(attr.value);
              if (getBooleanAttrName(node, nName)) {
                attrs[nName] = true; // presence means true
              }
              addAttrInterpolateDirective(node, directives, value, nName);
              addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,
                            attrEndName);
            }
          }

          // use class as directive
          className = node.className;
          if (isString(className) && className !== '') {
            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
              nName = directiveNormalize(match[2]);
              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
                attrs[nName] = trim(match[3]);
              }
              className = className.substr(match.index + match[0].length);
            }
          }
          break;
        case 3: /* Text Node */
          addTextInterpolateDirective(directives, node.nodeValue);
          break;
        case 8: /* Comment */
          try {
            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
            if (match) {
              nName = directiveNormalize(match[1]);
              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
                attrs[nName] = trim(match[2]);
              }
            }
          } catch (e) {
            // turns out that under some circumstances IE9 throws errors when one attempts to read
            // comment's node value.
            // Just ignore it and continue. (Can't seem to reproduce in test case.)
          }
          break;
      }

      directives.sort(byPriority);
      return directives;
    }

    /**
     * Given a node with an directive-start it collects all of the siblings until it finds
     * directive-end.
     * @param node
     * @param attrStart
     * @param attrEnd
     * @returns {*}
     */
    function groupScan(node, attrStart, attrEnd) {
      var nodes = [];
      var depth = 0;
      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
        var startNode = node;
        do {
          if (!node) {
            throw $compileMinErr('uterdir',
                      "Unterminated attribute, found '{0}' but no matching '{1}' found.",
                      attrStart, attrEnd);
          }
          if (node.nodeType == 1 /** Element **/) {
            if (node.hasAttribute(attrStart)) depth++;
            if (node.hasAttribute(attrEnd)) depth--;
          }
          nodes.push(node);
          node = node.nextSibling;
        } while (depth > 0);
      } else {
        nodes.push(node);
      }

      return jqLite(nodes);
    }

    /**
     * Wrapper for linking function which converts normal linking function into a grouped
     * linking function.
     * @param linkFn
     * @param attrStart
     * @param attrEnd
     * @returns {Function}
     */
    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
      return function(scope, element, attrs, controllers, transcludeFn) {
        element = groupScan(element[0], attrStart, attrEnd);
        return linkFn(scope, element, attrs, controllers, transcludeFn);
      };
    }

    /**
     * Once the directives have been collected, their compile functions are executed. This method
     * is responsible for inlining directive templates as well as terminating the application
     * of the directives if the terminal directive has been reached.
     *
     * @param {Array} directives Array of collected directives to execute their compile function.
     *        this needs to be pre-sorted by priority order.
     * @param {Node} compileNode The raw DOM node to apply the compile functions to
     * @param {Object} templateAttrs The shared attribute function
     * @param {function(angular.Scope[, cloneAttachFn]} transcludeFn A linking function, where the
     *                                                  scope argument is auto-generated to the new
     *                                                  child of the transcluded parent scope.
     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
     *                              argument has the root jqLite array so that we can replace nodes
     *                              on it.
     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
     *                                           compiling the transclusion.
     * @param {Array.<Function>} preLinkFns
     * @param {Array.<Function>} postLinkFns
     * @param {Object} previousCompileContext Context used for previous compilation of the current
     *                                        node
     * @returns linkFn
     */
    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,
                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,
                                   previousCompileContext) {
      previousCompileContext = previousCompileContext || {};

      var terminalPriority = -Number.MAX_VALUE,
          newScopeDirective,
          controllerDirectives = previousCompileContext.controllerDirectives,
          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
          templateDirective = previousCompileContext.templateDirective,
          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
          hasTranscludeDirective = false,
          hasElementTranscludeDirective = false,
          $compileNode = templateAttrs.$$element = jqLite(compileNode),
          directive,
          directiveName,
          $template,
          replaceDirective = originalReplaceDirective,
          childTranscludeFn = transcludeFn,
          linkFn,
          directiveValue;

      // executes all directives on the current element
      for(var i = 0, ii = directives.length; i < ii; i++) {
        directive = directives[i];
        var attrStart = directive.$$start;
        var attrEnd = directive.$$end;

        // collect multiblock sections
        if (attrStart) {
          $compileNode = groupScan(compileNode, attrStart, attrEnd);
        }
        $template = undefined;

        if (terminalPriority > directive.priority) {
          break; // prevent further processing of directives
        }

        if (directiveValue = directive.scope) {
          newScopeDirective = newScopeDirective || directive;

          // skip the check for directives with async templates, we'll check the derived sync
          // directive when the template arrives
          if (!directive.templateUrl) {
            assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,
                              $compileNode);
            if (isObject(directiveValue)) {
              newIsolateScopeDirective = directive;
            }
          }
        }

        directiveName = directive.name;

        if (!directive.templateUrl && directive.controller) {
          directiveValue = directive.controller;
          controllerDirectives = controllerDirectives || {};
          assertNoDuplicate("'" + directiveName + "' controller",
              controllerDirectives[directiveName], directive, $compileNode);
          controllerDirectives[directiveName] = directive;
        }

        if (directiveValue = directive.transclude) {
          hasTranscludeDirective = true;

          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
          // This option should only be used by directives that know how to how to safely handle element transclusion,
          // where the transcluded nodes are added or replaced after linking.
          if (!directive.$$tlb) {
            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
            nonTlbTranscludeDirective = directive;
          }

          if (directiveValue == 'element') {
            hasElementTranscludeDirective = true;
            terminalPriority = directive.priority;
            $template = groupScan(compileNode, attrStart, attrEnd);
            $compileNode = templateAttrs.$$element =
                jqLite(document.createComment(' ' + directiveName + ': ' +
                                              templateAttrs[directiveName] + ' '));
            compileNode = $compileNode[0];
            replaceWith(jqCollection, jqLite(sliceArgs($template)), compileNode);

            childTranscludeFn = compile($template, transcludeFn, terminalPriority,
                                        replaceDirective && replaceDirective.name, {
                                          // Don't pass in:
                                          // - controllerDirectives - otherwise we'll create duplicates controllers
                                          // - newIsolateScopeDirective or templateDirective - combining templates with
                                          //   element transclusion doesn't make sense.
                                          //
                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
                                          // on the same element more than once.
                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective
                                        });
          } else {
            $template = jqLite(jqLiteClone(compileNode)).contents();
            $compileNode.empty(); // clear contents
            childTranscludeFn = compile($template, transcludeFn);
          }
        }

        if (directive.template) {
          assertNoDuplicate('template', templateDirective, directive, $compileNode);
          templateDirective = directive;

          directiveValue = (isFunction(directive.template))
              ? directive.template($compileNode, templateAttrs)
              : directive.template;

          directiveValue = denormalizeTemplate(directiveValue);

          if (directive.replace) {
            replaceDirective = directive;
            $template = jqLite('<div>' +
                                 trim(directiveValue) +
                               '</div>').contents();
            compileNode = $template[0];

            if ($template.length != 1 || compileNode.nodeType !== 1) {
              throw $compileMinErr('tplrt',
                  "Template for directive '{0}' must have exactly one root element. {1}",
                  directiveName, '');
            }

            replaceWith(jqCollection, $compileNode, compileNode);

            var newTemplateAttrs = {$attr: {}};

            // combine directives from the original node and from the template:
            // - take the array of directives for this element
            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
            // - collect directives from the template and sort them by priority
            // - combine directives as: processed + template + unprocessed
            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));

            if (newIsolateScopeDirective) {
              markDirectivesAsIsolate(templateDirectives);
            }
            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);

            ii = directives.length;
          } else {
            $compileNode.html(directiveValue);
          }
        }

        if (directive.templateUrl) {
          assertNoDuplicate('template', templateDirective, directive, $compileNode);
          templateDirective = directive;

          if (directive.replace) {
            replaceDirective = directive;
          }

          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,
              templateAttrs, jqCollection, childTranscludeFn, preLinkFns, postLinkFns, {
                controllerDirectives: controllerDirectives,
                newIsolateScopeDirective: newIsolateScopeDirective,
                templateDirective: templateDirective,
                nonTlbTranscludeDirective: nonTlbTranscludeDirective
              });
          ii = directives.length;
        } else if (directive.compile) {
          try {
            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
            if (isFunction(linkFn)) {
              addLinkFns(null, linkFn, attrStart, attrEnd);
            } else if (linkFn) {
              addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
            }
          } catch (e) {
            $exceptionHandler(e, startingTag($compileNode));
          }
        }

        if (directive.terminal) {
          nodeLinkFn.terminal = true;
          terminalPriority = Math.max(terminalPriority, directive.priority);
        }

      }

      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
      nodeLinkFn.transclude = hasTranscludeDirective && childTranscludeFn;

      // might be normal or delayed nodeLinkFn depending on if templateUrl is present
      return nodeLinkFn;

      ////////////////////

      function addLinkFns(pre, post, attrStart, attrEnd) {
        if (pre) {
          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
          pre.require = directive.require;
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
            pre = cloneAndAnnotateFn(pre, {isolateScope: true});
          }
          preLinkFns.push(pre);
        }
        if (post) {
          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
          post.require = directive.require;
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
            post = cloneAndAnnotateFn(post, {isolateScope: true});
          }
          postLinkFns.push(post);
        }
      }


      function getControllers(require, $element, elementControllers) {
        var value, retrievalMethod = 'data', optional = false;
        if (isString(require)) {
          while((value = require.charAt(0)) == '^' || value == '?') {
            require = require.substr(1);
            if (value == '^') {
              retrievalMethod = 'inheritedData';
            }
            optional = optional || value == '?';
          }
          value = null;

          if (elementControllers && retrievalMethod === 'data') {
            value = elementControllers[require];
          }
          value = value || $element[retrievalMethod]('$' + require + 'Controller');

          if (!value && !optional) {
            throw $compileMinErr('ctreq',
                "Controller '{0}', required by directive '{1}', can't be found!",
                require, directiveName);
          }
          return value;
        } else if (isArray(require)) {
          value = [];
          forEach(require, function(require) {
            value.push(getControllers(require, $element, elementControllers));
          });
        }
        return value;
      }


      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
        var attrs, $element, i, ii, linkFn, controller, isolateScope, elementControllers = {}, transcludeFn;

        if (compileNode === linkNode) {
          attrs = templateAttrs;
        } else {
          attrs = shallowCopy(templateAttrs, new Attributes(jqLite(linkNode), templateAttrs.$attr));
        }
        $element = attrs.$$element;

        if (newIsolateScopeDirective) {
          var LOCAL_REGEXP = /^\s*([@=&])(\??)\s*(\w*)\s*$/;
          var $linkNode = jqLite(linkNode);

          isolateScope = scope.$new(true);

          if (templateDirective && (templateDirective === newIsolateScopeDirective.$$originalDirective)) {
            $linkNode.data('$isolateScope', isolateScope) ;
          } else {
            $linkNode.data('$isolateScopeNoTemplate', isolateScope);
          }



          safeAddClass($linkNode, 'ng-isolate-scope');

          forEach(newIsolateScopeDirective.scope, function(definition, scopeName) {
            var match = definition.match(LOCAL_REGEXP) || [],
                attrName = match[3] || scopeName,
                optional = (match[2] == '?'),
                mode = match[1], // @, =, or &
                lastValue,
                parentGet, parentSet, compare;

            isolateScope.$$isolateBindings[scopeName] = mode + attrName;

            switch (mode) {

              case '@':
                attrs.$observe(attrName, function(value) {
                  isolateScope[scopeName] = value;
                });
                attrs.$$observers[attrName].$$scope = scope;
                if( attrs[attrName] ) {
                  // If the attribute has been provided then we trigger an interpolation to ensure
                  // the value is there for use in the link fn
                  isolateScope[scopeName] = $interpolate(attrs[attrName])(scope);
                }
                break;

              case '=':
                if (optional && !attrs[attrName]) {
                  return;
                }
                parentGet = $parse(attrs[attrName]);
                if (parentGet.literal) {
                  compare = equals;
                } else {
                  compare = function(a,b) { return a === b; };
                }
                parentSet = parentGet.assign || function() {
                  // reset the change, or we will throw this exception on every $digest
                  lastValue = isolateScope[scopeName] = parentGet(scope);
                  throw $compileMinErr('nonassign',
                      "Expression '{0}' used with directive '{1}' is non-assignable!",
                      attrs[attrName], newIsolateScopeDirective.name);
                };
                lastValue = isolateScope[scopeName] = parentGet(scope);
                isolateScope.$watch(function parentValueWatch() {
                  var parentValue = parentGet(scope);
                  if (!compare(parentValue, isolateScope[scopeName])) {
                    // we are out of sync and need to copy
                    if (!compare(parentValue, lastValue)) {
                      // parent changed and it has precedence
                      isolateScope[scopeName] = parentValue;
                    } else {
                      // if the parent can be assigned then do so
                      parentSet(scope, parentValue = isolateScope[scopeName]);
                    }
                  }
                  return lastValue = parentValue;
                }, null, parentGet.literal);
                break;

              case '&':
                parentGet = $parse(attrs[attrName]);
                isolateScope[scopeName] = function(locals) {
                  return parentGet(scope, locals);
                };
                break;

              default:
                throw $compileMinErr('iscp',
                    "Invalid isolate scope definition for directive '{0}'." +
                    " Definition: {... {1}: '{2}' ...}",
                    newIsolateScopeDirective.name, scopeName, definition);
            }
          });
        }
        transcludeFn = boundTranscludeFn && controllersBoundTransclude;
        if (controllerDirectives) {
          forEach(controllerDirectives, function(directive) {
            var locals = {
              $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
              $element: $element,
              $attrs: attrs,
              $transclude: transcludeFn
            }, controllerInstance;

            controller = directive.controller;
            if (controller == '@') {
              controller = attrs[directive.name];
            }

            controllerInstance = $controller(controller, locals);
            // For directives with element transclusion the element is a comment,
            // but jQuery .data doesn't support attaching data to comment nodes as it's hard to
            // clean up (http://bugs.jquery.com/ticket/8335).
            // Instead, we save the controllers for the element in a local hash and attach to .data
            // later, once we have the actual element.
            elementControllers[directive.name] = controllerInstance;
            if (!hasElementTranscludeDirective) {
              $element.data('$' + directive.name + 'Controller', controllerInstance);
            }

            if (directive.controllerAs) {
              locals.$scope[directive.controllerAs] = controllerInstance;
            }
          });
        }

        // PRELINKING
        for(i = 0, ii = preLinkFns.length; i < ii; i++) {
          try {
            linkFn = preLinkFns[i];
            linkFn(linkFn.isolateScope ? isolateScope : scope, $element, attrs,
                linkFn.require && getControllers(linkFn.require, $element, elementControllers), transcludeFn);
          } catch (e) {
            $exceptionHandler(e, startingTag($element));
          }
        }

        // RECURSION
        // We only pass the isolate scope, if the isolate directive has a template,
        // otherwise the child elements do not belong to the isolate directive.
        var scopeToChild = scope;
        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
          scopeToChild = isolateScope;
        }
        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);

        // POSTLINKING
        for(i = postLinkFns.length - 1; i >= 0; i--) {
          try {
            linkFn = postLinkFns[i];
            linkFn(linkFn.isolateScope ? isolateScope : scope, $element, attrs,
                linkFn.require && getControllers(linkFn.require, $element, elementControllers), transcludeFn);
          } catch (e) {
            $exceptionHandler(e, startingTag($element));
          }
        }

        // This is the function that is injected as `$transclude`.
        function controllersBoundTransclude(scope, cloneAttachFn) {
          var transcludeControllers;

          // no scope passed
          if (arguments.length < 2) {
            cloneAttachFn = scope;
            scope = undefined;
          }

          if (hasElementTranscludeDirective) {
            transcludeControllers = elementControllers;
          }

          return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers);
        }
      }
    }

    function markDirectivesAsIsolate(directives) {
      // mark all directives as needing isolate scope.
      for (var j = 0, jj = directives.length; j < jj; j++) {
        directives[j] = inherit(directives[j], {$$isolateScope: true});
      }
    }

    /**
     * looks up the directive and decorates it with exception handling and proper parameters. We
     * call this the boundDirective.
     *
     * @param {string} name name of the directive to look up.
     * @param {string} location The directive must be found in specific format.
     *   String containing any of theses characters:
     *
     *   * `E`: element name
     *   * `A': attribute
     *   * `C`: class
     *   * `M`: comment
     * @returns true if directive was added.
     */
    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,
                          endAttrName) {
      if (name === ignoreDirective) return null;
      var match = null;
      if (hasDirectives.hasOwnProperty(name)) {
        for(var directive, directives = $injector.get(name + Suffix),
            i = 0, ii = directives.length; i<ii; i++) {
          try {
            directive = directives[i];
            if ( (maxPriority === undefined || maxPriority > directive.priority) &&
                 directive.restrict.indexOf(location) != -1) {
              if (startAttrName) {
                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});
              }
              tDirectives.push(directive);
              match = directive;
            }
          } catch(e) { $exceptionHandler(e); }
        }
      }
      return match;
    }


    /**
     * When the element is replaced with HTML template then the new attributes
     * on the template need to be merged with the existing attributes in the DOM.
     * The desired effect is to have both of the attributes present.
     *
     * @param {object} dst destination attributes (original DOM)
     * @param {object} src source attributes (from the directive template)
     */
    function mergeTemplateAttributes(dst, src) {
      var srcAttr = src.$attr,
          dstAttr = dst.$attr,
          $element = dst.$$element;

      // reapply the old attributes to the new element
      forEach(dst, function(value, key) {
        if (key.charAt(0) != '$') {
          if (src[key]) {
            value += (key === 'style' ? ';' : ' ') + src[key];
          }
          dst.$set(key, value, true, srcAttr[key]);
        }
      });

      // copy the new attributes on the old attrs object
      forEach(src, function(value, key) {
        if (key == 'class') {
          safeAddClass($element, value);
          dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
        } else if (key == 'style') {
          $element.attr('style', $element.attr('style') + ';' + value);
          dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;
          // `dst` will never contain hasOwnProperty as DOM parser won't let it.
          // You will get an "InvalidCharacterError: DOM Exception 5" error if you
          // have an attribute like "has-own-property" or "data-has-own-property", etc.
        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
          dst[key] = value;
          dstAttr[key] = srcAttr[key];
        }
      });
    }


    function compileTemplateUrl(directives, $compileNode, tAttrs,
        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
      var linkQueue = [],
          afterTemplateNodeLinkFn,
          afterTemplateChildLinkFn,
          beforeTemplateCompileNode = $compileNode[0],
          origAsyncDirective = directives.shift(),
          // The fact that we have to copy and patch the directive seems wrong!
          derivedSyncDirective = extend({}, origAsyncDirective, {
            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective
          }),
          templateUrl = (isFunction(origAsyncDirective.templateUrl))
              ? origAsyncDirective.templateUrl($compileNode, tAttrs)
              : origAsyncDirective.templateUrl;

      $compileNode.empty();

      $http.get($sce.getTrustedResourceUrl(templateUrl), {cache: $templateCache}).
        success(function(content) {
          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;

          content = denormalizeTemplate(content);

          if (origAsyncDirective.replace) {
            $template = jqLite('<div>' + trim(content) + '</div>').contents();
            compileNode = $template[0];

            if ($template.length != 1 || compileNode.nodeType !== 1) {
              throw $compileMinErr('tplrt',
                  "Template for directive '{0}' must have exactly one root element. {1}",
                  origAsyncDirective.name, templateUrl);
            }

            tempTemplateAttrs = {$attr: {}};
            replaceWith($rootElement, $compileNode, compileNode);
            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);

            if (isObject(origAsyncDirective.scope)) {
              markDirectivesAsIsolate(templateDirectives);
            }
            directives = templateDirectives.concat(directives);
            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
          } else {
            compileNode = beforeTemplateCompileNode;
            $compileNode.html(content);
          }

          directives.unshift(derivedSyncDirective);

          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,
              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,
              previousCompileContext);
          forEach($rootElement, function(node, i) {
            if (node == compileNode) {
              $rootElement[i] = $compileNode[0];
            }
          });
          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);


          while(linkQueue.length) {
            var scope = linkQueue.shift(),
                beforeTemplateLinkNode = linkQueue.shift(),
                linkRootElement = linkQueue.shift(),
                boundTranscludeFn = linkQueue.shift(),
                linkNode = $compileNode[0];

            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
              // it was cloned therefore we have to clone as well.
              linkNode = jqLiteClone(compileNode);
              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);
            }
            if (afterTemplateNodeLinkFn.transclude) {
              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude);
            } else {
              childBoundTranscludeFn = boundTranscludeFn;
            }
            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,
              childBoundTranscludeFn);
          }
          linkQueue = null;
        }).
        error(function(response, code, headers, config) {
          throw $compileMinErr('tpload', 'Failed to load template: {0}', config.url);
        });

      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
        if (linkQueue) {
          linkQueue.push(scope);
          linkQueue.push(node);
          linkQueue.push(rootElement);
          linkQueue.push(boundTranscludeFn);
        } else {
          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, boundTranscludeFn);
        }
      };
    }


    /**
     * Sorting function for bound directives.
     */
    function byPriority(a, b) {
      var diff = b.priority - a.priority;
      if (diff !== 0) return diff;
      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;
      return a.index - b.index;
    }


    function assertNoDuplicate(what, previousDirective, directive, element) {
      if (previousDirective) {
        throw $compileMinErr('multidir', 'Multiple directives [{0}, {1}] asking for {2} on: {3}',
            previousDirective.name, directive.name, what, startingTag(element));
      }
    }


    function addTextInterpolateDirective(directives, text) {
      var interpolateFn = $interpolate(text, true);
      if (interpolateFn) {
        directives.push({
          priority: 0,
          compile: valueFn(function textInterpolateLinkFn(scope, node) {
            var parent = node.parent(),
                bindings = parent.data('$binding') || [];
            bindings.push(interpolateFn);
            safeAddClass(parent.data('$binding', bindings), 'ng-binding');
            scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
              node[0].nodeValue = value;
            });
          })
        });
      }
    }


    function getTrustedContext(node, attrNormalizedName) {
      if (attrNormalizedName == "srcdoc") {
        return $sce.HTML;
      }
      var tag = nodeName_(node);
      // maction[xlink:href] can source SVG.  It's not limited to <maction>.
      if (attrNormalizedName == "xlinkHref" ||
          (tag == "FORM" && attrNormalizedName == "action") ||
          (tag != "IMG" && (attrNormalizedName == "src" ||
                            attrNormalizedName == "ngSrc"))) {
        return $sce.RESOURCE_URL;
      }
    }


    function addAttrInterpolateDirective(node, directives, value, name) {
      var interpolateFn = $interpolate(value, true);

      // no interpolation found -> ignore
      if (!interpolateFn) return;


      if (name === "multiple" && nodeName_(node) === "SELECT") {
        throw $compileMinErr("selmulti",
            "Binding to the 'multiple' attribute is not supported. Element: {0}",
            startingTag(node));
      }

      directives.push({
        priority: 100,
        compile: function() {
            return {
              pre: function attrInterpolatePreLinkFn(scope, element, attr) {
                var $$observers = (attr.$$observers || (attr.$$observers = {}));

                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
                  throw $compileMinErr('nodomevents',
                      "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +
                          "ng- versions (such as ng-click instead of onclick) instead.");
                }

                // we need to interpolate again, in case the attribute value has been updated
                // (e.g. by another directive's compile function)
                interpolateFn = $interpolate(attr[name], true, getTrustedContext(node, name));

                // if attribute was updated so that there is no interpolation going on we don't want to
                // register any observers
                if (!interpolateFn) return;

                // TODO(i): this should likely be attr.$set(name, iterpolateFn(scope) so that we reset the
                // actual attr value
                attr[name] = interpolateFn(scope);
                ($$observers[name] || ($$observers[name] = [])).$$inter = true;
                (attr.$$observers && attr.$$observers[name].$$scope || scope).
                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
                    //special case for class attribute addition + removal
                    //so that class changes can tap into the animation
                    //hooks provided by the $animate service. Be sure to
                    //skip animations when the first digest occurs (when
                    //both the new and the old values are the same) since
                    //the CSS classes are the non-interpolated values
                    if(name === 'class' && newValue != oldValue) {
                      attr.$updateClass(newValue, oldValue);
                    } else {
                      attr.$set(name, newValue);
                    }
                  });
              }
            };
          }
      });
    }


    /**
     * This is a special jqLite.replaceWith, which can replace items which
     * have no parents, provided that the containing jqLite collection is provided.
     *
     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
     *                               in the root of the tree.
     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
     *                                  the shell, but replace its DOM node reference.
     * @param {Node} newNode The new DOM node.
     */
    function replaceWith($rootElement, elementsToRemove, newNode) {
      var firstElementToRemove = elementsToRemove[0],
          removeCount = elementsToRemove.length,
          parent = firstElementToRemove.parentNode,
          i, ii;

      if ($rootElement) {
        for(i = 0, ii = $rootElement.length; i < ii; i++) {
          if ($rootElement[i] == firstElementToRemove) {
            $rootElement[i++] = newNode;
            for (var j = i, j2 = j + removeCount - 1,
                     jj = $rootElement.length;
                 j < jj; j++, j2++) {
              if (j2 < jj) {
                $rootElement[j] = $rootElement[j2];
              } else {
                delete $rootElement[j];
              }
            }
            $rootElement.length -= removeCount - 1;
            break;
          }
        }
      }

      if (parent) {
        parent.replaceChild(newNode, firstElementToRemove);
      }
      var fragment = document.createDocumentFragment();
      fragment.appendChild(firstElementToRemove);
      newNode[jqLite.expando] = firstElementToRemove[jqLite.expando];
      for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {
        var element = elementsToRemove[k];
        jqLite(element).remove(); // must do this way to clean up expando
        fragment.appendChild(element);
        delete elementsToRemove[k];
      }

      elementsToRemove[0] = newNode;
      elementsToRemove.length = 1;
    }


    function cloneAndAnnotateFn(fn, annotation) {
      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);
    }
  }];
}

var PREFIX_REGEXP = /^(x[\:\-_]|data[\:\-_])/i;
/**
 * Converts all accepted directives format into proper directive name.
 * All of these will become 'myDirective':
 *   my:Directive
 *   my-directive
 *   x-my-directive
 *   data-my:directive
 *
 * Also there is special case for Moz prefix starting with upper case letter.
 * @param name Name to normalize
 */
function directiveNormalize(name) {
  return camelCase(name.replace(PREFIX_REGEXP, ''));
}

/**
 * @ngdoc object
 * @name ng.$compile.directive.Attributes
 *
 * @description
 * A shared object between directive compile / linking functions which contains normalized DOM
 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
 * needed since all of these are treated as equivalent in Angular:
 *
 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
 */

/**
 * @ngdoc property
 * @name ng.$compile.directive.Attributes#$attr
 * @propertyOf ng.$compile.directive.Attributes
 * @returns {object} A map of DOM element attribute names to the normalized name. This is
 *                   needed to do reverse lookup from normalized name back to actual name.
 */


/**
 * @ngdoc function
 * @name ng.$compile.directive.Attributes#$set
 * @methodOf ng.$compile.directive.Attributes
 * @function
 *
 * @description
 * Set DOM element attribute value.
 *
 *
 * @param {string} name Normalized element attribute name of the property to modify. The name is
 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
 *          property to the original name.
 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
 */



/**
 * Closure compiler type information
 */

function nodesetLinkingFn(
  /* angular.Scope */ scope,
  /* NodeList */ nodeList,
  /* Element */ rootElement,
  /* function(Function) */ boundTranscludeFn
){}

function directiveLinkingFn(
  /* nodesetLinkingFn */ nodesetLinkingFn,
  /* angular.Scope */ scope,
  /* Node */ node,
  /* Element */ rootElement,
  /* function(Function) */ boundTranscludeFn
){}

function tokenDifference(str1, str2) {
  var values = '',
      tokens1 = str1.split(/\s+/),
      tokens2 = str2.split(/\s+/);

  outer:
  for(var i = 0; i < tokens1.length; i++) {
    var token = tokens1[i];
    for(var j = 0; j < tokens2.length; j++) {
      if(token == tokens2[j]) continue outer;
    }
    values += (values.length > 0 ? ' ' : '') + token;
  }
  return values;
}

/**
 * @ngdoc object
 * @name ng.$controllerProvider
 * @description
 * The {@link ng.$controller $controller service} is used by Angular to create new
 * controllers.
 *
 * This provider allows controller registration via the
 * {@link ng.$controllerProvider#methods_register register} method.
 */
function $ControllerProvider() {
  var controllers = {},
      CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;


  /**
   * @ngdoc function
   * @name ng.$controllerProvider#register
   * @methodOf ng.$controllerProvider
   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
   *    the names and the values are the constructors.
   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
   *    annotations in the array notation).
   */
  this.register = function(name, constructor) {
    assertNotHasOwnProperty(name, 'controller');
    if (isObject(name)) {
      extend(controllers, name);
    } else {
      controllers[name] = constructor;
    }
  };


  this.$get = ['$injector', '$window', function($injector, $window) {

    /**
     * @ngdoc function
     * @name ng.$controller
     * @requires $injector
     *
     * @param {Function|string} constructor If called with a function then it's considered to be the
     *    controller constructor function. Otherwise it's considered to be a string which is used
     *    to retrieve the controller constructor using the following steps:
     *
     *    * check if a controller with given name is registered via `$controllerProvider`
     *    * check if evaluating the string on the current scope returns a constructor
     *    * check `window[constructor]` on the global `window` object
     *
     * @param {Object} locals Injection locals for Controller.
     * @return {Object} Instance of given controller.
     *
     * @description
     * `$controller` service is responsible for instantiating controllers.
     *
     * It's just a simple call to {@link AUTO.$injector $injector}, but extracted into
     * a service, so that one can override this service with {@link https://gist.github.com/1649788
     * BC version}.
     */
    return function(expression, locals) {
      var instance, match, constructor, identifier;

      if(isString(expression)) {
        match = expression.match(CNTRL_REG),
        constructor = match[1],
        identifier = match[3];
        expression = controllers.hasOwnProperty(constructor)
            ? controllers[constructor]
            : getter(locals.$scope, constructor, true) || getter($window, constructor, true);

        assertArgFn(expression, constructor, true);
      }

      instance = $injector.instantiate(expression, locals);

      if (identifier) {
        if (!(locals && typeof locals.$scope == 'object')) {
          throw minErr('$controller')('noscp',
              "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",
              constructor || expression.name, identifier);
        }

        locals.$scope[identifier] = instance;
      }

      return instance;
    };
  }];
}

/**
 * @ngdoc object
 * @name ng.$document
 * @requires $window
 *
 * @description
 * A {@link angular.element jQuery (lite)}-wrapped reference to the browser's `window.document`
 * element.
 */
function $DocumentProvider(){
  this.$get = ['$window', function(window){
    return jqLite(window.document);
  }];
}

/**
 * @ngdoc function
 * @name ng.$exceptionHandler
 * @requires $log
 *
 * @description
 * Any uncaught exception in angular expressions is delegated to this service.
 * The default implementation simply delegates to `$log.error` which logs it into
 * the browser console.
 * 
 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
 *
 * ## Example:
 * 
 * <pre>
 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function () {
 *     return function (exception, cause) {
 *       exception.message += ' (caused by "' + cause + '")';
 *       throw exception;
 *     };
 *   });
 * </pre>
 * 
 * This example will override the normal action of `$exceptionHandler`, to make angular
 * exceptions fail hard when they happen, instead of just logging to the console.
 *
 * @param {Error} exception Exception associated with the error.
 * @param {string=} cause optional information about the context in which
 *       the error was thrown.
 *
 */
function $ExceptionHandlerProvider() {
  this.$get = ['$log', function($log) {
    return function(exception, cause) {
      $log.error.apply($log, arguments);
    };
  }];
}

/**
 * Parse headers into key value object
 *
 * @param {string} headers Raw headers as a string
 * @returns {Object} Parsed headers as key value object
 */
function parseHeaders(headers) {
  var parsed = {}, key, val, i;

  if (!headers) return parsed;

  forEach(headers.split('\n'), function(line) {
    i = line.indexOf(':');
    key = lowercase(trim(line.substr(0, i)));
    val = trim(line.substr(i + 1));

    if (key) {
      if (parsed[key]) {
        parsed[key] += ', ' + val;
      } else {
        parsed[key] = val;
      }
    }
  });

  return parsed;
}


/**
 * Returns a function that provides access to parsed headers.
 *
 * Headers are lazy parsed when first requested.
 * @see parseHeaders
 *
 * @param {(string|Object)} headers Headers to provide access to.
 * @returns {function(string=)} Returns a getter function which if called with:
 *
 *   - if called with single an argument returns a single header value or null
 *   - if called with no arguments returns an object containing all headers.
 */
function headersGetter(headers) {
  var headersObj = isObject(headers) ? headers : undefined;

  return function(name) {
    if (!headersObj) headersObj =  parseHeaders(headers);

    if (name) {
      return headersObj[lowercase(name)] || null;
    }

    return headersObj;
  };
}


/**
 * Chain all given functions
 *
 * This function is used for both request and response transforming
 *
 * @param {*} data Data to transform.
 * @param {function(string=)} headers Http headers getter fn.
 * @param {(function|Array.<function>)} fns Function or an array of functions.
 * @returns {*} Transformed data.
 */
function transformData(data, headers, fns) {
  if (isFunction(fns))
    return fns(data, headers);

  forEach(fns, function(fn) {
    data = fn(data, headers);
  });

  return data;
}


function isSuccess(status) {
  return 200 <= status && status < 300;
}


function $HttpProvider() {
  var JSON_START = /^\s*(\[|\{[^\{])/,
      JSON_END = /[\}\]]\s*$/,
      PROTECTION_PREFIX = /^\)\]\}',?\n/,
      CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': 'application/json;charset=utf-8'};

  var defaults = this.defaults = {
    // transform incoming response data
    transformResponse: [function(data) {
      if (isString(data)) {
        // strip json vulnerability protection prefix
        data = data.replace(PROTECTION_PREFIX, '');
        if (JSON_START.test(data) && JSON_END.test(data))
          data = fromJson(data);
      }
      return data;
    }],

    // transform outgoing request data
    transformRequest: [function(d) {
      return isObject(d) && !isFile(d) ? toJson(d) : d;
    }],

    // default headers
    headers: {
      common: {
        'Accept': 'application/json, text/plain, */*'
      },
      post:   CONTENT_TYPE_APPLICATION_JSON,
      put:    CONTENT_TYPE_APPLICATION_JSON,
      patch:  CONTENT_TYPE_APPLICATION_JSON
    },

    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN'
  };

  /**
   * Are ordered by request, i.e. they are applied in the same order as the
   * array, on request, but reverse order, on response.
   */
  var interceptorFactories = this.interceptors = [];

  /**
   * For historical reasons, response interceptors are ordered by the order in which
   * they are applied to the response. (This is the opposite of interceptorFactories)
   */
  var responseInterceptorFactories = this.responseInterceptors = [];

  this.$get = ['$httpBackend', '$browser', '$cacheFactory', '$rootScope', '$q', '$injector',
      function($httpBackend, $browser, $cacheFactory, $rootScope, $q, $injector) {

    var defaultCache = $cacheFactory('$http');

    /**
     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
     * The reversal is needed so that we can build up the interception chain around the
     * server request.
     */
    var reversedInterceptors = [];

    forEach(interceptorFactories, function(interceptorFactory) {
      reversedInterceptors.unshift(isString(interceptorFactory)
          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
    });

    forEach(responseInterceptorFactories, function(interceptorFactory, index) {
      var responseFn = isString(interceptorFactory)
          ? $injector.get(interceptorFactory)
          : $injector.invoke(interceptorFactory);

      /**
       * Response interceptors go before "around" interceptors (no real reason, just
       * had to pick one.) But they are already reversed, so we can't use unshift, hence
       * the splice.
       */
      reversedInterceptors.splice(index, 0, {
        response: function(response) {
          return responseFn($q.when(response));
        },
        responseError: function(response) {
          return responseFn($q.reject(response));
        }
      });
    });


    /**
     * @ngdoc function
     * @name ng.$http
     * @requires $httpBackend
     * @requires $browser
     * @requires $cacheFactory
     * @requires $rootScope
     * @requires $q
     * @requires $injector
     *
     * @description
     * The `$http` service is a core Angular service that facilitates communication with the remote
     * HTTP servers via the browser's {@link https://developer.mozilla.org/en/xmlhttprequest
     * XMLHttpRequest} object or via {@link http://en.wikipedia.org/wiki/JSONP JSONP}.
     *
     * For unit testing applications that use `$http` service, see
     * {@link ngMock.$httpBackend $httpBackend mock}.
     *
     * For a higher level of abstraction, please check out the {@link ngResource.$resource
     * $resource} service.
     *
     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
     * it is important to familiarize yourself with these APIs and the guarantees they provide.
     *
     *
     * # General usage
     * The `$http` service is a function which takes a single argument — a configuration object —
     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}
     * with two $http specific methods: `success` and `error`.
     *
     * <pre>
     *   $http({method: 'GET', url: '/someUrl'}).
     *     success(function(data, status, headers, config) {
     *       // this callback will be called asynchronously
     *       // when the response is available
     *     }).
     *     error(function(data, status, headers, config) {
     *       // called asynchronously if an error occurs
     *       // or server returns response with an error status.
     *     });
     * </pre>
     *
     * Since the returned value of calling the $http function is a `promise`, you can also use
     * the `then` method to register callbacks, and these callbacks will receive a single argument –
     * an object representing the response. See the API signature and type info below for more
     * details.
     *
     * A response status code between 200 and 299 is considered a success status and
     * will result in the success callback being called. Note that if the response is a redirect,
     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
     * called for such responses.
     *
     * # Calling $http from outside AngularJS
     * The `$http` service will not actually send the request until the next `$digest()` is
     * executed. Normally this is not an issue, since almost all the time your call to `$http` will
     * be from within a `$apply()` block.
     * If you are calling `$http` from outside Angular, then you should wrap it in a call to
     * `$apply` to cause a $digest to occur and also to handle errors in the block correctly.
     *
     * ```
     * $scope.$apply(function() {
     *   $http(...);
     * });
     * ```
     *
     * # Writing Unit Tests that use $http
     * When unit testing you are mostly responsible for scheduling the `$digest` cycle. If you do
     * not trigger a `$digest` before calling `$httpBackend.flush()` then the request will not have
     * been made and `$httpBackend.expect(...)` expectations will fail.  The solution is to run the
     * code that calls the `$http()` method inside a $apply block as explained in the previous
     * section.
     *
     * ```
     * $httpBackend.expectGET(...);
     * $scope.$apply(function() {
     *   $http.get(...);
     * });
     * $httpBackend.flush();
     * ```
     *
     * # Shortcut methods
     *
     * Since all invocations of the $http service require passing in an HTTP method and URL, and
     * POST/PUT requests require request data to be provided as well, shortcut methods
     * were created:
     *
     * <pre>
     *   $http.get('/someUrl').success(successCallback);
     *   $http.post('/someUrl', data).success(successCallback);
     * </pre>
     *
     * Complete list of shortcut methods:
     *
     * - {@link ng.$http#methods_get $http.get}
     * - {@link ng.$http#methods_head $http.head}
     * - {@link ng.$http#methods_post $http.post}
     * - {@link ng.$http#methods_put $http.put}
     * - {@link ng.$http#methods_delete $http.delete}
     * - {@link ng.$http#methods_jsonp $http.jsonp}
     *
     *
     * # Setting HTTP Headers
     *
     * The $http service will automatically add certain HTTP headers to all requests. These defaults
     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
     * object, which currently contains this default configuration:
     *
     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
     *   - `Accept: application/json, text/plain, * / *`
     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
     *   - `Content-Type: application/json`
     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
     *   - `Content-Type: application/json`
     *
     * To add or overwrite these defaults, simply add or remove a property from these configuration
     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
     * with the lowercased HTTP method name as the key, e.g.
     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }.
     *
     * The defaults can also be set at runtime via the `$http.defaults` object in the same
     * fashion. For example:
     *
     * ```
     * module.run(function($http) {
     *   $http.defaults.headers.common.Authentication = 'Basic YmVlcDpib29w'
     * });
     * ```
     *
     * In addition, you can supply a `headers` property in the config object passed when
     * calling `$http(config)`, which overrides the defaults without changing them globally.
     *
     *
     * # Transforming Requests and Responses
     *
     * Both requests and responses can be transformed using transform functions. By default, Angular
     * applies these transformations:
     *
     * Request transformations:
     *
     * - If the `data` property of the request configuration object contains an object, serialize it
     *   into JSON format.
     *
     * Response transformations:
     *
     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
     *  - If JSON response is detected, deserialize it using a JSON parser.
     *
     * To globally augment or override the default transforms, modify the
     * `$httpProvider.defaults.transformRequest` and `$httpProvider.defaults.transformResponse`
     * properties. These properties are by default an array of transform functions, which allows you
     * to `push` or `unshift` a new transformation function into the transformation chain. You can
     * also decide to completely override any default transformations by assigning your
     * transformation functions to these properties directly without the array wrapper.  These defaults
     * are again available on the $http factory at run-time, which may be useful if you have run-time 
     * services you wish to be involved in your transformations.
     *
     * Similarly, to locally override the request/response transforms, augment the
     * `transformRequest` and/or `transformResponse` properties of the configuration object passed
     * into `$http`.
     *
     *
     * # Caching
     *
     * To enable caching, set the request configuration `cache` property to `true` (to use default
     * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).
     * When the cache is enabled, `$http` stores the response from the server in the specified
     * cache. The next time the same request is made, the response is served from the cache without
     * sending a request to the server.
     *
     * Note that even if the response is served from cache, delivery of the data is asynchronous in
     * the same way that real requests are.
     *
     * If there are multiple GET requests for the same URL that should be cached using the same
     * cache, but the cache is not populated yet, only one request to the server will be made and
     * the remaining requests will be fulfilled using the response from the first request.
     *
     * You can change the default cache to a new object (built with
     * {@link ng.$cacheFactory `$cacheFactory`}) by updating the
     * {@link ng.$http#properties_defaults `$http.defaults.cache`} property. All requests who set
     * their `cache` property to `true` will now use this cache object.
     *
     * If you set the default cache to `false` then only requests that specify their own custom
     * cache object will be cached.
     *
     * # Interceptors
     *
     * Before you start creating interceptors, be sure to understand the
     * {@link ng.$q $q and deferred/promise APIs}.
     *
     * For purposes of global error handling, authentication, or any kind of synchronous or
     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
     * able to intercept requests before they are handed to the server and
     * responses before they are handed over to the application code that
     * initiated these requests. The interceptors leverage the {@link ng.$q
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
     *
     * The interceptors are service factories that are registered with the `$httpProvider` by
     * adding them to the `$httpProvider.interceptors` array. The factory is called and
     * injected with dependencies (if specified) and returns the interceptor.
     *
     * There are two kinds of interceptors (and two kinds of rejection interceptors):
     *
     *   * `request`: interceptors get called with http `config` object. The function is free to
     *     modify the `config` or create a new one. The function needs to return the `config`
     *     directly or as a promise.
     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *   * `response`: interceptors get called with http `response` object. The function is free to
     *     modify the `response` or create a new one. The function needs to return the `response`
     *     directly or as a promise.
     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *
     *
     * <pre>
     *   // register the interceptor as a service
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return {
     *       // optional method
     *       'request': function(config) {
     *         // do something on success
     *         return config || $q.when(config);
     *       },
     *
     *       // optional method
     *      'requestError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       },
     *
     *
     *
     *       // optional method
     *       'response': function(response) {
     *         // do something on success
     *         return response || $q.when(response);
     *       },
     *
     *       // optional method
     *      'responseError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       }
     *     };
     *   });
     *
     *   $httpProvider.interceptors.push('myHttpInterceptor');
     *
     *
     *   // alternatively, register the interceptor via an anonymous factory
     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
     *     return {
     *      'request': function(config) {
     *          // same as above
     *       },
     *
     *       'response': function(response) {
     *          // same as above
     *       }
     *     };
     *   });
     * </pre>
     *
     * # Response interceptors (DEPRECATED)
     *
     * Before you start creating interceptors, be sure to understand the
     * {@link ng.$q $q and deferred/promise APIs}.
     *
     * For purposes of global error handling, authentication or any kind of synchronous or
     * asynchronous preprocessing of received responses, it is desirable to be able to intercept
     * responses for http requests before they are handed over to the application code that
     * initiated these requests. The response interceptors leverage the {@link ng.$q
     * promise apis} to fulfil this need for both synchronous and asynchronous preprocessing.
     *
     * The interceptors are service factories that are registered with the $httpProvider by
     * adding them to the `$httpProvider.responseInterceptors` array. The factory is called and
     * injected with dependencies (if specified) and returns the interceptor  — a function that
     * takes a {@link ng.$q promise} and returns the original or a new promise.
     *
     * <pre>
     *   // register the interceptor as a service
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return function(promise) {
     *       return promise.then(function(response) {
     *         // do something on success
     *         return response;
     *       }, function(response) {
     *         // do something on error
     *         if (canRecover(response)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(response);
     *       });
     *     }
     *   });
     *
     *   $httpProvider.responseInterceptors.push('myHttpInterceptor');
     *
     *
     *   // register the interceptor via an anonymous factory
     *   $httpProvider.responseInterceptors.push(function($q, dependency1, dependency2) {
     *     return function(promise) {
     *       // same as above
     *     }
     *   });
     * </pre>
     *
     *
     * # Security Considerations
     *
     * When designing web applications, consider security threats from:
     *
     * - {@link http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx
     *   JSON vulnerability}
     * - {@link http://en.wikipedia.org/wiki/Cross-site_request_forgery XSRF}
     *
     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
     * pre-configured with strategies that address these issues, but for this to work backend server
     * cooperation is required.
     *
     * ## JSON Vulnerability Protection
     *
     * A {@link http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx
     * JSON vulnerability} allows third party website to turn your JSON resource URL into
     * {@link http://en.wikipedia.org/wiki/JSONP JSONP} request under some conditions. To
     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
     * Angular will automatically strip the prefix before processing it as JSON.
     *
     * For example if your server needs to return:
     * <pre>
     * ['one','two']
     * </pre>
     *
     * which is vulnerable to attack, your server can return:
     * <pre>
     * )]}',
     * ['one','two']
     * </pre>
     *
     * Angular will strip the prefix, before processing the JSON.
     *
     *
     * ## Cross Site Request Forgery (XSRF) Protection
     *
     * {@link http://en.wikipedia.org/wiki/Cross-site_request_forgery XSRF} is a technique by which
     * an unauthorized site can gain your user's private data. Angular provides a mechanism
     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie
     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only
     * JavaScript that runs on your domain could read the cookie, your server can be assured that
     * the XHR came from JavaScript running on your domain. The header will not be set for
     * cross-domain requests.
     *
     * To take advantage of this, your server needs to set a token in a JavaScript readable session
     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
     * that only JavaScript running on your domain could have sent the request. The token must be
     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
     * making up its own tokens). We recommend that the token is a digest of your site's
     * authentication cookie with a {@link https://en.wikipedia.org/wiki/Salt_(cryptography) salt}
     * for added security.
     *
     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
     * or the per-request config object.
     *
     *
     * @param {object} config Object describing the request to be made and how it should be
     *    processed. The object has following properties:
     *
     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be turned
     *      to `?key1=value1&key2=value2` after the url. If the value is not a string, it will be
     *      JSONified.
     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
     *      HTTP headers to send to the server. If the return value of a function is null, the
     *      header will not be sent.
     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
     *    - **transformRequest** –
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      request body and headers and returns its transformed (typically serialized) version.
     *    - **transformResponse** –
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      response body and headers and returns its transformed (typically deserialized) version.
     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
     *      GET request, otherwise if a cache instance built with
     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
     *      caching.
     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
     *      that should abort the request when resolved.
     *    - **withCredentials** - `{boolean}` - whether to to set the `withCredentials` flag on the
     *      XHR object. See {@link https://developer.mozilla.org/en/http_access_control#section_5
     *      requests with credentials} for more information.
     *    - **responseType** - `{string}` - see {@link
     *      https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType requestType}.
     *
     * @returns {HttpPromise} Returns a {@link ng.$q promise} object with the
     *   standard `then` method and two http specific methods: `success` and `error`. The `then`
     *   method takes two arguments a success and an error callback which will be called with a
     *   response object. The `success` and `error` methods take a single argument - a function that
     *   will be called when the request succeeds or fails respectively. The arguments passed into
     *   these functions are destructured representation of the response object passed into the
     *   `then` method. The response object has these properties:
     *
     *   - **data** – `{string|Object}` – The response body transformed with the transform
     *     functions.
     *   - **status** – `{number}` – HTTP status code of the response.
     *   - **headers** – `{function([headerName])}` – Header getter function.
     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
     *
     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
     *   requests. This is primarily meant to be used for debugging purposes.
     *
     *
     * @example
<example>
<file name="index.html">
  <div ng-controller="FetchCtrl">
    <select ng-model="method">
      <option>GET</option>
      <option>JSONP</option>
    </select>
    <input type="text" ng-model="url" size="80"/>
    <button ng-click="fetch()">fetch</button><br>
    <button ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
    <button
      ng-click="updateModel('JSONP',
                    'http://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
      Sample JSONP
    </button>
    <button
      ng-click="updateModel('JSONP', 'http://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
        Invalid JSONP
      </button>
    <pre>http status code: {{status}}</pre>
    <pre>http response data: {{data}}</pre>
  </div>
</file>
<file name="script.js">
  function FetchCtrl($scope, $http, $templateCache) {
    $scope.method = 'GET';
    $scope.url = 'http-hello.html';

    $scope.fetch = function() {
      $scope.code = null;
      $scope.response = null;

      $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
        success(function(data, status) {
          $scope.status = status;
          $scope.data = data;
        }).
        error(function(data, status) {
          $scope.data = data || "Request failed";
          $scope.status = status;
      });
    };

    $scope.updateModel = function(method, url) {
      $scope.method = method;
      $scope.url = url;
    };
  }
</file>
<file name="http-hello.html">
  Hello, $http!
</file>
<file name="scenario.js">
  it('should make an xhr GET request', function() {
    element(':button:contains("Sample GET")').click();
    element(':button:contains("fetch")').click();
    expect(binding('status')).toBe('200');
    expect(binding('data')).toMatch(/Hello, \$http!/);
  });

  it('should make a JSONP request to angularjs.org', function() {
    element(':button:contains("Sample JSONP")').click();
    element(':button:contains("fetch")').click();
    expect(binding('status')).toBe('200');
    expect(binding('data')).toMatch(/Super Hero!/);
  });

  it('should make JSONP request to invalid URL and invoke the error handler',
      function() {
    element(':button:contains("Invalid JSONP")').click();
    element(':button:contains("fetch")').click();
    expect(binding('status')).toBe('0');
    expect(binding('data')).toBe('Request failed');
  });
</file>
</example>
     */
    function $http(requestConfig) {
      var config = {
        transformRequest: defaults.transformRequest,
        transformResponse: defaults.transformResponse
      };
      var headers = mergeHeaders(requestConfig);

      extend(config, requestConfig);
      config.headers = headers;
      config.method = uppercase(config.method);

      var xsrfValue = urlIsSameOrigin(config.url)
          ? $browser.cookies()[config.xsrfCookieName || defaults.xsrfCookieName]
          : undefined;
      if (xsrfValue) {
        headers[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
      }


      var serverRequest = function(config) {
        headers = config.headers;
        var reqData = transformData(config.data, headersGetter(headers), config.transformRequest);

        // strip content-type if data is undefined
        if (isUndefined(config.data)) {
          forEach(headers, function(value, header) {
            if (lowercase(header) === 'content-type') {
                delete headers[header];
            }
          });
        }

        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
          config.withCredentials = defaults.withCredentials;
        }

        // send request
        return sendReq(config, reqData, headers).then(transformResponse, transformResponse);
      };

      var chain = [serverRequest, undefined];
      var promise = $q.when(config);

      // apply interceptors
      forEach(reversedInterceptors, function(interceptor) {
        if (interceptor.request || interceptor.requestError) {
          chain.unshift(interceptor.request, interceptor.requestError);
        }
        if (interceptor.response || interceptor.responseError) {
          chain.push(interceptor.response, interceptor.responseError);
        }
      });

      while(chain.length) {
        var thenFn = chain.shift();
        var rejectFn = chain.shift();

        promise = promise.then(thenFn, rejectFn);
      }

      promise.success = function(fn) {
        promise.then(function(response) {
          fn(response.data, response.status, response.headers, config);
        });
        return promise;
      };

      promise.error = function(fn) {
        promise.then(null, function(response) {
          fn(response.data, response.status, response.headers, config);
        });
        return promise;
      };

      return promise;

      function transformResponse(response) {
        // make a copy since the response must be cacheable
        var resp = extend({}, response, {
          data: transformData(response.data, response.headers, config.transformResponse)
        });
        return (isSuccess(response.status))
          ? resp
          : $q.reject(resp);
      }

      function mergeHeaders(config) {
        var defHeaders = defaults.headers,
            reqHeaders = extend({}, config.headers),
            defHeaderName, lowercaseDefHeaderName, reqHeaderName;

        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);

        // execute if header value is function
        execHeaders(defHeaders);
        execHeaders(reqHeaders);

        // using for-in instead of forEach to avoid unecessary iteration after header has been found
        defaultHeadersIteration:
        for (defHeaderName in defHeaders) {
          lowercaseDefHeaderName = lowercase(defHeaderName);

          for (reqHeaderName in reqHeaders) {
            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
              continue defaultHeadersIteration;
            }
          }

          reqHeaders[defHeaderName] = defHeaders[defHeaderName];
        }

        return reqHeaders;

        function execHeaders(headers) {
          var headerContent;

          forEach(headers, function(headerFn, header) {
            if (isFunction(headerFn)) {
              headerContent = headerFn();
              if (headerContent != null) {
                headers[header] = headerContent;
              } else {
                delete headers[header];
              }
            }
          });
        }
      }
    }

    $http.pendingRequests = [];

    /**
     * @ngdoc method
     * @name ng.$http#get
     * @methodOf ng.$http
     *
     * @description
     * Shortcut method to perform `GET` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name ng.$http#delete
     * @methodOf ng.$http
     *
     * @description
     * Shortcut method to perform `DELETE` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name ng.$http#head
     * @methodOf ng.$http
     *
     * @description
     * Shortcut method to perform `HEAD` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name ng.$http#jsonp
     * @methodOf ng.$http
     *
     * @description
     * Shortcut method to perform `JSONP` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request.
     *                     Should contain `JSON_CALLBACK` string.
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
    createShortMethods('get', 'delete', 'head', 'jsonp');

    /**
     * @ngdoc method
     * @name ng.$http#post
     * @methodOf ng.$http
     *
     * @description
     * Shortcut method to perform `POST` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name ng.$http#put
     * @methodOf ng.$http
     *
     * @description
     * Shortcut method to perform `PUT` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
    createShortMethodsWithData('post', 'put');

        /**
         * @ngdoc property
         * @name ng.$http#defaults
         * @propertyOf ng.$http
         *
         * @description
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
         * default headers, withCredentials as well as request and response transformations.
         *
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
         */
    $http.defaults = defaults;


    return $http;


    function createShortMethods(names) {
      forEach(arguments, function(name) {
        $http[name] = function(url, config) {
          return $http(extend(config || {}, {
            method: name,
            url: url
          }));
        };
      });
    }


    function createShortMethodsWithData(name) {
      forEach(arguments, function(name) {
        $http[name] = function(url, data, config) {
          return $http(extend(config || {}, {
            method: name,
            url: url,
            data: data
          }));
        };
      });
    }


    /**
     * Makes the request.
     *
     * !!! ACCESSES CLOSURE VARS:
     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
     */
    function sendReq(config, reqData, reqHeaders) {
      var deferred = $q.defer(),
          promise = deferred.promise,
          cache,
          cachedResp,
          url = buildUrl(config.url, config.params);

      $http.pendingRequests.push(config);
      promise.then(removePendingReq, removePendingReq);


      if ((config.cache || defaults.cache) && config.cache !== false && config.method == 'GET') {
        cache = isObject(config.cache) ? config.cache
              : isObject(defaults.cache) ? defaults.cache
              : defaultCache;
      }

      if (cache) {
        cachedResp = cache.get(url);
        if (isDefined(cachedResp)) {
          if (cachedResp.then) {
            // cached request has already been sent, but there is no response yet
            cachedResp.then(removePendingReq, removePendingReq);
            return cachedResp;
          } else {
            // serving from cache
            if (isArray(cachedResp)) {
              resolvePromise(cachedResp[1], cachedResp[0], copy(cachedResp[2]));
            } else {
              resolvePromise(cachedResp, 200, {});
            }
          }
        } else {
          // put the promise for the non-transformed response into cache as a placeholder
          cache.put(url, promise);
        }
      }

      // if we won't have the response in cache, send the request to the backend
      if (isUndefined(cachedResp)) {
        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,
            config.withCredentials, config.responseType);
      }

      return promise;


      /**
       * Callback registered to $httpBackend():
       *  - caches the response if desired
       *  - resolves the raw $http promise
       *  - calls $apply
       */
      function done(status, response, headersString) {
        if (cache) {
          if (isSuccess(status)) {
            cache.put(url, [status, response, parseHeaders(headersString)]);
          } else {
            // remove promise from the cache
            cache.remove(url);
          }
        }

        resolvePromise(response, status, headersString);
        if (!$rootScope.$$phase) $rootScope.$apply();
      }


      /**
       * Resolves the raw $http promise.
       */
      function resolvePromise(response, status, headers) {
        // normalize internal statuses to 0
        status = Math.max(status, 0);

        (isSuccess(status) ? deferred.resolve : deferred.reject)({
          data: response,
          status: status,
          headers: headersGetter(headers),
          config: config
        });
      }


      function removePendingReq() {
        var idx = indexOf($http.pendingRequests, config);
        if (idx !== -1) $http.pendingRequests.splice(idx, 1);
      }
    }


    function buildUrl(url, params) {
          if (!params) return url;
          var parts = [];
          forEachSorted(params, function(value, key) {
            if (value === null || isUndefined(value)) return;
            if (!isArray(value)) value = [value];

            forEach(value, function(v) {
              if (isObject(v)) {
                v = toJson(v);
              }
              parts.push(encodeUriQuery(key) + '=' +
                         encodeUriQuery(v));
            });
          });
          return url + ((url.indexOf('?') == -1) ? '?' : '&') + parts.join('&');
        }


  }];
}

function createXhr(method) {
  // IE8 doesn't support PATCH method, but the ActiveX object does
  /* global ActiveXObject */
  return (msie <= 8 && lowercase(method) === 'patch')
      ? new ActiveXObject('Microsoft.XMLHTTP')
      : new window.XMLHttpRequest();
}


/**
 * @ngdoc object
 * @name ng.$httpBackend
 * @requires $browser
 * @requires $window
 * @requires $document
 *
 * @description
 * HTTP backend used by the {@link ng.$http service} that delegates to
 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
 *
 * You should never need to use this service directly, instead use the higher-level abstractions:
 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
 *
 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
 * $httpBackend} which can be trained with responses.
 */
function $HttpBackendProvider() {
  this.$get = ['$browser', '$window', '$document', function($browser, $window, $document) {
    return createHttpBackend($browser, createXhr, $browser.defer, $window.angular.callbacks, $document[0]);
  }];
}

function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
  var ABORTED = -1;

  // TODO(vojta): fix the signature
  return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {
    var status;
    $browser.$$incOutstandingRequestCount();
    url = url || $browser.url();

    if (lowercase(method) == 'jsonp') {
      var callbackId = '_' + (callbacks.counter++).toString(36);
      callbacks[callbackId] = function(data) {
        callbacks[callbackId].data = data;
      };

      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),
          function() {
        if (callbacks[callbackId].data) {
          completeRequest(callback, 200, callbacks[callbackId].data);
        } else {
          completeRequest(callback, status || -2);
        }
        delete callbacks[callbackId];
      });
    } else {

      var xhr = createXhr(method);

      xhr.open(method, url, true);
      forEach(headers, function(value, key) {
        if (isDefined(value)) {
            xhr.setRequestHeader(key, value);
        }
      });

      // In IE6 and 7, this might be called synchronously when xhr.send below is called and the
      // response is in the cache. the promise api will ensure that to the app code the api is
      // always async
      xhr.onreadystatechange = function() {
        // onreadystatechange might get called multiple times with readyState === 4 on mobile webkit caused by
        // xhrs that are resolved while the app is in the background (see #5426).
        // since calling completeRequest sets the `xhr` variable to null, we just check if it's not null before
        // continuing
        //
        // we can't set xhr.onreadystatechange to undefined or delete it because that breaks IE8 (method=PATCH) and
        // Safari respectively.
        if (xhr && xhr.readyState == 4) {
          var responseHeaders = null,
              response = null;

          if(status !== ABORTED) {
            responseHeaders = xhr.getAllResponseHeaders();
            response = xhr.responseType ? xhr.response : xhr.responseText;
          }

          // responseText is the old-school way of retrieving response (supported by IE8 & 9)
          // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
          completeRequest(callback,
              status || xhr.status,
              response,
              responseHeaders);
        }
      };

      if (withCredentials) {
        xhr.withCredentials = true;
      }

      if (responseType) {
        xhr.responseType = responseType;
      }

      xhr.send(post || null);
    }

    if (timeout > 0) {
      var timeoutId = $browserDefer(timeoutRequest, timeout);
    } else if (timeout && timeout.then) {
      timeout.then(timeoutRequest);
    }


    function timeoutRequest() {
      status = ABORTED;
      jsonpDone && jsonpDone();
      xhr && xhr.abort();
    }

    function completeRequest(callback, status, response, headersString) {
      var protocol = urlResolve(url).protocol;

      // cancel timeout and subsequent timeout promise resolution
      timeoutId && $browserDefer.cancel(timeoutId);
      jsonpDone = xhr = null;

      // fix status code for file protocol (it's always 0)
      status = (protocol == 'file' && status === 0) ? (response ? 200 : 404) : status;

      // normalize IE bug (http://bugs.jquery.com/ticket/1450)
      status = status == 1223 ? 204 : status;

      callback(status, response, headersString);
      $browser.$$completeOutstandingRequest(noop);
    }
  };

  function jsonpReq(url, done) {
    // we can't use jQuery/jqLite here because jQuery does crazy shit with script elements, e.g.:
    // - fetches local scripts via XHR and evals them
    // - adds and immediately removes script elements from the document
    var script = rawDocument.createElement('script'),
        doneWrapper = function() {
          script.onreadystatechange = script.onload = script.onerror = null;
          rawDocument.body.removeChild(script);
          if (done) done();
        };

    script.type = 'text/javascript';
    script.src = url;

    if (msie && msie <= 8) {
      script.onreadystatechange = function() {
        if (/loaded|complete/.test(script.readyState)) {
          doneWrapper();
        }
      };
    } else {
      script.onload = script.onerror = function() {
        doneWrapper();
      };
    }

    rawDocument.body.appendChild(script);
    return doneWrapper;
  }
}

var $interpolateMinErr = minErr('$interpolate');

/**
 * @ngdoc object
 * @name ng.$interpolateProvider
 * @function
 *
 * @description
 *
 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
 *
 * @example
<doc:example module="customInterpolationApp">
<doc:source>
<script>
  var customInterpolationApp = angular.module('customInterpolationApp', []);

  customInterpolationApp.config(function($interpolateProvider) {
    $interpolateProvider.startSymbol('//');
    $interpolateProvider.endSymbol('//');
  });


  customInterpolationApp.controller('DemoController', function DemoController() {
      this.label = "This binding is brought you by // interpolation symbols.";
  });
</script>
<div ng-app="App" ng-controller="DemoController as demo">
    //demo.label//
</div>
</doc:source>
<doc:scenario>
 it('should interpolate binding with custom symbols', function() {
  expect(binding('demo.label')).toBe('This binding is brought you by // interpolation symbols.');
 });
</doc:scenario>
</doc:example>
 */
function $InterpolateProvider() {
  var startSymbol = '{{';
  var endSymbol = '}}';

  /**
   * @ngdoc method
   * @name ng.$interpolateProvider#startSymbol
   * @methodOf ng.$interpolateProvider
   * @description
   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
   *
   * @param {string=} value new value to set the starting symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
  this.startSymbol = function(value){
    if (value) {
      startSymbol = value;
      return this;
    } else {
      return startSymbol;
    }
  };

  /**
   * @ngdoc method
   * @name ng.$interpolateProvider#endSymbol
   * @methodOf ng.$interpolateProvider
   * @description
   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
   *
   * @param {string=} value new value to set the ending symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
  this.endSymbol = function(value){
    if (value) {
      endSymbol = value;
      return this;
    } else {
      return endSymbol;
    }
  };


  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {
    var startSymbolLength = startSymbol.length,
        endSymbolLength = endSymbol.length;

    /**
     * @ngdoc function
     * @name ng.$interpolate
     * @function
     *
     * @requires $parse
     * @requires $sce
     *
     * @description
     *
     * Compiles a string with markup into an interpolation function. This service is used by the
     * HTML {@link ng.$compile $compile} service for data binding. See
     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
     * interpolation markup.
     *
     *
       <pre>
         var $interpolate = ...; // injected
         var exp = $interpolate('Hello {{name | uppercase}}!');
         expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');
       </pre>
     *
     *
     * @param {string} text The text with markup to interpolate.
     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
     *    embedded expression in order to return an interpolation function. Strings with no
     *    embedded expression will return null for the interpolation function.
     * @param {string=} trustedContext when provided, the returned function passes the interpolated
     *    result through {@link ng.$sce#methods_getTrusted $sce.getTrusted(interpolatedResult,
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
     *    provides Strict Contextual Escaping for details.
     * @returns {function(context)} an interpolation function which is used to compute the
     *    interpolated string. The function has these parameters:
     *
     *    * `context`: an object against which any expressions embedded in the strings are evaluated
     *      against.
     *
     */
    function $interpolate(text, mustHaveExpression, trustedContext) {
      var startIndex,
          endIndex,
          index = 0,
          parts = [],
          length = text.length,
          hasInterpolation = false,
          fn,
          exp,
          concat = [];

      while(index < length) {
        if ( ((startIndex = text.indexOf(startSymbol, index)) != -1) &&
             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1) ) {
          (index != startIndex) && parts.push(text.substring(index, startIndex));
          parts.push(fn = $parse(exp = text.substring(startIndex + startSymbolLength, endIndex)));
          fn.exp = exp;
          index = endIndex + endSymbolLength;
          hasInterpolation = true;
        } else {
          // we did not find anything, so we have to add the remainder to the parts array
          (index != length) && parts.push(text.substring(index));
          index = length;
        }
      }

      if (!(length = parts.length)) {
        // we added, nothing, must have been an empty string.
        parts.push('');
        length = 1;
      }

      // Concatenating expressions makes it hard to reason about whether some combination of
      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
      // single expression be used for iframe[src], object[src], etc., we ensure that the value
      // that's used is assigned or constructed by some JS code somewhere that is more testable or
      // make it obvious that you bound the value to some user controlled value.  This helps reduce
      // the load when auditing for XSS issues.
      if (trustedContext && parts.length > 1) {
          throw $interpolateMinErr('noconcat',
              "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +
              "interpolations that concatenate multiple expressions when a trusted value is " +
              "required.  See http://docs.angularjs.org/api/ng.$sce", text);
      }

      if (!mustHaveExpression  || hasInterpolation) {
        concat.length = length;
        fn = function(context) {
          try {
            for(var i = 0, ii = length, part; i<ii; i++) {
              if (typeof (part = parts[i]) == 'function') {
                part = part(context);
                if (trustedContext) {
                  part = $sce.getTrusted(trustedContext, part);
                } else {
                  part = $sce.valueOf(part);
                }
                if (part === null || isUndefined(part)) {
                  part = '';
                } else if (typeof part != 'string') {
                  part = toJson(part);
                }
              }
              concat[i] = part;
            }
            return concat.join('');
          }
          catch(err) {
            var newErr = $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text,
                err.toString());
            $exceptionHandler(newErr);
          }
        };
        fn.exp = text;
        fn.parts = parts;
        return fn;
      }
    }


    /**
     * @ngdoc method
     * @name ng.$interpolate#startSymbol
     * @methodOf ng.$interpolate
     * @description
     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
     *
     * Use {@link ng.$interpolateProvider#startSymbol $interpolateProvider#startSymbol} to change
     * the symbol.
     *
     * @returns {string} start symbol.
     */
    $interpolate.startSymbol = function() {
      return startSymbol;
    };


    /**
     * @ngdoc method
     * @name ng.$interpolate#endSymbol
     * @methodOf ng.$interpolate
     * @description
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
     *
     * Use {@link ng.$interpolateProvider#endSymbol $interpolateProvider#endSymbol} to change
     * the symbol.
     *
     * @returns {string} start symbol.
     */
    $interpolate.endSymbol = function() {
      return endSymbol;
    };

    return $interpolate;
  }];
}

function $IntervalProvider() {
  this.$get = ['$rootScope', '$window', '$q',
       function($rootScope,   $window,   $q) {
    var intervals = {};


     /**
      * @ngdoc function
      * @name ng.$interval
      *
      * @description
      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
      * milliseconds.
      *
      * The return value of registering an interval function is a promise. This promise will be
      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
      * run indefinitely if `count` is not defined. The value of the notification will be the
      * number of iterations that have run.
      * To cancel an interval, call `$interval.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$interval#methods_flush `$interval.flush(millis)`} to
      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
      * time.
      * 
      * <div class="alert alert-warning">
      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
      * with them.  In particular they are not automatically destroyed when a controller's scope or a
      * directive's element are destroyed.
      * You should take this into consideration and make sure to always cancel the interval at the
      * appropriate moment.  See the example below for more details on how and when to do this.
      * </div>
      *
      * @param {function()} fn A function that should be called repeatedly.
      * @param {number} delay Number of milliseconds between each function call.
      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
      *   indefinitely.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#methods_$apply $apply} block.
      * @returns {promise} A promise which will be notified on each iteration.
      *
      * @example
      <doc:example module="time">
        <doc:source>
          <script>
            function Ctrl2($scope,$interval) {
              $scope.format = 'M/d/yy h:mm:ss a';
              $scope.blood_1 = 100;
              $scope.blood_2 = 120;

              var stop;
              $scope.fight = function() {
                // Don't start a new fight if we are already fighting
                if ( angular.isDefined(stop) ) return;

                stop = $interval(function() {
                  if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
                      $scope.blood_1 = $scope.blood_1 - 3;
                      $scope.blood_2 = $scope.blood_2 - 4;
                  } else {
                      $scope.stopFight();
                  }
                }, 100);
              };

              $scope.stopFight = function() {
                if (angular.isDefined(stop)) {
                  $interval.cancel(stop);
                  stop = undefined;
                }
              };

              $scope.resetFight = function() {
                $scope.blood_1 = 100;
                $scope.blood_2 = 120;
              }

              $scope.$on('$destroy', function() {
                // Make sure that the interval is destroyed too
                $scope.stopFight();
              });
            }

            angular.module('time', [])
              // Register the 'myCurrentTime' directive factory method.
              // We inject $interval and dateFilter service since the factory method is DI.
              .directive('myCurrentTime', function($interval, dateFilter) {
                // return the directive link function. (compile function not needed)
                return function(scope, element, attrs) {
                  var format,  // date format
                  stopTime; // so that we can cancel the time updates

                  // used to update the UI
                  function updateTime() {
                    element.text(dateFilter(new Date(), format));
                  }

                  // watch the expression, and update the UI on change.
                  scope.$watch(attrs.myCurrentTime, function(value) {
                    format = value;
                    updateTime();
                  });

                  stopTime = $interval(updateTime, 1000);

                  // listen on DOM destroy (removal) event, and cancel the next UI update
                  // to prevent updating time ofter the DOM element was removed.
                  element.bind('$destroy', function() {
                    $interval.cancel(stopTime);
                  });
                }
              });
          </script>

          <div>
            <div ng-controller="Ctrl2">
              Date format: <input ng-model="format"> <hr/>
              Current time is: <span my-current-time="format"></span>
              <hr/>
              Blood 1 : <font color='red'>{{blood_1}}</font>
              Blood 2 : <font color='red'>{{blood_2}}</font>
              <button type="button" data-ng-click="fight()">Fight</button>
              <button type="button" data-ng-click="stopFight()">StopFight</button>
              <button type="button" data-ng-click="resetFight()">resetFight</button>
            </div>
          </div>

        </doc:source>
      </doc:example>
      */
    function interval(fn, delay, count, invokeApply) {
      var setInterval = $window.setInterval,
          clearInterval = $window.clearInterval,
          deferred = $q.defer(),
          promise = deferred.promise,
          iteration = 0,
          skipApply = (isDefined(invokeApply) && !invokeApply);
      
      count = isDefined(count) ? count : 0,

      promise.then(null, null, fn);

      promise.$$intervalId = setInterval(function tick() {
        deferred.notify(iteration++);

        if (count > 0 && iteration >= count) {
          deferred.resolve(iteration);
          clearInterval(promise.$$intervalId);
          delete intervals[promise.$$intervalId];
        }

        if (!skipApply) $rootScope.$apply();

      }, delay);

      intervals[promise.$$intervalId] = deferred;

      return promise;
    }


     /**
      * @ngdoc function
      * @name ng.$interval#cancel
      * @methodOf ng.$interval
      *
      * @description
      * Cancels a task associated with the `promise`.
      *
      * @param {number} promise Promise returned by the `$interval` function.
      * @returns {boolean} Returns `true` if the task was successfully canceled.
      */
    interval.cancel = function(promise) {
      if (promise && promise.$$intervalId in intervals) {
        intervals[promise.$$intervalId].reject('canceled');
        clearInterval(promise.$$intervalId);
        delete intervals[promise.$$intervalId];
        return true;
      }
      return false;
    };

    return interval;
  }];
}

/**
 * @ngdoc object
 * @name ng.$locale
 *
 * @description
 * $locale service provides localization rules for various Angular components. As of right now the
 * only public api is:
 *
 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
 */
function $LocaleProvider(){
  this.$get = function() {
    return {
      id: 'en-us',

      NUMBER_FORMATS: {
        DECIMAL_SEP: '.',
        GROUP_SEP: ',',
        PATTERNS: [
          { // Decimal Pattern
            minInt: 1,
            minFrac: 0,
            maxFrac: 3,
            posPre: '',
            posSuf: '',
            negPre: '-',
            negSuf: '',
            gSize: 3,
            lgSize: 3
          },{ //Currency Pattern
            minInt: 1,
            minFrac: 2,
            maxFrac: 2,
            posPre: '\u00A4',
            posSuf: '',
            negPre: '(\u00A4',
            negSuf: ')',
            gSize: 3,
            lgSize: 3
          }
        ],
        CURRENCY_SYM: '$'
      },

      DATETIME_FORMATS: {
        MONTH:
            'January,February,March,April,May,June,July,August,September,October,November,December'
            .split(','),
        SHORTMONTH:  'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),
        DAY: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),
        SHORTDAY: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),
        AMPMS: ['AM','PM'],
        medium: 'MMM d, y h:mm:ss a',
        short: 'M/d/yy h:mm a',
        fullDate: 'EEEE, MMMM d, y',
        longDate: 'MMMM d, y',
        mediumDate: 'MMM d, y',
        shortDate: 'M/d/yy',
        mediumTime: 'h:mm:ss a',
        shortTime: 'h:mm a'
      },

      pluralCat: function(num) {
        if (num === 1) {
          return 'one';
        }
        return 'other';
      }
    };
  };
}

var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,
    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};
var $locationMinErr = minErr('$location');


/**
 * Encode path using encodeUriSegment, ignoring forward slashes
 *
 * @param {string} path Path to encode
 * @returns {string}
 */
function encodePath(path) {
  var segments = path.split('/'),
      i = segments.length;

  while (i--) {
    segments[i] = encodeUriSegment(segments[i]);
  }

  return segments.join('/');
}

function parseAbsoluteUrl(absoluteUrl, locationObj, appBase) {
  var parsedUrl = urlResolve(absoluteUrl, appBase);

  locationObj.$$protocol = parsedUrl.protocol;
  locationObj.$$host = parsedUrl.hostname;
  locationObj.$$port = int(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
}


function parseAppUrl(relativeUrl, locationObj, appBase) {
  var prefixed = (relativeUrl.charAt(0) !== '/');
  if (prefixed) {
    relativeUrl = '/' + relativeUrl;
  }
  var match = urlResolve(relativeUrl, appBase);
  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?
      match.pathname.substring(1) : match.pathname);
  locationObj.$$search = parseKeyValue(match.search);
  locationObj.$$hash = decodeURIComponent(match.hash);

  // make sure path starts with '/';
  if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
    locationObj.$$path = '/' + locationObj.$$path;
  }
}


/**
 *
 * @param {string} begin
 * @param {string} whole
 * @returns {string} returns text from whole after begin or undefined if it does not begin with
 *                   expected string.
 */
function beginsWith(begin, whole) {
  if (whole.indexOf(begin) === 0) {
    return whole.substr(begin.length);
  }
}


function stripHash(url) {
  var index = url.indexOf('#');
  return index == -1 ? url : url.substr(0, index);
}


function stripFile(url) {
  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
}

/* return the server only (scheme://host:port) */
function serverBase(url) {
  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
}


/**
 * LocationHtml5Url represents an url
 * This object is exposed as $location service when HTML5 mode is enabled and supported
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} basePrefix url path prefix
 */
function LocationHtml5Url(appBase, basePrefix) {
  this.$$html5 = true;
  basePrefix = basePrefix || '';
  var appBaseNoFile = stripFile(appBase);
  parseAbsoluteUrl(appBase, this, appBase);


  /**
   * Parse given html5 (regular) url string into properties
   * @param {string} newAbsoluteUrl HTML5 url
   * @private
   */
  this.$$parse = function(url) {
    var pathUrl = beginsWith(appBaseNoFile, url);
    if (!isString(pathUrl)) {
      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,
          appBaseNoFile);
    }

    parseAppUrl(pathUrl, this, appBase);

    if (!this.$$path) {
      this.$$path = '/';
    }

    this.$$compose();
  };

  /**
   * Compose url and update `absUrl` property
   * @private
   */
  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
  };

  this.$$rewrite = function(url) {
    var appUrl, prevAppUrl;

    if ( (appUrl = beginsWith(appBase, url)) !== undefined ) {
      prevAppUrl = appUrl;
      if ( (appUrl = beginsWith(basePrefix, appUrl)) !== undefined ) {
        return appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
      } else {
        return appBase + prevAppUrl;
      }
    } else if ( (appUrl = beginsWith(appBaseNoFile, url)) !== undefined ) {
      return appBaseNoFile + appUrl;
    } else if (appBaseNoFile == url + '/') {
      return appBaseNoFile;
    }
  };
}


/**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when developer doesn't opt into html5 mode.
 * It also serves as the base class for html5 mode fallback on legacy browsers.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} hashPrefix hashbang prefix
 */
function LocationHashbangUrl(appBase, hashPrefix) {
  var appBaseNoFile = stripFile(appBase);

  parseAbsoluteUrl(appBase, this, appBase);


  /**
   * Parse given hashbang url into properties
   * @param {string} url Hashbang url
   * @private
   */
  this.$$parse = function(url) {
    var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
    var withoutHashUrl = withoutBaseUrl.charAt(0) == '#'
        ? beginsWith(hashPrefix, withoutBaseUrl)
        : (this.$$html5)
          ? withoutBaseUrl
          : '';

    if (!isString(withoutHashUrl)) {
      throw $locationMinErr('ihshprfx', 'Invalid url "{0}", missing hash prefix "{1}".', url,
          hashPrefix);
    }
    parseAppUrl(withoutHashUrl, this, appBase);

    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);

    this.$$compose();

    /*
     * In Windows, on an anchor node on documents loaded from
     * the filesystem, the browser will return a pathname
     * prefixed with the drive name ('/C:/path') when a
     * pathname without a drive is set:
     *  * a.setAttribute('href', '/foo')
     *   * a.pathname === '/C:/foo' //true
     *
     * Inside of Angular, we're always using pathnames that
     * do not include drive names for routing.
     */
    function removeWindowsDriveName (path, url, base) {
      /*
      Matches paths for file protocol on windows,
      such as /C:/foo/bar, and captures only /foo/bar.
      */
      var windowsFilePathExp = /^\/?.*?:(\/.*)/;

      var firstPathSegmentMatch;

      //Get the relative path from the input URL.
      if (url.indexOf(base) === 0) {
        url = url.replace(base, '');
      }

      /*
       * The input URL intentionally contains a
       * first path segment that ends with a colon.
       */
      if (windowsFilePathExp.exec(url)) {
        return path;
      }

      firstPathSegmentMatch = windowsFilePathExp.exec(path);
      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
    }
  };

  /**
   * Compose hashbang url and update `absUrl` property
   * @private
   */
  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
  };

  this.$$rewrite = function(url) {
    if(stripHash(appBase) == stripHash(url)) {
      return url;
    }
  };
}


/**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when html5 history api is enabled but the browser
 * does not support it.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} hashPrefix hashbang prefix
 */
function LocationHashbangInHtml5Url(appBase, hashPrefix) {
  this.$$html5 = true;
  LocationHashbangUrl.apply(this, arguments);

  var appBaseNoFile = stripFile(appBase);

  this.$$rewrite = function(url) {
    var appUrl;

    if ( appBase == stripHash(url) ) {
      return url;
    } else if ( (appUrl = beginsWith(appBaseNoFile, url)) ) {
      return appBase + hashPrefix + appUrl;
    } else if ( appBaseNoFile === url + '/') {
      return appBaseNoFile;
    }
  };
}


LocationHashbangInHtml5Url.prototype =
  LocationHashbangUrl.prototype =
  LocationHtml5Url.prototype = {

  /**
   * Are we in html5 mode?
   * @private
   */
  $$html5: false,

  /**
   * Has any change been replacing ?
   * @private
   */
  $$replace: false,

  /**
   * @ngdoc method
   * @name ng.$location#absUrl
   * @methodOf ng.$location
   *
   * @description
   * This method is getter only.
   *
   * Return full url representation with all segments encoded according to rules specified in
   * {@link http://www.ietf.org/rfc/rfc3986.txt RFC 3986}.
   *
   * @return {string} full url
   */
  absUrl: locationGetter('$$absUrl'),

  /**
   * @ngdoc method
   * @name ng.$location#url
   * @methodOf ng.$location
   *
   * @description
   * This method is getter / setter.
   *
   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.
   *
   * Change path, search and hash, when called with parameter and return `$location`.
   *
   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)
   * @param {string=} replace The path that will be changed
   * @return {string} url
   */
  url: function(url, replace) {
    if (isUndefined(url))
      return this.$$url;

    var match = PATH_MATCH.exec(url);
    if (match[1]) this.path(decodeURIComponent(match[1]));
    if (match[2] || match[1]) this.search(match[3] || '');
    this.hash(match[5] || '', replace);

    return this;
  },

  /**
   * @ngdoc method
   * @name ng.$location#protocol
   * @methodOf ng.$location
   *
   * @description
   * This method is getter only.
   *
   * Return protocol of current url.
   *
   * @return {string} protocol of current url
   */
  protocol: locationGetter('$$protocol'),

  /**
   * @ngdoc method
   * @name ng.$location#host
   * @methodOf ng.$location
   *
   * @description
   * This method is getter only.
   *
   * Return host of current url.
   *
   * @return {string} host of current url.
   */
  host: locationGetter('$$host'),

  /**
   * @ngdoc method
   * @name ng.$location#port
   * @methodOf ng.$location
   *
   * @description
   * This method is getter only.
   *
   * Return port of current url.
   *
   * @return {Number} port
   */
  port: locationGetter('$$port'),

  /**
   * @ngdoc method
   * @name ng.$location#path
   * @methodOf ng.$location
   *
   * @description
   * This method is getter / setter.
   *
   * Return path of current url when called without any parameter.
   *
   * Change path when called with parameter and return `$location`.
   *
   * Note: Path should always begin with forward slash (/), this method will add the forward slash
   * if it is missing.
   *
   * @param {string=} path New path
   * @return {string} path
   */
  path: locationGetterSetter('$$path', function(path) {
    return path.charAt(0) == '/' ? path : '/' + path;
  }),

  /**
   * @ngdoc method
   * @name ng.$location#search
   * @methodOf ng.$location
   *
   * @description
   * This method is getter / setter.
   *
   * Return search part (as object) of current url when called without any parameter.
   *
   * Change search part when called with parameter and return `$location`.
   *
   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
   * hash object. Hash object may contain an array of values, which will be decoded as duplicates in
   * the url.
   *
   * @param {(string|Array<string>)=} paramValue If `search` is a string, then `paramValue` will override only a
   * single search parameter. If `paramValue` is an array, it will set the parameter as a
   * comma-separated value. If `paramValue` is `null`, the parameter will be deleted.
   *
   * @return {string} search
   */
  search: function(search, paramValue) {
    switch (arguments.length) {
      case 0:
        return this.$$search;
      case 1:
        if (isString(search)) {
          this.$$search = parseKeyValue(search);
        } else if (isObject(search)) {
          this.$$search = search;
        } else {
          throw $locationMinErr('isrcharg',
              'The first argument of the `$location#search()` call must be a string or an object.');
        }
        break;
      default:
        if (isUndefined(paramValue) || paramValue === null) {
          delete this.$$search[search];
        } else {
          this.$$search[search] = paramValue;
        }
    }

    this.$$compose();
    return this;
  },

  /**
   * @ngdoc method
   * @name ng.$location#hash
   * @methodOf ng.$location
   *
   * @description
   * This method is getter / setter.
   *
   * Return hash fragment when called without any parameter.
   *
   * Change hash fragment when called with parameter and return `$location`.
   *
   * @param {string=} hash New hash fragment
   * @return {string} hash
   */
  hash: locationGetterSetter('$$hash', identity),

  /**
   * @ngdoc method
   * @name ng.$location#replace
   * @methodOf ng.$location
   *
   * @description
   * If called, all changes to $location during current `$digest` will be replacing current history
   * record, instead of adding new one.
   */
  replace: function() {
    this.$$replace = true;
    return this;
  }
};

function locationGetter(property) {
  return function() {
    return this[property];
  };
}


function locationGetterSetter(property, preprocess) {
  return function(value) {
    if (isUndefined(value))
      return this[property];

    this[property] = preprocess(value);
    this.$$compose();

    return this;
  };
}


/**
 * @ngdoc object
 * @name ng.$location
 *
 * @requires $browser
 * @requires $sniffer
 * @requires $rootElement
 *
 * @description
 * The $location service parses the URL in the browser address bar (based on the
 * {@link https://developer.mozilla.org/en/window.location window.location}) and makes the URL
 * available to your application. Changes to the URL in the address bar are reflected into
 * $location service and changes to $location are reflected into the browser address bar.
 *
 * **The $location service:**
 *
 * - Exposes the current URL in the browser address bar, so you can
 *   - Watch and observe the URL.
 *   - Change the URL.
 * - Synchronizes the URL with the browser when the user
 *   - Changes the address bar.
 *   - Clicks the back or forward button (or clicks a History link).
 *   - Clicks on a link.
 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
 *
 * For more information see {@link guide/dev_guide.services.$location Developer Guide: Angular
 * Services: Using $location}
 */

/**
 * @ngdoc object
 * @name ng.$locationProvider
 * @description
 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
 */
function $LocationProvider(){
  var hashPrefix = '',
      html5Mode = false;

  /**
   * @ngdoc property
   * @name ng.$locationProvider#hashPrefix
   * @methodOf ng.$locationProvider
   * @description
   * @param {string=} prefix Prefix for hash part (containing path and search)
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.hashPrefix = function(prefix) {
    if (isDefined(prefix)) {
      hashPrefix = prefix;
      return this;
    } else {
      return hashPrefix;
    }
  };

  /**
   * @ngdoc property
   * @name ng.$locationProvider#html5Mode
   * @methodOf ng.$locationProvider
   * @description
   * @param {boolean=} mode Use HTML5 strategy if available.
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.html5Mode = function(mode) {
    if (isDefined(mode)) {
      html5Mode = mode;
      return this;
    } else {
      return html5Mode;
    }
  };

  /**
   * @ngdoc event
   * @name ng.$location#$locationChangeStart
   * @eventOf ng.$location
   * @eventType broadcast on root scope
   * @description
   * Broadcasted before a URL will change. This change can be prevented by calling
   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
   * details about event object. Upon successful change
   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   */

  /**
   * @ngdoc event
   * @name ng.$location#$locationChangeSuccess
   * @eventOf ng.$location
   * @eventType broadcast on root scope
   * @description
   * Broadcasted after a URL was changed.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   */

  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement',
      function( $rootScope,   $browser,   $sniffer,   $rootElement) {
    var $location,
        LocationMode,
        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
        initialUrl = $browser.url(),
        appBase;

    if (html5Mode) {
      appBase = serverBase(initialUrl) + (baseHref || '/');
      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
    } else {
      appBase = stripHash(initialUrl);
      LocationMode = LocationHashbangUrl;
    }
    $location = new LocationMode(appBase, '#' + hashPrefix);
    $location.$$parse($location.$$rewrite(initialUrl));

    $rootElement.on('click', function(event) {
      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
      // currently we open nice url link and redirect then

      if (event.ctrlKey || event.metaKey || event.which == 2) return;

      var elm = jqLite(event.target);

      // traverse the DOM up to find first A tag
      while (lowercase(elm[0].nodeName) !== 'a') {
        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
      }

      var absHref = elm.prop('href');

      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
        // an animation.
        absHref = urlResolve(absHref.animVal).href;
      }

      var rewrittenUrl = $location.$$rewrite(absHref);

      if (absHref && !elm.attr('target') && rewrittenUrl && !event.isDefaultPrevented()) {
        event.preventDefault();
        if (rewrittenUrl != $browser.url()) {
          // update location manually
          $location.$$parse(rewrittenUrl);
          $rootScope.$apply();
          // hack to work around FF6 bug 684208 when scenario runner clicks on links
          window.angular['ff-684208-preventDefault'] = true;
        }
      }
    });


    // rewrite hashbang url <> html5 url
    if ($location.absUrl() != initialUrl) {
      $browser.url($location.absUrl(), true);
    }

    // update $location when $browser url changes
    $browser.onUrlChange(function(newUrl) {
      if ($location.absUrl() != newUrl) {
        $rootScope.$evalAsync(function() {
          var oldUrl = $location.absUrl();

          $location.$$parse(newUrl);
          if ($rootScope.$broadcast('$locationChangeStart', newUrl,
                                    oldUrl).defaultPrevented) {
            $location.$$parse(oldUrl);
            $browser.url(oldUrl);
          } else {
            afterLocationChange(oldUrl);
          }
        });
        if (!$rootScope.$$phase) $rootScope.$digest();
      }
    });

    // update browser
    var changeCounter = 0;
    $rootScope.$watch(function $locationWatch() {
      var oldUrl = $browser.url();
      var currentReplace = $location.$$replace;

      if (!changeCounter || oldUrl != $location.absUrl()) {
        changeCounter++;
        $rootScope.$evalAsync(function() {
          if ($rootScope.$broadcast('$locationChangeStart', $location.absUrl(), oldUrl).
              defaultPrevented) {
            $location.$$parse(oldUrl);
          } else {
            $browser.url($location.absUrl(), currentReplace);
            afterLocationChange(oldUrl);
          }
        });
      }
      $location.$$replace = false;

      return changeCounter;
    });

    return $location;

    function afterLocationChange(oldUrl) {
      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl);
    }
}];
}

/**
 * @ngdoc object
 * @name ng.$log
 * @requires $window
 *
 * @description
 * Simple service for logging. Default implementation safely writes the message
 * into the browser's console (if present).
 * 
 * The main purpose of this service is to simplify debugging and troubleshooting.
 *
 * The default is to log `debug` messages. You can use
 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
 *
 * @example
   <example>
     <file name="script.js">
       function LogCtrl($scope, $log) {
         $scope.$log = $log;
         $scope.message = 'Hello World!';
       }
     </file>
     <file name="index.html">
       <div ng-controller="LogCtrl">
         <p>Reload this page with open console, enter text and hit the log button...</p>
         Message:
         <input type="text" ng-model="message"/>
         <button ng-click="$log.log(message)">log</button>
         <button ng-click="$log.warn(message)">warn</button>
         <button ng-click="$log.info(message)">info</button>
         <button ng-click="$log.error(message)">error</button>
       </div>
     </file>
   </example>
 */

/**
 * @ngdoc object
 * @name ng.$logProvider
 * @description
 * Use the `$logProvider` to configure how the application logs messages
 */
function $LogProvider(){
  var debug = true,
      self = this;
  
  /**
   * @ngdoc property
   * @name ng.$logProvider#debugEnabled
   * @methodOf ng.$logProvider
   * @description
   * @param {string=} flag enable or disable debug level messages
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.debugEnabled = function(flag) {
    if (isDefined(flag)) {
      debug = flag;
    return this;
    } else {
      return debug;
    }
  };
  
  this.$get = ['$window', function($window){
    return {
      /**
       * @ngdoc method
       * @name ng.$log#log
       * @methodOf ng.$log
       *
       * @description
       * Write a log message
       */
      log: consoleLog('log'),

      /**
       * @ngdoc method
       * @name ng.$log#info
       * @methodOf ng.$log
       *
       * @description
       * Write an information message
       */
      info: consoleLog('info'),

      /**
       * @ngdoc method
       * @name ng.$log#warn
       * @methodOf ng.$log
       *
       * @description
       * Write a warning message
       */
      warn: consoleLog('warn'),

      /**
       * @ngdoc method
       * @name ng.$log#error
       * @methodOf ng.$log
       *
       * @description
       * Write an error message
       */
      error: consoleLog('error'),
      
      /**
       * @ngdoc method
       * @name ng.$log#debug
       * @methodOf ng.$log
       * 
       * @description
       * Write a debug message
       */
      debug: (function () {
        var fn = consoleLog('debug');

        return function() {
          if (debug) {
            fn.apply(self, arguments);
          }
        };
      }())
    };

    function formatError(arg) {
      if (arg instanceof Error) {
        if (arg.stack) {
          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
              ? 'Error: ' + arg.message + '\n' + arg.stack
              : arg.stack;
        } else if (arg.sourceURL) {
          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
        }
      }
      return arg;
    }

    function consoleLog(type) {
      var console = $window.console || {},
          logFn = console[type] || console.log || noop,
          hasApply = false;

      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
      // The reason behind this is that console.log has type "object" in IE8...
      try {
        hasApply = !! logFn.apply;
      } catch (e) {}

      if (hasApply) {
        return function() {
          var args = [];
          forEach(arguments, function(arg) {
            args.push(formatError(arg));
          });
          return logFn.apply(console, args);
        };
      }

      // we are IE which either doesn't have window.console => this is noop and we do nothing,
      // or we are IE where console.log doesn't have apply so we log at least first 2 args
      return function(arg1, arg2) {
        logFn(arg1, arg2 == null ? '' : arg2);
      };
    }
  }];
}

var $parseMinErr = minErr('$parse');
var promiseWarningCache = {};
var promiseWarning;

// Sandboxing Angular Expressions
// ------------------------------
// Angular expressions are generally considered safe because these expressions only have direct
// access to $scope and locals. However, one can obtain the ability to execute arbitrary JS code by
// obtaining a reference to native JS functions such as the Function constructor.
//
// As an example, consider the following Angular expression:
//
//   {}.toString.constructor(alert("evil JS code"))
//
// We want to prevent this type of access. For the sake of performance, during the lexing phase we
// disallow any "dotted" access to any member named "constructor".
//
// For reflective calls (a[b]) we check that the value of the lookup is not the Function constructor
// while evaluating the expression, which is a stronger but more expensive test. Since reflective
// calls are expensive anyway, this is not such a big deal compared to static dereferencing.
//
// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
// against the expression language, but not to prevent exploits that were enabled by exposing
// sensitive JavaScript or browser apis on Scope. Exposing such objects on a Scope is never a good
// practice and therefore we are not even trying to protect against interaction with an object
// explicitly exposed in this way.
//
// A developer could foil the name check by aliasing the Function constructor under a different
// name on the scope.
//
// In general, it is not possible to access a Window object from an angular expression unless a
// window or some DOM object that has a reference to window is published onto a Scope.

function ensureSafeMemberName(name, fullExpression) {
  if (name === "constructor") {
    throw $parseMinErr('isecfld',
        'Referencing "constructor" field in Angular expressions is disallowed! Expression: {0}',
        fullExpression);
  }
  return name;
}

function ensureSafeObject(obj, fullExpression) {
  // nifty check if obj is Function that is fast and works across iframes and other contexts
  if (obj) {
    if (obj.constructor === obj) {
      throw $parseMinErr('isecfn',
          'Referencing Function in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    } else if (// isWindow(obj)
        obj.document && obj.location && obj.alert && obj.setInterval) {
      throw $parseMinErr('isecwindow',
          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    } else if (// isElement(obj)
        obj.children && (obj.nodeName || (obj.on && obj.find))) {
      throw $parseMinErr('isecdom',
          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    }
  }
  return obj;
}

var OPERATORS = {
    /* jshint bitwise : false */
    'null':function(){return null;},
    'true':function(){return true;},
    'false':function(){return false;},
    undefined:noop,
    '+':function(self, locals, a,b){
      a=a(self, locals); b=b(self, locals);
      if (isDefined(a)) {
        if (isDefined(b)) {
          return a + b;
        }
        return a;
      }
      return isDefined(b)?b:undefined;},
    '-':function(self, locals, a,b){
          a=a(self, locals); b=b(self, locals);
          return (isDefined(a)?a:0)-(isDefined(b)?b:0);
        },
    '*':function(self, locals, a,b){return a(self, locals)*b(self, locals);},
    '/':function(self, locals, a,b){return a(self, locals)/b(self, locals);},
    '%':function(self, locals, a,b){return a(self, locals)%b(self, locals);},
    '^':function(self, locals, a,b){return a(self, locals)^b(self, locals);},
    '=':noop,
    '===':function(self, locals, a, b){return a(self, locals)===b(self, locals);},
    '!==':function(self, locals, a, b){return a(self, locals)!==b(self, locals);},
    '==':function(self, locals, a,b){return a(self, locals)==b(self, locals);},
    '!=':function(self, locals, a,b){return a(self, locals)!=b(self, locals);},
    '<':function(self, locals, a,b){return a(self, locals)<b(self, locals);},
    '>':function(self, locals, a,b){return a(self, locals)>b(self, locals);},
    '<=':function(self, locals, a,b){return a(self, locals)<=b(self, locals);},
    '>=':function(self, locals, a,b){return a(self, locals)>=b(self, locals);},
    '&&':function(self, locals, a,b){return a(self, locals)&&b(self, locals);},
    '||':function(self, locals, a,b){return a(self, locals)||b(self, locals);},
    '&':function(self, locals, a,b){return a(self, locals)&b(self, locals);},
//    '|':function(self, locals, a,b){return a|b;},
    '|':function(self, locals, a,b){return b(self, locals)(self, locals, a(self, locals));},
    '!':function(self, locals, a){return !a(self, locals);}
};
/* jshint bitwise: true */
var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};


/////////////////////////////////////////


/**
 * @constructor
 */
var Lexer = function (options) {
  this.options = options;
};

Lexer.prototype = {
  constructor: Lexer,

  lex: function (text) {
    this.text = text;

    this.index = 0;
    this.ch = undefined;
    this.lastCh = ':'; // can start regexp

    this.tokens = [];

    var token;
    var json = [];

    while (this.index < this.text.length) {
      this.ch = this.text.charAt(this.index);
      if (this.is('"\'')) {
        this.readString(this.ch);
      } else if (this.isNumber(this.ch) || this.is('.') && this.isNumber(this.peek())) {
        this.readNumber();
      } else if (this.isIdent(this.ch)) {
        this.readIdent();
        // identifiers can only be if the preceding char was a { or ,
        if (this.was('{,') && json[0] === '{' &&
            (token = this.tokens[this.tokens.length - 1])) {
          token.json = token.text.indexOf('.') === -1;
        }
      } else if (this.is('(){}[].,;:?')) {
        this.tokens.push({
          index: this.index,
          text: this.ch,
          json: (this.was(':[,') && this.is('{[')) || this.is('}]:,')
        });
        if (this.is('{[')) json.unshift(this.ch);
        if (this.is('}]')) json.shift();
        this.index++;
      } else if (this.isWhitespace(this.ch)) {
        this.index++;
        continue;
      } else {
        var ch2 = this.ch + this.peek();
        var ch3 = ch2 + this.peek(2);
        var fn = OPERATORS[this.ch];
        var fn2 = OPERATORS[ch2];
        var fn3 = OPERATORS[ch3];
        if (fn3) {
          this.tokens.push({index: this.index, text: ch3, fn: fn3});
          this.index += 3;
        } else if (fn2) {
          this.tokens.push({index: this.index, text: ch2, fn: fn2});
          this.index += 2;
        } else if (fn) {
          this.tokens.push({
            index: this.index,
            text: this.ch,
            fn: fn,
            json: (this.was('[,:') && this.is('+-'))
          });
          this.index += 1;
        } else {
          this.throwError('Unexpected next character ', this.index, this.index + 1);
        }
      }
      this.lastCh = this.ch;
    }
    return this.tokens;
  },

  is: function(chars) {
    return chars.indexOf(this.ch) !== -1;
  },

  was: function(chars) {
    return chars.indexOf(this.lastCh) !== -1;
  },

  peek: function(i) {
    var num = i || 1;
    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
  },

  isNumber: function(ch) {
    return ('0' <= ch && ch <= '9');
  },

  isWhitespace: function(ch) {
    // IE treats non-breaking space as \u00A0
    return (ch === ' ' || ch === '\r' || ch === '\t' ||
            ch === '\n' || ch === '\v' || ch === '\u00A0');
  },

  isIdent: function(ch) {
    return ('a' <= ch && ch <= 'z' ||
            'A' <= ch && ch <= 'Z' ||
            '_' === ch || ch === '$');
  },

  isExpOperator: function(ch) {
    return (ch === '-' || ch === '+' || this.isNumber(ch));
  },

  throwError: function(error, start, end) {
    end = end || this.index;
    var colStr = (isDefined(start)
            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'
            : ' ' + end);
    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',
        error, colStr, this.text);
  },

  readNumber: function() {
    var number = '';
    var start = this.index;
    while (this.index < this.text.length) {
      var ch = lowercase(this.text.charAt(this.index));
      if (ch == '.' || this.isNumber(ch)) {
        number += ch;
      } else {
        var peekCh = this.peek();
        if (ch == 'e' && this.isExpOperator(peekCh)) {
          number += ch;
        } else if (this.isExpOperator(ch) &&
            peekCh && this.isNumber(peekCh) &&
            number.charAt(number.length - 1) == 'e') {
          number += ch;
        } else if (this.isExpOperator(ch) &&
            (!peekCh || !this.isNumber(peekCh)) &&
            number.charAt(number.length - 1) == 'e') {
          this.throwError('Invalid exponent');
        } else {
          break;
        }
      }
      this.index++;
    }
    number = 1 * number;
    this.tokens.push({
      index: start,
      text: number,
      json: true,
      fn: function() { return number; }
    });
  },

  readIdent: function() {
    var parser = this;

    var ident = '';
    var start = this.index;

    var lastDot, peekIndex, methodName, ch;

    while (this.index < this.text.length) {
      ch = this.text.charAt(this.index);
      if (ch === '.' || this.isIdent(ch) || this.isNumber(ch)) {
        if (ch === '.') lastDot = this.index;
        ident += ch;
      } else {
        break;
      }
      this.index++;
    }

    //check if this is not a method invocation and if it is back out to last dot
    if (lastDot) {
      peekIndex = this.index;
      while (peekIndex < this.text.length) {
        ch = this.text.charAt(peekIndex);
        if (ch === '(') {
          methodName = ident.substr(lastDot - start + 1);
          ident = ident.substr(0, lastDot - start);
          this.index = peekIndex;
          break;
        }
        if (this.isWhitespace(ch)) {
          peekIndex++;
        } else {
          break;
        }
      }
    }


    var token = {
      index: start,
      text: ident
    };

    // OPERATORS is our own object so we don't need to use special hasOwnPropertyFn
    if (OPERATORS.hasOwnProperty(ident)) {
      token.fn = OPERATORS[ident];
      token.json = OPERATORS[ident];
    } else {
      var getter = getterFn(ident, this.options, this.text);
      token.fn = extend(function(self, locals) {
        return (getter(self, locals));
      }, {
        assign: function(self, value) {
          return setter(self, ident, value, parser.text, parser.options);
        }
      });
    }

    this.tokens.push(token);

    if (methodName) {
      this.tokens.push({
        index:lastDot,
        text: '.',
        json: false
      });
      this.tokens.push({
        index: lastDot + 1,
        text: methodName,
        json: false
      });
    }
  },

  readString: function(quote) {
    var start = this.index;
    this.index++;
    var string = '';
    var rawString = quote;
    var escape = false;
    while (this.index < this.text.length) {
      var ch = this.text.charAt(this.index);
      rawString += ch;
      if (escape) {
        if (ch === 'u') {
          var hex = this.text.substring(this.index + 1, this.index + 5);
          if (!hex.match(/[\da-f]{4}/i))
            this.throwError('Invalid unicode escape [\\u' + hex + ']');
          this.index += 4;
          string += String.fromCharCode(parseInt(hex, 16));
        } else {
          var rep = ESCAPE[ch];
          if (rep) {
            string += rep;
          } else {
            string += ch;
          }
        }
        escape = false;
      } else if (ch === '\\') {
        escape = true;
      } else if (ch === quote) {
        this.index++;
        this.tokens.push({
          index: start,
          text: rawString,
          string: string,
          json: true,
          fn: function() { return string; }
        });
        return;
      } else {
        string += ch;
      }
      this.index++;
    }
    this.throwError('Unterminated quote', start);
  }
};


/**
 * @constructor
 */
var Parser = function (lexer, $filter, options) {
  this.lexer = lexer;
  this.$filter = $filter;
  this.options = options;
};

Parser.ZERO = function () { return 0; };

Parser.prototype = {
  constructor: Parser,

  parse: function (text, json) {
    this.text = text;

    //TODO(i): strip all the obsolte json stuff from this file
    this.json = json;

    this.tokens = this.lexer.lex(text);

    if (json) {
      // The extra level of aliasing is here, just in case the lexer misses something, so that
      // we prevent any accidental execution in JSON.
      this.assignment = this.logicalOR;

      this.functionCall =
      this.fieldAccess =
      this.objectIndex =
      this.filterChain = function() {
        this.throwError('is not valid json', {text: text, index: 0});
      };
    }

    var value = json ? this.primary() : this.statements();

    if (this.tokens.length !== 0) {
      this.throwError('is an unexpected token', this.tokens[0]);
    }

    value.literal = !!value.literal;
    value.constant = !!value.constant;

    return value;
  },

  primary: function () {
    var primary;
    if (this.expect('(')) {
      primary = this.filterChain();
      this.consume(')');
    } else if (this.expect('[')) {
      primary = this.arrayDeclaration();
    } else if (this.expect('{')) {
      primary = this.object();
    } else {
      var token = this.expect();
      primary = token.fn;
      if (!primary) {
        this.throwError('not a primary expression', token);
      }
      if (token.json) {
        primary.constant = true;
        primary.literal = true;
      }
    }

    var next, context;
    while ((next = this.expect('(', '[', '.'))) {
      if (next.text === '(') {
        primary = this.functionCall(primary, context);
        context = null;
      } else if (next.text === '[') {
        context = primary;
        primary = this.objectIndex(primary);
      } else if (next.text === '.') {
        context = primary;
        primary = this.fieldAccess(primary);
      } else {
        this.throwError('IMPOSSIBLE');
      }
    }
    return primary;
  },

  throwError: function(msg, token) {
    throw $parseMinErr('syntax',
        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',
          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));
  },

  peekToken: function() {
    if (this.tokens.length === 0)
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
    return this.tokens[0];
  },

  peek: function(e1, e2, e3, e4) {
    if (this.tokens.length > 0) {
      var token = this.tokens[0];
      var t = token.text;
      if (t === e1 || t === e2 || t === e3 || t === e4 ||
          (!e1 && !e2 && !e3 && !e4)) {
        return token;
      }
    }
    return false;
  },

  expect: function(e1, e2, e3, e4){
    var token = this.peek(e1, e2, e3, e4);
    if (token) {
      if (this.json && !token.json) {
        this.throwError('is not valid json', token);
      }
      this.tokens.shift();
      return token;
    }
    return false;
  },

  consume: function(e1){
    if (!this.expect(e1)) {
      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
    }
  },

  unaryFn: function(fn, right) {
    return extend(function(self, locals) {
      return fn(self, locals, right);
    }, {
      constant:right.constant
    });
  },

  ternaryFn: function(left, middle, right){
    return extend(function(self, locals){
      return left(self, locals) ? middle(self, locals) : right(self, locals);
    }, {
      constant: left.constant && middle.constant && right.constant
    });
  },

  binaryFn: function(left, fn, right) {
    return extend(function(self, locals) {
      return fn(self, locals, left, right);
    }, {
      constant:left.constant && right.constant
    });
  },

  statements: function() {
    var statements = [];
    while (true) {
      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
        statements.push(this.filterChain());
      if (!this.expect(';')) {
        // optimize for the common case where there is only one statement.
        // TODO(size): maybe we should not support multiple statements?
        return (statements.length === 1)
            ? statements[0]
            : function(self, locals) {
                var value;
                for (var i = 0; i < statements.length; i++) {
                  var statement = statements[i];
                  if (statement) {
                    value = statement(self, locals);
                  }
                }
                return value;
              };
      }
    }
  },

  filterChain: function() {
    var left = this.expression();
    var token;
    while (true) {
      if ((token = this.expect('|'))) {
        left = this.binaryFn(left, token.fn, this.filter());
      } else {
        return left;
      }
    }
  },

  filter: function() {
    var token = this.expect();
    var fn = this.$filter(token.text);
    var argsFn = [];
    while (true) {
      if ((token = this.expect(':'))) {
        argsFn.push(this.expression());
      } else {
        var fnInvoke = function(self, locals, input) {
          var args = [input];
          for (var i = 0; i < argsFn.length; i++) {
            args.push(argsFn[i](self, locals));
          }
          return fn.apply(self, args);
        };
        return function() {
          return fnInvoke;
        };
      }
    }
  },

  expression: function() {
    return this.assignment();
  },

  assignment: function() {
    var left = this.ternary();
    var right;
    var token;
    if ((token = this.expect('='))) {
      if (!left.assign) {
        this.throwError('implies assignment but [' +
            this.text.substring(0, token.index) + '] can not be assigned to', token);
      }
      right = this.ternary();
      return function(scope, locals) {
        return left.assign(scope, right(scope, locals), locals);
      };
    }
    return left;
  },

  ternary: function() {
    var left = this.logicalOR();
    var middle;
    var token;
    if ((token = this.expect('?'))) {
      middle = this.ternary();
      if ((token = this.expect(':'))) {
        return this.ternaryFn(left, middle, this.ternary());
      } else {
        this.throwError('expected :', token);
      }
    } else {
      return left;
    }
  },

  logicalOR: function() {
    var left = this.logicalAND();
    var token;
    while (true) {
      if ((token = this.expect('||'))) {
        left = this.binaryFn(left, token.fn, this.logicalAND());
      } else {
        return left;
      }
    }
  },

  logicalAND: function() {
    var left = this.equality();
    var token;
    if ((token = this.expect('&&'))) {
      left = this.binaryFn(left, token.fn, this.logicalAND());
    }
    return left;
  },

  equality: function() {
    var left = this.relational();
    var token;
    if ((token = this.expect('==','!=','===','!=='))) {
      left = this.binaryFn(left, token.fn, this.equality());
    }
    return left;
  },

  relational: function() {
    var left = this.additive();
    var token;
    if ((token = this.expect('<', '>', '<=', '>='))) {
      left = this.binaryFn(left, token.fn, this.relational());
    }
    return left;
  },

  additive: function() {
    var left = this.multiplicative();
    var token;
    while ((token = this.expect('+','-'))) {
      left = this.binaryFn(left, token.fn, this.multiplicative());
    }
    return left;
  },

  multiplicative: function() {
    var left = this.unary();
    var token;
    while ((token = this.expect('*','/','%'))) {
      left = this.binaryFn(left, token.fn, this.unary());
    }
    return left;
  },

  unary: function() {
    var token;
    if (this.expect('+')) {
      return this.primary();
    } else if ((token = this.expect('-'))) {
      return this.binaryFn(Parser.ZERO, token.fn, this.unary());
    } else if ((token = this.expect('!'))) {
      return this.unaryFn(token.fn, this.unary());
    } else {
      return this.primary();
    }
  },

  fieldAccess: function(object) {
    var parser = this;
    var field = this.expect().text;
    var getter = getterFn(field, this.options, this.text);

    return extend(function(scope, locals, self) {
      return getter(self || object(scope, locals), locals);
    }, {
      assign: function(scope, value, locals) {
        return setter(object(scope, locals), field, value, parser.text, parser.options);
      }
    });
  },

  objectIndex: function(obj) {
    var parser = this;

    var indexFn = this.expression();
    this.consume(']');

    return extend(function(self, locals) {
      var o = obj(self, locals),
          i = indexFn(self, locals),
          v, p;

      if (!o) return undefined;
      v = ensureSafeObject(o[i], parser.text);
      if (v && v.then && parser.options.unwrapPromises) {
        p = v;
        if (!('$$v' in v)) {
          p.$$v = undefined;
          p.then(function(val) { p.$$v = val; });
        }
        v = v.$$v;
      }
      return v;
    }, {
      assign: function(self, value, locals) {
        var key = indexFn(self, locals);
        // prevent overwriting of Function.constructor which would break ensureSafeObject check
        var safe = ensureSafeObject(obj(self, locals), parser.text);
        return safe[key] = value;
      }
    });
  },

  functionCall: function(fn, contextGetter) {
    var argsFn = [];
    if (this.peekToken().text !== ')') {
      do {
        argsFn.push(this.expression());
      } while (this.expect(','));
    }
    this.consume(')');

    var parser = this;

    return function(scope, locals) {
      var args = [];
      var context = contextGetter ? contextGetter(scope, locals) : scope;

      for (var i = 0; i < argsFn.length; i++) {
        args.push(argsFn[i](scope, locals));
      }
      var fnPtr = fn(scope, locals, context) || noop;

      ensureSafeObject(context, parser.text);
      ensureSafeObject(fnPtr, parser.text);

      // IE stupidity! (IE doesn't have apply for some native functions)
      var v = fnPtr.apply
            ? fnPtr.apply(context, args)
            : fnPtr(args[0], args[1], args[2], args[3], args[4]);

      return ensureSafeObject(v, parser.text);
    };
  },

  // This is used with json array declaration
  arrayDeclaration: function () {
    var elementFns = [];
    var allConstant = true;
    if (this.peekToken().text !== ']') {
      do {
        var elementFn = this.expression();
        elementFns.push(elementFn);
        if (!elementFn.constant) {
          allConstant = false;
        }
      } while (this.expect(','));
    }
    this.consume(']');

    return extend(function(self, locals) {
      var array = [];
      for (var i = 0; i < elementFns.length; i++) {
        array.push(elementFns[i](self, locals));
      }
      return array;
    }, {
      literal: true,
      constant: allConstant
    });
  },

  object: function () {
    var keyValues = [];
    var allConstant = true;
    if (this.peekToken().text !== '}') {
      do {
        var token = this.expect(),
        key = token.string || token.text;
        this.consume(':');
        var value = this.expression();
        keyValues.push({key: key, value: value});
        if (!value.constant) {
          allConstant = false;
        }
      } while (this.expect(','));
    }
    this.consume('}');

    return extend(function(self, locals) {
      var object = {};
      for (var i = 0; i < keyValues.length; i++) {
        var keyValue = keyValues[i];
        object[keyValue.key] = keyValue.value(self, locals);
      }
      return object;
    }, {
      literal: true,
      constant: allConstant
    });
  }
};


//////////////////////////////////////////////////
// Parser helper functions
//////////////////////////////////////////////////

function setter(obj, path, setValue, fullExp, options) {
  //needed?
  options = options || {};

  var element = path.split('.'), key;
  for (var i = 0; element.length > 1; i++) {
    key = ensureSafeMemberName(element.shift(), fullExp);
    var propertyObj = obj[key];
    if (!propertyObj) {
      propertyObj = {};
      obj[key] = propertyObj;
    }
    obj = propertyObj;
    if (obj.then && options.unwrapPromises) {
      promiseWarning(fullExp);
      if (!("$$v" in obj)) {
        (function(promise) {
          promise.then(function(val) { promise.$$v = val; }); }
        )(obj);
      }
      if (obj.$$v === undefined) {
        obj.$$v = {};
      }
      obj = obj.$$v;
    }
  }
  key = ensureSafeMemberName(element.shift(), fullExp);
  obj[key] = setValue;
  return setValue;
}

var getterFnCache = {};

/**
 * Implementation of the "Black Hole" variant from:
 * - http://jsperf.com/angularjs-parse-getter/4
 * - http://jsperf.com/path-evaluation-simplified/7
 */
function cspSafeGetterFn(key0, key1, key2, key3, key4, fullExp, options) {
  ensureSafeMemberName(key0, fullExp);
  ensureSafeMemberName(key1, fullExp);
  ensureSafeMemberName(key2, fullExp);
  ensureSafeMemberName(key3, fullExp);
  ensureSafeMemberName(key4, fullExp);

  return !options.unwrapPromises
      ? function cspSafeGetter(scope, locals) {
          var pathVal = (locals && locals.hasOwnProperty(key0)) ? locals : scope;

          if (pathVal == null) return pathVal;
          pathVal = pathVal[key0];

          if (!key1) return pathVal;
          if (pathVal == null) return undefined;
          pathVal = pathVal[key1];

          if (!key2) return pathVal;
          if (pathVal == null) return undefined;
          pathVal = pathVal[key2];

          if (!key3) return pathVal;
          if (pathVal == null) return undefined;
          pathVal = pathVal[key3];

          if (!key4) return pathVal;
          if (pathVal == null) return undefined;
          pathVal = pathVal[key4];

          return pathVal;
        }
      : function cspSafePromiseEnabledGetter(scope, locals) {
          var pathVal = (locals && locals.hasOwnProperty(key0)) ? locals : scope,
              promise;

          if (pathVal == null) return pathVal;

          pathVal = pathVal[key0];
          if (pathVal && pathVal.then) {
            promiseWarning(fullExp);
            if (!("$$v" in pathVal)) {
              promise = pathVal;
              promise.$$v = undefined;
              promise.then(function(val) { promise.$$v = val; });
            }
            pathVal = pathVal.$$v;
          }

          if (!key1) return pathVal;
          if (pathVal == null) return undefined;
          pathVal = pathVal[key1];
          if (pathVal && pathVal.then) {
            promiseWarning(fullExp);
            if (!("$$v" in pathVal)) {
              promise = pathVal;
              promise.$$v = undefined;
              promise.then(function(val) { promise.$$v = val; });
            }
            pathVal = pathVal.$$v;
          }

          if (!key2) return pathVal;
          if (pathVal == null) return undefined;
          pathVal = pathVal[key2];
          if (pathVal && pathVal.then) {
            promiseWarning(fullExp);
            if (!("$$v" in pathVal)) {
              promise = pathVal;
              promise.$$v = undefined;
              promise.then(function(val) { promise.$$v = val; });
            }
            pathVal = pathVal.$$v;
          }

          if (!key3) return pathVal;
          if (pathVal == null) return undefined;
          pathVal = pathVal[key3];
          if (pathVal && pathVal.then) {
            promiseWarning(fullExp);
            if (!("$$v" in pathVal)) {
              promise = pathVal;
              promise.$$v = undefined;
              promise.then(function(val) { promise.$$v = val; });
            }
            pathVal = pathVal.$$v;
          }

          if (!key4) return pathVal;
          if (pathVal == null) return undefined;
          pathVal = pathVal[key4];
          if (pathVal && pathVal.then) {
            promiseWarning(fullExp);
            if (!("$$v" in pathVal)) {
              promise = pathVal;
              promise.$$v = undefined;
              promise.then(function(val) { promise.$$v = val; });
            }
            pathVal = pathVal.$$v;
          }
          return pathVal;
        };
}

function simpleGetterFn1(key0, fullExp) {
  ensureSafeMemberName(key0, fullExp);

  return function simpleGetterFn1(scope, locals) {
    if (scope == null) return undefined;
    return ((locals && locals.hasOwnProperty(key0)) ? locals : scope)[key0];
  };
}

function simpleGetterFn2(key0, key1, fullExp) {
  ensureSafeMemberName(key0, fullExp);
  ensureSafeMemberName(key1, fullExp);

  return function simpleGetterFn2(scope, locals) {
    if (scope == null) return undefined;
    scope = ((locals && locals.hasOwnProperty(key0)) ? locals : scope)[key0];
    return scope == null ? undefined : scope[key1];
  };
}

function getterFn(path, options, fullExp) {
  // Check whether the cache has this getter already.
  // We can use hasOwnProperty directly on the cache because we ensure,
  // see below, that the cache never stores a path called 'hasOwnProperty'
  if (getterFnCache.hasOwnProperty(path)) {
    return getterFnCache[path];
  }

  var pathKeys = path.split('.'),
      pathKeysLength = pathKeys.length,
      fn;

  // When we have only 1 or 2 tokens, use optimized special case closures.
  // http://jsperf.com/angularjs-parse-getter/6
  if (!options.unwrapPromises && pathKeysLength === 1) {
    fn = simpleGetterFn1(pathKeys[0], fullExp);
  } else if (!options.unwrapPromises && pathKeysLength === 2) {
    fn = simpleGetterFn2(pathKeys[0], pathKeys[1], fullExp);
  } else if (options.csp) {
    if (pathKeysLength < 6) {
      fn = cspSafeGetterFn(pathKeys[0], pathKeys[1], pathKeys[2], pathKeys[3], pathKeys[4], fullExp,
                          options);
    } else {
      fn = function(scope, locals) {
        var i = 0, val;
        do {
          val = cspSafeGetterFn(pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++],
                                pathKeys[i++], fullExp, options)(scope, locals);

          locals = undefined; // clear after first iteration
          scope = val;
        } while (i < pathKeysLength);
        return val;
      };
    }
  } else {
    var code = 'var p;\n';
    forEach(pathKeys, function(key, index) {
      ensureSafeMemberName(key, fullExp);
      code += 'if(s == null) return undefined;\n' +
              's='+ (index
                      // we simply dereference 's' on any .dot notation
                      ? 's'
                      // but if we are first then we check locals first, and if so read it first
                      : '((k&&k.hasOwnProperty("' + key + '"))?k:s)') + '["' + key + '"]' + ';\n' +
              (options.unwrapPromises
                ? 'if (s && s.then) {\n' +
                  ' pw("' + fullExp.replace(/(["\r\n])/g, '\\$1') + '");\n' +
                  ' if (!("$$v" in s)) {\n' +
                    ' p=s;\n' +
                    ' p.$$v = undefined;\n' +
                    ' p.then(function(v) {p.$$v=v;});\n' +
                    '}\n' +
                  ' s=s.$$v\n' +
                '}\n'
                : '');
    });
    code += 'return s;';

    /* jshint -W054 */
    var evaledFnGetter = new Function('s', 'k', 'pw', code); // s=scope, k=locals, pw=promiseWarning
    /* jshint +W054 */
    evaledFnGetter.toString = valueFn(code);
    fn = options.unwrapPromises ? function(scope, locals) {
      return evaledFnGetter(scope, locals, promiseWarning);
    } : evaledFnGetter;
  }

  // Only cache the value if it's not going to mess up the cache object
  // This is more performant that using Object.prototype.hasOwnProperty.call
  if (path !== 'hasOwnProperty') {
    getterFnCache[path] = fn;
  }
  return fn;
}

///////////////////////////////////

/**
 * @ngdoc function
 * @name ng.$parse
 * @function
 *
 * @description
 *
 * Converts Angular {@link guide/expression expression} into a function.
 *
 * <pre>
 *   var getter = $parse('user.name');
 *   var setter = getter.assign;
 *   var context = {user:{name:'angular'}};
 *   var locals = {user:{name:'local'}};
 *
 *   expect(getter(context)).toEqual('angular');
 *   setter(context, 'newValue');
 *   expect(context.user.name).toEqual('newValue');
 *   expect(getter(context, locals)).toEqual('local');
 * </pre>
 *
 *
 * @param {string} expression String expression to compile.
 * @returns {function(context, locals)} a function which represents the compiled expression:
 *
 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
 *      are evaluated against (typically a scope object).
 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
 *      `context`.
 *
 *    The returned function also has the following properties:
 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
 *        literal.
 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
 *        constant literals.
 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
 *        set to a function to change its value on the given context.
 *
 */


/**
 * @ngdoc object
 * @name ng.$parseProvider
 * @function
 *
 * @description
 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
 *  service.
 */
function $ParseProvider() {
  var cache = {};

  var $parseOptions = {
    csp: false,
    unwrapPromises: false,
    logPromiseWarnings: true
  };


  /**
   * @deprecated Promise unwrapping via $parse is deprecated and will be removed in the future.
   *
   * @ngdoc method
   * @name ng.$parseProvider#unwrapPromises
   * @methodOf ng.$parseProvider
   * @description
   *
   * **This feature is deprecated, see deprecation notes below for more info**
   *
   * If set to true (default is false), $parse will unwrap promises automatically when a promise is
   * found at any part of the expression. In other words, if set to true, the expression will always
   * result in a non-promise value.
   *
   * While the promise is unresolved, it's treated as undefined, but once resolved and fulfilled,
   * the fulfillment value is used in place of the promise while evaluating the expression.
   *
   * **Deprecation notice**
   *
   * This is a feature that didn't prove to be wildly useful or popular, primarily because of the
   * dichotomy between data access in templates (accessed as raw values) and controller code
   * (accessed as promises).
   *
   * In most code we ended up resolving promises manually in controllers anyway and thus unifying
   * the model access there.
   *
   * Other downsides of automatic promise unwrapping:
   *
   * - when building components it's often desirable to receive the raw promises
   * - adds complexity and slows down expression evaluation
   * - makes expression code pre-generation unattractive due to the amount of code that needs to be
   *   generated
   * - makes IDE auto-completion and tool support hard
   *
   * **Warning Logs**
   *
   * If the unwrapping is enabled, Angular will log a warning about each expression that unwraps a
   * promise (to reduce the noise, each expression is logged only once). To disable this logging use
   * `$parseProvider.logPromiseWarnings(false)` api.
   *
   *
   * @param {boolean=} value New value.
   * @returns {boolean|self} Returns the current setting when used as getter and self if used as
   *                         setter.
   */
  this.unwrapPromises = function(value) {
    if (isDefined(value)) {
      $parseOptions.unwrapPromises = !!value;
      return this;
    } else {
      return $parseOptions.unwrapPromises;
    }
  };


  /**
   * @deprecated Promise unwrapping via $parse is deprecated and will be removed in the future.
   *
   * @ngdoc method
   * @name ng.$parseProvider#logPromiseWarnings
   * @methodOf ng.$parseProvider
   * @description
   *
   * Controls whether Angular should log a warning on any encounter of a promise in an expression.
   *
   * The default is set to `true`.
   *
   * This setting applies only if `$parseProvider.unwrapPromises` setting is set to true as well.
   *
   * @param {boolean=} value New value.
   * @returns {boolean|self} Returns the current setting when used as getter and self if used as
   *                         setter.
   */
 this.logPromiseWarnings = function(value) {
    if (isDefined(value)) {
      $parseOptions.logPromiseWarnings = value;
      return this;
    } else {
      return $parseOptions.logPromiseWarnings;
    }
  };


  this.$get = ['$filter', '$sniffer', '$log', function($filter, $sniffer, $log) {
    $parseOptions.csp = $sniffer.csp;

    promiseWarning = function promiseWarningFn(fullExp) {
      if (!$parseOptions.logPromiseWarnings || promiseWarningCache.hasOwnProperty(fullExp)) return;
      promiseWarningCache[fullExp] = true;
      $log.warn('[$parse] Promise found in the expression `' + fullExp + '`. ' +
          'Automatic unwrapping of promises in Angular expressions is deprecated.');
    };

    return function(exp) {
      var parsedExpression;

      switch (typeof exp) {
        case 'string':

          if (cache.hasOwnProperty(exp)) {
            return cache[exp];
          }

          var lexer = new Lexer($parseOptions);
          var parser = new Parser(lexer, $filter, $parseOptions);
          parsedExpression = parser.parse(exp, false);

          if (exp !== 'hasOwnProperty') {
            // Only cache the value if it's not going to mess up the cache object
            // This is more performant that using Object.prototype.hasOwnProperty.call
            cache[exp] = parsedExpression;
          }

          return parsedExpression;

        case 'function':
          return exp;

        default:
          return noop;
      }
    };
  }];
}

/**
 * @ngdoc service
 * @name ng.$q
 * @requires $rootScope
 *
 * @description
 * A promise/deferred implementation inspired by [Kris Kowal's Q](https://github.com/kriskowal/q).
 *
 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
 * interface for interacting with an object that represents the result of an action that is
 * performed asynchronously, and may or may not be finished at any given point in time.
 *
 * From the perspective of dealing with error handling, deferred and promise APIs are to
 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
 *
 * <pre>
 *   // for the purpose of this example let's assume that variables `$q` and `scope` are
 *   // available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     var deferred = $q.defer();
 *
 *     setTimeout(function() {
 *       // since this fn executes async in a future turn of the event loop, we need to wrap
 *       // our code into an $apply call so that the model changes are properly observed.
 *       scope.$apply(function() {
 *         deferred.notify('About to greet ' + name + '.');
 *
 *         if (okToGreet(name)) {
 *           deferred.resolve('Hello, ' + name + '!');
 *         } else {
 *           deferred.reject('Greeting ' + name + ' is not allowed.');
 *         }
 *       });
 *     }, 1000);
 *
 *     return deferred.promise;
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   }, function(update) {
 *     alert('Got notification: ' + update);
 *   });
 * </pre>
 *
 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
 * comes in the way of guarantees that promise and deferred APIs make, see
 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
 *
 * Additionally the promise api allows for composition that is very hard to do with the
 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
 * section on serial or parallel joining of promises.
 *
 *
 * # The Deferred API
 *
 * A new instance of deferred is constructed by calling `$q.defer()`.
 *
 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
 * that can be used for signaling the successful or unsuccessful completion, as well as the status
 * of the task.
 *
 * **Methods**
 *
 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
 *   constructed via `$q.reject`, the promise will be rejected instead.
 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
 *   resolving it with a rejection constructed via `$q.reject`.
 * - `notify(value)` - provides updates on the status of the promises execution. This may be called
 *   multiple times before the promise is either resolved or rejected.
 *
 * **Properties**
 *
 * - promise – `{Promise}` – promise object associated with this deferred.
 *
 *
 * # The Promise API
 *
 * A new promise instance is created when a deferred instance is created and can be retrieved by
 * calling `deferred.promise`.
 *
 * The purpose of the promise object is to allow for interested parties to get access to the result
 * of the deferred task when it completes.
 *
 * **Methods**
 *
 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
 *   as soon as the result is available. The callbacks are called with a single argument: the result
 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
 *   provide a progress indication, before the promise is resolved or rejected.
 *
 *   This method *returns a new promise* which is resolved or rejected via the return value of the
 *   `successCallback`, `errorCallback`. It also notifies via the return value of the
 *   `notifyCallback` method. The promise can not be resolved or rejected from the notifyCallback
 *   method.
 *
 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
 *
 * - `finally(callback)` – allows you to observe either the fulfillment or rejection of a promise,
 *   but to do so without modifying the final value. This is useful to release resources or do some
 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
 *   more information.
 *
 *   Because `finally` is a reserved word in JavaScript and reserved keywords are not supported as
 *   property names by ES3, you'll need to invoke the method like `promise['finally'](callback)` to
 *   make your code IE8 compatible.
 *
 * # Chaining promises
 *
 * Because calling the `then` method of a promise returns a new derived promise, it is easily
 * possible to create a chain of promises:
 *
 * <pre>
 *   promiseB = promiseA.then(function(result) {
 *     return result + 1;
 *   });
 *
 *   // promiseB will be resolved immediately after promiseA is resolved and its value
 *   // will be the result of promiseA incremented by 1
 * </pre>
 *
 * It is possible to create chains of any length and since a promise can be resolved with another
 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
 * $http's response interceptors.
 *
 *
 * # Differences between Kris Kowal's Q and $q
 *
 *  There are two main differences:
 *
 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
 *   mechanism in angular, which means faster propagation of resolution or rejection into your
 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
 *   all the important functionality needed for common async tasks.
 *
 *  # Testing
 *
 *  <pre>
 *    it('should simulate promise', inject(function($q, $rootScope) {
 *      var deferred = $q.defer();
 *      var promise = deferred.promise;
 *      var resolvedValue;
 *
 *      promise.then(function(value) { resolvedValue = value; });
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Simulate resolving of promise
 *      deferred.resolve(123);
 *      // Note that the 'then' function does not get called synchronously.
 *      // This is because we want the promise API to always be async, whether or not
 *      // it got called synchronously or asynchronously.
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Propagate promise resolution to 'then' functions using $apply().
 *      $rootScope.$apply();
 *      expect(resolvedValue).toEqual(123);
 *    }));
 *  </pre>
 */
function $QProvider() {

  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {
    return qFactory(function(callback) {
      $rootScope.$evalAsync(callback);
    }, $exceptionHandler);
  }];
}


/**
 * Constructs a promise manager.
 *
 * @param {function(function)} nextTick Function for executing functions in the next turn.
 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
 *     debugging purposes.
 * @returns {object} Promise manager.
 */
function qFactory(nextTick, exceptionHandler) {

  /**
   * @ngdoc
   * @name ng.$q#defer
   * @methodOf ng.$q
   * @description
   * Creates a `Deferred` object which represents a task which will finish in the future.
   *
   * @returns {Deferred} Returns a new instance of deferred.
   */
  var defer = function() {
    var pending = [],
        value, deferred;

    deferred = {

      resolve: function(val) {
        if (pending) {
          var callbacks = pending;
          pending = undefined;
          value = ref(val);

          if (callbacks.length) {
            nextTick(function() {
              var callback;
              for (var i = 0, ii = callbacks.length; i < ii; i++) {
                callback = callbacks[i];
                value.then(callback[0], callback[1], callback[2]);
              }
            });
          }
        }
      },


      reject: function(reason) {
        deferred.resolve(reject(reason));
      },


      notify: function(progress) {
        if (pending) {
          var callbacks = pending;

          if (pending.length) {
            nextTick(function() {
              var callback;
              for (var i = 0, ii = callbacks.length; i < ii; i++) {
                callback = callbacks[i];
                callback[2](progress);
              }
            });
          }
        }
      },


      promise: {
        then: function(callback, errback, progressback) {
          var result = defer();

          var wrappedCallback = function(value) {
            try {
              result.resolve((isFunction(callback) ? callback : defaultCallback)(value));
            } catch(e) {
              result.reject(e);
              exceptionHandler(e);
            }
          };

          var wrappedErrback = function(reason) {
            try {
              result.resolve((isFunction(errback) ? errback : defaultErrback)(reason));
            } catch(e) {
              result.reject(e);
              exceptionHandler(e);
            }
          };

          var wrappedProgressback = function(progress) {
            try {
              result.notify((isFunction(progressback) ? progressback : defaultCallback)(progress));
            } catch(e) {
              exceptionHandler(e);
            }
          };

          if (pending) {
            pending.push([wrappedCallback, wrappedErrback, wrappedProgressback]);
          } else {
            value.then(wrappedCallback, wrappedErrback, wrappedProgressback);
          }

          return result.promise;
        },

        "catch": function(callback) {
          return this.then(null, callback);
        },

        "finally": function(callback) {

          function makePromise(value, resolved) {
            var result = defer();
            if (resolved) {
              result.resolve(value);
            } else {
              result.reject(value);
            }
            return result.promise;
          }

          function handleCallback(value, isResolved) {
            var callbackOutput = null;
            try {
              callbackOutput = (callback ||defaultCallback)();
            } catch(e) {
              return makePromise(e, false);
            }
            if (callbackOutput && isFunction(callbackOutput.then)) {
              return callbackOutput.then(function() {
                return makePromise(value, isResolved);
              }, function(error) {
                return makePromise(error, false);
              });
            } else {
              return makePromise(value, isResolved);
            }
          }

          return this.then(function(value) {
            return handleCallback(value, true);
          }, function(error) {
            return handleCallback(error, false);
          });
        }
      }
    };

    return deferred;
  };


  var ref = function(value) {
    if (value && isFunction(value.then)) return value;
    return {
      then: function(callback) {
        var result = defer();
        nextTick(function() {
          result.resolve(callback(value));
        });
        return result.promise;
      }
    };
  };


  /**
   * @ngdoc
   * @name ng.$q#reject
   * @methodOf ng.$q
   * @description
   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
   * a promise chain, you don't need to worry about it.
   *
   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
   * a promise error callback and you want to forward the error to the promise derived from the
   * current promise, you have to "rethrow" the error by returning a rejection constructed via
   * `reject`.
   *
   * <pre>
   *   promiseB = promiseA.then(function(result) {
   *     // success: do something and resolve promiseB
   *     //          with the old or a new result
   *     return result;
   *   }, function(reason) {
   *     // error: handle the error if possible and
   *     //        resolve promiseB with newPromiseOrValue,
   *     //        otherwise forward the rejection to promiseB
   *     if (canHandle(reason)) {
   *      // handle the error and recover
   *      return newPromiseOrValue;
   *     }
   *     return $q.reject(reason);
   *   });
   * </pre>
   *
   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
   */
  var reject = function(reason) {
    return {
      then: function(callback, errback) {
        var result = defer();
        nextTick(function() {
          try {
            result.resolve((isFunction(errback) ? errback : defaultErrback)(reason));
          } catch(e) {
            result.reject(e);
            exceptionHandler(e);
          }
        });
        return result.promise;
      }
    };
  };


  /**
   * @ngdoc
   * @name ng.$q#when
   * @methodOf ng.$q
   * @description
   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
   * This is useful when you are dealing with an object that might or might not be a promise, or if
   * the promise comes from a source that can't be trusted.
   *
   * @param {*} value Value or a promise
   * @returns {Promise} Returns a promise of the passed value or promise
   */
  var when = function(value, callback, errback, progressback) {
    var result = defer(),
        done;

    var wrappedCallback = function(value) {
      try {
        return (isFunction(callback) ? callback : defaultCallback)(value);
      } catch (e) {
        exceptionHandler(e);
        return reject(e);
      }
    };

    var wrappedErrback = function(reason) {
      try {
        return (isFunction(errback) ? errback : defaultErrback)(reason);
      } catch (e) {
        exceptionHandler(e);
        return reject(e);
      }
    };

    var wrappedProgressback = function(progress) {
      try {
        return (isFunction(progressback) ? progressback : defaultCallback)(progress);
      } catch (e) {
        exceptionHandler(e);
      }
    };

    nextTick(function() {
      ref(value).then(function(value) {
        if (done) return;
        done = true;
        result.resolve(ref(value).then(wrappedCallback, wrappedErrback, wrappedProgressback));
      }, function(reason) {
        if (done) return;
        done = true;
        result.resolve(wrappedErrback(reason));
      }, function(progress) {
        if (done) return;
        result.notify(wrappedProgressback(progress));
      });
    });

    return result.promise;
  };


  function defaultCallback(value) {
    return value;
  }


  function defaultErrback(reason) {
    return reject(reason);
  }


  /**
   * @ngdoc
   * @name ng.$q#all
   * @methodOf ng.$q
   * @description
   * Combines multiple promises into a single promise that is resolved when all of the input
   * promises are resolved.
   *
   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
   *   with the same rejection value.
   */
  function all(promises) {
    var deferred = defer(),
        counter = 0,
        results = isArray(promises) ? [] : {};

    forEach(promises, function(promise, key) {
      counter++;
      ref(promise).then(function(value) {
        if (results.hasOwnProperty(key)) return;
        results[key] = value;
        if (!(--counter)) deferred.resolve(results);
      }, function(reason) {
        if (results.hasOwnProperty(key)) return;
        deferred.reject(reason);
      });
    });

    if (counter === 0) {
      deferred.resolve(results);
    }

    return deferred.promise;
  }

  return {
    defer: defer,
    reject: reject,
    when: when,
    all: all
  };
}

/**
 * DESIGN NOTES
 *
 * The design decisions behind the scope are heavily favored for speed and memory consumption.
 *
 * The typical use of scope is to watch the expressions, which most of the time return the same
 * value as last time so we optimize the operation.
 *
 * Closures construction is expensive in terms of speed as well as memory:
 *   - No closures, instead use prototypical inheritance for API
 *   - Internal state needs to be stored on scope directly, which means that private state is
 *     exposed as $$____ properties
 *
 * Loop operations are optimized by using while(count--) { ... }
 *   - this means that in order to keep the same order of execution as addition we have to add
 *     items to the array at the beginning (shift) instead of at the end (push)
 *
 * Child scopes are created and removed often
 *   - Using an array would be slow since inserts in middle are expensive so we use linked list
 *
 * There are few watches then a lot of observers. This is why you don't want the observer to be
 * implemented in the same way as watch. Watch requires return of initialization function which
 * are expensive to construct.
 */


/**
 * @ngdoc object
 * @name ng.$rootScopeProvider
 * @description
 *
 * Provider for the $rootScope service.
 */

/**
 * @ngdoc function
 * @name ng.$rootScopeProvider#digestTtl
 * @methodOf ng.$rootScopeProvider
 * @description
 *
 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
 * assuming that the model is unstable.
 *
 * The current default is 10 iterations.
 *
 * In complex applications it's possible that the dependencies between `$watch`s will result in
 * several digest iterations. However if an application needs more than the default 10 digest
 * iterations for its model to stabilize then you should investigate what is causing the model to
 * continuously change during the digest.
 *
 * Increasing the TTL could have performance implications, so you should not change it without
 * proper justification.
 *
 * @param {number} limit The number of digest iterations.
 */


/**
 * @ngdoc object
 * @name ng.$rootScope
 * @description
 *
 * Every application has a single root {@link ng.$rootScope.Scope scope}.
 * All other scopes are descendant scopes of the root scope. Scopes provide separation
 * between the model and the view, via a mechanism for watching the model for changes.
 * They also provide an event emission/broadcast and subscription facility. See the
 * {@link guide/scope developer guide on scopes}.
 */
function $RootScopeProvider(){
  var TTL = 10;
  var $rootScopeMinErr = minErr('$rootScope');
  var lastDirtyWatch = null;

  this.digestTtl = function(value) {
    if (arguments.length) {
      TTL = value;
    }
    return TTL;
  };

  this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',
      function( $injector,   $exceptionHandler,   $parse,   $browser) {

    /**
     * @ngdoc function
     * @name ng.$rootScope.Scope
     *
     * @description
     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
     * {@link AUTO.$injector $injector}. Child scopes are created using the
     * {@link ng.$rootScope.Scope#methods_$new $new()} method. (Most scopes are created automatically when
     * compiled HTML template is executed.)
     *
     * Here is a simple scope snippet to show how you can interact with the scope.
     * <pre>
     * <file src="./test/ng/rootScopeSpec.js" tag="docs1" />
     * </pre>
     *
     * # Inheritance
     * A scope can inherit from a parent scope, as in this example:
     * <pre>
         var parent = $rootScope;
         var child = parent.$new();

         parent.salutation = "Hello";
         child.name = "World";
         expect(child.salutation).toEqual('Hello');

         child.salutation = "Welcome";
         expect(child.salutation).toEqual('Welcome');
         expect(parent.salutation).toEqual('Hello');
     * </pre>
     *
     *
     * @param {Object.<string, function()>=} providers Map of service factory which need to be
     *                                       provided for the current scope. Defaults to {@link ng}.
     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
     *                              append/override services provided by `providers`. This is handy
     *                              when unit-testing and having the need to override a default
     *                              service.
     * @returns {Object} Newly created scope.
     *
     */
    function Scope() {
      this.$id = nextUid();
      this.$$phase = this.$parent = this.$$watchers =
                     this.$$nextSibling = this.$$prevSibling =
                     this.$$childHead = this.$$childTail = null;
      this['this'] = this.$root =  this;
      this.$$destroyed = false;
      this.$$asyncQueue = [];
      this.$$postDigestQueue = [];
      this.$$listeners = {};
      this.$$listenerCount = {};
      this.$$isolateBindings = {};
    }

    /**
     * @ngdoc property
     * @name ng.$rootScope.Scope#$id
     * @propertyOf ng.$rootScope.Scope
     * @returns {number} Unique scope ID (monotonically increasing alphanumeric sequence) useful for
     *   debugging.
     */


    Scope.prototype = {
      constructor: Scope,
      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$new
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * Creates a new child {@link ng.$rootScope.Scope scope}.
       *
       * The parent scope will propagate the {@link ng.$rootScope.Scope#methods_$digest $digest()} and
       * {@link ng.$rootScope.Scope#methods_$digest $digest()} events. The scope can be removed from the
       * scope hierarchy using {@link ng.$rootScope.Scope#methods_$destroy $destroy()}.
       *
       * {@link ng.$rootScope.Scope#methods_$destroy $destroy()} must be called on a scope when it is
       * desired for the scope and its child scopes to be permanently detached from the parent and
       * thus stop participating in model change detection and listener notification by invoking.
       *
       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
       *         parent scope. The scope is isolated, as it can not see parent scope properties.
       *         When creating widgets, it is useful for the widget to not accidentally read parent
       *         state.
       *
       * @returns {Object} The newly created child scope.
       *
       */
      $new: function(isolate) {
        var ChildScope,
            child;

        if (isolate) {
          child = new Scope();
          child.$root = this.$root;
          // ensure that there is just one async queue per $rootScope and its children
          child.$$asyncQueue = this.$$asyncQueue;
          child.$$postDigestQueue = this.$$postDigestQueue;
        } else {
          ChildScope = function() {}; // should be anonymous; This is so that when the minifier munges
            // the name it does not become random set of chars. This will then show up as class
            // name in the web inspector.
          ChildScope.prototype = this;
          child = new ChildScope();
          child.$id = nextUid();
        }
        child['this'] = child;
        child.$$listeners = {};
        child.$$listenerCount = {};
        child.$parent = this;
        child.$$watchers = child.$$nextSibling = child.$$childHead = child.$$childTail = null;
        child.$$prevSibling = this.$$childTail;
        if (this.$$childHead) {
          this.$$childTail.$$nextSibling = child;
          this.$$childTail = child;
        } else {
          this.$$childHead = this.$$childTail = child;
        }
        return child;
      },

      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$watch
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
       *
       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#methods_$digest
       *   $digest()} and should return the value that will be watched. (Since
       *   {@link ng.$rootScope.Scope#methods_$digest $digest()} reruns when it detects changes the
       *   `watchExpression` can execute multiple times per
       *   {@link ng.$rootScope.Scope#methods_$digest $digest()} and should be idempotent.)
       * - The `listener` is called only when the value from the current `watchExpression` and the
       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
       *   see below). The inequality is determined according to
       *   {@link angular.equals} function. To save the value of the object for later comparison,
       *   the {@link angular.copy} function is used. It also means that watching complex options
       *   will have adverse memory and performance implications.
       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
       *   iteration limit is 10 to prevent an infinite loop deadlock.
       *
       *
       * If you want to be notified whenever {@link ng.$rootScope.Scope#methods_$digest $digest} is called,
       * you can register a `watchExpression` function with no `listener`. (Since `watchExpression`
       * can execute multiple times per {@link ng.$rootScope.Scope#methods_$digest $digest} cycle when a
       * change is detected, be prepared for multiple calls to your listener.)
       *
       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
       * (via {@link ng.$rootScope.Scope#methods_$evalAsync $evalAsync}) to initialize the
       * watcher. In rare cases, this is undesirable because the listener is called when the result
       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
       * listener was called due to initialization.
       *
       * The example below contains an illustration of using a function as your $watch listener
       *
       *
       * # Example
       * <pre>
           // let's assume that scope was dependency injected as the $rootScope
           var scope = $rootScope;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // no variable change
           expect(scope.counter).toEqual(0);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(1);



           // Using a listener function
           var food;
           scope.foodCounter = 0;
           expect(scope.foodCounter).toEqual(0);
           scope.$watch(
             // This is the listener function
             function() { return food; },
             // This is the change handler
             function(newValue, oldValue) {
               if ( newValue !== oldValue ) {
                 // Only increment the counter if the value changed
                 scope.foodCounter = scope.foodCounter + 1;
               }
             }
           );
           // No digest has been run so the counter will be zero
           expect(scope.foodCounter).toEqual(0);

           // Run the digest but since food has not changed count will still be zero
           scope.$digest();
           expect(scope.foodCounter).toEqual(0);

           // Update food and run digest.  Now the counter will increment
           food = 'cheeseburger';
           scope.$digest();
           expect(scope.foodCounter).toEqual(1);

       * </pre>
       *
       *
       *
       * @param {(function()|string)} watchExpression Expression that is evaluated on each
       *    {@link ng.$rootScope.Scope#methods_$digest $digest} cycle. A change in the return value triggers
       *    a call to the `listener`.
       *
       *    - `string`: Evaluated as {@link guide/expression expression}
       *    - `function(scope)`: called with current `scope` as a parameter.
       * @param {(function()|string)=} listener Callback called whenever the return value of
       *   the `watchExpression` changes.
       *
       *    - `string`: Evaluated as {@link guide/expression expression}
       *    - `function(newValue, oldValue, scope)`: called with current and previous values as
       *      parameters.
       *
       * @param {boolean=} objectEquality Compare object for equality rather than for reference.
       * @returns {function()} Returns a deregistration function for this listener.
       */
      $watch: function(watchExp, listener, objectEquality) {
        var scope = this,
            get = compileToFn(watchExp, 'watch'),
            array = scope.$$watchers,
            watcher = {
              fn: listener,
              last: initWatchVal,
              get: get,
              exp: watchExp,
              eq: !!objectEquality
            };

        lastDirtyWatch = null;

        // in the case user pass string, we need to compile it, do we really need this ?
        if (!isFunction(listener)) {
          var listenFn = compileToFn(listener || noop, 'listener');
          watcher.fn = function(newVal, oldVal, scope) {listenFn(scope);};
        }

        if (typeof watchExp == 'string' && get.constant) {
          var originalFn = watcher.fn;
          watcher.fn = function(newVal, oldVal, scope) {
            originalFn.call(this, newVal, oldVal, scope);
            arrayRemove(array, watcher);
          };
        }

        if (!array) {
          array = scope.$$watchers = [];
        }
        // we use unshift since we use a while loop in $digest for speed.
        // the while loop reads in reverse order.
        array.unshift(watcher);

        return function() {
          arrayRemove(array, watcher);
          lastDirtyWatch = null;
        };
      },


      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$watchCollection
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * Shallow watches the properties of an object and fires whenever any of the properties change
       * (for arrays, this implies watching the array items; for object maps, this implies watching
       * the properties). If a change is detected, the `listener` callback is fired.
       *
       * - The `obj` collection is observed via standard $watch operation and is examined on every
       *   call to $digest() to see if any items have been added, removed, or moved.
       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
       *   adding, removing, and moving items belonging to an object or array.
       *
       *
       * # Example
       * <pre>
          $scope.names = ['igor', 'matias', 'misko', 'james'];
          $scope.dataCount = 4;

          $scope.$watchCollection('names', function(newNames, oldNames) {
            $scope.dataCount = newNames.length;
          });

          expect($scope.dataCount).toEqual(4);
          $scope.$digest();

          //still at 4 ... no changes
          expect($scope.dataCount).toEqual(4);

          $scope.names.pop();
          $scope.$digest();

          //now there's been a change
          expect($scope.dataCount).toEqual(3);
       * </pre>
       *
       *
       * @param {string|Function(scope)} obj Evaluated as {@link guide/expression expression}. The
       *    expression value should evaluate to an object or an array which is observed on each
       *    {@link ng.$rootScope.Scope#methods_$digest $digest} cycle. Any shallow change within the
       *    collection will trigger a call to the `listener`.
       *
       * @param {function(newCollection, oldCollection, scope)} listener a callback function that is
       *    fired with both the `newCollection` and `oldCollection` as parameters.
       *    The `newCollection` object is the newly modified data obtained from the `obj` expression
       *    and the `oldCollection` object is a copy of the former collection data.
       *    The `scope` refers to the current scope.
       *
       * @returns {function()} Returns a de-registration function for this listener. When the
       *    de-registration function is executed, the internal watch operation is terminated.
       */
      $watchCollection: function(obj, listener) {
        var self = this;
        var oldValue;
        var newValue;
        var changeDetected = 0;
        var objGetter = $parse(obj);
        var internalArray = [];
        var internalObject = {};
        var oldLength = 0;

        function $watchCollectionWatch() {
          newValue = objGetter(self);
          var newLength, key;

          if (!isObject(newValue)) {
            if (oldValue !== newValue) {
              oldValue = newValue;
              changeDetected++;
            }
          } else if (isArrayLike(newValue)) {
            if (oldValue !== internalArray) {
              // we are transitioning from something which was not an array into array.
              oldValue = internalArray;
              oldLength = oldValue.length = 0;
              changeDetected++;
            }

            newLength = newValue.length;

            if (oldLength !== newLength) {
              // if lengths do not match we need to trigger change notification
              changeDetected++;
              oldValue.length = oldLength = newLength;
            }
            // copy the items to oldValue and look for changes.
            for (var i = 0; i < newLength; i++) {
              if (oldValue[i] !== newValue[i]) {
                changeDetected++;
                oldValue[i] = newValue[i];
              }
            }
          } else {
            if (oldValue !== internalObject) {
              // we are transitioning from something which was not an object into object.
              oldValue = internalObject = {};
              oldLength = 0;
              changeDetected++;
            }
            // copy the items to oldValue and look for changes.
            newLength = 0;
            for (key in newValue) {
              if (newValue.hasOwnProperty(key)) {
                newLength++;
                if (oldValue.hasOwnProperty(key)) {
                  if (oldValue[key] !== newValue[key]) {
                    changeDetected++;
                    oldValue[key] = newValue[key];
                  }
                } else {
                  oldLength++;
                  oldValue[key] = newValue[key];
                  changeDetected++;
                }
              }
            }
            if (oldLength > newLength) {
              // we used to have more keys, need to find them and destroy them.
              changeDetected++;
              for(key in oldValue) {
                if (oldValue.hasOwnProperty(key) && !newValue.hasOwnProperty(key)) {
                  oldLength--;
                  delete oldValue[key];
                }
              }
            }
          }
          return changeDetected;
        }

        function $watchCollectionAction() {
          listener(newValue, oldValue, self);
        }

        return this.$watch($watchCollectionWatch, $watchCollectionAction);
      },

      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$digest
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * Processes all of the {@link ng.$rootScope.Scope#methods_$watch watchers} of the current scope and
       * its children. Because a {@link ng.$rootScope.Scope#methods_$watch watcher}'s listener can change
       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#methods_$watch watchers}
       * until no more listeners are firing. This means that it is possible to get into an infinite
       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
       * iterations exceeds 10.
       *
       * Usually, you don't call `$digest()` directly in
       * {@link ng.directive:ngController controllers} or in
       * {@link ng.$compileProvider#methods_directive directives}.
       * Instead, you should call {@link ng.$rootScope.Scope#methods_$apply $apply()} (typically from within
       * a {@link ng.$compileProvider#methods_directive directives}), which will force a `$digest()`.
       *
       * If you want to be notified whenever `$digest()` is called,
       * you can register a `watchExpression` function with
       * {@link ng.$rootScope.Scope#methods_$watch $watch()} with no `listener`.
       *
       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
       *
       * # Example
       * <pre>
           var scope = ...;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // no variable change
           expect(scope.counter).toEqual(0);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(1);
       * </pre>
       *
       */
      $digest: function() {
        var watch, value, last,
            watchers,
            asyncQueue = this.$$asyncQueue,
            postDigestQueue = this.$$postDigestQueue,
            length,
            dirty, ttl = TTL,
            next, current, target = this,
            watchLog = [],
            logIdx, logMsg, asyncTask;

        beginPhase('$digest');

        lastDirtyWatch = null;

        do { // "while dirty" loop
          dirty = false;
          current = target;

          while(asyncQueue.length) {
            try {
              asyncTask = asyncQueue.shift();
              asyncTask.scope.$eval(asyncTask.expression);
            } catch (e) {
              clearPhase();
              $exceptionHandler(e);
            }
            lastDirtyWatch = null;
          }

          traverseScopesLoop:
          do { // "traverse the scopes" loop
            if ((watchers = current.$$watchers)) {
              // process our watches
              length = watchers.length;
              while (length--) {
                try {
                  watch = watchers[length];
                  // Most common watches are on primitives, in which case we can short
                  // circuit it with === operator, only when === fails do we use .equals
                  if (watch) {
                    if ((value = watch.get(current)) !== (last = watch.last) &&
                        !(watch.eq
                            ? equals(value, last)
                            : (typeof value == 'number' && typeof last == 'number'
                               && isNaN(value) && isNaN(last)))) {
                      dirty = true;
                      lastDirtyWatch = watch;
                      watch.last = watch.eq ? copy(value) : value;
                      watch.fn(value, ((last === initWatchVal) ? value : last), current);
                      if (ttl < 5) {
                        logIdx = 4 - ttl;
                        if (!watchLog[logIdx]) watchLog[logIdx] = [];
                        logMsg = (isFunction(watch.exp))
                            ? 'fn: ' + (watch.exp.name || watch.exp.toString())
                            : watch.exp;
                        logMsg += '; newVal: ' + toJson(value) + '; oldVal: ' + toJson(last);
                        watchLog[logIdx].push(logMsg);
                      }
                    } else if (watch === lastDirtyWatch) {
                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
                      // have already been tested.
                      dirty = false;
                      break traverseScopesLoop;
                    }
                  }
                } catch (e) {
                  clearPhase();
                  $exceptionHandler(e);
                }
              }
            }

            // Insanity Warning: scope depth-first traversal
            // yes, this code is a bit crazy, but it works and we have tests to prove it!
            // this piece should be kept in sync with the traversal in $broadcast
            if (!(next = (current.$$childHead ||
                (current !== target && current.$$nextSibling)))) {
              while(current !== target && !(next = current.$$nextSibling)) {
                current = current.$parent;
              }
            }
          } while ((current = next));

          // `break traverseScopesLoop;` takes us to here

          if(dirty && !(ttl--)) {
            clearPhase();
            throw $rootScopeMinErr('infdig',
                '{0} $digest() iterations reached. Aborting!\n' +
                'Watchers fired in the last 5 iterations: {1}',
                TTL, toJson(watchLog));
          }

        } while (dirty || asyncQueue.length);

        clearPhase();

        while(postDigestQueue.length) {
          try {
            postDigestQueue.shift()();
          } catch (e) {
            $exceptionHandler(e);
          }
        }
      },


      /**
       * @ngdoc event
       * @name ng.$rootScope.Scope#$destroy
       * @eventOf ng.$rootScope.Scope
       * @eventType broadcast on scope being destroyed
       *
       * @description
       * Broadcasted when a scope and its children are being destroyed.
       *
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
       * clean up DOM bindings before an element is removed from the DOM.
       */

      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$destroy
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * Removes the current scope (and all of its children) from the parent scope. Removal implies
       * that calls to {@link ng.$rootScope.Scope#methods_$digest $digest()} will no longer
       * propagate to the current scope and its children. Removal also implies that the current
       * scope is eligible for garbage collection.
       *
       * The `$destroy()` is usually used by directives such as
       * {@link ng.directive:ngRepeat ngRepeat} for managing the
       * unrolling of the loop.
       *
       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
       * Application code can register a `$destroy` event handler that will give it a chance to
       * perform any necessary cleanup.
       *
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
       * clean up DOM bindings before an element is removed from the DOM.
       */
      $destroy: function() {
        // we can't destroy the root scope or a scope that has been already destroyed
        if (this.$$destroyed) return;
        var parent = this.$parent;

        this.$broadcast('$destroy');
        this.$$destroyed = true;
        if (this === $rootScope) return;

        forEach(this.$$listenerCount, bind(null, decrementListenerCount, this));

        if (parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;
        if (parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;
        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;

        // This is bogus code that works around Chrome's GC leak
        // see: https://github.com/angular/angular.js/issues/1313#issuecomment-10378451
        this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =
            this.$$childTail = null;
      },

      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$eval
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * Executes the `expression` on the current scope and returns the result. Any exceptions in
       * the expression are propagated (uncaught). This is useful when evaluating Angular
       * expressions.
       *
       * # Example
       * <pre>
           var scope = ng.$rootScope.Scope();
           scope.a = 1;
           scope.b = 2;

           expect(scope.$eval('a+b')).toEqual(3);
           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
       * </pre>
       *
       * @param {(string|function())=} expression An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
       * @returns {*} The result of evaluating the expression.
       */
      $eval: function(expr, locals) {
        return $parse(expr)(this, locals);
      },

      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$evalAsync
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * Executes the expression on the current scope at a later point in time.
       *
       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
       * that:
       *
       *   - it will execute after the function that scheduled the evaluation (preferably before DOM
       *     rendering).
       *   - at least one {@link ng.$rootScope.Scope#methods_$digest $digest cycle} will be performed after
       *     `expression` execution.
       *
       * Any exceptions from the execution of the expression are forwarded to the
       * {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
       * will be scheduled. However, it is encouraged to always call code that changes the model
       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
       *
       * @param {(string|function())=} expression An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       */
      $evalAsync: function(expr) {
        // if we are outside of an $digest loop and this is the first time we are scheduling async
        // task also schedule async auto-flush
        if (!$rootScope.$$phase && !$rootScope.$$asyncQueue.length) {
          $browser.defer(function() {
            if ($rootScope.$$asyncQueue.length) {
              $rootScope.$digest();
            }
          });
        }

        this.$$asyncQueue.push({scope: this, expression: expr});
      },

      $$postDigest : function(fn) {
        this.$$postDigestQueue.push(fn);
      },

      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$apply
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * `$apply()` is used to execute an expression in angular from outside of the angular
       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
       * Because we are calling into the angular framework we need to perform proper scope life
       * cycle of {@link ng.$exceptionHandler exception handling},
       * {@link ng.$rootScope.Scope#methods_$digest executing watches}.
       *
       * ## Life cycle
       *
       * # Pseudo-Code of `$apply()`
       * <pre>
           function $apply(expr) {
             try {
               return $eval(expr);
             } catch (e) {
               $exceptionHandler(e);
             } finally {
               $root.$digest();
             }
           }
       * </pre>
       *
       *
       * Scope's `$apply()` method transitions through the following stages:
       *
       * 1. The {@link guide/expression expression} is executed using the
       *    {@link ng.$rootScope.Scope#methods_$eval $eval()} method.
       * 2. Any exceptions from the execution of the expression are forwarded to the
       *    {@link ng.$exceptionHandler $exceptionHandler} service.
       * 3. The {@link ng.$rootScope.Scope#methods_$watch watch} listeners are fired immediately after the
       *    expression was executed using the {@link ng.$rootScope.Scope#methods_$digest $digest()} method.
       *
       *
       * @param {(string|function())=} exp An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with current `scope` parameter.
       *
       * @returns {*} The result of evaluating the expression.
       */
      $apply: function(expr) {
        try {
          beginPhase('$apply');
          return this.$eval(expr);
        } catch (e) {
          $exceptionHandler(e);
        } finally {
          clearPhase();
          try {
            $rootScope.$digest();
          } catch (e) {
            $exceptionHandler(e);
            throw e;
          }
        }
      },

      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$on
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * Listens on events of a given type. See {@link ng.$rootScope.Scope#methods_$emit $emit} for
       * discussion of event life cycle.
       *
       * The event listener function format is: `function(event, args...)`. The `event` object
       * passed into the listener has the following attributes:
       *
       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
       *     `$broadcast`-ed.
       *   - `currentScope` - `{Scope}`: the current scope which is handling the event.
       *   - `name` - `{string}`: name of the event.
       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
       *     further event propagation (available only for events that were `$emit`-ed).
       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
       *     to true.
       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
       *
       * @param {string} name Event name to listen on.
       * @param {function(event, args...)} listener Function to call when the event is emitted.
       * @returns {function()} Returns a deregistration function for this listener.
       */
      $on: function(name, listener) {
        var namedListeners = this.$$listeners[name];
        if (!namedListeners) {
          this.$$listeners[name] = namedListeners = [];
        }
        namedListeners.push(listener);

        var current = this;
        do {
          if (!current.$$listenerCount[name]) {
            current.$$listenerCount[name] = 0;
          }
          current.$$listenerCount[name]++;
        } while ((current = current.$parent));

        var self = this;
        return function() {
          namedListeners[indexOf(namedListeners, listener)] = null;
          decrementListenerCount(self, 1, name);
        };
      },


      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$emit
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * Dispatches an event `name` upwards through the scope hierarchy notifying the
       * registered {@link ng.$rootScope.Scope#methods_$on} listeners.
       *
       * The event life cycle starts at the scope on which `$emit` was called. All
       * {@link ng.$rootScope.Scope#methods_$on listeners} listening for `name` event on this scope get
       * notified. Afterwards, the event traverses upwards toward the root scope and calls all
       * registered listeners along the way. The event will stop propagating if one of the listeners
       * cancels it.
       *
       * Any exception emitted from the {@link ng.$rootScope.Scope#methods_$on listeners} will be passed
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * @param {string} name Event name to emit.
       * @param {...*} args Optional set of arguments which will be passed onto the event listeners.
       * @return {Object} Event object (see {@link ng.$rootScope.Scope#methods_$on}).
       */
      $emit: function(name, args) {
        var empty = [],
            namedListeners,
            scope = this,
            stopPropagation = false,
            event = {
              name: name,
              targetScope: scope,
              stopPropagation: function() {stopPropagation = true;},
              preventDefault: function() {
                event.defaultPrevented = true;
              },
              defaultPrevented: false
            },
            listenerArgs = concat([event], arguments, 1),
            i, length;

        do {
          namedListeners = scope.$$listeners[name] || empty;
          event.currentScope = scope;
          for (i=0, length=namedListeners.length; i<length; i++) {

            // if listeners were deregistered, defragment the array
            if (!namedListeners[i]) {
              namedListeners.splice(i, 1);
              i--;
              length--;
              continue;
            }
            try {
              //allow all listeners attached to the current scope to run
              namedListeners[i].apply(null, listenerArgs);
            } catch (e) {
              $exceptionHandler(e);
            }
          }
          //if any listener on the current scope stops propagation, prevent bubbling
          if (stopPropagation) return event;
          //traverse upwards
          scope = scope.$parent;
        } while (scope);

        return event;
      },


      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$broadcast
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
       * registered {@link ng.$rootScope.Scope#methods_$on} listeners.
       *
       * The event life cycle starts at the scope on which `$broadcast` was called. All
       * {@link ng.$rootScope.Scope#methods_$on listeners} listening for `name` event on this scope get
       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
       * scope and calls all registered listeners along the way. The event cannot be canceled.
       *
       * Any exception emitted from the {@link ng.$rootScope.Scope#methods_$on listeners} will be passed
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * @param {string} name Event name to broadcast.
       * @param {...*} args Optional set of arguments which will be passed onto the event listeners.
       * @return {Object} Event object, see {@link ng.$rootScope.Scope#methods_$on}
       */
      $broadcast: function(name, args) {
        var target = this,
            current = target,
            next = target,
            event = {
              name: name,
              targetScope: target,
              preventDefault: function() {
                event.defaultPrevented = true;
              },
              defaultPrevented: false
            },
            listenerArgs = concat([event], arguments, 1),
            listeners, i, length;

        //down while you can, then up and next sibling or up and next sibling until back at root
        while ((current = next)) {
          event.currentScope = current;
          listeners = current.$$listeners[name] || [];
          for (i=0, length = listeners.length; i<length; i++) {
            // if listeners were deregistered, defragment the array
            if (!listeners[i]) {
              listeners.splice(i, 1);
              i--;
              length--;
              continue;
            }

            try {
              listeners[i].apply(null, listenerArgs);
            } catch(e) {
              $exceptionHandler(e);
            }
          }

          // Insanity Warning: scope depth-first traversal
          // yes, this code is a bit crazy, but it works and we have tests to prove it!
          // this piece should be kept in sync with the traversal in $digest
          // (though it differs due to having the extra check for $$listenerCount)
          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
              (current !== target && current.$$nextSibling)))) {
            while(current !== target && !(next = current.$$nextSibling)) {
              current = current.$parent;
            }
          }
        }

        return event;
      }
    };

    var $rootScope = new Scope();

    return $rootScope;


    function beginPhase(phase) {
      if ($rootScope.$$phase) {
        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
      }

      $rootScope.$$phase = phase;
    }

    function clearPhase() {
      $rootScope.$$phase = null;
    }

    function compileToFn(exp, name) {
      var fn = $parse(exp);
      assertArgFn(fn, name);
      return fn;
    }

    function decrementListenerCount(current, count, name) {
      do {
        current.$$listenerCount[name] -= count;

        if (current.$$listenerCount[name] === 0) {
          delete current.$$listenerCount[name];
        }
      } while ((current = current.$parent));
    }

    /**
     * function used as an initial value for watchers.
     * because it's unique we can easily tell it apart from other values
     */
    function initWatchVal() {}
  }];
}

/**
 * @description
 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
 */
function $$SanitizeUriProvider() {
  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,
    imgSrcSanitizationWhitelist = /^\s*(https?|ftp|file):|data:image\//;

  /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.aHrefSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      aHrefSanitizationWhitelist = regexp;
      return this;
    }
    return aHrefSanitizationWhitelist;
  };


  /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.imgSrcSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      imgSrcSanitizationWhitelist = regexp;
      return this;
    }
    return imgSrcSanitizationWhitelist;
  };

  this.$get = function() {
    return function sanitizeUri(uri, isImage) {
      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
      var normalizedVal;
      // NOTE: urlResolve() doesn't support IE < 8 so we don't sanitize for that case.
      if (!msie || msie >= 8 ) {
        normalizedVal = urlResolve(uri).href;
        if (normalizedVal !== '' && !normalizedVal.match(regex)) {
          return 'unsafe:'+normalizedVal;
        }
      }
      return uri;
    };
  };
}

var $sceMinErr = minErr('$sce');

var SCE_CONTEXTS = {
  HTML: 'html',
  CSS: 'css',
  URL: 'url',
  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
  // url.  (e.g. ng-include, script src, templateUrl)
  RESOURCE_URL: 'resourceUrl',
  JS: 'js'
};

// Helper functions follow.

// Copied from:
// http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962
// Prereq: s is a string.
function escapeForRegexp(s) {
  return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
           replace(/\x08/g, '\\x08');
}


function adjustMatcher(matcher) {
  if (matcher === 'self') {
    return matcher;
  } else if (isString(matcher)) {
    // Strings match exactly except for 2 wildcards - '*' and '**'.
    // '*' matches any character except those from the set ':/.?&'.
    // '**' matches any character (like .* in a RegExp).
    // More than 2 *'s raises an error as it's ill defined.
    if (matcher.indexOf('***') > -1) {
      throw $sceMinErr('iwcard',
          'Illegal sequence *** in string matcher.  String: {0}', matcher);
    }
    matcher = escapeForRegexp(matcher).
                  replace('\\*\\*', '.*').
                  replace('\\*', '[^:/.?&;]*');
    return new RegExp('^' + matcher + '$');
  } else if (isRegExp(matcher)) {
    // The only other type of matcher allowed is a Regexp.
    // Match entire URL / disallow partial matches.
    // Flags are reset (i.e. no global, ignoreCase or multiline)
    return new RegExp('^' + matcher.source + '$');
  } else {
    throw $sceMinErr('imatcher',
        'Matchers may only be "self", string patterns or RegExp objects');
  }
}


function adjustMatchers(matchers) {
  var adjustedMatchers = [];
  if (isDefined(matchers)) {
    forEach(matchers, function(matcher) {
      adjustedMatchers.push(adjustMatcher(matcher));
    });
  }
  return adjustedMatchers;
}


/**
 * @ngdoc service
 * @name ng.$sceDelegate
 * @function
 *
 * @description
 *
 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
 * Contextual Escaping (SCE)} services to AngularJS.
 *
 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
 * work because `$sce` delegates to `$sceDelegate` for these operations.
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
 *
 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
 * can override it completely to change the behavior of `$sce`, the common case would
 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
 * templates.  Refer {@link ng.$sceDelegateProvider#methods_resourceUrlWhitelist
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
 * ng.$sceDelegateProvider#methods_resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 */

/**
 * @ngdoc object
 * @name ng.$sceDelegateProvider
 * @description
 *
 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
 * ng.$sceDelegateProvider#methods_resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
 * {@link ng.$sceDelegateProvider#methods_resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 *
 * For the general details about this service in Angular, read the main page for {@link ng.$sce
 * Strict Contextual Escaping (SCE)}.
 *
 * **Example**:  Consider the following case. <a name="example"></a>
 *
 * - your app is hosted at url `http://myapp.example.com/`
 * - but some of your templates are hosted on other domains you control such as
 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
 *
 * Here is what a secure configuration for this scenario might look like:
 *
 * <pre class="prettyprint">
 *    angular.module('myApp', []).config(function($sceDelegateProvider) {
 *      $sceDelegateProvider.resourceUrlWhitelist([
 *        // Allow same origin resource loads.
 *        'self',
 *        // Allow loading from our assets domain.  Notice the difference between * and **.
 *        'http://srv*.assets.example.com/**']);
 *
 *      // The blacklist overrides the whitelist so the open redirect here is blocked.
 *      $sceDelegateProvider.resourceUrlBlacklist([
 *        'http://myapp.example.com/clickThru**']);
 *      });
 * </pre>
 */

function $SceDelegateProvider() {
  this.SCE_CONTEXTS = SCE_CONTEXTS;

  // Resource URLs can also be trusted by policy.
  var resourceUrlWhitelist = ['self'],
      resourceUrlBlacklist = [];

  /**
   * @ngdoc function
   * @name ng.sceDelegateProvider#resourceUrlWhitelist
   * @methodOf ng.$sceDelegateProvider
   * @function
   *
   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
   *     provided.  This must be an array or null.  A snapshot of this array is used so further
   *     changes to the array are ignored.
   *
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *     allowed in this array.
   *
   *     Note: **an empty whitelist array will block all URLs**!
   *
   * @return {Array} the currently set whitelist array.
   *
   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
   * same origin resource requests.
   *
   * @description
   * Sets/Gets the whitelist of trusted resource URLs.
   */
  this.resourceUrlWhitelist = function (value) {
    if (arguments.length) {
      resourceUrlWhitelist = adjustMatchers(value);
    }
    return resourceUrlWhitelist;
  };

  /**
   * @ngdoc function
   * @name ng.sceDelegateProvider#resourceUrlBlacklist
   * @methodOf ng.$sceDelegateProvider
   * @function
   *
   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
   *     provided.  This must be an array or null.  A snapshot of this array is used so further
   *     changes to the array are ignored.
   *
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *     allowed in this array.
   *
   *     The typical usage for the blacklist is to **block
   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
   *     these would otherwise be trusted but actually return content from the redirected domain.
   *
   *     Finally, **the blacklist overrides the whitelist** and has the final say.
   *
   * @return {Array} the currently set blacklist array.
   *
   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
   * is no blacklist.)
   *
   * @description
   * Sets/Gets the blacklist of trusted resource URLs.
   */

  this.resourceUrlBlacklist = function (value) {
    if (arguments.length) {
      resourceUrlBlacklist = adjustMatchers(value);
    }
    return resourceUrlBlacklist;
  };

  this.$get = ['$injector', function($injector) {

    var htmlSanitizer = function htmlSanitizer(html) {
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
    };

    if ($injector.has('$sanitize')) {
      htmlSanitizer = $injector.get('$sanitize');
    }


    function matchUrl(matcher, parsedUrl) {
      if (matcher === 'self') {
        return urlIsSameOrigin(parsedUrl);
      } else {
        // definitely a regex.  See adjustMatchers()
        return !!matcher.exec(parsedUrl.href);
      }
    }

    function isResourceUrlAllowedByPolicy(url) {
      var parsedUrl = urlResolve(url.toString());
      var i, n, allowed = false;
      // Ensure that at least one item from the whitelist allows this url.
      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
          allowed = true;
          break;
        }
      }
      if (allowed) {
        // Ensure that no item from the blacklist blocked this url.
        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
            allowed = false;
            break;
          }
        }
      }
      return allowed;
    }

    function generateHolderType(Base) {
      var holderType = function TrustedValueHolderType(trustedValue) {
        this.$$unwrapTrustedValue = function() {
          return trustedValue;
        };
      };
      if (Base) {
        holderType.prototype = new Base();
      }
      holderType.prototype.valueOf = function sceValueOf() {
        return this.$$unwrapTrustedValue();
      };
      holderType.prototype.toString = function sceToString() {
        return this.$$unwrapTrustedValue().toString();
      };
      return holderType;
    }

    var trustedValueHolderBase = generateHolderType(),
        byType = {};

    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);

    /**
     * @ngdoc method
     * @name ng.$sceDelegate#trustAs
     * @methodOf ng.$sceDelegate
     *
     * @description
     * Returns an object that is trusted by angular for use in specified strict
     * contextual escaping contexts (such as ng-html-bind-unsafe, ng-include, any src
     * attribute interpolation, any dom event binding attribute interpolation
     * such as for onclick,  etc.) that uses the provided value.
     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resourceUrl, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */
    function trustAs(type, trustedValue) {
      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
      if (!Constructor) {
        throw $sceMinErr('icontext',
            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
            type, trustedValue);
      }
      if (trustedValue === null || trustedValue === undefined || trustedValue === '') {
        return trustedValue;
      }
      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
      // mutable objects, we ensure here that the value passed in is actually a string.
      if (typeof trustedValue !== 'string') {
        throw $sceMinErr('itype',
            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
            type);
      }
      return new Constructor(trustedValue);
    }

    /**
     * @ngdoc method
     * @name ng.$sceDelegate#valueOf
     * @methodOf ng.$sceDelegate
     *
     * @description
     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#methods_trustAs
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
     * ng.$sceDelegate#methods_trustAs `$sceDelegate.trustAs`}.
     *
     * If the passed parameter is not a value that had been returned by {@link
     * ng.$sceDelegate#methods_trustAs `$sceDelegate.trustAs`}, returns it as-is.
     *
     * @param {*} value The result of a prior {@link ng.$sceDelegate#methods_trustAs `$sceDelegate.trustAs`}
     *      call or anything else.
     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#methods_trustAs
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
     *     `value` unchanged.
     */
    function valueOf(maybeTrusted) {
      if (maybeTrusted instanceof trustedValueHolderBase) {
        return maybeTrusted.$$unwrapTrustedValue();
      } else {
        return maybeTrusted;
      }
    }

    /**
     * @ngdoc method
     * @name ng.$sceDelegate#getTrusted
     * @methodOf ng.$sceDelegate
     *
     * @description
     * Takes the result of a {@link ng.$sceDelegate#methods_trustAs `$sceDelegate.trustAs`} call and
     * returns the originally supplied value if the queried context type is a supertype of the
     * created type.  If this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#methods_trustAs
     *     `$sceDelegate.trustAs`} call.
     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#methods_trustAs
     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
     */
    function getTrusted(type, maybeTrusted) {
      if (maybeTrusted === null || maybeTrusted === undefined || maybeTrusted === '') {
        return maybeTrusted;
      }
      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
      if (constructor && maybeTrusted instanceof constructor) {
        return maybeTrusted.$$unwrapTrustedValue();
      }
      // If we get here, then we may only take one of two actions.
      // 1. sanitize the value for the requested type, or
      // 2. throw an exception.
      if (type === SCE_CONTEXTS.RESOURCE_URL) {
        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
          return maybeTrusted;
        } else {
          throw $sceMinErr('insecurl',
              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',
              maybeTrusted.toString());
        }
      } else if (type === SCE_CONTEXTS.HTML) {
        return htmlSanitizer(maybeTrusted);
      }
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
    }

    return { trustAs: trustAs,
             getTrusted: getTrusted,
             valueOf: valueOf };
  }];
}


/**
 * @ngdoc object
 * @name ng.$sceProvider
 * @description
 *
 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
 * -   enable/disable Strict Contextual Escaping (SCE) in a module
 * -   override the default implementation with a custom delegate
 *
 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
 */

/* jshint maxlen: false*/

/**
 * @ngdoc service
 * @name ng.$sce
 * @function
 *
 * @description
 *
 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
 *
 * # Strict Contextual Escaping
 *
 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
 * contexts to result in a value that is marked as safe to use for that context.  One example of
 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
 * to these contexts as privileged or SCE contexts.
 *
 * As of version 1.2, Angular ships with SCE enabled by default.
 *
 * Note:  When enabled (the default), IE8 in quirks mode is not supported.  In this mode, IE8 allows
 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
 * to the top of your HTML document.
 *
 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
 *
 * Here's an example of a binding in a privileged context:
 *
 * <pre class="prettyprint">
 *     <input ng-model="userHtml">
 *     <div ng-bind-html="userHtml">
 * </pre>
 *
 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
 * disabled, this application allows the user to render arbitrary HTML into the DIV.
 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
 * security vulnerabilities.)
 *
 * For the case of HTML, you might use a library, either on the client side, or on the server side,
 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
 *
 * How would you ensure that every place that used these types of bindings was bound to a value that
 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
 * properties/fields and forgot to update the binding to the sanitized value?
 *
 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
 * determine that something explicitly says it's safe to use a value for binding in that
 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
 * for those values that you can easily tell are safe - because they were received from your server,
 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
 *
 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#methods_trustAs $sce.trustAs} 
 * (and shorthand methods such as {@link ng.$sce#methods_trustAsHtml $sce.trustAsHtml}, etc.) to
 * obtain values that will be accepted by SCE / privileged contexts.
 *
 *
 * ## How does it work?
 *
 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#methods_getTrusted
 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
 * ng.$sce#methods_parse $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
 * {@link ng.$sce#methods_getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
 *
 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
 * ng.$sce#methods_parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
 * simplified):
 *
 * <pre class="prettyprint">
 *   var ngBindHtmlDirective = ['$sce', function($sce) {
 *     return function(scope, element, attr) {
 *       scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
 *         element.html(value || '');
 *       });
 *     };
 *   }];
 * </pre>
 *
 * ## Impact on loading templates
 *
 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
 * `templateUrl`'s specified by {@link guide/directive directives}.
 *
 * By default, Angular only loads templates from the same domain and protocol as the application
 * document.  This is done by calling {@link ng.$sce#methods_getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
 * protocols, you may either either {@link ng.$sceDelegateProvider#methods_resourceUrlWhitelist whitelist
 * them} or {@link ng.$sce#methods_trustAsResourceUrl wrap it} into a trusted value.
 *
 * *Please note*:
 * The browser's
 * {@link https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest
 * Same Origin Policy} and {@link http://www.w3.org/TR/cors/ Cross-Origin Resource Sharing (CORS)}
 * policy apply in addition to this and may further restrict whether the template is successfully
 * loaded.  This means that without the right CORS policy, loading templates from a different domain
 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
 * browsers.
 *
 * ## This feels like too much overhead for the developer?
 *
 * It's important to remember that SCE only applies to interpolation expressions.
 *
 * If your expressions are constant literals, they're automatically trusted and you don't need to
 * call `$sce.trustAs` on them.  (e.g.
 * `<div ng-html-bind-unsafe="'<b>implicitly trusted</b>'"></div>`) just works.
 *
 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
 * through {@link ng.$sce#methods_getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
 *
 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
 * templates in `ng-include` from your application's domain without having to even know about SCE.
 * It blocks loading templates from other domains or loading templates over http from an https
 * served document.  You can change these by setting your own custom {@link
 * ng.$sceDelegateProvider#methods_resourceUrlWhitelist whitelists} and {@link
 * ng.$sceDelegateProvider#methods_resourceUrlBlacklist blacklists} for matching such URLs.
 *
 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
 * application that's secure and can be audited to verify that with much more ease than bolting
 * security onto an application later.
 *
 * <a name="contexts"></a>
 * ## What trusted context types are supported?
 *
 * | Context             | Notes          |
 * |---------------------|----------------|
 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. |
 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't consititute an SCE context. |
 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contens are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
 *
 * ## Format of items in {@link ng.$sceDelegateProvider#methods_resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#methods_resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
 *
 *  Each element in these arrays must be one of the following:
 *
 *  - **'self'**
 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
 *      domain** as the application document using the **same protocol**.
 *  - **String** (except the special value `'self'`)
 *    - The string is matched against the full *normalized / absolute URL* of the resource
 *      being tested (substring matches are not good enough.)
 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
 *      match themselves.
 *    - `*`: matches zero or more occurances of any character other than one of the following 6
 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use
 *      in a whitelist.
 *    - `**`: matches zero or more occurances of *any* character.  As such, it's not
 *      not appropriate to use in for a scheme, domain, etc. as it would match too much.  (e.g.
 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
 *      not have been the intention.)  It's usage at the very end of the path is ok.  (e.g.
 *      http://foo.example.com/templates/**).
 *  - **RegExp** (*see caveat below*)
 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
 *      have good test coverage.).  For instance, the use of `.` in the regex is correct only in a
 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
 *      is highly recommended to use the string patterns and only fall back to regular expressions
 *      if they as a last resort.
 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
 *    - If you are generating your Javascript from some other templating engine (not
 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
 *      remember to escape your regular expression (and be aware that you might need more than
 *      one level of escaping depending on your templating engine and the way you interpolated
 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
 *      enough before coding your own.  e.g. Ruby has
 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
 *      Closure library's [goog.string.regExpEscape(s)](
 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
 *
 * ## Show me an example using SCE.
 *
 * @example
<example module="mySceApp">
<file name="index.html">
  <div ng-controller="myAppController as myCtrl">
    <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
    <b>User comments</b><br>
    By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
    $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
    exploit.
    <div class="well">
      <div ng-repeat="userComment in myCtrl.userComments">
        <b>{{userComment.name}}</b>:
        <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
        <br>
      </div>
    </div>
  </div>
</file>

<file name="script.js">
  var mySceApp = angular.module('mySceApp', ['ngSanitize']);

  mySceApp.controller("myAppController", function myAppController($http, $templateCache, $sce) {
    var self = this;
    $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
      self.userComments = userComments;
    });
    self.explicitlyTrustedHtml = $sce.trustAsHtml(
        '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
        'sanitization.&quot;">Hover over this text.</span>');
  });
</file>

<file name="test_data.json">
[
  { "name": "Alice",
    "htmlComment":
        "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
  },
  { "name": "Bob",
    "htmlComment": "<i>Yes!</i>  Am I the only other one?"
  }
]
</file>

<file name="scenario.js">
  describe('SCE doc demo', function() {
    it('should sanitize untrusted values', function() {
      expect(element('.htmlComment').html()).toBe('<span>Is <i>anyone</i> reading this?</span>');
    });
    it('should NOT sanitize explicitly trusted values', function() {
      expect(element('#explicitlyTrustedHtml').html()).toBe(
          '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
          'sanitization.&quot;">Hover over this text.</span>');
    });
  });
</file>
</example>
 *
 *
 *
 * ## Can I disable SCE completely?
 *
 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
 * for little coding overhead.  It will be much harder to take an SCE disabled application and
 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
 * for cases where you have a lot of existing code that was written before SCE was introduced and
 * you're migrating them a module at a time.
 *
 * That said, here's how you can completely disable SCE:
 *
 * <pre class="prettyprint">
 *   angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
 *     // Completely disable SCE.  For demonstration purposes only!
 *     // Do not use in new projects.
 *     $sceProvider.enabled(false);
 *   });
 * </pre>
 *
 */
/* jshint maxlen: 100 */

function $SceProvider() {
  var enabled = true;

  /**
   * @ngdoc function
   * @name ng.sceProvider#enabled
   * @methodOf ng.$sceProvider
   * @function
   *
   * @param {boolean=} value If provided, then enables/disables SCE.
   * @return {boolean} true if SCE is enabled, false otherwise.
   *
   * @description
   * Enables/disables SCE and returns the current value.
   */
  this.enabled = function (value) {
    if (arguments.length) {
      enabled = !!value;
    }
    return enabled;
  };


  /* Design notes on the default implementation for SCE.
   *
   * The API contract for the SCE delegate
   * -------------------------------------
   * The SCE delegate object must provide the following 3 methods:
   *
   * - trustAs(contextEnum, value)
   *     This method is used to tell the SCE service that the provided value is OK to use in the
   *     contexts specified by contextEnum.  It must return an object that will be accepted by
   *     getTrusted() for a compatible contextEnum and return this value.
   *
   * - valueOf(value)
   *     For values that were not produced by trustAs(), return them as is.  For values that were
   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
   *     such a value.
   *
   * - getTrusted(contextEnum, value)
   *     This function should return the a value that is safe to use in the context specified by
   *     contextEnum or throw and exception otherwise.
   *
   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
   * instance, an implementation could maintain a registry of all trusted objects by context.  In
   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
   * return the same object passed in if it was found in the registry under a compatible context or
   * throw an exception otherwise.  An implementation might only wrap values some of the time based
   * on some criteria.  getTrusted() might return a value and not throw an exception for special
   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
   *
   *
   * A note on the inheritance model for SCE contexts
   * ------------------------------------------------
   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
   * is purely an implementation details.
   *
   * The contract is simply this:
   *
   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
   *     will also succeed.
   *
   * Inheritance happens to capture this in a natural way.  In some future, we
   * may not use inheritance anymore.  That is OK because no code outside of
   * sce.js and sceSpecs.js would need to be aware of this detail.
   */

  this.$get = ['$parse', '$sniffer', '$sceDelegate', function(
                $parse,   $sniffer,   $sceDelegate) {
    // Prereq: Ensure that we're not running in IE8 quirks mode.  In that mode, IE allows
    // the "expression(javascript expression)" syntax which is insecure.
    if (enabled && $sniffer.msie && $sniffer.msieDocumentMode < 8) {
      throw $sceMinErr('iequirks',
        'Strict Contextual Escaping does not support Internet Explorer version < 9 in quirks ' +
        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
    }

    var sce = copy(SCE_CONTEXTS);

    /**
     * @ngdoc function
     * @name ng.sce#isEnabled
     * @methodOf ng.$sce
     * @function
     *
     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
     *
     * @description
     * Returns a boolean indicating if SCE is enabled.
     */
    sce.isEnabled = function () {
      return enabled;
    };
    sce.trustAs = $sceDelegate.trustAs;
    sce.getTrusted = $sceDelegate.getTrusted;
    sce.valueOf = $sceDelegate.valueOf;

    if (!enabled) {
      sce.trustAs = sce.getTrusted = function(type, value) { return value; };
      sce.valueOf = identity;
    }

    /**
     * @ngdoc method
     * @name ng.$sce#parse
     * @methodOf ng.$sce
     *
     * @description
     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
     * wraps the expression in a call to {@link ng.$sce#methods_getTrusted $sce.getTrusted(*type*,
     * *result*)}
     *
     * @param {string} type The kind of SCE context in which this result will be used.
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
    sce.parseAs = function sceParseAs(type, expr) {
      var parsed = $parse(expr);
      if (parsed.literal && parsed.constant) {
        return parsed;
      } else {
        return function sceParseAsTrusted(self, locals) {
          return sce.getTrusted(type, parsed(self, locals));
        };
      }
    };

    /**
     * @ngdoc method
     * @name ng.$sce#trustAs
     * @methodOf ng.$sce
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#methods_trustAs `$sceDelegate.trustAs`}.  As such,
     * returns an objectthat is trusted by angular for use in specified strict contextual
     * escaping contexts (such as ng-html-bind-unsafe, ng-include, any src attribute
     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
     * escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resource_url, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */

    /**
     * @ngdoc method
     * @name ng.$sce#trustAsHtml
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.trustAsHtml(value)` →
     *     {@link ng.$sceDelegate#methods_trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#methods_getTrustedHtml
     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#methods_trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name ng.$sce#trustAsUrl
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.trustAsUrl(value)` →
     *     {@link ng.$sceDelegate#methods_trustAs `$sceDelegate.trustAs($sce.URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#methods_getTrustedUrl
     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#methods_trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name ng.$sce#trustAsResourceUrl
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
     *     {@link ng.$sceDelegate#methods_trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#methods_getTrustedResourceUrl
     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the return
     *     value of {@link ng.$sce#methods_trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name ng.$sce#trustAsJs
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.trustAsJs(value)` →
     *     {@link ng.$sceDelegate#methods_trustAs `$sceDelegate.trustAs($sce.JS, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#methods_getTrustedJs
     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#methods_trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name ng.$sce#getTrusted
     * @methodOf ng.$sce
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#methods_getTrusted `$sceDelegate.getTrusted`}.  As such,
     * takes the result of a {@link ng.$sce#methods_trustAs `$sce.trustAs`}() call and returns the
     * originally supplied value if the queried context type is a supertype of the created type.
     * If this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#methods_trustAs `$sce.trustAs`}
     *                         call.
     * @returns {*} The value the was originally provided to
     *              {@link ng.$sce#methods_trustAs `$sce.trustAs`} if valid in this context.
     *              Otherwise, throws an exception.
     */

    /**
     * @ngdoc method
     * @name ng.$sce#getTrustedHtml
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.getTrustedHtml(value)` →
     *     {@link ng.$sceDelegate#methods_getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
     */

    /**
     * @ngdoc method
     * @name ng.$sce#getTrustedCss
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.getTrustedCss(value)` →
     *     {@link ng.$sceDelegate#methods_getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
     */

    /**
     * @ngdoc method
     * @name ng.$sce#getTrustedUrl
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.getTrustedUrl(value)` →
     *     {@link ng.$sceDelegate#methods_getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
     */

    /**
     * @ngdoc method
     * @name ng.$sce#getTrustedResourceUrl
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
     *     {@link ng.$sceDelegate#methods_getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
     */

    /**
     * @ngdoc method
     * @name ng.$sce#getTrustedJs
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.getTrustedJs(value)` →
     *     {@link ng.$sceDelegate#methods_getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
     */

    /**
     * @ngdoc method
     * @name ng.$sce#parseAsHtml
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
     *     {@link ng.$sce#methods_parse `$sce.parseAs($sce.HTML, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name ng.$sce#parseAsCss
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.parseAsCss(value)` →
     *     {@link ng.$sce#methods_parse `$sce.parseAs($sce.CSS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name ng.$sce#parseAsUrl
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.parseAsUrl(value)` →
     *     {@link ng.$sce#methods_parse `$sce.parseAs($sce.URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name ng.$sce#parseAsResourceUrl
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
     *     {@link ng.$sce#methods_parse `$sce.parseAs($sce.RESOURCE_URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name ng.$sce#parseAsJs
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.parseAsJs(value)` →
     *     {@link ng.$sce#methods_parse `$sce.parseAs($sce.JS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    // Shorthand delegations.
    var parse = sce.parseAs,
        getTrusted = sce.getTrusted,
        trustAs = sce.trustAs;

    forEach(SCE_CONTEXTS, function (enumValue, name) {
      var lName = lowercase(name);
      sce[camelCase("parse_as_" + lName)] = function (expr) {
        return parse(enumValue, expr);
      };
      sce[camelCase("get_trusted_" + lName)] = function (value) {
        return getTrusted(enumValue, value);
      };
      sce[camelCase("trust_as_" + lName)] = function (value) {
        return trustAs(enumValue, value);
      };
    });

    return sce;
  }];
}

/**
 * !!! This is an undocumented "private" service !!!
 *
 * @name ng.$sniffer
 * @requires $window
 * @requires $document
 *
 * @property {boolean} history Does the browser support html5 history api ?
 * @property {boolean} hashchange Does the browser support hashchange event ?
 * @property {boolean} transitions Does the browser support CSS transition events ?
 * @property {boolean} animations Does the browser support CSS animation events ?
 *
 * @description
 * This is very simple implementation of testing browser's features.
 */
function $SnifferProvider() {
  this.$get = ['$window', '$document', function($window, $document) {
    var eventSupport = {},
        android =
          int((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
        document = $document[0] || {},
        documentMode = document.documentMode,
        vendorPrefix,
        vendorRegex = /^(Moz|webkit|O|ms)(?=[A-Z])/,
        bodyStyle = document.body && document.body.style,
        transitions = false,
        animations = false,
        match;

    if (bodyStyle) {
      for(var prop in bodyStyle) {
        if(match = vendorRegex.exec(prop)) {
          vendorPrefix = match[0];
          vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
          break;
        }
      }

      if(!vendorPrefix) {
        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';
      }

      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));
      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));

      if (android && (!transitions||!animations)) {
        transitions = isString(document.body.style.webkitTransition);
        animations = isString(document.body.style.webkitAnimation);
      }
    }


    return {
      // Android has history.pushState, but it does not update location correctly
      // so let's not use the history API at all.
      // http://code.google.com/p/android/issues/detail?id=17471
      // https://github.com/angular/angular.js/issues/904

      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
      // so let's not use the history API also
      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
      // jshint -W018
      history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),
      // jshint +W018
      hashchange: 'onhashchange' in $window &&
                  // IE8 compatible mode lies
                  (!documentMode || documentMode > 7),
      hasEvent: function(event) {
        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
        // it. In particular the event is not fired when backspace or delete key are pressed or
        // when cut operation is performed.
        if (event == 'input' && msie == 9) return false;

        if (isUndefined(eventSupport[event])) {
          var divElm = document.createElement('div');
          eventSupport[event] = 'on' + event in divElm;
        }

        return eventSupport[event];
      },
      csp: csp(),
      vendorPrefix: vendorPrefix,
      transitions : transitions,
      animations : animations,
      android: android,
      msie : msie,
      msieDocumentMode: documentMode
    };
  }];
}

function $TimeoutProvider() {
  this.$get = ['$rootScope', '$browser', '$q', '$exceptionHandler',
       function($rootScope,   $browser,   $q,   $exceptionHandler) {
    var deferreds = {};


     /**
      * @ngdoc function
      * @name ng.$timeout
      * @requires $browser
      *
      * @description
      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
      * block and delegates any exceptions to
      * {@link ng.$exceptionHandler $exceptionHandler} service.
      *
      * The return value of registering a timeout function is a promise, which will be resolved when
      * the timeout is reached and the timeout function is executed.
      *
      * To cancel a timeout request, call `$timeout.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
      * synchronously flush the queue of deferred functions.
      *
      * @param {function()} fn A function, whose execution should be delayed.
      * @param {number=} [delay=0] Delay in milliseconds.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#methods_$apply $apply} block.
      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this
      *   promise will be resolved with is the return value of the `fn` function.
      * 
      */
    function timeout(fn, delay, invokeApply) {
      var deferred = $q.defer(),
          promise = deferred.promise,
          skipApply = (isDefined(invokeApply) && !invokeApply),
          timeoutId;

      timeoutId = $browser.defer(function() {
        try {
          deferred.resolve(fn());
        } catch(e) {
          deferred.reject(e);
          $exceptionHandler(e);
        }
        finally {
          delete deferreds[promise.$$timeoutId];
        }

        if (!skipApply) $rootScope.$apply();
      }, delay);

      promise.$$timeoutId = timeoutId;
      deferreds[timeoutId] = deferred;

      return promise;
    }


     /**
      * @ngdoc function
      * @name ng.$timeout#cancel
      * @methodOf ng.$timeout
      *
      * @description
      * Cancels a task associated with the `promise`. As a result of this, the promise will be
      * resolved with a rejection.
      *
      * @param {Promise=} promise Promise returned by the `$timeout` function.
      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
      *   canceled.
      */
    timeout.cancel = function(promise) {
      if (promise && promise.$$timeoutId in deferreds) {
        deferreds[promise.$$timeoutId].reject('canceled');
        delete deferreds[promise.$$timeoutId];
        return $browser.defer.cancel(promise.$$timeoutId);
      }
      return false;
    };

    return timeout;
  }];
}

// NOTE:  The usage of window and document instead of $window and $document here is
// deliberate.  This service depends on the specific behavior of anchor nodes created by the
// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
// doesn't know about mocked locations and resolves URLs to the real document - which is
// exactly the behavior needed here.  There is little value is mocking these out for this
// service.
var urlParsingNode = document.createElement("a");
var originUrl = urlResolve(window.location.href, true);


/**
 *
 * Implementation Notes for non-IE browsers
 * ----------------------------------------
 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
 * URL will be resolved into an absolute URL in the context of the application document.
 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
 * properties are all populated to reflect the normalized URL.  This approach has wide
 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *
 * Implementation Notes for IE
 * ---------------------------
 * IE >= 8 and <= 10 normalizes the URL when assigned to the anchor node similar to the other
 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
 * work around that by performing the parsing in a 2nd step by taking a previously normalized
 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
 * properties such as protocol, hostname, port, etc.
 *
 * IE7 does not normalize the URL when assigned to an anchor node.  (Apparently, it does, if one
 * uses the inner HTML approach to assign the URL as part of an HTML snippet -
 * http://stackoverflow.com/a/472729)  However, setting img[src] does normalize the URL.
 * Unfortunately, setting img[src] to something like "javascript:foo" on IE throws an exception.
 * Since the primary usage for normalizing URLs is to sanitize such URLs, we can't use that
 * method and IE < 8 is unsupported.
 *
 * References:
 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *   http://url.spec.whatwg.org/#urlutils
 *   https://github.com/angular/angular.js/pull/2902
 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
 *
 * @function
 * @param {string} url The URL to be parsed.
 * @description Normalizes and parses a URL.
 * @returns {object} Returns the normalized URL as a dictionary.
 *
 *   | member name   | Description    |
 *   |---------------|----------------|
 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
 *   | protocol      | The protocol including the trailing colon                              |
 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
 *   | search        | The search params, minus the question mark                             |
 *   | hash          | The hash string, minus the hash symbol
 *   | hostname      | The hostname
 *   | port          | The port, without ":"
 *   | pathname      | The pathname, beginning with "/"
 *
 */
function urlResolve(url, base) {
  var href = url;

  if (msie) {
    // Normalize before parse.  Refer Implementation Notes on why this is
    // done in two steps on IE.
    urlParsingNode.setAttribute("href", href);
    href = urlParsingNode.href;
  }

  urlParsingNode.setAttribute('href', href);

  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
  return {
    href: urlParsingNode.href,
    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
    host: urlParsingNode.host,
    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
    hostname: urlParsingNode.hostname,
    port: urlParsingNode.port,
    pathname: (urlParsingNode.pathname.charAt(0) === '/')
      ? urlParsingNode.pathname
      : '/' + urlParsingNode.pathname
  };
}

/**
 * Parse a request URL and determine whether this is a same-origin request as the application document.
 *
 * @param {string|object} requestUrl The url of the request as a string that will be resolved
 * or a parsed URL object.
 * @returns {boolean} Whether the request is for the same origin as the application document.
 */
function urlIsSameOrigin(requestUrl) {
  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
  return (parsed.protocol === originUrl.protocol &&
          parsed.host === originUrl.host);
}

/**
 * @ngdoc object
 * @name ng.$window
 *
 * @description
 * A reference to the browser's `window` object. While `window`
 * is globally available in JavaScript, it causes testability problems, because
 * it is a global variable. In angular we always refer to it through the
 * `$window` service, so it may be overridden, removed or mocked for testing.
 *
 * Expressions, like the one defined for the `ngClick` directive in the example
 * below, are evaluated with respect to the current scope.  Therefore, there is
 * no risk of inadvertently coding in a dependency on a global value in such an
 * expression.
 *
 * @example
   <doc:example>
     <doc:source>
       <script>
         function Ctrl($scope, $window) {
           $scope.greeting = 'Hello, World!';
           $scope.doGreeting = function(greeting) {
               $window.alert(greeting);
           };
         }
       </script>
       <div ng-controller="Ctrl">
         <input type="text" ng-model="greeting" />
         <button ng-click="doGreeting(greeting)">ALERT</button>
       </div>
     </doc:source>
     <doc:scenario>
      it('should display the greeting in the input box', function() {
       input('greeting').enter('Hello, E2E Tests');
       // If we click the button it will block the test runner
       // element(':button').click();
      });
     </doc:scenario>
   </doc:example>
 */
function $WindowProvider(){
  this.$get = valueFn(window);
}

/**
 * @ngdoc object
 * @name ng.$filterProvider
 * @description
 *
 * Filters are just functions which transform input to an output. However filters need to be
 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
 * annotated with dependencies and is responsible for creating a filter function.
 *
 * <pre>
 *   // Filter registration
 *   function MyModule($provide, $filterProvider) {
 *     // create a service to demonstrate injection (not always needed)
 *     $provide.value('greet', function(name){
 *       return 'Hello ' + name + '!';
 *     });
 *
 *     // register a filter factory which uses the
 *     // greet service to demonstrate DI.
 *     $filterProvider.register('greet', function(greet){
 *       // return the filter function which uses the greet service
 *       // to generate salutation
 *       return function(text) {
 *         // filters need to be forgiving so check input validity
 *         return text && greet(text) || text;
 *       };
 *     });
 *   }
 * </pre>
 *
 * The filter function is registered with the `$injector` under the filter name suffix with
 * `Filter`.
 * 
 * <pre>
 *   it('should be the same instance', inject(
 *     function($filterProvider) {
 *       $filterProvider.register('reverse', function(){
 *         return ...;
 *       });
 *     },
 *     function($filter, reverseFilter) {
 *       expect($filter('reverse')).toBe(reverseFilter);
 *     });
 * </pre>
 *
 *
 * For more information about how angular filters work, and how to create your own filters, see
 * {@link guide/filter Filters} in the Angular Developer Guide.
 */
/**
 * @ngdoc method
 * @name ng.$filterProvider#register
 * @methodOf ng.$filterProvider
 * @description
 * Register filter factory function.
 *
 * @param {String} name Name of the filter.
 * @param {function} fn The filter factory function which is injectable.
 */


/**
 * @ngdoc function
 * @name ng.$filter
 * @function
 * @description
 * Filters are used for formatting data displayed to the user.
 *
 * The general syntax in templates is as follows:
 *
 *         {{ expression [| filter_name[:parameter_value] ... ] }}
 *
 * @param {String} name Name of the filter function to retrieve
 * @return {Function} the filter function
 */
$FilterProvider.$inject = ['$provide'];
function $FilterProvider($provide) {
  var suffix = 'Filter';

  /**
   * @ngdoc function
   * @name ng.$controllerProvider#register
   * @methodOf ng.$controllerProvider
   * @param {string|Object} name Name of the filter function, or an object map of filters where
   *    the keys are the filter names and the values are the filter factories.
   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
   *    of the registered filter instances.
   */
  function register(name, factory) {
    if(isObject(name)) {
      var filters = {};
      forEach(name, function(filter, key) {
        filters[key] = register(key, filter);
      });
      return filters;
    } else {
      return $provide.factory(name + suffix, factory);
    }
  }
  this.register = register;

  this.$get = ['$injector', function($injector) {
    return function(name) {
      return $injector.get(name + suffix);
    };
  }];

  ////////////////////////////////////////
  
  /* global
    currencyFilter: false,
    dateFilter: false,
    filterFilter: false,
    jsonFilter: false,
    limitToFilter: false,
    lowercaseFilter: false,
    numberFilter: false,
    orderByFilter: false,
    uppercaseFilter: false,
  */

  register('currency', currencyFilter);
  register('date', dateFilter);
  register('filter', filterFilter);
  register('json', jsonFilter);
  register('limitTo', limitToFilter);
  register('lowercase', lowercaseFilter);
  register('number', numberFilter);
  register('orderBy', orderByFilter);
  register('uppercase', uppercaseFilter);
}

/**
 * @ngdoc filter
 * @name ng.filter:filter
 * @function
 *
 * @description
 * Selects a subset of items from `array` and returns it as a new array.
 *
 * @param {Array} array The source array.
 * @param {string|Object|function()} expression The predicate to be used for selecting items from
 *   `array`.
 *
 *   Can be one of:
 *
 *   - `string`: The string is evaluated as an expression and the resulting value is used for substring match against
 *     the contents of the `array`. All strings or objects with string properties in `array` that contain this string
 *     will be returned. The predicate can be negated by prefixing the string with `!`.
 *
 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
 *     which have property `name` containing "M" and property `phone` containing "1". A special
 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
 *     property of the object. That's equivalent to the simple substring match with a `string`
 *     as described above.
 *
 *   - `function(value)`: A predicate function can be used to write arbitrary filters. The function is
 *     called for each element of `array`. The final result is an array of those elements that
 *     the predicate returned true for.
 *
 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
 *     determining if the expected value (from the filter expression) and actual value (from
 *     the object in the array) should be considered a match.
 *
 *   Can be one of:
 *
 *     - `function(actual, expected)`:
 *       The function will be given the object value and the predicate value to compare and
 *       should return true if the item should be included in filtered result.
 *
 *     - `true`: A shorthand for `function(actual, expected) { return angular.equals(expected, actual)}`.
 *       this is essentially strict comparison of expected and actual.
 *
 *     - `false|undefined`: A short hand for a function which will look for a substring match in case
 *       insensitive way.
 *
 * @example
   <doc:example>
     <doc:source>
       <div ng-init="friends = [{name:'John', phone:'555-1276'},
                                {name:'Mary', phone:'800-BIG-MARY'},
                                {name:'Mike', phone:'555-4321'},
                                {name:'Adam', phone:'555-5678'},
                                {name:'Julie', phone:'555-8765'},
                                {name:'Juliette', phone:'555-5678'}]"></div>

       Search: <input ng-model="searchText">
       <table id="searchTextResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friend in friends | filter:searchText">
           <td>{{friend.name}}</td>
           <td>{{friend.phone}}</td>
         </tr>
       </table>
       <hr>
       Any: <input ng-model="search.$"> <br>
       Name only <input ng-model="search.name"><br>
       Phone only <input ng-model="search.phone"><br>
       Equality <input type="checkbox" ng-model="strict"><br>
       <table id="searchObjResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friend in friends | filter:search:strict">
           <td>{{friend.name}}</td>
           <td>{{friend.phone}}</td>
         </tr>
       </table>
     </doc:source>
     <doc:scenario>
       it('should search across all fields when filtering with a string', function() {
         input('searchText').enter('m');
         expect(repeater('#searchTextResults tr', 'friend in friends').column('friend.name')).
           toEqual(['Mary', 'Mike', 'Adam']);

         input('searchText').enter('76');
         expect(repeater('#searchTextResults tr', 'friend in friends').column('friend.name')).
           toEqual(['John', 'Julie']);
       });

       it('should search in specific fields when filtering with a predicate object', function() {
         input('search.$').enter('i');
         expect(repeater('#searchObjResults tr', 'friend in friends').column('friend.name')).
           toEqual(['Mary', 'Mike', 'Julie', 'Juliette']);
       });
       it('should use a equal comparison when comparator is true', function() {
         input('search.name').enter('Julie');
         input('strict').check();
         expect(repeater('#searchObjResults tr', 'friend in friends').column('friend.name')).
           toEqual(['Julie']);
       });
     </doc:scenario>
   </doc:example>
 */
function filterFilter() {
  return function(array, expression, comparator) {
    if (!isArray(array)) return array;

    var comparatorType = typeof(comparator),
        predicates = [];

    predicates.check = function(value) {
      for (var j = 0; j < predicates.length; j++) {
        if(!predicates[j](value)) {
          return false;
        }
      }
      return true;
    };

    if (comparatorType !== 'function') {
      if (comparatorType === 'boolean' && comparator) {
        comparator = function(obj, text) {
          return angular.equals(obj, text);
        };
      } else {
        comparator = function(obj, text) {
          text = (''+text).toLowerCase();
          return (''+obj).toLowerCase().indexOf(text) > -1;
        };
      }
    }

    var search = function(obj, text){
      if (typeof text == 'string' && text.charAt(0) === '!') {
        return !search(obj, text.substr(1));
      }
      switch (typeof obj) {
        case "boolean":
        case "number":
        case "string":
          return comparator(obj, text);
        case "object":
          switch (typeof text) {
            case "object":
              return comparator(obj, text);
            default:
              for ( var objKey in obj) {
                if (objKey.charAt(0) !== '$' && search(obj[objKey], text)) {
                  return true;
                }
              }
              break;
          }
          return false;
        case "array":
          for ( var i = 0; i < obj.length; i++) {
            if (search(obj[i], text)) {
              return true;
            }
          }
          return false;
        default:
          return false;
      }
    };
    switch (typeof expression) {
      case "boolean":
      case "number":
      case "string":
        // Set up expression object and fall through
        expression = {$:expression};
        // jshint -W086
      case "object":
        // jshint +W086
        for (var key in expression) {
          (function(path) {
            if (typeof expression[path] == 'undefined') return;
            predicates.push(function(value) {
              return search(path == '$' ? value : getter(value, path), expression[path]);
            });
          })(key);
        }
        break;
      case 'function':
        predicates.push(expression);
        break;
      default:
        return array;
    }
    var filtered = [];
    for ( var j = 0; j < array.length; j++) {
      var value = array[j];
      if (predicates.check(value)) {
        filtered.push(value);
      }
    }
    return filtered;
  };
}

/**
 * @ngdoc filter
 * @name ng.filter:currency
 * @function
 *
 * @description
 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
 * symbol for current locale is used.
 *
 * @param {number} amount Input to filter.
 * @param {string=} symbol Currency symbol or identifier to be displayed.
 * @returns {string} Formatted number.
 *
 *
 * @example
   <doc:example>
     <doc:source>
       <script>
         function Ctrl($scope) {
           $scope.amount = 1234.56;
         }
       </script>
       <div ng-controller="Ctrl">
         <input type="number" ng-model="amount"> <br>
         default currency symbol ($): {{amount | currency}}<br>
         custom currency identifier (USD$): {{amount | currency:"USD$"}}
       </div>
     </doc:source>
     <doc:scenario>
       it('should init with 1234.56', function() {
         expect(binding('amount | currency')).toBe('$1,234.56');
         expect(binding('amount | currency:"USD$"')).toBe('USD$1,234.56');
       });
       it('should update', function() {
         input('amount').enter('-1234');
         expect(binding('amount | currency')).toBe('($1,234.00)');
         expect(binding('amount | currency:"USD$"')).toBe('(USD$1,234.00)');
       });
     </doc:scenario>
   </doc:example>
 */
currencyFilter.$inject = ['$locale'];
function currencyFilter($locale) {
  var formats = $locale.NUMBER_FORMATS;
  return function(amount, currencySymbol){
    if (isUndefined(currencySymbol)) currencySymbol = formats.CURRENCY_SYM;
    return formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, 2).
                replace(/\u00A4/g, currencySymbol);
  };
}

/**
 * @ngdoc filter
 * @name ng.filter:number
 * @function
 *
 * @description
 * Formats a number as text.
 *
 * If the input is not a number an empty string is returned.
 *
 * @param {number|string} number Number to format.
 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
 * If this is not provided then the fraction size is computed from the current locale's number
 * formatting pattern. In the case of the default locale, it will be 3.
 * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.
 *
 * @example
   <doc:example>
     <doc:source>
       <script>
         function Ctrl($scope) {
           $scope.val = 1234.56789;
         }
       </script>
       <div ng-controller="Ctrl">
         Enter number: <input ng-model='val'><br>
         Default formatting: {{val | number}}<br>
         No fractions: {{val | number:0}}<br>
         Negative number: {{-val | number:4}}
       </div>
     </doc:source>
     <doc:scenario>
       it('should format numbers', function() {
         expect(binding('val | number')).toBe('1,234.568');
         expect(binding('val | number:0')).toBe('1,235');
         expect(binding('-val | number:4')).toBe('-1,234.5679');
       });

       it('should update', function() {
         input('val').enter('3374.333');
         expect(binding('val | number')).toBe('3,374.333');
         expect(binding('val | number:0')).toBe('3,374');
         expect(binding('-val | number:4')).toBe('-3,374.3330');
       });
     </doc:scenario>
   </doc:example>
 */


numberFilter.$inject = ['$locale'];
function numberFilter($locale) {
  var formats = $locale.NUMBER_FORMATS;
  return function(number, fractionSize) {
    return formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,
      fractionSize);
  };
}

var DECIMAL_SEP = '.';
function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
  if (isNaN(number) || !isFinite(number)) return '';

  var isNegative = number < 0;
  number = Math.abs(number);
  var numStr = number + '',
      formatedText = '',
      parts = [];

  var hasExponent = false;
  if (numStr.indexOf('e') !== -1) {
    var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);
    if (match && match[2] == '-' && match[3] > fractionSize + 1) {
      numStr = '0';
    } else {
      formatedText = numStr;
      hasExponent = true;
    }
  }

  if (!hasExponent) {
    var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;

    // determine fractionSize if it is not specified
    if (isUndefined(fractionSize)) {
      fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);
    }

    var pow = Math.pow(10, fractionSize);
    number = Math.round(number * pow) / pow;
    var fraction = ('' + number).split(DECIMAL_SEP);
    var whole = fraction[0];
    fraction = fraction[1] || '';

    var i, pos = 0,
        lgroup = pattern.lgSize,
        group = pattern.gSize;

    if (whole.length >= (lgroup + group)) {
      pos = whole.length - lgroup;
      for (i = 0; i < pos; i++) {
        if ((pos - i)%group === 0 && i !== 0) {
          formatedText += groupSep;
        }
        formatedText += whole.charAt(i);
      }
    }

    for (i = pos; i < whole.length; i++) {
      if ((whole.length - i)%lgroup === 0 && i !== 0) {
        formatedText += groupSep;
      }
      formatedText += whole.charAt(i);
    }

    // format fraction part.
    while(fraction.length < fractionSize) {
      fraction += '0';
    }

    if (fractionSize && fractionSize !== "0") formatedText += decimalSep + fraction.substr(0, fractionSize);
  } else {

    if (fractionSize > 0 && number > -1 && number < 1) {
      formatedText = number.toFixed(fractionSize);
    }
  }

  parts.push(isNegative ? pattern.negPre : pattern.posPre);
  parts.push(formatedText);
  parts.push(isNegative ? pattern.negSuf : pattern.posSuf);
  return parts.join('');
}

function padNumber(num, digits, trim) {
  var neg = '';
  if (num < 0) {
    neg =  '-';
    num = -num;
  }
  num = '' + num;
  while(num.length < digits) num = '0' + num;
  if (trim)
    num = num.substr(num.length - digits);
  return neg + num;
}


function dateGetter(name, size, offset, trim) {
  offset = offset || 0;
  return function(date) {
    var value = date['get' + name]();
    if (offset > 0 || value > -offset)
      value += offset;
    if (value === 0 && offset == -12 ) value = 12;
    return padNumber(value, size, trim);
  };
}

function dateStrGetter(name, shortForm) {
  return function(date, formats) {
    var value = date['get' + name]();
    var get = uppercase(shortForm ? ('SHORT' + name) : name);

    return formats[get][value];
  };
}

function timeZoneGetter(date) {
  var zone = -1 * date.getTimezoneOffset();
  var paddedZone = (zone >= 0) ? "+" : "";

  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
                padNumber(Math.abs(zone % 60), 2);

  return paddedZone;
}

function ampmGetter(date, formats) {
  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
}

var DATE_FORMATS = {
  yyyy: dateGetter('FullYear', 4),
    yy: dateGetter('FullYear', 2, 0, true),
     y: dateGetter('FullYear', 1),
  MMMM: dateStrGetter('Month'),
   MMM: dateStrGetter('Month', true),
    MM: dateGetter('Month', 2, 1),
     M: dateGetter('Month', 1, 1),
    dd: dateGetter('Date', 2),
     d: dateGetter('Date', 1),
    HH: dateGetter('Hours', 2),
     H: dateGetter('Hours', 1),
    hh: dateGetter('Hours', 2, -12),
     h: dateGetter('Hours', 1, -12),
    mm: dateGetter('Minutes', 2),
     m: dateGetter('Minutes', 1),
    ss: dateGetter('Seconds', 2),
     s: dateGetter('Seconds', 1),
     // while ISO 8601 requires fractions to be prefixed with `.` or `,`
     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
   sss: dateGetter('Milliseconds', 3),
  EEEE: dateStrGetter('Day'),
   EEE: dateStrGetter('Day', true),
     a: ampmGetter,
     Z: timeZoneGetter
};

var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/,
    NUMBER_STRING = /^\-?\d+$/;

/**
 * @ngdoc filter
 * @name ng.filter:date
 * @function
 *
 * @description
 *   Formats `date` to a string based on the requested `format`.
 *
 *   `format` string can be composed of the following elements:
 *
 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
 *   * `'MMMM'`: Month in year (January-December)
 *   * `'MMM'`: Month in year (Jan-Dec)
 *   * `'MM'`: Month in year, padded (01-12)
 *   * `'M'`: Month in year (1-12)
 *   * `'dd'`: Day in month, padded (01-31)
 *   * `'d'`: Day in month (1-31)
 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
 *   * `'EEE'`: Day in Week, (Sun-Sat)
 *   * `'HH'`: Hour in day, padded (00-23)
 *   * `'H'`: Hour in day (0-23)
 *   * `'hh'`: Hour in am/pm, padded (01-12)
 *   * `'h'`: Hour in am/pm, (1-12)
 *   * `'mm'`: Minute in hour, padded (00-59)
 *   * `'m'`: Minute in hour (0-59)
 *   * `'ss'`: Second in minute, padded (00-59)
 *   * `'s'`: Second in minute (0-59)
 *   * `'.sss' or ',sss'`: Millisecond in second, padded (000-999)
 *   * `'a'`: am/pm marker
 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
 *
 *   `format` string can also be one of the following predefined
 *   {@link guide/i18n localizable formats}:
 *
 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
 *     (e.g. Sep 3, 2010 12:05:08 pm)
 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 pm)
 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d,y'` for en_US  locale
 *     (e.g. Friday, September 3, 2010)
 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 pm)
 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 pm)
 *
 *   `format` string can contain literal values. These need to be quoted with single quotes (e.g.
 *   `"h 'in the morning'"`). In order to output single quote, use two single quotes in a sequence
 *   (e.g. `"h 'o''clock'"`).
 *
 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.SSSZ and its
 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
 *    specified in the string input, the time is considered to be in the local timezone.
 * @param {string=} format Formatting rules (see Description). If not specified,
 *    `mediumDate` is used.
 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
 *
 * @example
   <doc:example>
     <doc:source>
       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
           {{1288323623006 | date:'medium'}}<br>
       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
          {{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}<br>
       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
          {{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}<br>
     </doc:source>
     <doc:scenario>
       it('should format date', function() {
         expect(binding("1288323623006 | date:'medium'")).
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
         expect(binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).
            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
         expect(binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).
            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
       });
     </doc:scenario>
   </doc:example>
 */
dateFilter.$inject = ['$locale'];
function dateFilter($locale) {


  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
                     // 1        2       3         4          5          6          7          8  9     10      11
  function jsonStringToDate(string) {
    var match;
    if (match = string.match(R_ISO8601_STR)) {
      var date = new Date(0),
          tzHour = 0,
          tzMin  = 0,
          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
          timeSetter = match[8] ? date.setUTCHours : date.setHours;

      if (match[9]) {
        tzHour = int(match[9] + match[10]);
        tzMin = int(match[9] + match[11]);
      }
      dateSetter.call(date, int(match[1]), int(match[2]) - 1, int(match[3]));
      var h = int(match[4]||0) - tzHour;
      var m = int(match[5]||0) - tzMin;
      var s = int(match[6]||0);
      var ms = Math.round(parseFloat('0.' + (match[7]||0)) * 1000);
      timeSetter.call(date, h, m, s, ms);
      return date;
    }
    return string;
  }


  return function(date, format) {
    var text = '',
        parts = [],
        fn, match;

    format = format || 'mediumDate';
    format = $locale.DATETIME_FORMATS[format] || format;
    if (isString(date)) {
      if (NUMBER_STRING.test(date)) {
        date = int(date);
      } else {
        date = jsonStringToDate(date);
      }
    }

    if (isNumber(date)) {
      date = new Date(date);
    }

    if (!isDate(date)) {
      return date;
    }

    while(format) {
      match = DATE_FORMATS_SPLIT.exec(format);
      if (match) {
        parts = concat(parts, match, 1);
        format = parts.pop();
      } else {
        parts.push(format);
        format = null;
      }
    }

    forEach(parts, function(value){
      fn = DATE_FORMATS[value];
      text += fn ? fn(date, $locale.DATETIME_FORMATS)
                 : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");
    });

    return text;
  };
}


/**
 * @ngdoc filter
 * @name ng.filter:json
 * @function
 *
 * @description
 *   Allows you to convert a JavaScript object into JSON string.
 *
 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
 *   the binding is automatically converted to JSON.
 *
 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
 * @returns {string} JSON string.
 *
 *
 * @example:
   <doc:example>
     <doc:source>
       <pre>{{ {'name':'value'} | json }}</pre>
     </doc:source>
     <doc:scenario>
       it('should jsonify filtered objects', function() {
         expect(binding("{'name':'value'}")).toMatch(/\{\n  "name": ?"value"\n}/);
       });
     </doc:scenario>
   </doc:example>
 *
 */
function jsonFilter() {
  return function(object) {
    return toJson(object, true);
  };
}


/**
 * @ngdoc filter
 * @name ng.filter:lowercase
 * @function
 * @description
 * Converts string to lowercase.
 * @see angular.lowercase
 */
var lowercaseFilter = valueFn(lowercase);


/**
 * @ngdoc filter
 * @name ng.filter:uppercase
 * @function
 * @description
 * Converts string to uppercase.
 * @see angular.uppercase
 */
var uppercaseFilter = valueFn(uppercase);

/**
 * @ngdoc function
 * @name ng.filter:limitTo
 * @function
 *
 * @description
 * Creates a new array or string containing only a specified number of elements. The elements
 * are taken from either the beginning or the end of the source array or string, as specified by
 * the value and sign (positive or negative) of `limit`.
 *
 * @param {Array|string} input Source array or string to be limited.
 * @param {string|number} limit The length of the returned array or string. If the `limit` number 
 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
 *     If the number is negative, `limit` number  of items from the end of the source array/string 
 *     are copied. The `limit` will be trimmed if it exceeds `array.length`
 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
 *     had less than `limit` elements.
 *
 * @example
   <doc:example>
     <doc:source>
       <script>
         function Ctrl($scope) {
           $scope.numbers = [1,2,3,4,5,6,7,8,9];
           $scope.letters = "abcdefghi";
           $scope.numLimit = 3;
           $scope.letterLimit = 3;
         }
       </script>
       <div ng-controller="Ctrl">
         Limit {{numbers}} to: <input type="integer" ng-model="numLimit">
         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
         Limit {{letters}} to: <input type="integer" ng-model="letterLimit">
         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
       </div>
     </doc:source>
     <doc:scenario>
       it('should limit the number array to first three items', function() {
         expect(element('.doc-example-live input[ng-model=numLimit]').val()).toBe('3');
         expect(element('.doc-example-live input[ng-model=letterLimit]').val()).toBe('3');
         expect(binding('numbers | limitTo:numLimit')).toEqual('[1,2,3]');
         expect(binding('letters | limitTo:letterLimit')).toEqual('abc');
       });

       it('should update the output when -3 is entered', function() {
         input('numLimit').enter(-3);
         input('letterLimit').enter(-3);
         expect(binding('numbers | limitTo:numLimit')).toEqual('[7,8,9]');
         expect(binding('letters | limitTo:letterLimit')).toEqual('ghi');
       });

       it('should not exceed the maximum size of input array', function() {
         input('numLimit').enter(100);
         input('letterLimit').enter(100);
         expect(binding('numbers | limitTo:numLimit')).toEqual('[1,2,3,4,5,6,7,8,9]');
         expect(binding('letters | limitTo:letterLimit')).toEqual('abcdefghi');
       });
     </doc:scenario>
   </doc:example>
 */
function limitToFilter(){
  return function(input, limit) {
    if (!isArray(input) && !isString(input)) return input;
    
    limit = int(limit);

    if (isString(input)) {
      //NaN check on limit
      if (limit) {
        return limit >= 0 ? input.slice(0, limit) : input.slice(limit, input.length);
      } else {
        return "";
      }
    }

    var out = [],
      i, n;

    // if abs(limit) exceeds maximum length, trim it
    if (limit > input.length)
      limit = input.length;
    else if (limit < -input.length)
      limit = -input.length;

    if (limit > 0) {
      i = 0;
      n = limit;
    } else {
      i = input.length + limit;
      n = input.length;
    }

    for (; i<n; i++) {
      out.push(input[i]);
    }

    return out;
  };
}

/**
 * @ngdoc function
 * @name ng.filter:orderBy
 * @function
 *
 * @description
 * Orders a specified `array` by the `expression` predicate.
 *
 * @param {Array} array The array to sort.
 * @param {function(*)|string|Array.<(function(*)|string)>} expression A predicate to be
 *    used by the comparator to determine the order of elements.
 *
 *    Can be one of:
 *
 *    - `function`: Getter function. The result of this function will be sorted using the
 *      `<`, `=`, `>` operator.
 *    - `string`: An Angular expression which evaluates to an object to order by, such as 'name'
 *      to sort by a property called 'name'. Optionally prefixed with `+` or `-` to control
 *      ascending or descending sort order (for example, +name or -name).
 *    - `Array`: An array of function or string predicates. The first predicate in the array
 *      is used for sorting, but when two items are equivalent, the next predicate is used.
 *
 * @param {boolean=} reverse Reverse the order the array.
 * @returns {Array} Sorted copy of the source array.
 *
 * @example
   <doc:example>
     <doc:source>
       <script>
         function Ctrl($scope) {
           $scope.friends =
               [{name:'John', phone:'555-1212', age:10},
                {name:'Mary', phone:'555-9876', age:19},
                {name:'Mike', phone:'555-4321', age:21},
                {name:'Adam', phone:'555-5678', age:35},
                {name:'Julie', phone:'555-8765', age:29}]
           $scope.predicate = '-age';
         }
       </script>
       <div ng-controller="Ctrl">
         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
         <hr/>
         [ <a href="" ng-click="predicate=''">unsorted</a> ]
         <table class="friend">
           <tr>
             <th><a href="" ng-click="predicate = 'name'; reverse=false">Name</a>
                 (<a href="" ng-click="predicate = '-name'; reverse=false">^</a>)</th>
             <th><a href="" ng-click="predicate = 'phone'; reverse=!reverse">Phone Number</a></th>
             <th><a href="" ng-click="predicate = 'age'; reverse=!reverse">Age</a></th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </doc:source>
     <doc:scenario>
       it('should be reverse ordered by aged', function() {
         expect(binding('predicate')).toBe('-age');
         expect(repeater('table.friend', 'friend in friends').column('friend.age')).
           toEqual(['35', '29', '21', '19', '10']);
         expect(repeater('table.friend', 'friend in friends').column('friend.name')).
           toEqual(['Adam', 'Julie', 'Mike', 'Mary', 'John']);
       });

       it('should reorder the table when user selects different predicate', function() {
         element('.doc-example-live a:contains("Name")').click();
         expect(repeater('table.friend', 'friend in friends').column('friend.name')).
           toEqual(['Adam', 'John', 'Julie', 'Mary', 'Mike']);
         expect(repeater('table.friend', 'friend in friends').column('friend.age')).
           toEqual(['35', '10', '29', '19', '21']);

         element('.doc-example-live a:contains("Phone")').click();
         expect(repeater('table.friend', 'friend in friends').column('friend.phone')).
           toEqual(['555-9876', '555-8765', '555-5678', '555-4321', '555-1212']);
         expect(repeater('table.friend', 'friend in friends').column('friend.name')).
           toEqual(['Mary', 'Julie', 'Adam', 'Mike', 'John']);
       });
     </doc:scenario>
   </doc:example>
 */
orderByFilter.$inject = ['$parse'];
function orderByFilter($parse){
  return function(array, sortPredicate, reverseOrder) {
    if (!isArray(array)) return array;
    if (!sortPredicate) return array;
    sortPredicate = isArray(sortPredicate) ? sortPredicate: [sortPredicate];
    sortPredicate = map(sortPredicate, function(predicate){
      var descending = false, get = predicate || identity;
      if (isString(predicate)) {
        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {
          descending = predicate.charAt(0) == '-';
          predicate = predicate.substring(1);
        }
        get = $parse(predicate);
      }
      return reverseComparator(function(a,b){
        return compare(get(a),get(b));
      }, descending);
    });
    var arrayCopy = [];
    for ( var i = 0; i < array.length; i++) { arrayCopy.push(array[i]); }
    return arrayCopy.sort(reverseComparator(comparator, reverseOrder));

    function comparator(o1, o2){
      for ( var i = 0; i < sortPredicate.length; i++) {
        var comp = sortPredicate[i](o1, o2);
        if (comp !== 0) return comp;
      }
      return 0;
    }
    function reverseComparator(comp, descending) {
      return toBoolean(descending)
          ? function(a,b){return comp(b,a);}
          : comp;
    }
    function compare(v1, v2){
      var t1 = typeof v1;
      var t2 = typeof v2;
      if (t1 == t2) {
        if (t1 == "string") {
           v1 = v1.toLowerCase();
           v2 = v2.toLowerCase();
        }
        if (v1 === v2) return 0;
        return v1 < v2 ? -1 : 1;
      } else {
        return t1 < t2 ? -1 : 1;
      }
    }
  };
}

function ngDirective(directive) {
  if (isFunction(directive)) {
    directive = {
      link: directive
    };
  }
  directive.restrict = directive.restrict || 'AC';
  return valueFn(directive);
}

/**
 * @ngdoc directive
 * @name ng.directive:a
 * @restrict E
 *
 * @description
 * Modifies the default behavior of the html A tag so that the default action is prevented when
 * the href attribute is empty.
 *
 * This change permits the easy creation of action links with the `ngClick` directive
 * without changing the location or causing page reloads, e.g.:
 * `<a href="" ng-click="list.addItem()">Add Item</a>`
 */
var htmlAnchorDirective = valueFn({
  restrict: 'E',
  compile: function(element, attr) {

    if (msie <= 8) {

      // turn <a href ng-click="..">link</a> into a stylable link in IE
      // but only if it doesn't have name attribute, in which case it's an anchor
      if (!attr.href && !attr.name) {
        attr.$set('href', '');
      }

      // add a comment node to anchors to workaround IE bug that causes element content to be reset
      // to new attribute content if attribute is updated with value containing @ and element also
      // contains value with @
      // see issue #1949
      element.append(document.createComment('IE fix'));
    }

    if (!attr.href && !attr.name) {
      return function(scope, element) {
        element.on('click', function(event){
          // if we have no href url, then don't navigate anywhere.
          if (!element.attr('href')) {
            event.preventDefault();
          }
        });
      };
    }
  }
});

/**
 * @ngdoc directive
 * @name ng.directive:ngHref
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in an href attribute will
 * make the link go to the wrong URL if the user clicks it before
 * Angular has a chance to replace the `{{hash}}` markup with its
 * value. Until Angular replaces the markup the link will be broken
 * and will most likely return a 404 error.
 *
 * The `ngHref` directive solves this problem.
 *
 * The wrong way to write it:
 * <pre>
 * <a href="http://www.gravatar.com/avatar/{{hash}}"/>
 * </pre>
 *
 * The correct way to write it:
 * <pre>
 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}"/>
 * </pre>
 *
 * @element A
 * @param {template} ngHref any string which can contain `{{}}` markup.
 *
 * @example
 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
 * in links and their different behaviors:
    <doc:example>
      <doc:source>
        <input ng-model="value" /><br />
        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
      </doc:source>
      <doc:scenario>
        it('should execute ng-click but not reload when href without value', function() {
          element('#link-1').click();
          expect(input('value').val()).toEqual('1');
          expect(element('#link-1').attr('href')).toBe("");
        });

        it('should execute ng-click but not reload when href empty string', function() {
          element('#link-2').click();
          expect(input('value').val()).toEqual('2');
          expect(element('#link-2').attr('href')).toBe("");
        });

        it('should execute ng-click and change url when ng-href specified', function() {
          expect(element('#link-3').attr('href')).toBe("/123");

          element('#link-3').click();
          expect(browser().window().path()).toEqual('/123');
        });

        it('should execute ng-click but not reload when href empty string and name specified', function() {
          element('#link-4').click();
          expect(input('value').val()).toEqual('4');
          expect(element('#link-4').attr('href')).toBe('');
        });

        it('should execute ng-click but not reload when no href but name specified', function() {
          element('#link-5').click();
          expect(input('value').val()).toEqual('5');
          expect(element('#link-5').attr('href')).toBe(undefined);
        });

        it('should only change url when only ng-href', function() {
          input('value').enter('6');
          expect(element('#link-6').attr('href')).toBe('6');

          element('#link-6').click();
          expect(browser().location().url()).toEqual('/6');
        });
      </doc:scenario>
    </doc:example>
 */

/**
 * @ngdoc directive
 * @name ng.directive:ngSrc
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrc` directive solves this problem.
 *
 * The buggy way to write it:
 * <pre>
 * <img src="http://www.gravatar.com/avatar/{{hash}}"/>
 * </pre>
 *
 * The correct way to write it:
 * <pre>
 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}"/>
 * </pre>
 *
 * @element IMG
 * @param {template} ngSrc any string which can contain `{{}}` markup.
 */

/**
 * @ngdoc directive
 * @name ng.directive:ngSrcset
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrcset` directive solves this problem.
 *
 * The buggy way to write it:
 * <pre>
 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
 * </pre>
 *
 * The correct way to write it:
 * <pre>
 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
 * </pre>
 *
 * @element IMG
 * @param {template} ngSrcset any string which can contain `{{}}` markup.
 */

/**
 * @ngdoc directive
 * @name ng.directive:ngDisabled
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * The following markup will make the button enabled on Chrome/Firefox but not on IE8 and older IEs:
 * <pre>
 * <div ng-init="scope = { isDisabled: false }">
 *  <button disabled="{{scope.isDisabled}}">Disabled</button>
 * </div>
 * </pre>
 *
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as disabled. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngDisabled` directive solves this problem for the `disabled` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 *
 * @example
    <doc:example>
      <doc:source>
        Click me to toggle: <input type="checkbox" ng-model="checked"><br/>
        <button ng-model="button" ng-disabled="checked">Button</button>
      </doc:source>
      <doc:scenario>
        it('should toggle button', function() {
          expect(element('.doc-example-live :button').prop('disabled')).toBeFalsy();
          input('checked').check();
          expect(element('.doc-example-live :button').prop('disabled')).toBeTruthy();
        });
      </doc:scenario>
    </doc:example>
 *
 * @element INPUT
 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy, 
 *     then special attribute "disabled" will be set on the element
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngChecked
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as checked. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngChecked` directive solves this problem for the `checked` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
    <doc:example>
      <doc:source>
        Check me to check both: <input type="checkbox" ng-model="master"><br/>
        <input id="checkSlave" type="checkbox" ng-checked="master">
      </doc:source>
      <doc:scenario>
        it('should check both checkBoxes', function() {
          expect(element('.doc-example-live #checkSlave').prop('checked')).toBeFalsy();
          input('master').check();
          expect(element('.doc-example-live #checkSlave').prop('checked')).toBeTruthy();
        });
      </doc:scenario>
    </doc:example>
 *
 * @element INPUT
 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy, 
 *     then special attribute "checked" will be set on the element
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngReadonly
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as readonly. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngReadonly` directive solves this problem for the `readonly` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
    <doc:example>
      <doc:source>
        Check me to make text readonly: <input type="checkbox" ng-model="checked"><br/>
        <input type="text" ng-readonly="checked" value="I'm Angular"/>
      </doc:source>
      <doc:scenario>
        it('should toggle readonly attr', function() {
          expect(element('.doc-example-live :text').prop('readonly')).toBeFalsy();
          input('checked').check();
          expect(element('.doc-example-live :text').prop('readonly')).toBeTruthy();
        });
      </doc:scenario>
    </doc:example>
 *
 * @element INPUT
 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy, 
 *     then special attribute "readonly" will be set on the element
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngSelected
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as selected. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngSelected` directive solves this problem for the `selected` atttribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * 
 * @example
    <doc:example>
      <doc:source>
        Check me to select: <input type="checkbox" ng-model="selected"><br/>
        <select>
          <option>Hello!</option>
          <option id="greet" ng-selected="selected">Greetings!</option>
        </select>
      </doc:source>
      <doc:scenario>
        it('should select Greetings!', function() {
          expect(element('.doc-example-live #greet').prop('selected')).toBeFalsy();
          input('selected').check();
          expect(element('.doc-example-live #greet').prop('selected')).toBeTruthy();
        });
      </doc:scenario>
    </doc:example>
 *
 * @element OPTION
 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy, 
 *     then special attribute "selected" will be set on the element
 */

/**
 * @ngdoc directive
 * @name ng.directive:ngOpen
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as open. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngOpen` directive solves this problem for the `open` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
     <doc:example>
       <doc:source>
         Check me check multiple: <input type="checkbox" ng-model="open"><br/>
         <details id="details" ng-open="open">
            <summary>Show/Hide me</summary>
         </details>
       </doc:source>
       <doc:scenario>
         it('should toggle open', function() {
           expect(element('#details').prop('open')).toBeFalsy();
           input('open').check();
           expect(element('#details').prop('open')).toBeTruthy();
         });
       </doc:scenario>
     </doc:example>
 *
 * @element DETAILS
 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy, 
 *     then special attribute "open" will be set on the element
 */

var ngAttributeAliasDirectives = {};


// boolean attrs are evaluated
forEach(BOOLEAN_ATTR, function(propName, attrName) {
  // binding to multiple is not supported
  if (propName == "multiple") return;

  var normalized = directiveNormalize('ng-' + attrName);
  ngAttributeAliasDirectives[normalized] = function() {
    return {
      priority: 100,
      compile: function() {
        return function(scope, element, attr) {
          scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
            attr.$set(attrName, !!value);
          });
        };
      }
    };
  };
});


// ng-src, ng-srcset, ng-href are interpolated
forEach(['src', 'srcset', 'href'], function(attrName) {
  var normalized = directiveNormalize('ng-' + attrName);
  ngAttributeAliasDirectives[normalized] = function() {
    return {
      priority: 99, // it needs to run after the attributes are interpolated
      link: function(scope, element, attr) {
        attr.$observe(normalized, function(value) {
          if (!value)
             return;

          attr.$set(attrName, value);

          // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
          // to set the property as well to achieve the desired effect.
          // we use attr[attrName] value since $set can sanitize the url.
          if (msie) element.prop(attrName, attr[attrName]);
        });
      }
    };
  };
});

/* global -nullFormCtrl */
var nullFormCtrl = {
  $addControl: noop,
  $removeControl: noop,
  $setValidity: noop,
  $setDirty: noop,
  $setPristine: noop
};

/**
 * @ngdoc object
 * @name ng.directive:form.FormController
 *
 * @property {boolean} $pristine True if user has not interacted with the form yet.
 * @property {boolean} $dirty True if user has already interacted with the form.
 * @property {boolean} $valid True if all of the containing forms and controls are valid.
 * @property {boolean} $invalid True if at least one containing control or form is invalid.
 *
 * @property {Object} $error Is an object hash, containing references to all invalid controls or
 *  forms, where:
 *
 *  - keys are validation tokens (error names),
 *  - values are arrays of controls or forms that are invalid for given error name.
 *
 *
 *  Built-in validation tokens:
 *
 *  - `email`
 *  - `max`
 *  - `maxlength`
 *  - `min`
 *  - `minlength`
 *  - `number`
 *  - `pattern`
 *  - `required`
 *  - `url`
 * 
 * @description
 * `FormController` keeps track of all its controls and nested forms as well as state of them,
 * such as being valid/invalid or dirty/pristine.
 *
 * Each {@link ng.directive:form form} directive creates an instance
 * of `FormController`.
 *
 */
//asks for $scope to fool the BC controller module
FormController.$inject = ['$element', '$attrs', '$scope'];
function FormController(element, attrs) {
  var form = this,
      parentForm = element.parent().controller('form') || nullFormCtrl,
      invalidCount = 0, // used to easily determine if we are valid
      errors = form.$error = {},
      controls = [];

  // init state
  form.$name = attrs.name || attrs.ngForm;
  form.$dirty = false;
  form.$pristine = true;
  form.$valid = true;
  form.$invalid = false;

  parentForm.$addControl(form);

  // Setup initial state of the control
  element.addClass(PRISTINE_CLASS);
  toggleValidCss(true);

  // convenience method for easy toggling of classes
  function toggleValidCss(isValid, validationErrorKey) {
    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
    element.
      removeClass((isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey).
      addClass((isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey);
  }

  /**
   * @ngdoc function
   * @name ng.directive:form.FormController#$addControl
   * @methodOf ng.directive:form.FormController
   *
   * @description
   * Register a control with the form.
   *
   * Input elements using ngModelController do this automatically when they are linked.
   */
  form.$addControl = function(control) {
    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
    // and not added to the scope.  Now we throw an error.
    assertNotHasOwnProperty(control.$name, 'input');
    controls.push(control);

    if (control.$name) {
      form[control.$name] = control;
    }
  };

  /**
   * @ngdoc function
   * @name ng.directive:form.FormController#$removeControl
   * @methodOf ng.directive:form.FormController
   *
   * @description
   * Deregister a control from the form.
   *
   * Input elements using ngModelController do this automatically when they are destroyed.
   */
  form.$removeControl = function(control) {
    if (control.$name && form[control.$name] === control) {
      delete form[control.$name];
    }
    forEach(errors, function(queue, validationToken) {
      form.$setValidity(validationToken, true, control);
    });

    arrayRemove(controls, control);
  };

  /**
   * @ngdoc function
   * @name ng.directive:form.FormController#$setValidity
   * @methodOf ng.directive:form.FormController
   *
   * @description
   * Sets the validity of a form control.
   *
   * This method will also propagate to parent forms.
   */
  form.$setValidity = function(validationToken, isValid, control) {
    var queue = errors[validationToken];

    if (isValid) {
      if (queue) {
        arrayRemove(queue, control);
        if (!queue.length) {
          invalidCount--;
          if (!invalidCount) {
            toggleValidCss(isValid);
            form.$valid = true;
            form.$invalid = false;
          }
          errors[validationToken] = false;
          toggleValidCss(true, validationToken);
          parentForm.$setValidity(validationToken, true, form);
        }
      }

    } else {
      if (!invalidCount) {
        toggleValidCss(isValid);
      }
      if (queue) {
        if (includes(queue, control)) return;
      } else {
        errors[validationToken] = queue = [];
        invalidCount++;
        toggleValidCss(false, validationToken);
        parentForm.$setValidity(validationToken, false, form);
      }
      queue.push(control);

      form.$valid = false;
      form.$invalid = true;
    }
  };

  /**
   * @ngdoc function
   * @name ng.directive:form.FormController#$setDirty
   * @methodOf ng.directive:form.FormController
   *
   * @description
   * Sets the form to a dirty state.
   *
   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
   * state (ng-dirty class). This method will also propagate to parent forms.
   */
  form.$setDirty = function() {
    element.removeClass(PRISTINE_CLASS).addClass(DIRTY_CLASS);
    form.$dirty = true;
    form.$pristine = false;
    parentForm.$setDirty();
  };

  /**
   * @ngdoc function
   * @name ng.directive:form.FormController#$setPristine
   * @methodOf ng.directive:form.FormController
   *
   * @description
   * Sets the form to its pristine state.
   *
   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
   * state (ng-pristine class). This method will also propagate to all the controls contained
   * in this form.
   *
   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
   * saving or resetting it.
   */
  form.$setPristine = function () {
    element.removeClass(DIRTY_CLASS).addClass(PRISTINE_CLASS);
    form.$dirty = false;
    form.$pristine = true;
    forEach(controls, function(control) {
      control.$setPristine();
    });
  };
}


/**
 * @ngdoc directive
 * @name ng.directive:ngForm
 * @restrict EAC
 *
 * @description
 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
 * sub-group of controls needs to be determined.
 *
 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 *
 */

 /**
 * @ngdoc directive
 * @name ng.directive:form
 * @restrict E
 *
 * @description
 * Directive that instantiates
 * {@link ng.directive:form.FormController FormController}.
 *
 * If the `name` attribute is specified, the form controller is published onto the current scope under
 * this name.
 *
 * # Alias: {@link ng.directive:ngForm `ngForm`}
 *
 * In Angular forms can be nested. This means that the outer form is valid when all of the child
 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to
 * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when
 * using Angular validation directives in forms that are dynamically generated using the
 * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`
 * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an
 * `ngForm` directive and nest these in an outer `form` element.
 *
 *
 * # CSS classes
 *  - `ng-valid` is set if the form is valid.
 *  - `ng-invalid` is set if the form is invalid.
 *  - `ng-pristine` is set if the form is pristine.
 *  - `ng-dirty` is set if the form is dirty.
 *
 *
 * # Submitting a form and preventing the default action
 *
 * Since the role of forms in client-side Angular applications is different than in classical
 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
 * page reload that sends the data to the server. Instead some javascript logic should be triggered
 * to handle the form submission in an application-specific way.
 *
 * For this reason, Angular prevents the default action (form submission to the server) unless the
 * `<form>` element has an `action` attribute specified.
 *
 * You can use one of the following two ways to specify what javascript method should be called when
 * a form is submitted:
 *
 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
 * - {@link ng.directive:ngClick ngClick} directive on the first
  *  button or input field of type submit (input[type=submit])
 *
 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
 * or {@link ng.directive:ngClick ngClick} directives.
 * This is because of the following form submission rules in the HTML specification:
 *
 * - If a form has only one input field then hitting enter in this field triggers form submit
 * (`ngSubmit`)
 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
 * doesn't trigger submit
 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
 *
 * @param {string=} name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 *
 * @example
    <doc:example>
      <doc:source>
       <script>
         function Ctrl($scope) {
           $scope.userType = 'guest';
         }
       </script>
       <form name="myForm" ng-controller="Ctrl">
         userType: <input name="input" ng-model="userType" required>
         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
         <tt>userType = {{userType}}</tt><br>
         <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br>
         <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
        </form>
      </doc:source>
      <doc:scenario>
        it('should initialize to model', function() {
         expect(binding('userType')).toEqual('guest');
         expect(binding('myForm.input.$valid')).toEqual('true');
        });

        it('should be invalid if empty', function() {
         input('userType').enter('');
         expect(binding('userType')).toEqual('');
         expect(binding('myForm.input.$valid')).toEqual('false');
        });
      </doc:scenario>
    </doc:example>
 */
var formDirectiveFactory = function(isNgForm) {
  return ['$timeout', function($timeout) {
    var formDirective = {
      name: 'form',
      restrict: isNgForm ? 'EAC' : 'E',
      controller: FormController,
      compile: function() {
        return {
          pre: function(scope, formElement, attr, controller) {
            if (!attr.action) {
              // we can't use jq events because if a form is destroyed during submission the default
              // action is not prevented. see #1238
              //
              // IE 9 is not affected because it doesn't fire a submit event and try to do a full
              // page reload if the form was destroyed by submission of the form via a click handler
              // on a button in the form. Looks like an IE9 specific bug.
              var preventDefaultListener = function(event) {
                event.preventDefault
                  ? event.preventDefault()
                  : event.returnValue = false; // IE
              };

              addEventListenerFn(formElement[0], 'submit', preventDefaultListener);

              // unregister the preventDefault listener so that we don't not leak memory but in a
              // way that will achieve the prevention of the default action.
              formElement.on('$destroy', function() {
                $timeout(function() {
                  removeEventListenerFn(formElement[0], 'submit', preventDefaultListener);
                }, 0, false);
              });
            }

            var parentFormCtrl = formElement.parent().controller('form'),
                alias = attr.name || attr.ngForm;

            if (alias) {
              setter(scope, alias, controller, alias);
            }
            if (parentFormCtrl) {
              formElement.on('$destroy', function() {
                parentFormCtrl.$removeControl(controller);
                if (alias) {
                  setter(scope, alias, undefined, alias);
                }
                extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
              });
            }
          }
        };
      }
    };

    return formDirective;
  }];
};

var formDirective = formDirectiveFactory();
var ngFormDirective = formDirectiveFactory(true);

/* global

    -VALID_CLASS,
    -INVALID_CLASS,
    -PRISTINE_CLASS,
    -DIRTY_CLASS
*/

var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;
var EMAIL_REGEXP = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}$/;
var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;

var inputType = {

  /**
   * @ngdoc inputType
   * @name ng.directive:input.text
   *
   * @description
   * Standard HTML text input with angular data binding.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Adds `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength.
   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
   *    patterns defined as scope expressions.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
   *
   * @example
      <doc:example>
        <doc:source>
         <script>
           function Ctrl($scope) {
             $scope.text = 'guest';
             $scope.word = /^\s*\w*\s*$/;
           }
         </script>
         <form name="myForm" ng-controller="Ctrl">
           Single word: <input type="text" name="input" ng-model="text"
                               ng-pattern="word" required ng-trim="false">
           <span class="error" ng-show="myForm.input.$error.required">
             Required!</span>
           <span class="error" ng-show="myForm.input.$error.pattern">
             Single word only!</span>

           <tt>text = {{text}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
          </form>
        </doc:source>
        <doc:scenario>
          it('should initialize to model', function() {
            expect(binding('text')).toEqual('guest');
            expect(binding('myForm.input.$valid')).toEqual('true');
          });

          it('should be invalid if empty', function() {
            input('text').enter('');
            expect(binding('text')).toEqual('');
            expect(binding('myForm.input.$valid')).toEqual('false');
          });

          it('should be invalid if multi word', function() {
            input('text').enter('hello world');
            expect(binding('myForm.input.$valid')).toEqual('false');
          });

          it('should not be trimmed', function() {
            input('text').enter('untrimmed ');
            expect(binding('text')).toEqual('untrimmed ');
            expect(binding('myForm.input.$valid')).toEqual('true');
          });
        </doc:scenario>
      </doc:example>
   */
  'text': textInputType,


  /**
   * @ngdoc inputType
   * @name ng.directive:input.number
   *
   * @description
   * Text input with number validation and transformation. Sets the `number` validation
   * error if not a valid number.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength.
   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
   *    patterns defined as scope expressions.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <doc:example>
        <doc:source>
         <script>
           function Ctrl($scope) {
             $scope.value = 12;
           }
         </script>
         <form name="myForm" ng-controller="Ctrl">
           Number: <input type="number" name="input" ng-model="value"
                          min="0" max="99" required>
           <span class="error" ng-show="myForm.input.$error.required">
             Required!</span>
           <span class="error" ng-show="myForm.input.$error.number">
             Not valid number!</span>
           <tt>value = {{value}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
          </form>
        </doc:source>
        <doc:scenario>
          it('should initialize to model', function() {
           expect(binding('value')).toEqual('12');
           expect(binding('myForm.input.$valid')).toEqual('true');
          });

          it('should be invalid if empty', function() {
           input('value').enter('');
           expect(binding('value')).toEqual('');
           expect(binding('myForm.input.$valid')).toEqual('false');
          });

          it('should be invalid if over max', function() {
           input('value').enter('123');
           expect(binding('value')).toEqual('');
           expect(binding('myForm.input.$valid')).toEqual('false');
          });
        </doc:scenario>
      </doc:example>
   */
  'number': numberInputType,


  /**
   * @ngdoc inputType
   * @name ng.directive:input.url
   *
   * @description
   * Text input with URL validation. Sets the `url` validation error key if the content is not a
   * valid URL.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength.
   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
   *    patterns defined as scope expressions.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <doc:example>
        <doc:source>
         <script>
           function Ctrl($scope) {
             $scope.text = 'http://google.com';
           }
         </script>
         <form name="myForm" ng-controller="Ctrl">
           URL: <input type="url" name="input" ng-model="text" required>
           <span class="error" ng-show="myForm.input.$error.required">
             Required!</span>
           <span class="error" ng-show="myForm.input.$error.url">
             Not valid url!</span>
           <tt>text = {{text}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
          </form>
        </doc:source>
        <doc:scenario>
          it('should initialize to model', function() {
            expect(binding('text')).toEqual('http://google.com');
            expect(binding('myForm.input.$valid')).toEqual('true');
          });

          it('should be invalid if empty', function() {
            input('text').enter('');
            expect(binding('text')).toEqual('');
            expect(binding('myForm.input.$valid')).toEqual('false');
          });

          it('should be invalid if not url', function() {
            input('text').enter('xxx');
            expect(binding('myForm.input.$valid')).toEqual('false');
          });
        </doc:scenario>
      </doc:example>
   */
  'url': urlInputType,


  /**
   * @ngdoc inputType
   * @name ng.directive:input.email
   *
   * @description
   * Text input with email validation. Sets the `email` validation error key if not a valid email
   * address.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength.
   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
   *    patterns defined as scope expressions.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <doc:example>
        <doc:source>
         <script>
           function Ctrl($scope) {
             $scope.text = 'me@example.com';
           }
         </script>
           <form name="myForm" ng-controller="Ctrl">
             Email: <input type="email" name="input" ng-model="text" required>
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.email">
               Not valid email!</span>
             <tt>text = {{text}}</tt><br/>
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
           </form>
        </doc:source>
        <doc:scenario>
          it('should initialize to model', function() {
            expect(binding('text')).toEqual('me@example.com');
            expect(binding('myForm.input.$valid')).toEqual('true');
          });

          it('should be invalid if empty', function() {
            input('text').enter('');
            expect(binding('text')).toEqual('');
            expect(binding('myForm.input.$valid')).toEqual('false');
          });

          it('should be invalid if not email', function() {
            input('text').enter('xxx');
            expect(binding('myForm.input.$valid')).toEqual('false');
          });
        </doc:scenario>
      </doc:example>
   */
  'email': emailInputType,


  /**
   * @ngdoc inputType
   * @name ng.directive:input.radio
   *
   * @description
   * HTML radio button.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string} value The value to which the expression should be set when selected.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <doc:example>
        <doc:source>
         <script>
           function Ctrl($scope) {
             $scope.color = 'blue';
           }
         </script>
         <form name="myForm" ng-controller="Ctrl">
           <input type="radio" ng-model="color" value="red">  Red <br/>
           <input type="radio" ng-model="color" value="green"> Green <br/>
           <input type="radio" ng-model="color" value="blue"> Blue <br/>
           <tt>color = {{color}}</tt><br/>
          </form>
        </doc:source>
        <doc:scenario>
          it('should change state', function() {
            expect(binding('color')).toEqual('blue');

            input('color').select('red');
            expect(binding('color')).toEqual('red');
          });
        </doc:scenario>
      </doc:example>
   */
  'radio': radioInputType,


  /**
   * @ngdoc inputType
   * @name ng.directive:input.checkbox
   *
   * @description
   * HTML checkbox.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} ngTrueValue The value to which the expression should be set when selected.
   * @param {string=} ngFalseValue The value to which the expression should be set when not selected.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <doc:example>
        <doc:source>
         <script>
           function Ctrl($scope) {
             $scope.value1 = true;
             $scope.value2 = 'YES'
           }
         </script>
         <form name="myForm" ng-controller="Ctrl">
           Value1: <input type="checkbox" ng-model="value1"> <br/>
           Value2: <input type="checkbox" ng-model="value2"
                          ng-true-value="YES" ng-false-value="NO"> <br/>
           <tt>value1 = {{value1}}</tt><br/>
           <tt>value2 = {{value2}}</tt><br/>
          </form>
        </doc:source>
        <doc:scenario>
          it('should change state', function() {
            expect(binding('value1')).toEqual('true');
            expect(binding('value2')).toEqual('YES');

            input('value1').check();
            input('value2').check();
            expect(binding('value1')).toEqual('false');
            expect(binding('value2')).toEqual('NO');
          });
        </doc:scenario>
      </doc:example>
   */
  'checkbox': checkboxInputType,

  'hidden': noop,
  'button': noop,
  'submit': noop,
  'reset': noop
};

// A helper function to call $setValidity and return the value / undefined,
// a pattern that is repeated a lot in the input validation logic.
function validate(ctrl, validatorName, validity, value){
  ctrl.$setValidity(validatorName, validity);
  return validity ? value : undefined;
}

function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  // In composition mode, users are still inputing intermediate text buffer,
  // hold the listener until composition is done.
  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
  if (!$sniffer.android) {
    var composing = false;

    element.on('compositionstart', function(data) {
      composing = true;
    });

    element.on('compositionend', function() {
      composing = false;
    });
  }

  var listener = function() {
    if (composing) return;
    var value = element.val();

    // By default we will trim the value
    // If the attribute ng-trim exists we will avoid trimming
    // e.g. <input ng-model="foo" ng-trim="false">
    if (toBoolean(attr.ngTrim || 'T')) {
      value = trim(value);
    }

    if (ctrl.$viewValue !== value) {
      if (scope.$$phase) {
        ctrl.$setViewValue(value);
      } else {
        scope.$apply(function() {
          ctrl.$setViewValue(value);
        });
      }
    }
  };

  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
  // input event on backspace, delete or cut
  if ($sniffer.hasEvent('input')) {
    element.on('input', listener);
  } else {
    var timeout;

    var deferListener = function() {
      if (!timeout) {
        timeout = $browser.defer(function() {
          listener();
          timeout = null;
        });
      }
    };

    element.on('keydown', function(event) {
      var key = event.keyCode;

      // ignore
      //    command            modifiers                   arrows
      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;

      deferListener();
    });

    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
    if ($sniffer.hasEvent('paste')) {
      element.on('paste cut', deferListener);
    }
  }

  // if user paste into input using mouse on older browser
  // or form autocomplete on newer browser, we need "change" event to catch it
  element.on('change', listener);

  ctrl.$render = function() {
    element.val(ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue);
  };

  // pattern validator
  var pattern = attr.ngPattern,
      patternValidator,
      match;

  if (pattern) {
    var validateRegex = function(regexp, value) {
      return validate(ctrl, 'pattern', ctrl.$isEmpty(value) || regexp.test(value), value);
    };
    match = pattern.match(/^\/(.*)\/([gim]*)$/);
    if (match) {
      pattern = new RegExp(match[1], match[2]);
      patternValidator = function(value) {
        return validateRegex(pattern, value);
      };
    } else {
      patternValidator = function(value) {
        var patternObj = scope.$eval(pattern);

        if (!patternObj || !patternObj.test) {
          throw minErr('ngPattern')('noregexp',
            'Expected {0} to be a RegExp but was {1}. Element: {2}', pattern,
            patternObj, startingTag(element));
        }
        return validateRegex(patternObj, value);
      };
    }

    ctrl.$formatters.push(patternValidator);
    ctrl.$parsers.push(patternValidator);
  }

  // min length validator
  if (attr.ngMinlength) {
    var minlength = int(attr.ngMinlength);
    var minLengthValidator = function(value) {
      return validate(ctrl, 'minlength', ctrl.$isEmpty(value) || value.length >= minlength, value);
    };

    ctrl.$parsers.push(minLengthValidator);
    ctrl.$formatters.push(minLengthValidator);
  }

  // max length validator
  if (attr.ngMaxlength) {
    var maxlength = int(attr.ngMaxlength);
    var maxLengthValidator = function(value) {
      return validate(ctrl, 'maxlength', ctrl.$isEmpty(value) || value.length <= maxlength, value);
    };

    ctrl.$parsers.push(maxLengthValidator);
    ctrl.$formatters.push(maxLengthValidator);
  }
}

function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  textInputType(scope, element, attr, ctrl, $sniffer, $browser);

  ctrl.$parsers.push(function(value) {
    var empty = ctrl.$isEmpty(value);
    if (empty || NUMBER_REGEXP.test(value)) {
      ctrl.$setValidity('number', true);
      return value === '' ? null : (empty ? value : parseFloat(value));
    } else {
      ctrl.$setValidity('number', false);
      return undefined;
    }
  });

  ctrl.$formatters.push(function(value) {
    return ctrl.$isEmpty(value) ? '' : '' + value;
  });

  if (attr.min) {
    var minValidator = function(value) {
      var min = parseFloat(attr.min);
      return validate(ctrl, 'min', ctrl.$isEmpty(value) || value >= min, value);
    };

    ctrl.$parsers.push(minValidator);
    ctrl.$formatters.push(minValidator);
  }

  if (attr.max) {
    var maxValidator = function(value) {
      var max = parseFloat(attr.max);
      return validate(ctrl, 'max', ctrl.$isEmpty(value) || value <= max, value);
    };

    ctrl.$parsers.push(maxValidator);
    ctrl.$formatters.push(maxValidator);
  }

  ctrl.$formatters.push(function(value) {
    return validate(ctrl, 'number', ctrl.$isEmpty(value) || isNumber(value), value);
  });
}

function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  textInputType(scope, element, attr, ctrl, $sniffer, $browser);

  var urlValidator = function(value) {
    return validate(ctrl, 'url', ctrl.$isEmpty(value) || URL_REGEXP.test(value), value);
  };

  ctrl.$formatters.push(urlValidator);
  ctrl.$parsers.push(urlValidator);
}

function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  textInputType(scope, element, attr, ctrl, $sniffer, $browser);

  var emailValidator = function(value) {
    return validate(ctrl, 'email', ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value), value);
  };

  ctrl.$formatters.push(emailValidator);
  ctrl.$parsers.push(emailValidator);
}

function radioInputType(scope, element, attr, ctrl) {
  // make the name unique, if not defined
  if (isUndefined(attr.name)) {
    element.attr('name', nextUid());
  }

  element.on('click', function() {
    if (element[0].checked) {
      scope.$apply(function() {
        ctrl.$setViewValue(attr.value);
      });
    }
  });

  ctrl.$render = function() {
    var value = attr.value;
    element[0].checked = (value == ctrl.$viewValue);
  };

  attr.$observe('value', ctrl.$render);
}

function checkboxInputType(scope, element, attr, ctrl) {
  var trueValue = attr.ngTrueValue,
      falseValue = attr.ngFalseValue;

  if (!isString(trueValue)) trueValue = true;
  if (!isString(falseValue)) falseValue = false;

  element.on('click', function() {
    scope.$apply(function() {
      ctrl.$setViewValue(element[0].checked);
    });
  });

  ctrl.$render = function() {
    element[0].checked = ctrl.$viewValue;
  };

  // Override the standard `$isEmpty` because a value of `false` means empty in a checkbox.
  ctrl.$isEmpty = function(value) {
    return value !== trueValue;
  };

  ctrl.$formatters.push(function(value) {
    return value === trueValue;
  });

  ctrl.$parsers.push(function(value) {
    return value ? trueValue : falseValue;
  });
}


/**
 * @ngdoc directive
 * @name ng.directive:textarea
 * @restrict E
 *
 * @description
 * HTML textarea element control with angular data-binding. The data-binding and validation
 * properties of this element are exactly the same as those of the
 * {@link ng.directive:input input element}.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength.
 * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
 *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
 *    patterns defined as scope expressions.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 */


/**
 * @ngdoc directive
 * @name ng.directive:input
 * @restrict E
 *
 * @description
 * HTML input element control with angular data-binding. Input control follows HTML5 input types
 * and polyfills the HTML5 validation behavior for older browsers.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {boolean=} ngRequired Sets `required` attribute if set to true
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength.
 * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
 *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
 *    patterns defined as scope expressions.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 *
 * @example
    <doc:example>
      <doc:source>
       <script>
         function Ctrl($scope) {
           $scope.user = {name: 'guest', last: 'visitor'};
         }
       </script>
       <div ng-controller="Ctrl">
         <form name="myForm">
           User name: <input type="text" name="userName" ng-model="user.name" required>
           <span class="error" ng-show="myForm.userName.$error.required">
             Required!</span><br>
           Last name: <input type="text" name="lastName" ng-model="user.last"
             ng-minlength="3" ng-maxlength="10">
           <span class="error" ng-show="myForm.lastName.$error.minlength">
             Too short!</span>
           <span class="error" ng-show="myForm.lastName.$error.maxlength">
             Too long!</span><br>
         </form>
         <hr>
         <tt>user = {{user}}</tt><br/>
         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br>
         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br>
         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br>
         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br>
         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br>
       </div>
      </doc:source>
      <doc:scenario>
        it('should initialize to model', function() {
          expect(binding('user')).toEqual('{"name":"guest","last":"visitor"}');
          expect(binding('myForm.userName.$valid')).toEqual('true');
          expect(binding('myForm.$valid')).toEqual('true');
        });

        it('should be invalid if empty when required', function() {
          input('user.name').enter('');
          expect(binding('user')).toEqual('{"last":"visitor"}');
          expect(binding('myForm.userName.$valid')).toEqual('false');
          expect(binding('myForm.$valid')).toEqual('false');
        });

        it('should be valid if empty when min length is set', function() {
          input('user.last').enter('');
          expect(binding('user')).toEqual('{"name":"guest","last":""}');
          expect(binding('myForm.lastName.$valid')).toEqual('true');
          expect(binding('myForm.$valid')).toEqual('true');
        });

        it('should be invalid if less than required min length', function() {
          input('user.last').enter('xx');
          expect(binding('user')).toEqual('{"name":"guest"}');
          expect(binding('myForm.lastName.$valid')).toEqual('false');
          expect(binding('myForm.lastName.$error')).toMatch(/minlength/);
          expect(binding('myForm.$valid')).toEqual('false');
        });

        it('should be invalid if longer than max length', function() {
          input('user.last').enter('some ridiculously long name');
          expect(binding('user'))
            .toEqual('{"name":"guest"}');
          expect(binding('myForm.lastName.$valid')).toEqual('false');
          expect(binding('myForm.lastName.$error')).toMatch(/maxlength/);
          expect(binding('myForm.$valid')).toEqual('false');
        });
      </doc:scenario>
    </doc:example>
 */
var inputDirective = ['$browser', '$sniffer', function($browser, $sniffer) {
  return {
    restrict: 'E',
    require: '?ngModel',
    link: function(scope, element, attr, ctrl) {
      if (ctrl) {
        (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrl, $sniffer,
                                                            $browser);
      }
    }
  };
}];

var VALID_CLASS = 'ng-valid',
    INVALID_CLASS = 'ng-invalid',
    PRISTINE_CLASS = 'ng-pristine',
    DIRTY_CLASS = 'ng-dirty';

/**
 * @ngdoc object
 * @name ng.directive:ngModel.NgModelController
 *
 * @property {string} $viewValue Actual string value in the view.
 * @property {*} $modelValue The value in the model, that the control is bound to.
 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
       the control reads value from the DOM.  Each function is called, in turn, passing the value
       through to the next. Used to sanitize / convert the value as well as validation.
       For validation, the parsers should update the validity state using
       {@link ng.directive:ngModel.NgModelController#methods_$setValidity $setValidity()},
       and return `undefined` for invalid values.

 *
 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
       the model value changes. Each function is called, in turn, passing the value through to the
       next. Used to format / convert values for display in the control and validation.
 *      <pre>
 *      function formatter(value) {
 *        if (value) {
 *          return value.toUpperCase();
 *        }
 *      }
 *      ngModel.$formatters.push(formatter);
 *      </pre>
 *
 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
 *     view value has changed. It is called with no arguments, and its return value is ignored.
 *     This can be used in place of additional $watches against the model value.
 *
 * @property {Object} $error An object hash with all errors as keys.
 *
 * @property {boolean} $pristine True if user has not interacted with the control yet.
 * @property {boolean} $dirty True if user has already interacted with the control.
 * @property {boolean} $valid True if there is no error.
 * @property {boolean} $invalid True if at least one error on the control.
 *
 * @description
 *
 * `NgModelController` provides API for the `ng-model` directive. The controller contains
 * services for data-binding, validation, CSS updates, and value formatting and parsing. It
 * purposefully does not contain any logic which deals with DOM rendering or listening to
 * DOM events. Such DOM related logic should be provided by other directives which make use of
 * `NgModelController` for data-binding.
 *
 * ## Custom Control Example
 * This example shows how to use `NgModelController` with a custom control to achieve
 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
 * collaborate together to achieve the desired result.
 *
 * Note that `contenteditable` is an HTML5 attribute, which tells the browser to let the element
 * contents be edited in place by the user.  This will not work on older browsers.
 *
 * <example module="customControl">
    <file name="style.css">
      [contenteditable] {
        border: 1px solid black;
        background-color: white;
        min-height: 20px;
      }

      .ng-invalid {
        border: 1px solid red;
      }

    </file>
    <file name="script.js">
      angular.module('customControl', []).
        directive('contenteditable', function() {
          return {
            restrict: 'A', // only activate on element attribute
            require: '?ngModel', // get a hold of NgModelController
            link: function(scope, element, attrs, ngModel) {
              if(!ngModel) return; // do nothing if no ng-model

              // Specify how UI should be updated
              ngModel.$render = function() {
                element.html(ngModel.$viewValue || '');
              };

              // Listen for change events to enable binding
              element.on('blur keyup change', function() {
                scope.$apply(read);
              });
              read(); // initialize

              // Write data to the model
              function read() {
                var html = element.html();
                // When we clear the content editable the browser leaves a <br> behind
                // If strip-br attribute is provided then we strip this out
                if( attrs.stripBr && html == '<br>' ) {
                  html = '';
                }
                ngModel.$setViewValue(html);
              }
            }
          };
        });
    </file>
    <file name="index.html">
      <form name="myForm">
       <div contenteditable
            name="myWidget" ng-model="userContent"
            strip-br="true"
            required>Change me!</div>
        <span ng-show="myForm.myWidget.$error.required">Required!</span>
       <hr>
       <textarea ng-model="userContent"></textarea>
      </form>
    </file>
    <file name="scenario.js">
      it('should data-bind and become invalid', function() {
        var contentEditable = element('[contenteditable]');

        expect(contentEditable.text()).toEqual('Change me!');
        input('userContent').enter('');
        expect(contentEditable.text()).toEqual('');
        expect(contentEditable.prop('className')).toMatch(/ng-invalid-required/);
      });
    </file>
 * </example>
 *
 *
 */
var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse',
    function($scope, $exceptionHandler, $attr, $element, $parse) {
  this.$viewValue = Number.NaN;
  this.$modelValue = Number.NaN;
  this.$parsers = [];
  this.$formatters = [];
  this.$viewChangeListeners = [];
  this.$pristine = true;
  this.$dirty = false;
  this.$valid = true;
  this.$invalid = false;
  this.$name = $attr.name;

  var ngModelGet = $parse($attr.ngModel),
      ngModelSet = ngModelGet.assign;

  if (!ngModelSet) {
    throw minErr('ngModel')('nonassign', "Expression '{0}' is non-assignable. Element: {1}",
        $attr.ngModel, startingTag($element));
  }

  /**
   * @ngdoc function
   * @name ng.directive:ngModel.NgModelController#$render
   * @methodOf ng.directive:ngModel.NgModelController
   *
   * @description
   * Called when the view needs to be updated. It is expected that the user of the ng-model
   * directive will implement this method.
   */
  this.$render = noop;

  /**
   * @ngdoc function
   * @name { ng.directive:ngModel.NgModelController#$isEmpty
   * @methodOf ng.directive:ngModel.NgModelController
   *
   * @description
   * This is called when we need to determine if the value of the input is empty.
   *
   * For instance, the required directive does this to work out if the input has data or not.
   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
   *
   * You can override this for input directives whose concept of being empty is different to the
   * default. The `checkboxInputType` directive does this because in its case a value of `false`
   * implies empty.
   */
  this.$isEmpty = function(value) {
    return isUndefined(value) || value === '' || value === null || value !== value;
  };

  var parentForm = $element.inheritedData('$formController') || nullFormCtrl,
      invalidCount = 0, // used to easily determine if we are valid
      $error = this.$error = {}; // keep invalid keys here


  // Setup initial state of the control
  $element.addClass(PRISTINE_CLASS);
  toggleValidCss(true);

  // convenience method for easy toggling of classes
  function toggleValidCss(isValid, validationErrorKey) {
    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
    $element.
      removeClass((isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey).
      addClass((isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey);
  }

  /**
   * @ngdoc function
   * @name ng.directive:ngModel.NgModelController#$setValidity
   * @methodOf ng.directive:ngModel.NgModelController
   *
   * @description
   * Change the validity state, and notifies the form when the control changes validity. (i.e. it
   * does not notify form if given validator is already marked as invalid).
   *
   * This method should be called by validators - i.e. the parser or formatter functions.
   *
   * @param {string} validationErrorKey Name of the validator. the `validationErrorKey` will assign
   *        to `$error[validationErrorKey]=isValid` so that it is available for data-binding.
   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
   * @param {boolean} isValid Whether the current state is valid (true) or invalid (false).
   */
  this.$setValidity = function(validationErrorKey, isValid) {
    // Purposeful use of ! here to cast isValid to boolean in case it is undefined
    // jshint -W018
    if ($error[validationErrorKey] === !isValid) return;
    // jshint +W018

    if (isValid) {
      if ($error[validationErrorKey]) invalidCount--;
      if (!invalidCount) {
        toggleValidCss(true);
        this.$valid = true;
        this.$invalid = false;
      }
    } else {
      toggleValidCss(false);
      this.$invalid = true;
      this.$valid = false;
      invalidCount++;
    }

    $error[validationErrorKey] = !isValid;
    toggleValidCss(isValid, validationErrorKey);

    parentForm.$setValidity(validationErrorKey, isValid, this);
  };

  /**
   * @ngdoc function
   * @name ng.directive:ngModel.NgModelController#$setPristine
   * @methodOf ng.directive:ngModel.NgModelController
   *
   * @description
   * Sets the control to its pristine state.
   *
   * This method can be called to remove the 'ng-dirty' class and set the control to its pristine
   * state (ng-pristine class).
   */
  this.$setPristine = function () {
    this.$dirty = false;
    this.$pristine = true;
    $element.removeClass(DIRTY_CLASS).addClass(PRISTINE_CLASS);
  };

  /**
   * @ngdoc function
   * @name ng.directive:ngModel.NgModelController#$setViewValue
   * @methodOf ng.directive:ngModel.NgModelController
   *
   * @description
   * Update the view value.
   *
   * This method should be called when the view value changes, typically from within a DOM event handler.
   * For example {@link ng.directive:input input} and
   * {@link ng.directive:select select} directives call it.
   *
   * It will update the $viewValue, then pass this value through each of the functions in `$parsers`,
   * which includes any validators. The value that comes out of this `$parsers` pipeline, be applied to
   * `$modelValue` and the **expression** specified in the `ng-model` attribute.
   *
   * Lastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.
   *
   * Note that calling this function does not trigger a `$digest`.
   *
   * @param {string} value Value from the view.
   */
  this.$setViewValue = function(value) {
    this.$viewValue = value;

    // change to dirty
    if (this.$pristine) {
      this.$dirty = true;
      this.$pristine = false;
      $element.removeClass(PRISTINE_CLASS).addClass(DIRTY_CLASS);
      parentForm.$setDirty();
    }

    forEach(this.$parsers, function(fn) {
      value = fn(value);
    });

    if (this.$modelValue !== value) {
      this.$modelValue = value;
      ngModelSet($scope, value);
      forEach(this.$viewChangeListeners, function(listener) {
        try {
          listener();
        } catch(e) {
          $exceptionHandler(e);
        }
      });
    }
  };

  // model -> value
  var ctrl = this;

  $scope.$watch(function ngModelWatch() {
    var value = ngModelGet($scope);

    // if scope model value and ngModel value are out of sync
    if (ctrl.$modelValue !== value) {

      var formatters = ctrl.$formatters,
          idx = formatters.length;

      ctrl.$modelValue = value;
      while(idx--) {
        value = formatters[idx](value);
      }

      if (ctrl.$viewValue !== value) {
        ctrl.$viewValue = value;
        ctrl.$render();
      }
    }

    return value;
  });
}];


/**
 * @ngdoc directive
 * @name ng.directive:ngModel
 *
 * @element input
 *
 * @description
 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
 * property on the scope using {@link ng.directive:ngModel.NgModelController NgModelController},
 * which is created and exposed by this directive.
 *
 * `ngModel` is responsible for:
 *
 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
 *   require.
 * - Providing validation behavior (i.e. required, number, email, url).
 * - Keeping the state of the control (valid/invalid, dirty/pristine, validation errors).
 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`).
 * - Registering the control with its parent {@link ng.directive:form form}.
 *
 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
 * current scope. If the property doesn't already exist on this scope, it will be created
 * implicitly and added to the scope.
 *
 * For best practices on using `ngModel`, see:
 *
 *  - {@link https://github.com/angular/angular.js/wiki/Understanding-Scopes}
 *
 * For basic examples, how to use `ngModel`, see:
 *
 *  - {@link ng.directive:input input}
 *    - {@link ng.directive:input.text text}
 *    - {@link ng.directive:input.checkbox checkbox}
 *    - {@link ng.directive:input.radio radio}
 *    - {@link ng.directive:input.number number}
 *    - {@link ng.directive:input.email email}
 *    - {@link ng.directive:input.url url}
 *  - {@link ng.directive:select select}
 *  - {@link ng.directive:textarea textarea}
 *
 */
var ngModelDirective = function() {
  return {
    require: ['ngModel', '^?form'],
    controller: NgModelController,
    link: function(scope, element, attr, ctrls) {
      // notify others, especially parent forms

      var modelCtrl = ctrls[0],
          formCtrl = ctrls[1] || nullFormCtrl;

      formCtrl.$addControl(modelCtrl);

      scope.$on('$destroy', function() {
        formCtrl.$removeControl(modelCtrl);
      });
    }
  };
};


/**
 * @ngdoc directive
 * @name ng.directive:ngChange
 *
 * @description
 * Evaluate given expression when user changes the input.
 * The expression is not evaluated when the value change is coming from the model.
 *
 * Note, this directive requires `ngModel` to be present.
 *
 * @element input
 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
 * in input value.
 *
 * @example
 * <doc:example>
 *   <doc:source>
 *     <script>
 *       function Controller($scope) {
 *         $scope.counter = 0;
 *         $scope.change = function() {
 *           $scope.counter++;
 *         };
 *       }
 *     </script>
 *     <div ng-controller="Controller">
 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
 *       <label for="ng-change-example2">Confirmed</label><br />
 *       debug = {{confirmed}}<br />
 *       counter = {{counter}}
 *     </div>
 *   </doc:source>
 *   <doc:scenario>
 *     it('should evaluate the expression if changing from view', function() {
 *       expect(binding('counter')).toEqual('0');
 *       element('#ng-change-example1').click();
 *       expect(binding('counter')).toEqual('1');
 *       expect(binding('confirmed')).toEqual('true');
 *     });
 *
 *     it('should not evaluate the expression if changing from model', function() {
 *       element('#ng-change-example2').click();
 *       expect(binding('counter')).toEqual('0');
 *       expect(binding('confirmed')).toEqual('true');
 *     });
 *   </doc:scenario>
 * </doc:example>
 */
var ngChangeDirective = valueFn({
  require: 'ngModel',
  link: function(scope, element, attr, ctrl) {
    ctrl.$viewChangeListeners.push(function() {
      scope.$eval(attr.ngChange);
    });
  }
});


var requiredDirective = function() {
  return {
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;
      attr.required = true; // force truthy in case we are on non input element

      var validator = function(value) {
        if (attr.required && ctrl.$isEmpty(value)) {
          ctrl.$setValidity('required', false);
          return;
        } else {
          ctrl.$setValidity('required', true);
          return value;
        }
      };

      ctrl.$formatters.push(validator);
      ctrl.$parsers.unshift(validator);

      attr.$observe('required', function() {
        validator(ctrl.$viewValue);
      });
    }
  };
};


/**
 * @ngdoc directive
 * @name ng.directive:ngList
 *
 * @description
 * Text input that converts between a delimited string and an array of strings. The delimiter
 * can be a fixed string (by default a comma) or a regular expression.
 *
 * @element input
 * @param {string=} ngList optional delimiter that should be used to split the value. If
 *   specified in form `/something/` then the value will be converted into a regular expression.
 *
 * @example
    <doc:example>
      <doc:source>
       <script>
         function Ctrl($scope) {
           $scope.names = ['igor', 'misko', 'vojta'];
         }
       </script>
       <form name="myForm" ng-controller="Ctrl">
         List: <input name="namesInput" ng-model="names" ng-list required>
         <span class="error" ng-show="myForm.namesInput.$error.required">
           Required!</span>
         <br>
         <tt>names = {{names}}</tt><br/>
         <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
         <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
        </form>
      </doc:source>
      <doc:scenario>
        it('should initialize to model', function() {
          expect(binding('names')).toEqual('["igor","misko","vojta"]');
          expect(binding('myForm.namesInput.$valid')).toEqual('true');
          expect(element('span.error').css('display')).toBe('none');
        });

        it('should be invalid if empty', function() {
          input('names').enter('');
          expect(binding('names')).toEqual('');
          expect(binding('myForm.namesInput.$valid')).toEqual('false');
          expect(element('span.error').css('display')).not().toBe('none');
        });
      </doc:scenario>
    </doc:example>
 */
var ngListDirective = function() {
  return {
    require: 'ngModel',
    link: function(scope, element, attr, ctrl) {
      var match = /\/(.*)\//.exec(attr.ngList),
          separator = match && new RegExp(match[1]) || attr.ngList || ',';

      var parse = function(viewValue) {
        // If the viewValue is invalid (say required but empty) it will be `undefined`
        if (isUndefined(viewValue)) return;

        var list = [];

        if (viewValue) {
          forEach(viewValue.split(separator), function(value) {
            if (value) list.push(trim(value));
          });
        }

        return list;
      };

      ctrl.$parsers.push(parse);
      ctrl.$formatters.push(function(value) {
        if (isArray(value)) {
          return value.join(', ');
        }

        return undefined;
      });

      // Override the standard $isEmpty because an empty array means the input is empty.
      ctrl.$isEmpty = function(value) {
        return !value || !value.length;
      };
    }
  };
};


var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
/**
 * @ngdoc directive
 * @name ng.directive:ngValue
 *
 * @description
 * Binds the given expression to the value of `input[select]` or `input[radio]`, so
 * that when the element is selected, the `ngModel` of that element is set to the
 * bound value.
 *
 * `ngValue` is useful when dynamically generating lists of radio buttons using `ng-repeat`, as
 * shown below.
 *
 * @element input
 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
 *   of the `input` element
 *
 * @example
    <doc:example>
      <doc:source>
       <script>
          function Ctrl($scope) {
            $scope.names = ['pizza', 'unicorns', 'robots'];
            $scope.my = { favorite: 'unicorns' };
          }
       </script>
        <form ng-controller="Ctrl">
          <h2>Which is your favorite?</h2>
            <label ng-repeat="name in names" for="{{name}}">
              {{name}}
              <input type="radio"
                     ng-model="my.favorite"
                     ng-value="name"
                     id="{{name}}"
                     name="favorite">
            </label>
          <div>You chose {{my.favorite}}</div>
        </form>
      </doc:source>
      <doc:scenario>
        it('should initialize to model', function() {
          expect(binding('my.favorite')).toEqual('unicorns');
        });
        it('should bind the values to the inputs', function() {
          input('my.favorite').select('pizza');
          expect(binding('my.favorite')).toEqual('pizza');
        });
      </doc:scenario>
    </doc:example>
 */
var ngValueDirective = function() {
  return {
    priority: 100,
    compile: function(tpl, tplAttr) {
      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
        return function ngValueConstantLink(scope, elm, attr) {
          attr.$set('value', scope.$eval(attr.ngValue));
        };
      } else {
        return function ngValueLink(scope, elm, attr) {
          scope.$watch(attr.ngValue, function valueWatchAction(value) {
            attr.$set('value', value);
          });
        };
      }
    }
  };
};

/**
 * @ngdoc directive
 * @name ng.directive:ngBind
 * @restrict AC
 *
 * @description
 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
 * with the value of a given expression, and to update the text content when the value of that
 * expression changes.
 *
 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
 * `{{ expression }}` which is similar but less verbose.
 *
 * It is preferrable to use `ngBind` instead of `{{ expression }}` when a template is momentarily
 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
 * element attribute, it makes the bindings invisible to the user while the page is loading.
 *
 * An alternative solution to this problem would be using the
 * {@link ng.directive:ngCloak ngCloak} directive.
 *
 *
 * @element ANY
 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
 *
 * @example
 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
   <doc:example>
     <doc:source>
       <script>
         function Ctrl($scope) {
           $scope.name = 'Whirled';
         }
       </script>
       <div ng-controller="Ctrl">
         Enter name: <input type="text" ng-model="name"><br>
         Hello <span ng-bind="name"></span>!
       </div>
     </doc:source>
     <doc:scenario>
       it('should check ng-bind', function() {
         expect(using('.doc-example-live').binding('name')).toBe('Whirled');
         using('.doc-example-live').input('name').enter('world');
         expect(using('.doc-example-live').binding('name')).toBe('world');
       });
     </doc:scenario>
   </doc:example>
 */
var ngBindDirective = ngDirective(function(scope, element, attr) {
  element.addClass('ng-binding').data('$binding', attr.ngBind);
  scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
    // We are purposefully using == here rather than === because we want to
    // catch when value is "null or undefined"
    // jshint -W041
    element.text(value == undefined ? '' : value);
  });
});


/**
 * @ngdoc directive
 * @name ng.directive:ngBindTemplate
 *
 * @description
 * The `ngBindTemplate` directive specifies that the element
 * text content should be replaced with the interpolation of the template
 * in the `ngBindTemplate` attribute.
 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
 * expressions. This directive is needed since some HTML elements
 * (such as TITLE and OPTION) cannot contain SPAN elements.
 *
 * @element ANY
 * @param {string} ngBindTemplate template of form
 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
 *
 * @example
 * Try it here: enter text in text box and watch the greeting change.
   <doc:example>
     <doc:source>
       <script>
         function Ctrl($scope) {
           $scope.salutation = 'Hello';
           $scope.name = 'World';
         }
       </script>
       <div ng-controller="Ctrl">
        Salutation: <input type="text" ng-model="salutation"><br>
        Name: <input type="text" ng-model="name"><br>
        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
       </div>
     </doc:source>
     <doc:scenario>
       it('should check ng-bind', function() {
         expect(using('.doc-example-live').binding('salutation')).
           toBe('Hello');
         expect(using('.doc-example-live').binding('name')).
           toBe('World');
         using('.doc-example-live').input('salutation').enter('Greetings');
         using('.doc-example-live').input('name').enter('user');
         expect(using('.doc-example-live').binding('salutation')).
           toBe('Greetings');
         expect(using('.doc-example-live').binding('name')).
           toBe('user');
       });
     </doc:scenario>
   </doc:example>
 */
var ngBindTemplateDirective = ['$interpolate', function($interpolate) {
  return function(scope, element, attr) {
    // TODO: move this to scenario runner
    var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
    element.addClass('ng-binding').data('$binding', interpolateFn);
    attr.$observe('ngBindTemplate', function(value) {
      element.text(value);
    });
  };
}];


/**
 * @ngdoc directive
 * @name ng.directive:ngBindHtml
 *
 * @description
 * Creates a binding that will innerHTML the result of evaluating the `expression` into the current
 * element in a secure way.  By default, the innerHTML-ed content will be sanitized using the {@link
 * ngSanitize.$sanitize $sanitize} service.  To utilize this functionality, ensure that `$sanitize`
 * is available, for example, by including {@link ngSanitize} in your module's dependencies (not in
 * core Angular.)  You may also bypass sanitization for values you know are safe. To do so, bind to
 * an explicitly trusted value via {@link ng.$sce#methods_trustAsHtml $sce.trustAsHtml}.  See the example
 * under {@link ng.$sce#Example Strict Contextual Escaping (SCE)}.
 *
 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
 * will have an exception (instead of an exploit.)
 *
 * @element ANY
 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
 *
 * @example
   Try it here: enter text in text box and watch the greeting change.
 
   <example module="ngBindHtmlExample" deps="angular-sanitize.js">
     <file name="index.html">
       <div ng-controller="ngBindHtmlCtrl">
        <p ng-bind-html="myHTML"></p>
       </div>
     </file>
     
     <file name="script.js">
       angular.module('ngBindHtmlExample', ['ngSanitize'])

       .controller('ngBindHtmlCtrl', ['$scope', function ngBindHtmlCtrl($scope) {
         $scope.myHTML =
            'I am an <code>HTML</code>string with <a href="#">links!</a> and other <em>stuff</em>';
       }]);
     </file>

     <file name="scenario.js">
       it('should check ng-bind-html', function() {
         expect(using('.doc-example-live').binding('myHTML')).
           toBe(
           'I am an <code>HTML</code>string with <a href="#">links!</a> and other <em>stuff</em>'
           );
       });
     </file>
   </example>
 */
var ngBindHtmlDirective = ['$sce', '$parse', function($sce, $parse) {
  return function(scope, element, attr) {
    element.addClass('ng-binding').data('$binding', attr.ngBindHtml);

    var parsed = $parse(attr.ngBindHtml);
    function getStringValue() { return (parsed(scope) || '').toString(); }

    scope.$watch(getStringValue, function ngBindHtmlWatchAction(value) {
      element.html($sce.getTrustedHtml(parsed(scope)) || '');
    });
  };
}];

function classDirective(name, selector) {
  name = 'ngClass' + name;
  return function() {
    return {
      restrict: 'AC',
      link: function(scope, element, attr) {
        var oldVal;

        scope.$watch(attr[name], ngClassWatchAction, true);

        attr.$observe('class', function(value) {
          ngClassWatchAction(scope.$eval(attr[name]));
        });


        if (name !== 'ngClass') {
          scope.$watch('$index', function($index, old$index) {
            // jshint bitwise: false
            var mod = $index & 1;
            if (mod !== old$index & 1) {
              var classes = flattenClasses(scope.$eval(attr[name]));
              mod === selector ?
                attr.$addClass(classes) :
                attr.$removeClass(classes);
            }
          });
        }


        function ngClassWatchAction(newVal) {
          if (selector === true || scope.$index % 2 === selector) {
            var newClasses = flattenClasses(newVal || '');
            if(!oldVal) {
              attr.$addClass(newClasses);
            } else if(!equals(newVal,oldVal)) {
              attr.$updateClass(newClasses, flattenClasses(oldVal));
            }
          }
          oldVal = copy(newVal);
        }


        function flattenClasses(classVal) {
          if(isArray(classVal)) {
            return classVal.join(' ');
          } else if (isObject(classVal)) {
            var classes = [], i = 0;
            forEach(classVal, function(v, k) {
              if (v) {
                classes.push(k);
              }
            });
            return classes.join(' ');
          }

          return classVal;
        }
      }
    };
  };
}

/**
 * @ngdoc directive
 * @name ng.directive:ngClass
 * @restrict AC
 *
 * @description
 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
 * an expression that represents all classes to be added.
 *
 * The directive won't add duplicate classes if a particular class was already set.
 *
 * When the expression changes, the previously added classes are removed and only then the
 * new classes are added.
 *
 * @animations
 * add - happens just before the class is applied to the element
 * remove - happens just before the class is removed from the element
 *
 * @element ANY
 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class
 *   names, an array, or a map of class names to boolean values. In the case of a map, the
 *   names of the properties whose values are truthy will be added as css classes to the
 *   element.
 *
 * @example Example that demonstrates basic bindings via ngClass directive.
   <example>
     <file name="index.html">
       <p ng-class="{strike: deleted, bold: important, red: error}">Map Syntax Example</p>
       <input type="checkbox" ng-model="deleted"> deleted (apply "strike" class)<br>
       <input type="checkbox" ng-model="important"> important (apply "bold" class)<br>
       <input type="checkbox" ng-model="error"> error (apply "red" class)
       <hr>
       <p ng-class="style">Using String Syntax</p>
       <input type="text" ng-model="style" placeholder="Type: bold strike red">
       <hr>
       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
       <input ng-model="style1" placeholder="Type: bold, strike or red"><br>
       <input ng-model="style2" placeholder="Type: bold, strike or red"><br>
       <input ng-model="style3" placeholder="Type: bold, strike or red"><br>
     </file>
     <file name="style.css">
       .strike {
         text-decoration: line-through;
       }
       .bold {
           font-weight: bold;
       }
       .red {
           color: red;
       }
     </file>
     <file name="scenario.js">
       it('should let you toggle the class', function() {

         expect(element('.doc-example-live p:first').prop('className')).not().toMatch(/bold/);
         expect(element('.doc-example-live p:first').prop('className')).not().toMatch(/red/);

         input('important').check();
         expect(element('.doc-example-live p:first').prop('className')).toMatch(/bold/);

         input('error').check();
         expect(element('.doc-example-live p:first').prop('className')).toMatch(/red/);
       });

       it('should let you toggle string example', function() {
         expect(element('.doc-example-live p:nth-of-type(2)').prop('className')).toBe('');
         input('style').enter('red');
         expect(element('.doc-example-live p:nth-of-type(2)').prop('className')).toBe('red');
       });

       it('array example should have 3 classes', function() {
         expect(element('.doc-example-live p:last').prop('className')).toBe('');
         input('style1').enter('bold');
         input('style2').enter('strike');
         input('style3').enter('red');
         expect(element('.doc-example-live p:last').prop('className')).toBe('bold strike red');
       });
     </file>
   </example>

   ## Animations

   The example below demonstrates how to perform animations using ngClass.

   <example animations="true">
     <file name="index.html">
      <input type="button" value="set" ng-click="myVar='my-class'">
      <input type="button" value="clear" ng-click="myVar=''">
      <br>
      <span class="base-class" ng-class="myVar">Sample Text</span>
     </file>
     <file name="style.css">
       .base-class {
         -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
       }

       .base-class.my-class {
         color: red;
         font-size:3em;
       }
     </file>
     <file name="scenario.js">
       it('should check ng-class', function() {
         expect(element('.doc-example-live span').prop('className')).not().
           toMatch(/my-class/);

         using('.doc-example-live').element(':button:first').click();

         expect(element('.doc-example-live span').prop('className')).
           toMatch(/my-class/);

         using('.doc-example-live').element(':button:last').click();

         expect(element('.doc-example-live span').prop('className')).not().
           toMatch(/my-class/);
       });
     </file>
   </example>


   ## ngClass and pre-existing CSS3 Transitions/Animations
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link ngAnimate.$animate#methods_addclass $animate.addClass} and
   {@link ngAnimate.$animate#methods_removeclass $animate.removeClass}.
 */
var ngClassDirective = classDirective('', true);

/**
 * @ngdoc directive
 * @name ng.directive:ngClassOdd
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}}
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="scenario.js">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element('.doc-example-live li:first span').prop('className')).
           toMatch(/odd/);
         expect(element('.doc-example-live li:last span').prop('className')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
var ngClassOddDirective = classDirective('Odd', 0);

/**
 * @ngdoc directive
 * @name ng.directive:ngClassEven
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
 *   result of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}} &nbsp; &nbsp; &nbsp;
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="scenario.js">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element('.doc-example-live li:first span').prop('className')).
           toMatch(/odd/);
         expect(element('.doc-example-live li:last span').prop('className')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
var ngClassEvenDirective = classDirective('Even', 1);

/**
 * @ngdoc directive
 * @name ng.directive:ngCloak
 * @restrict AC
 *
 * @description
 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
 * directive to avoid the undesirable flicker effect caused by the html template display.
 *
 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
 * of the browser view.
 *
 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
 * `angular.min.js`.
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * <pre>
 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
 *   display: none !important;
 * }
 * </pre>
 *
 * When this css rule is loaded by the browser, all html elements (including their children) that
 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
 * during the compilation of the template it deletes the `ngCloak` element attribute, making
 * the compiled element visible.
 *
 * For the best result, the `angular.js` script must be loaded in the head section of the html
 * document; alternatively, the css rule above must be included in the external stylesheet of the
 * application.
 *
 * Legacy browsers, like IE7, do not provide attribute selector support (added in CSS 2.1) so they
 * cannot match the `[ng\:cloak]` selector. To work around this limitation, you must add the css
 * class `ng-cloak` in addition to the `ngCloak` directive as shown in the example below.
 *
 * @element ANY
 *
 * @example
   <doc:example>
     <doc:source>
        <div id="template1" ng-cloak>{{ 'hello' }}</div>
        <div id="template2" ng-cloak class="ng-cloak">{{ 'hello IE7' }}</div>
     </doc:source>
     <doc:scenario>
       it('should remove the template directive and css class', function() {
         expect(element('.doc-example-live #template1').attr('ng-cloak')).
           not().toBeDefined();
         expect(element('.doc-example-live #template2').attr('ng-cloak')).
           not().toBeDefined();
       });
     </doc:scenario>
   </doc:example>
 *
 */
var ngCloakDirective = ngDirective({
  compile: function(element, attr) {
    attr.$set('ngCloak', undefined);
    element.removeClass('ng-cloak');
  }
});

/**
 * @ngdoc directive
 * @name ng.directive:ngController
 *
 * @description
 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
 * supports the principles behind the Model-View-Controller design pattern.
 *
 * MVC components in angular:
 *
 * * Model — The Model is scope properties; scopes are attached to the DOM where scope properties
 *   are accessed through bindings.
 * * View — The template (HTML with data bindings) that is rendered into the View.
 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
 *   logic behind the application to decorate the scope with functions and values
 *
 * Note that you can also attach controllers to the DOM by declaring it in a route definition
 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
 * and executed twice.
 *
 * @element ANY
 * @scope
 * @param {expression} ngController Name of a globally accessible constructor function or an
 *     {@link guide/expression expression} that on the current scope evaluates to a
 *     constructor function. The controller instance can be published into a scope property
 *     by specifying `as propertyName`.
 *
 * @example
 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
 * greeting are methods declared on the controller (see source tab). These methods can
 * easily be called from the angular markup. Notice that the scope becomes the `this` for the
 * controller's instance. This allows for easy access to the view data from the controller. Also
 * notice that any changes to the data are automatically reflected in the View without the need
 * for a manual update. The example is shown in two different declaration styles you may use
 * according to preference.
   <doc:example>
     <doc:source>
      <script>
        function SettingsController1() {
          this.name = "John Smith";
          this.contacts = [
            {type: 'phone', value: '408 555 1212'},
            {type: 'email', value: 'john.smith@example.org'} ];
          };

        SettingsController1.prototype.greet = function() {
          alert(this.name);
        };

        SettingsController1.prototype.addContact = function() {
          this.contacts.push({type: 'email', value: 'yourname@example.org'});
        };

        SettingsController1.prototype.removeContact = function(contactToRemove) {
         var index = this.contacts.indexOf(contactToRemove);
          this.contacts.splice(index, 1);
        };

        SettingsController1.prototype.clearContact = function(contact) {
          contact.type = 'phone';
          contact.value = '';
        };
      </script>
      <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
        Name: <input type="text" ng-model="settings.name"/>
        [ <a href="" ng-click="settings.greet()">greet</a> ]<br/>
        Contact:
        <ul>
          <li ng-repeat="contact in settings.contacts">
            <select ng-model="contact.type">
               <option>phone</option>
               <option>email</option>
            </select>
            <input type="text" ng-model="contact.value"/>
            [ <a href="" ng-click="settings.clearContact(contact)">clear</a>
            | <a href="" ng-click="settings.removeContact(contact)">X</a> ]
          </li>
          <li>[ <a href="" ng-click="settings.addContact()">add</a> ]</li>
       </ul>
      </div>
     </doc:source>
     <doc:scenario>
       it('should check controller as', function() {
         expect(element('#ctrl-as-exmpl>:input').val()).toBe('John Smith');
         expect(element('#ctrl-as-exmpl li:nth-child(1) input').val())
           .toBe('408 555 1212');
         expect(element('#ctrl-as-exmpl li:nth-child(2) input').val())
           .toBe('john.smith@example.org');

         element('#ctrl-as-exmpl li:first a:contains("clear")').click();
         expect(element('#ctrl-as-exmpl li:first input').val()).toBe('');

         element('#ctrl-as-exmpl li:last a:contains("add")').click();
         expect(element('#ctrl-as-exmpl li:nth-child(3) input').val())
           .toBe('yourname@example.org');
       });
     </doc:scenario>
   </doc:example>
    <doc:example>
     <doc:source>
      <script>
        function SettingsController2($scope) {
          $scope.name = "John Smith";
          $scope.contacts = [
            {type:'phone', value:'408 555 1212'},
            {type:'email', value:'john.smith@example.org'} ];

          $scope.greet = function() {
           alert(this.name);
          };

          $scope.addContact = function() {
           this.contacts.push({type:'email', value:'yourname@example.org'});
          };

          $scope.removeContact = function(contactToRemove) {
           var index = this.contacts.indexOf(contactToRemove);
           this.contacts.splice(index, 1);
          };

          $scope.clearContact = function(contact) {
           contact.type = 'phone';
           contact.value = '';
          };
        }
      </script>
      <div id="ctrl-exmpl" ng-controller="SettingsController2">
        Name: <input type="text" ng-model="name"/>
        [ <a href="" ng-click="greet()">greet</a> ]<br/>
        Contact:
        <ul>
          <li ng-repeat="contact in contacts">
            <select ng-model="contact.type">
               <option>phone</option>
               <option>email</option>
            </select>
            <input type="text" ng-model="contact.value"/>
            [ <a href="" ng-click="clearContact(contact)">clear</a>
            | <a href="" ng-click="removeContact(contact)">X</a> ]
          </li>
          <li>[ <a href="" ng-click="addContact()">add</a> ]</li>
       </ul>
      </div>
     </doc:source>
     <doc:scenario>
       it('should check controller', function() {
         expect(element('#ctrl-exmpl>:input').val()).toBe('John Smith');
         expect(element('#ctrl-exmpl li:nth-child(1) input').val())
           .toBe('408 555 1212');
         expect(element('#ctrl-exmpl li:nth-child(2) input').val())
           .toBe('john.smith@example.org');

         element('#ctrl-exmpl li:first a:contains("clear")').click();
         expect(element('#ctrl-exmpl li:first input').val()).toBe('');

         element('#ctrl-exmpl li:last a:contains("add")').click();
         expect(element('#ctrl-exmpl li:nth-child(3) input').val())
           .toBe('yourname@example.org');
       });
     </doc:scenario>
   </doc:example>

 */
var ngControllerDirective = [function() {
  return {
    scope: true,
    controller: '@',
    priority: 500
  };
}];

/**
 * @ngdoc directive
 * @name ng.directive:ngCsp
 *
 * @element html
 * @description
 * Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.
 *
 * This is necessary when developing things like Google Chrome Extensions.
 *
 * CSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).
 * For us to be compatible, we just need to implement the "getterFn" in $parse without violating
 * any of these restrictions.
 *
 * AngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`
 * directive will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will
 * evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will
 * be raised.
 *
 * CSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically
 * includes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).
 * To make those directives work in CSP mode, include the `angular-csp.css` manually.
 *
 * In order to use this feature put the `ngCsp` directive on the root element of the application.
 *
 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
 *
 * @example
 * This example shows how to apply the `ngCsp` directive to the `html` tag.
   <pre>
     <!doctype html>
     <html ng-app ng-csp>
     ...
     ...
     </html>
   </pre>
 */

// ngCsp is not implemented as a proper directive any more, because we need it be processed while we bootstrap
// the system (before $parse is instantiated), for this reason we just have a csp() fn that looks for ng-csp attribute
// anywhere in the current doc

/**
 * @ngdoc directive
 * @name ng.directive:ngClick
 *
 * @description
 * The ngClick directive allows you to specify custom behavior when
 * an element is clicked.
 *
 * @element ANY
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
 * click. (Event object is available as `$event`)
 *
 * @example
   <doc:example>
     <doc:source>
      <button ng-click="count = count + 1" ng-init="count=0">
        Increment
      </button>
      count: {{count}}
     </doc:source>
     <doc:scenario>
       it('should check ng-click', function() {
         expect(binding('count')).toBe('0');
         element('.doc-example-live :button').click();
         expect(binding('count')).toBe('1');
       });
     </doc:scenario>
   </doc:example>
 */
/*
 * A directive that allows creation of custom onclick handlers that are defined as angular
 * expressions and are compiled and executed within the current scope.
 *
 * Events that are handled via these handler are always configured not to propagate further.
 */
var ngEventDirectives = {};
forEach(
  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
  function(name) {
    var directiveName = directiveNormalize('ng-' + name);
    ngEventDirectives[directiveName] = ['$parse', function($parse) {
      return {
        compile: function($element, attr) {
          var fn = $parse(attr[directiveName]);
          return function(scope, element, attr) {
            element.on(lowercase(name), function(event) {
              scope.$apply(function() {
                fn(scope, {$event:event});
              });
            });
          };
        }
      };
    }];
  }
);

/**
 * @ngdoc directive
 * @name ng.directive:ngDblclick
 *
 * @description
 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
 *
 * @element ANY
 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
 * a dblclick. (The Event object is available as `$event`)
 *
 * @example
   <doc:example>
     <doc:source>
      <button ng-dblclick="count = count + 1" ng-init="count=0">
        Increment (on double click)
      </button>
      count: {{count}}
     </doc:source>
   </doc:example>
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngMousedown
 *
 * @description
 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
 *
 * @element ANY
 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
 * mousedown. (Event object is available as `$event`)
 *
 * @example
   <doc:example>
     <doc:source>
      <button ng-mousedown="count = count + 1" ng-init="count=0">
        Increment (on mouse down)
      </button>
      count: {{count}}
     </doc:source>
   </doc:example>
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngMouseup
 *
 * @description
 * Specify custom behavior on mouseup event.
 *
 * @element ANY
 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
 * mouseup. (Event object is available as `$event`)
 *
 * @example
   <doc:example>
     <doc:source>
      <button ng-mouseup="count = count + 1" ng-init="count=0">
        Increment (on mouse up)
      </button>
      count: {{count}}
     </doc:source>
   </doc:example>
 */

/**
 * @ngdoc directive
 * @name ng.directive:ngMouseover
 *
 * @description
 * Specify custom behavior on mouseover event.
 *
 * @element ANY
 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
 * mouseover. (Event object is available as `$event`)
 *
 * @example
   <doc:example>
     <doc:source>
      <button ng-mouseover="count = count + 1" ng-init="count=0">
        Increment (when mouse is over)
      </button>
      count: {{count}}
     </doc:source>
   </doc:example>
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngMouseenter
 *
 * @description
 * Specify custom behavior on mouseenter event.
 *
 * @element ANY
 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
 * mouseenter. (Event object is available as `$event`)
 *
 * @example
   <doc:example>
     <doc:source>
      <button ng-mouseenter="count = count + 1" ng-init="count=0">
        Increment (when mouse enters)
      </button>
      count: {{count}}
     </doc:source>
   </doc:example>
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngMouseleave
 *
 * @description
 * Specify custom behavior on mouseleave event.
 *
 * @element ANY
 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
 * mouseleave. (Event object is available as `$event`)
 *
 * @example
   <doc:example>
     <doc:source>
      <button ng-mouseleave="count = count + 1" ng-init="count=0">
        Increment (when mouse leaves)
      </button>
      count: {{count}}
     </doc:source>
   </doc:example>
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngMousemove
 *
 * @description
 * Specify custom behavior on mousemove event.
 *
 * @element ANY
 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
 * mousemove. (Event object is available as `$event`)
 *
 * @example
   <doc:example>
     <doc:source>
      <button ng-mousemove="count = count + 1" ng-init="count=0">
        Increment (when mouse moves)
      </button>
      count: {{count}}
     </doc:source>
   </doc:example>
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngKeydown
 *
 * @description
 * Specify custom behavior on keydown event.
 *
 * @element ANY
 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <doc:example>
     <doc:source>
      <input ng-keydown="count = count + 1" ng-init="count=0">
      key down count: {{count}}
     </doc:source>
   </doc:example>
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngKeyup
 *
 * @description
 * Specify custom behavior on keyup event.
 *
 * @element ANY
 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <doc:example>
     <doc:source>
      <input ng-keyup="count = count + 1" ng-init="count=0">
      key up count: {{count}}
     </doc:source>
   </doc:example>
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngKeypress
 *
 * @description
 * Specify custom behavior on keypress event.
 *
 * @element ANY
 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
 * keypress. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <doc:example>
     <doc:source>
      <input ng-keypress="count = count + 1" ng-init="count=0">
      key press count: {{count}}
     </doc:source>
   </doc:example>
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngSubmit
 *
 * @description
 * Enables binding angular expressions to onsubmit events.
 *
 * Additionally it prevents the default action (which for form means sending the request to the
 * server and reloading the current page) **but only if the form does not contain an `action`
 * attribute**.
 *
 * @element form
 * @param {expression} ngSubmit {@link guide/expression Expression} to eval. (Event object is available as `$event`)
 *
 * @example
   <doc:example>
     <doc:source>
      <script>
        function Ctrl($scope) {
          $scope.list = [];
          $scope.text = 'hello';
          $scope.submit = function() {
            if (this.text) {
              this.list.push(this.text);
              this.text = '';
            }
          };
        }
      </script>
      <form ng-submit="submit()" ng-controller="Ctrl">
        Enter text and hit enter:
        <input type="text" ng-model="text" name="text" />
        <input type="submit" id="submit" value="Submit" />
        <pre>list={{list}}</pre>
      </form>
     </doc:source>
     <doc:scenario>
       it('should check ng-submit', function() {
         expect(binding('list')).toBe('[]');
         element('.doc-example-live #submit').click();
         expect(binding('list')).toBe('["hello"]');
         expect(input('text').val()).toBe('');
       });
       it('should ignore empty strings', function() {
         expect(binding('list')).toBe('[]');
         element('.doc-example-live #submit').click();
         element('.doc-example-live #submit').click();
         expect(binding('list')).toBe('["hello"]');
       });
     </doc:scenario>
   </doc:example>
 */

/**
 * @ngdoc directive
 * @name ng.directive:ngFocus
 *
 * @description
 * Specify custom behavior on focus event.
 *
 * @element window, input, select, textarea, a
 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
 * focus. (Event object is available as `$event`)
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */

/**
 * @ngdoc directive
 * @name ng.directive:ngBlur
 *
 * @description
 * Specify custom behavior on blur event.
 *
 * @element window, input, select, textarea, a
 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
 * blur. (Event object is available as `$event`)
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */

/**
 * @ngdoc directive
 * @name ng.directive:ngCopy
 *
 * @description
 * Specify custom behavior on copy event.
 *
 * @element window, input, select, textarea, a
 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
 * copy. (Event object is available as `$event`)
 *
 * @example
   <doc:example>
     <doc:source>
      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
      copied: {{copied}}
     </doc:source>
   </doc:example>
 */

/**
 * @ngdoc directive
 * @name ng.directive:ngCut
 *
 * @description
 * Specify custom behavior on cut event.
 *
 * @element window, input, select, textarea, a
 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
 * cut. (Event object is available as `$event`)
 *
 * @example
   <doc:example>
     <doc:source>
      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
      cut: {{cut}}
     </doc:source>
   </doc:example>
 */

/**
 * @ngdoc directive
 * @name ng.directive:ngPaste
 *
 * @description
 * Specify custom behavior on paste event.
 *
 * @element window, input, select, textarea, a
 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
 * paste. (Event object is available as `$event`)
 *
 * @example
   <doc:example>
     <doc:source>
      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
      pasted: {{paste}}
     </doc:source>
   </doc:example>
 */

/**
 * @ngdoc directive
 * @name ng.directive:ngIf
 * @restrict A
 *
 * @description
 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
 * {expression}. If the expression assigned to `ngIf` evaluates to a false
 * value then the element is removed from the DOM, otherwise a clone of the
 * element is reinserted into the DOM.
 *
 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
 * element in the DOM rather than changing its visibility via the `display` css property.  A common
 * case when this difference is significant is when using css selectors that rely on an element's
 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
 *
 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
 * is created when the element is restored.  The scope created within `ngIf` inherits from
 * its parent scope using
 * {@link https://github.com/angular/angular.js/wiki/The-Nuances-of-Scope-Prototypal-Inheritance prototypal inheritance}.
 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
 * a javascript primitive defined in the parent scope. In this case any modifications made to the
 * variable within the child scope will override (hide) the value in the parent scope.
 *
 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
 * is if an element's class attribute is directly modified after it's compiled, using something like
 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
 * the added class will be lost because the original compiled state is used to regenerate the element.
 *
 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
 * and `leave` effects.
 *
 * @animations
 * enter - happens just after the ngIf contents change and a new DOM element is created and injected into the ngIf container
 * leave - happens just before the ngIf contents are removed from the DOM
 *
 * @element ANY
 * @scope
 * @priority 600
 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
 *     element is added to the DOM tree.
 *
 * @example
  <example animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /><br/>
      Show when checked:
      <span ng-if="checked" class="animate-if">
        I'm removed when the checkbox is unchecked.
      </span>
    </file>
    <file name="animations.css">
      .animate-if {
        background:white;
        border:1px solid black;
        padding:10px;
      }

      .animate-if.ng-enter, .animate-if.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
      }

      .animate-if.ng-enter,
      .animate-if.ng-leave.ng-leave-active {
        opacity:0;
      }

      .animate-if.ng-leave,
      .animate-if.ng-enter.ng-enter-active {
        opacity:1;
      }
    </file>
  </example>
 */
var ngIfDirective = ['$animate', function($animate) {
  return {
    transclude: 'element',
    priority: 600,
    terminal: true,
    restrict: 'A',
    $$tlb: true,
    link: function ($scope, $element, $attr, ctrl, $transclude) {
        var block, childScope;
        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {

          if (toBoolean(value)) {
            if (!childScope) {
              childScope = $scope.$new();
              $transclude(childScope, function (clone) {
                clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');
                // Note: We only need the first/last node of the cloned nodes.
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                // by a directive with templateUrl when it's template arrives.
                block = {
                  clone: clone
                };
                $animate.enter(clone, $element.parent(), $element);
              });
            }
          } else {

            if (childScope) {
              childScope.$destroy();
              childScope = null;
            }

            if (block) {
              $animate.leave(getBlockElements(block.clone));
              block = null;
            }
          }
        });
    }
  };
}];

/**
 * @ngdoc directive
 * @name ng.directive:ngInclude
 * @restrict ECA
 *
 * @description
 * Fetches, compiles and includes an external HTML fragment.
 *
 * By default, the template URL is restricted to the same domain and protocol as the
 * application document. This is done by calling {@link ng.$sce#methods_getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
 * you may either {@link ng.$sceDelegateProvider#methods_resourceUrlWhitelist whitelist them} or
 * {@link ng.$sce#methods_trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
 * ng.$sce Strict Contextual Escaping}.
 *
 * In addition, the browser's
 * {@link https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest
 * Same Origin Policy} and {@link http://www.w3.org/TR/cors/ Cross-Origin Resource Sharing
 * (CORS)} policy may further restrict whether the template is successfully loaded.
 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
 * access on some browsers.
 *
 * @animations
 * enter - animation is used to bring new content into the browser.
 * leave - animation is used to animate existing content away.
 *
 * The enter and leave animation occur concurrently.
 *
 * @scope
 * @priority 400
 *
 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
 *                 make sure you wrap it in quotes, e.g. `src="'myPartialTemplate.html'"`.
 * @param {string=} onload Expression to evaluate when a new partial is loaded.
 *
 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the content is loaded.
 *
 *                  - If the attribute is not set, disable scrolling.
 *                  - If the attribute is set without value, enable scrolling.
 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
 *
 * @example
  <example animations="true">
    <file name="index.html">
     <div ng-controller="Ctrl">
       <select ng-model="template" ng-options="t.name for t in templates">
        <option value="">(blank)</option>
       </select>
       url of the template: <tt>{{template.url}}</tt>
       <hr/>
       <div class="slide-animate-container">
         <div class="slide-animate" ng-include="template.url"></div>
       </div>
     </div>
    </file>
    <file name="script.js">
      function Ctrl($scope) {
        $scope.templates =
          [ { name: 'template1.html', url: 'template1.html'}
          , { name: 'template2.html', url: 'template2.html'} ];
        $scope.template = $scope.templates[0];
      }
     </file>
    <file name="template1.html">
      Content of template1.html
    </file>
    <file name="template2.html">
      Content of template2.html
    </file>
    <file name="animations.css">
      .slide-animate-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .slide-animate {
        padding:10px;
      }

      .slide-animate.ng-enter, .slide-animate.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
        display:block;
        padding:10px;
      }

      .slide-animate.ng-enter {
        top:-50px;
      }
      .slide-animate.ng-enter.ng-enter-active {
        top:0;
      }

      .slide-animate.ng-leave {
        top:0;
      }
      .slide-animate.ng-leave.ng-leave-active {
        top:50px;
      }
    </file>
    <file name="scenario.js">
      it('should load template1.html', function() {
       expect(element('.doc-example-live [ng-include]').text()).
         toMatch(/Content of template1.html/);
      });
      it('should load template2.html', function() {
       select('template').option('1');
       expect(element('.doc-example-live [ng-include]').text()).
         toMatch(/Content of template2.html/);
      });
      it('should change to blank', function() {
       select('template').option('');
       expect(element('.doc-example-live [ng-include]')).toBe(undefined);
      });
    </file>
  </example>
 */


/**
 * @ngdoc event
 * @name ng.directive:ngInclude#$includeContentRequested
 * @eventOf ng.directive:ngInclude
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted every time the ngInclude content is requested.
 */


/**
 * @ngdoc event
 * @name ng.directive:ngInclude#$includeContentLoaded
 * @eventOf ng.directive:ngInclude
 * @eventType emit on the current ngInclude scope
 * @description
 * Emitted every time the ngInclude content is reloaded.
 */
var ngIncludeDirective = ['$http', '$templateCache', '$anchorScroll', '$animate', '$sce',
                  function($http,   $templateCache,   $anchorScroll,   $animate,   $sce) {
  return {
    restrict: 'ECA',
    priority: 400,
    terminal: true,
    transclude: 'element',
    controller: angular.noop,
    compile: function(element, attr) {
      var srcExp = attr.ngInclude || attr.src,
          onloadExp = attr.onload || '',
          autoScrollExp = attr.autoscroll;

      return function(scope, $element, $attr, ctrl, $transclude) {
        var changeCounter = 0,
            currentScope,
            currentElement;

        var cleanupLastIncludeContent = function() {
          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }
          if(currentElement) {
            $animate.leave(currentElement);
            currentElement = null;
          }
        };

        scope.$watch($sce.parseAsResourceUrl(srcExp), function ngIncludeWatchAction(src) {
          var afterAnimation = function() {
            if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
              $anchorScroll();
            }
          };
          var thisChangeId = ++changeCounter;

          if (src) {
            $http.get(src, {cache: $templateCache}).success(function(response) {
              if (thisChangeId !== changeCounter) return;
              var newScope = scope.$new();
              ctrl.template = response;

              // Note: This will also link all children of ng-include that were contained in the original
              // html. If that content contains controllers, ... they could pollute/change the scope.
              // However, using ng-include on an element with additional content does not make sense...
              // Note: We can't remove them in the cloneAttchFn of $transclude as that
              // function is called before linking the content, which would apply child
              // directives to non existing elements.
              var clone = $transclude(newScope, function(clone) {
                cleanupLastIncludeContent();
                $animate.enter(clone, null, $element, afterAnimation);
              });

              currentScope = newScope;
              currentElement = clone;

              currentScope.$emit('$includeContentLoaded');
              scope.$eval(onloadExp);
            }).error(function() {
              if (thisChangeId === changeCounter) cleanupLastIncludeContent();
            });
            scope.$emit('$includeContentRequested');
          } else {
            cleanupLastIncludeContent();
            ctrl.template = null;
          }
        });
      };
    }
  };
}];

// This directive is called during the $transclude call of the first `ngInclude` directive.
// It will replace and compile the content of the element with the loaded template.
// We need this directive so that the element content is already filled when
// the link function of another directive on the same element as ngInclude
// is called.
var ngIncludeFillContentDirective = ['$compile',
  function($compile) {
    return {
      restrict: 'ECA',
      priority: -400,
      require: 'ngInclude',
      link: function(scope, $element, $attr, ctrl) {
        $element.html(ctrl.template);
        $compile($element.contents())(scope);
      }
    };
  }];

/**
 * @ngdoc directive
 * @name ng.directive:ngInit
 * @restrict AC
 *
 * @description
 * The `ngInit` directive allows you to evaluate an expression in the
 * current scope.
 *
 * <div class="alert alert-error">
 * The only appropriate use of `ngInit` is for aliasing special properties of
 * {@link api/ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you
 * should use {@link guide/controller controllers} rather than `ngInit`
 * to initialize values on a scope.
 * </div>
 *
 * @priority 450
 *
 * @element ANY
 * @param {expression} ngInit {@link guide/expression Expression} to eval.
 *
 * @example
   <doc:example>
     <doc:source>
   <script>
     function Ctrl($scope) {
       $scope.list = [['a', 'b'], ['c', 'd']];
     }
   </script>
   <div ng-controller="Ctrl">
     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
       </div>
     </div>
   </div>
     </doc:source>
     <doc:scenario>
       it('should alias index positions', function() {
         expect(element('.example-init').text())
           .toBe('list[ 0 ][ 0 ] = a;' +
                 'list[ 0 ][ 1 ] = b;' +
                 'list[ 1 ][ 0 ] = c;' +
                 'list[ 1 ][ 1 ] = d;');
       });
     </doc:scenario>
   </doc:example>
 */
var ngInitDirective = ngDirective({
  priority: 450,
  compile: function() {
    return {
      pre: function(scope, element, attrs) {
        scope.$eval(attrs.ngInit);
      }
    };
  }
});

/**
 * @ngdoc directive
 * @name ng.directive:ngNonBindable
 * @restrict AC
 * @priority 1000
 *
 * @description
 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
 * DOM element. This is useful if the element contains what appears to be Angular directives and
 * bindings but which should be ignored by Angular. This could be the case if you have a site that
 * displays snippets of code, for instance.
 *
 * @element ANY
 *
 * @example
 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
 * but the one wrapped in `ngNonBindable` is left alone.
 *
 * @example
    <doc:example>
      <doc:source>
        <div>Normal: {{1 + 2}}</div>
        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
      </doc:source>
      <doc:scenario>
       it('should check ng-non-bindable', function() {
         expect(using('.doc-example-live').binding('1 + 2')).toBe('3');
         expect(using('.doc-example-live').element('div:last').text()).
           toMatch(/1 \+ 2/);
       });
      </doc:scenario>
    </doc:example>
 */
var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });

/**
 * @ngdoc directive
 * @name ng.directive:ngPluralize
 * @restrict EA
 *
 * @description
 * # Overview
 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
 * These rules are bundled with angular.js, but can be overridden
 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
 * by specifying the mappings between
 * {@link http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html
 * plural categories} and the strings to be displayed.
 *
 * # Plural categories and explicit number rules
 * There are two
 * {@link http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html
 * plural categories} in Angular's default en-US locale: "one" and "other".
 *
 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
 * any number that is not 1), an explicit number rule can only match one number. For example, the
 * explicit number rule for "3" matches the number 3. There are examples of plural categories
 * and explicit number rules throughout the rest of this documentation.
 *
 * # Configuring ngPluralize
 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
 * You can also provide an optional attribute, `offset`.
 *
 * The value of the `count` attribute can be either a string or an {@link guide/expression
 * Angular expression}; these are evaluated on the current scope for its bound value.
 *
 * The `when` attribute specifies the mappings between plural categories and the actual
 * string to be displayed. The value of the attribute should be a JSON object.
 *
 * The following example shows how to configure ngPluralize:
 *
 * <pre>
 * <ng-pluralize count="personCount"
                 when="{'0': 'Nobody is viewing.',
 *                      'one': '1 person is viewing.',
 *                      'other': '{} people are viewing.'}">
 * </ng-pluralize>
 *</pre>
 *
 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
 * show "a dozen people are viewing".
 *
 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
 * into pluralized strings. In the previous example, Angular will replace `{}` with
 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
 * for <span ng-non-bindable>{{numberExpression}}</span>.
 *
 * # Configuring ngPluralize with offset
 * The `offset` attribute allows further customization of pluralized text, which can result in
 * a better user experience. For example, instead of the message "4 people are viewing this document",
 * you might display "John, Kate and 2 others are viewing this document".
 * The offset attribute allows you to offset a number by any desired value.
 * Let's take a look at an example:
 *
 * <pre>
 * <ng-pluralize count="personCount" offset=2
 *               when="{'0': 'Nobody is viewing.',
 *                      '1': '{{person1}} is viewing.',
 *                      '2': '{{person1}} and {{person2}} are viewing.',
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
 * </ng-pluralize>
 * </pre>
 *
 * Notice that we are still using two plural categories(one, other), but we added
 * three explicit number rules 0, 1 and 2.
 * When one person, perhaps John, views the document, "John is viewing" will be shown.
 * When three people view the document, no explicit number rule is found, so
 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
 * In this case, plural category 'one' is matched and "John, Marry and one other person are viewing"
 * is shown.
 *
 * Note that when you specify offsets, you must provide explicit number rules for
 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
 * plural categories "one" and "other".
 *
 * @param {string|expression} count The variable to be bounded to.
 * @param {string} when The mapping between plural category to its corresponding strings.
 * @param {number=} offset Offset to deduct from the total number.
 *
 * @example
    <doc:example>
      <doc:source>
        <script>
          function Ctrl($scope) {
            $scope.person1 = 'Igor';
            $scope.person2 = 'Misko';
            $scope.personCount = 1;
          }
        </script>
        <div ng-controller="Ctrl">
          Person 1:<input type="text" ng-model="person1" value="Igor" /><br/>
          Person 2:<input type="text" ng-model="person2" value="Misko" /><br/>
          Number of People:<input type="text" ng-model="personCount" value="1" /><br/>

          <!--- Example with simple pluralization rules for en locale --->
          Without Offset:
          <ng-pluralize count="personCount"
                        when="{'0': 'Nobody is viewing.',
                               'one': '1 person is viewing.',
                               'other': '{} people are viewing.'}">
          </ng-pluralize><br>

          <!--- Example with offset --->
          With Offset(2):
          <ng-pluralize count="personCount" offset=2
                        when="{'0': 'Nobody is viewing.',
                               '1': '{{person1}} is viewing.',
                               '2': '{{person1}} and {{person2}} are viewing.',
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
          </ng-pluralize>
        </div>
      </doc:source>
      <doc:scenario>
        it('should show correct pluralized string', function() {
          expect(element('.doc-example-live ng-pluralize:first').text()).
                                             toBe('1 person is viewing.');
          expect(element('.doc-example-live ng-pluralize:last').text()).
                                                toBe('Igor is viewing.');

          using('.doc-example-live').input('personCount').enter('0');
          expect(element('.doc-example-live ng-pluralize:first').text()).
                                               toBe('Nobody is viewing.');
          expect(element('.doc-example-live ng-pluralize:last').text()).
                                              toBe('Nobody is viewing.');

          using('.doc-example-live').input('personCount').enter('2');
          expect(element('.doc-example-live ng-pluralize:first').text()).
                                            toBe('2 people are viewing.');
          expect(element('.doc-example-live ng-pluralize:last').text()).
                              toBe('Igor and Misko are viewing.');

          using('.doc-example-live').input('personCount').enter('3');
          expect(element('.doc-example-live ng-pluralize:first').text()).
                                            toBe('3 people are viewing.');
          expect(element('.doc-example-live ng-pluralize:last').text()).
                              toBe('Igor, Misko and one other person are viewing.');

          using('.doc-example-live').input('personCount').enter('4');
          expect(element('.doc-example-live ng-pluralize:first').text()).
                                            toBe('4 people are viewing.');
          expect(element('.doc-example-live ng-pluralize:last').text()).
                              toBe('Igor, Misko and 2 other people are viewing.');
        });

        it('should show data-binded names', function() {
          using('.doc-example-live').input('personCount').enter('4');
          expect(element('.doc-example-live ng-pluralize:last').text()).
              toBe('Igor, Misko and 2 other people are viewing.');

          using('.doc-example-live').input('person1').enter('Di');
          using('.doc-example-live').input('person2').enter('Vojta');
          expect(element('.doc-example-live ng-pluralize:last').text()).
              toBe('Di, Vojta and 2 other people are viewing.');
        });
      </doc:scenario>
    </doc:example>
 */
var ngPluralizeDirective = ['$locale', '$interpolate', function($locale, $interpolate) {
  var BRACE = /{}/g;
  return {
    restrict: 'EA',
    link: function(scope, element, attr) {
      var numberExp = attr.count,
          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
          offset = attr.offset || 0,
          whens = scope.$eval(whenExp) || {},
          whensExpFns = {},
          startSymbol = $interpolate.startSymbol(),
          endSymbol = $interpolate.endSymbol(),
          isWhen = /^when(Minus)?(.+)$/;

      forEach(attr, function(expression, attributeName) {
        if (isWhen.test(attributeName)) {
          whens[lowercase(attributeName.replace('when', '').replace('Minus', '-'))] =
            element.attr(attr.$attr[attributeName]);
        }
      });
      forEach(whens, function(expression, key) {
        whensExpFns[key] =
          $interpolate(expression.replace(BRACE, startSymbol + numberExp + '-' +
            offset + endSymbol));
      });

      scope.$watch(function ngPluralizeWatch() {
        var value = parseFloat(scope.$eval(numberExp));

        if (!isNaN(value)) {
          //if explicit number rule such as 1, 2, 3... is defined, just use it. Otherwise,
          //check it against pluralization rules in $locale service
          if (!(value in whens)) value = $locale.pluralCat(value - offset);
           return whensExpFns[value](scope, element, true);
        } else {
          return '';
        }
      }, function ngPluralizeWatchAction(newVal) {
        element.text(newVal);
      });
    }
  };
}];

/**
 * @ngdoc directive
 * @name ng.directive:ngRepeat
 *
 * @description
 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
 * instance gets its own scope, where the given loop variable is set to the current collection item,
 * and `$index` is set to the item index or key.
 *
 * Special properties are exposed on the local scope of each template instance, including:
 *
 * | Variable  | Type            | Details                                                                     |
 * |-----------|-----------------|-----------------------------------------------------------------------------|
 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
 *
 * Creating aliases for these properties is possible with {@link api/ng.directive:ngInit `ngInit`}.
 * This may be useful when, for instance, nesting ngRepeats.
 *
 * # Special repeat start and end points
 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
 *
 * The example below makes use of this feature:
 * <pre>
 *   <header ng-repeat-start="item in items">
 *     Header {{ item }}
 *   </header>
 *   <div class="body">
 *     Body {{ item }}
 *   </div>
 *   <footer ng-repeat-end>
 *     Footer {{ item }}
 *   </footer>
 * </pre>
 *
 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
 * <pre>
 *   <header>
 *     Header A
 *   </header>
 *   <div class="body">
 *     Body A
 *   </div>
 *   <footer>
 *     Footer A
 *   </footer>
 *   <header>
 *     Header B
 *   </header>
 *   <div class="body">
 *     Body B
 *   </div>
 *   <footer>
 *     Footer B
 *   </footer>
 * </pre>
 *
 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
 *
 * @animations
 * enter - when a new item is added to the list or when an item is revealed after a filter
 * leave - when an item is removed from the list or when an item is filtered out
 * move - when an adjacent item is filtered out causing a reorder or when the item contents are reordered
 *
 * @element ANY
 * @scope
 * @priority 1000
 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
 *   formats are currently supported:
 *
 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
 *     is a scope expression giving the collection to enumerate.
 *
 *     For example: `album in artist.albums`.
 *
 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
 *     and `expression` is the scope expression giving the collection to enumerate.
 *
 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
 *
 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking function
 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking function
 *     is specified the ng-repeat associates elements by identity in the collection. It is an error to have
 *     more than one tracking function to resolve to the same key. (This would mean that two distinct objects are
 *     mapped to the same DOM element, which is not possible.)  Filters should be applied to the expression,
 *     before specifying a tracking expression.
 *
 *     For example: `item in items` is equivalent to `item in items track by $id(item)'. This implies that the DOM elements
 *     will be associated by item identity in the array.
 *
 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
 *     element in the same way in the DOM.
 *
 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
 *     property is same.
 *
 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
 *     to items in conjunction with a tracking expression.
 *
 * @example
 * This example initializes the scope to a list of names and
 * then uses `ngRepeat` to display every person:
  <example animations="true">
    <file name="index.html">
      <div ng-init="friends = [
        {name:'John', age:25, gender:'boy'},
        {name:'Jessie', age:30, gender:'girl'},
        {name:'Johanna', age:28, gender:'girl'},
        {name:'Joy', age:15, gender:'girl'},
        {name:'Mary', age:28, gender:'girl'},
        {name:'Peter', age:95, gender:'boy'},
        {name:'Sebastian', age:50, gender:'boy'},
        {name:'Erika', age:27, gender:'girl'},
        {name:'Patrick', age:40, gender:'boy'},
        {name:'Samantha', age:60, gender:'girl'}
      ]">
        I have {{friends.length}} friends. They are:
        <input type="search" ng-model="q" placeholder="filter friends..." />
        <ul class="example-animate-container">
          <li class="animate-repeat" ng-repeat="friend in friends | filter:q">
            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
          </li>
        </ul>
      </div>
    </file>
    <file name="animations.css">
      .example-animate-container {
        background:white;
        border:1px solid black;
        list-style:none;
        margin:0;
        padding:0 10px;
      }

      .animate-repeat {
        line-height:40px;
        list-style:none;
        box-sizing:border-box;
      }

      .animate-repeat.ng-move,
      .animate-repeat.ng-enter,
      .animate-repeat.ng-leave {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
      }

      .animate-repeat.ng-leave.ng-leave-active,
      .animate-repeat.ng-move,
      .animate-repeat.ng-enter {
        opacity:0;
        max-height:0;
      }

      .animate-repeat.ng-leave,
      .animate-repeat.ng-move.ng-move-active,
      .animate-repeat.ng-enter.ng-enter-active {
        opacity:1;
        max-height:40px;
      }
    </file>
    <file name="scenario.js">
       it('should render initial data set', function() {
         var r = using('.doc-example-live').repeater('ul li');
         expect(r.count()).toBe(10);
         expect(r.row(0)).toEqual(["1","John","25"]);
         expect(r.row(1)).toEqual(["2","Jessie","30"]);
         expect(r.row(9)).toEqual(["10","Samantha","60"]);
         expect(binding('friends.length')).toBe("10");
       });

       it('should update repeater when filter predicate changes', function() {
         var r = using('.doc-example-live').repeater('ul li');
         expect(r.count()).toBe(10);

         input('q').enter('ma');

         expect(r.count()).toBe(2);
         expect(r.row(0)).toEqual(["1","Mary","28"]);
         expect(r.row(1)).toEqual(["2","Samantha","60"]);
       });
      </file>
    </example>
 */
var ngRepeatDirective = ['$parse', '$animate', function($parse, $animate) {
  var NG_REMOVED = '$$NG_REMOVED';
  var ngRepeatMinErr = minErr('ngRepeat');
  return {
    transclude: 'element',
    priority: 1000,
    terminal: true,
    $$tlb: true,
    link: function($scope, $element, $attr, ctrl, $transclude){
        var expression = $attr.ngRepeat;
        var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?\s*$/),
          trackByExp, trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn,
          lhs, rhs, valueIdentifier, keyIdentifier,
          hashFnLocals = {$id: hashKey};

        if (!match) {
          throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
            expression);
        }

        lhs = match[1];
        rhs = match[2];
        trackByExp = match[3];

        if (trackByExp) {
          trackByExpGetter = $parse(trackByExp);
          trackByIdExpFn = function(key, value, index) {
            // assign key, value, and $index to the locals so that they can be used in hash functions
            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
            hashFnLocals[valueIdentifier] = value;
            hashFnLocals.$index = index;
            return trackByExpGetter($scope, hashFnLocals);
          };
        } else {
          trackByIdArrayFn = function(key, value) {
            return hashKey(value);
          };
          trackByIdObjFn = function(key) {
            return key;
          };
        }

        match = lhs.match(/^(?:([\$\w]+)|\(([\$\w]+)\s*,\s*([\$\w]+)\))$/);
        if (!match) {
          throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
                                                                    lhs);
        }
        valueIdentifier = match[3] || match[1];
        keyIdentifier = match[2];

        // Store a list of elements from previous run. This is a hash where key is the item from the
        // iterator, and the value is objects with following properties.
        //   - scope: bound scope
        //   - element: previous element.
        //   - index: position
        var lastBlockMap = {};

        //watch props
        $scope.$watchCollection(rhs, function ngRepeatAction(collection){
          var index, length,
              previousNode = $element[0],     // current position of the node
              nextNode,
              // Same as lastBlockMap but it has the current state. It will become the
              // lastBlockMap on the next iteration.
              nextBlockMap = {},
              arrayLength,
              childScope,
              key, value, // key/value of iteration
              trackById,
              trackByIdFn,
              collectionKeys,
              block,       // last object information {scope, element, id}
              nextBlockOrder = [],
              elementsToRemove;


          if (isArrayLike(collection)) {
            collectionKeys = collection;
            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
          } else {
            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
            // if object, extract keys, sort them and use to determine order of iteration over obj props
            collectionKeys = [];
            for (key in collection) {
              if (collection.hasOwnProperty(key) && key.charAt(0) != '$') {
                collectionKeys.push(key);
              }
            }
            collectionKeys.sort();
          }

          arrayLength = collectionKeys.length;

          // locate existing items
          length = nextBlockOrder.length = collectionKeys.length;
          for(index = 0; index < length; index++) {
           key = (collection === collectionKeys) ? index : collectionKeys[index];
           value = collection[key];
           trackById = trackByIdFn(key, value, index);
           assertNotHasOwnProperty(trackById, '`track by` id');
           if(lastBlockMap.hasOwnProperty(trackById)) {
             block = lastBlockMap[trackById];
             delete lastBlockMap[trackById];
             nextBlockMap[trackById] = block;
             nextBlockOrder[index] = block;
           } else if (nextBlockMap.hasOwnProperty(trackById)) {
             // restore lastBlockMap
             forEach(nextBlockOrder, function(block) {
               if (block && block.scope) lastBlockMap[block.id] = block;
             });
             // This is a duplicate and we need to throw an error
             throw ngRepeatMinErr('dupes', "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}",
                                                                                                                                                    expression,       trackById);
           } else {
             // new never before seen block
             nextBlockOrder[index] = { id: trackById };
             nextBlockMap[trackById] = false;
           }
         }

          // remove existing items
          for (key in lastBlockMap) {
            // lastBlockMap is our own object so we don't need to use special hasOwnPropertyFn
            if (lastBlockMap.hasOwnProperty(key)) {
              block = lastBlockMap[key];
              elementsToRemove = getBlockElements(block.clone);
              $animate.leave(elementsToRemove);
              forEach(elementsToRemove, function(element) { element[NG_REMOVED] = true; });
              block.scope.$destroy();
            }
          }

          // we are not using forEach for perf reasons (trying to avoid #call)
          for (index = 0, length = collectionKeys.length; index < length; index++) {
            key = (collection === collectionKeys) ? index : collectionKeys[index];
            value = collection[key];
            block = nextBlockOrder[index];
            if (nextBlockOrder[index - 1]) previousNode = getBlockEnd(nextBlockOrder[index - 1]);

            if (block.scope) {
              // if we have already seen this object, then we need to reuse the
              // associated scope/element
              childScope = block.scope;

              nextNode = previousNode;
              do {
                nextNode = nextNode.nextSibling;
              } while(nextNode && nextNode[NG_REMOVED]);

              if (getBlockStart(block) != nextNode) {
                // existing item which got moved
                $animate.move(getBlockElements(block.clone), null, jqLite(previousNode));
              }
              previousNode = getBlockEnd(block);
            } else {
              // new item which we don't know about
              childScope = $scope.$new();
            }

            childScope[valueIdentifier] = value;
            if (keyIdentifier) childScope[keyIdentifier] = key;
            childScope.$index = index;
            childScope.$first = (index === 0);
            childScope.$last = (index === (arrayLength - 1));
            childScope.$middle = !(childScope.$first || childScope.$last);
            // jshint bitwise: false
            childScope.$odd = !(childScope.$even = (index&1) === 0);
            // jshint bitwise: true

            if (!block.scope) {
              $transclude(childScope, function(clone) {
                clone[clone.length++] = document.createComment(' end ngRepeat: ' + expression + ' ');
                $animate.enter(clone, null, jqLite(previousNode));
                previousNode = clone;
                block.scope = childScope;
                // Note: We only need the first/last node of the cloned nodes.
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                // by a directive with templateUrl when it's template arrives.
                block.clone = clone;
                nextBlockMap[block.id] = block;
              });
            }
          }
          lastBlockMap = nextBlockMap;
        });
    }
  };

  function getBlockStart(block) {
    return block.clone[0];
  }

  function getBlockEnd(block) {
    return block.clone[block.clone.length - 1];
  }
}];

/**
 * @ngdoc directive
 * @name ng.directive:ngShow
 *
 * @description
 * The `ngShow` directive shows or hides the given HTML element based on the expression
 * provided to the ngShow attribute. The element is shown or hidden by removing or adding
 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
 * in AngularJS and sets the display style to none (using an !important flag).
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * <pre>
 * <!-- when $scope.myValue is truthy (element is visible) -->
 * <div ng-show="myValue"></div>
 *
 * <!-- when $scope.myValue is falsy (element is hidden) -->
 * <div ng-show="myValue" class="ng-hide"></div>
 * </pre>
 *
 * When the ngShow expression evaluates to false then the ng-hide CSS class is added to the class attribute
 * on the element causing it to become hidden. When true, the ng-hide CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the .ng-hide CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding .ng-hide
 *
 * If you wish to change the hide behavior with ngShow/ngHide then this can be achieved by
 * restating the styles for the .ng-hide class in CSS:
 * <pre>
 * .ng-hide {
 *   //!annotate CSS Specificity|Not to worry, this will override the AngularJS default...
 *   display:block!important;
 *
 *   //this is just another form of hiding an element
 *   position:absolute;
 *   top:-9999px;
 *   left:-9999px;
 * }
 * </pre>
 *
 * Just remember to include the important flag so the CSS override will function.
 *
 * ## A note about animations with ngShow
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works like the animation system present with ngClass except that
 * you must also include the !important flag to override the display property
 * so that you can perform an animation when the element is hidden during the time of the animation.
 *
 * <pre>
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition:0.5s linear all;
 *   display:block!important;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * </pre>
 *
 * @animations
 * addClass: .ng-hide - happens after the ngShow expression evaluates to a truthy value and the just before contents are set to visible
 * removeClass: .ng-hide - happens after the ngShow expression evaluates to a non truthy value and just before the contents are set to hidden
 *
 * @element ANY
 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
 *     then the element is shown or hidden respectively.
 *
 * @example
  <example animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked"><br/>
      <div>
        Show:
        <div class="check-element animate-show" ng-show="checked">
          <span class="icon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-show" ng-hide="checked">
          <span class="icon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="animations.css">
      .animate-show {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
        line-height:20px;
        opacity:1;
        padding:10px;
        border:1px solid black;
        background:white;
      }

      .animate-show.ng-hide-add,
      .animate-show.ng-hide-remove {
        display:block!important;
      }

      .animate-show.ng-hide {
        line-height:0;
        opacity:0;
        padding:0 10px;
      }

      .check-element {
        padding:10px;
        border:1px solid black;
        background:white;
      }
    </file>
    <file name="scenario.js">
       it('should check ng-show / ng-hide', function() {
         expect(element('.doc-example-live span:first:hidden').count()).toEqual(1);
         expect(element('.doc-example-live span:last:visible').count()).toEqual(1);

         input('checked').check();

         expect(element('.doc-example-live span:first:visible').count()).toEqual(1);
         expect(element('.doc-example-live span:last:hidden').count()).toEqual(1);
       });
    </file>
  </example>
 */
var ngShowDirective = ['$animate', function($animate) {
  return function(scope, element, attr) {
    scope.$watch(attr.ngShow, function ngShowWatchAction(value){
      $animate[toBoolean(value) ? 'removeClass' : 'addClass'](element, 'ng-hide');
    });
  };
}];


/**
 * @ngdoc directive
 * @name ng.directive:ngHide
 *
 * @description
 * The `ngHide` directive shows or hides the given HTML element based on the expression
 * provided to the ngHide attribute. The element is shown or hidden by removing or adding
 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
 * in AngularJS and sets the display style to none (using an !important flag).
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * <pre>
 * <!-- when $scope.myValue is truthy (element is hidden) -->
 * <div ng-hide="myValue"></div>
 *
 * <!-- when $scope.myValue is falsy (element is visible) -->
 * <div ng-hide="myValue" class="ng-hide"></div>
 * </pre>
 *
 * When the ngHide expression evaluates to true then the .ng-hide CSS class is added to the class attribute
 * on the element causing it to become hidden. When false, the ng-hide CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the .ng-hide CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding .ng-hide
 *
 * If you wish to change the hide behavior with ngShow/ngHide then this can be achieved by
 * restating the styles for the .ng-hide class in CSS:
 * <pre>
 * .ng-hide {
 *   //!annotate CSS Specificity|Not to worry, this will override the AngularJS default...
 *   display:block!important;
 *
 *   //this is just another form of hiding an element
 *   position:absolute;
 *   top:-9999px;
 *   left:-9999px;
 * }
 * </pre>
 *
 * Just remember to include the important flag so the CSS override will function.
 *
 * ## A note about animations with ngHide
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works like the animation system present with ngClass, except that
 * you must also include the !important flag to override the display property so
 * that you can perform an animation when the element is hidden during the time of the animation.
 *
 * <pre>
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition:0.5s linear all;
 *   display:block!important;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * </pre>
 *
 * @animations
 * removeClass: .ng-hide - happens after the ngHide expression evaluates to a truthy value and just before the contents are set to hidden
 * addClass: .ng-hide - happens after the ngHide expression evaluates to a non truthy value and just before the contents are set to visible
 *
 * @element ANY
 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
 *     the element is shown or hidden respectively.
 *
 * @example
  <example animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked"><br/>
      <div>
        Show:
        <div class="check-element animate-hide" ng-show="checked">
          <span class="icon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-hide" ng-hide="checked">
          <span class="icon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="animations.css">
      .animate-hide {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
        line-height:20px;
        opacity:1;
        padding:10px;
        border:1px solid black;
        background:white;
      }

      .animate-hide.ng-hide-add,
      .animate-hide.ng-hide-remove {
        display:block!important;
      }

      .animate-hide.ng-hide {
        line-height:0;
        opacity:0;
        padding:0 10px;
      }

      .check-element {
        padding:10px;
        border:1px solid black;
        background:white;
      }
    </file>
    <file name="scenario.js">
       it('should check ng-show / ng-hide', function() {
         expect(element('.doc-example-live .check-element:first:hidden').count()).toEqual(1);
         expect(element('.doc-example-live .check-element:last:visible').count()).toEqual(1);

         input('checked').check();

         expect(element('.doc-example-live .check-element:first:visible').count()).toEqual(1);
         expect(element('.doc-example-live .check-element:last:hidden').count()).toEqual(1);
       });
    </file>
  </example>
 */
var ngHideDirective = ['$animate', function($animate) {
  return function(scope, element, attr) {
    scope.$watch(attr.ngHide, function ngHideWatchAction(value){
      $animate[toBoolean(value) ? 'addClass' : 'removeClass'](element, 'ng-hide');
    });
  };
}];

/**
 * @ngdoc directive
 * @name ng.directive:ngStyle
 * @restrict AC
 *
 * @description
 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
 *
 * @element ANY
 * @param {expression} ngStyle {@link guide/expression Expression} which evals to an
 *      object whose keys are CSS style names and values are corresponding values for those CSS
 *      keys.
 *
 * @example
   <example>
     <file name="index.html">
        <input type="button" value="set" ng-click="myStyle={color:'red'}">
        <input type="button" value="clear" ng-click="myStyle={}">
        <br/>
        <span ng-style="myStyle">Sample Text</span>
        <pre>myStyle={{myStyle}}</pre>
     </file>
     <file name="style.css">
       span {
         color: black;
       }
     </file>
     <file name="scenario.js">
       it('should check ng-style', function() {
         expect(element('.doc-example-live span').css('color')).toBe('rgb(0, 0, 0)');
         element('.doc-example-live :button[value=set]').click();
         expect(element('.doc-example-live span').css('color')).toBe('rgb(255, 0, 0)');
         element('.doc-example-live :button[value=clear]').click();
         expect(element('.doc-example-live span').css('color')).toBe('rgb(0, 0, 0)');
       });
     </file>
   </example>
 */
var ngStyleDirective = ngDirective(function(scope, element, attr) {
  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
    if (oldStyles && (newStyles !== oldStyles)) {
      forEach(oldStyles, function(val, style) { element.css(style, '');});
    }
    if (newStyles) element.css(newStyles);
  }, true);
});

/**
 * @ngdoc directive
 * @name ng.directive:ngSwitch
 * @restrict EA
 *
 * @description
 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
 * as specified in the template.
 *
 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
 * from the template cache), `ngSwitch` simply choses one of the nested elements and makes it visible based on which element
 * matches the value obtained from the evaluated expression. In other words, you define a container element
 * (where you place the directive), place an expression on the **`on="..."` attribute**
 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
 * attribute is displayed.
 *
 * <div class="alert alert-info">
 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
 * as literal string values to match against.
 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
 * value of the expression `$scope.someVal`.
 * </div>

 * @animations
 * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container
 * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
 *
 * @usage
 * <ANY ng-switch="expression">
 *   <ANY ng-switch-when="matchValue1">...</ANY>
 *   <ANY ng-switch-when="matchValue2">...</ANY>
 *   <ANY ng-switch-default>...</ANY>
 * </ANY>
 *
 *
 * @scope
 * @priority 800
 * @param {*} ngSwitch|on expression to match against <tt>ng-switch-when</tt>.
 * @paramDescription
 * On child elements add:
 *
 * * `ngSwitchWhen`: the case statement to match against. If match then this
 *   case will be displayed. If the same match appears multiple times, all the
 *   elements will be displayed.
 * * `ngSwitchDefault`: the default case when no other case match. If there
 *   are multiple default cases, all of them will be displayed when no other
 *   case match.
 *
 *
 * @example
  <example animations="true">
    <file name="index.html">
      <div ng-controller="Ctrl">
        <select ng-model="selection" ng-options="item for item in items">
        </select>
        <tt>selection={{selection}}</tt>
        <hr/>
        <div class="animate-switch-container"
          ng-switch on="selection">
            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
            <div class="animate-switch" ng-switch-when="home">Home Span</div>
            <div class="animate-switch" ng-switch-default>default</div>
        </div>
      </div>
    </file>
    <file name="script.js">
      function Ctrl($scope) {
        $scope.items = ['settings', 'home', 'other'];
        $scope.selection = $scope.items[0];
      }
    </file>
    <file name="animations.css">
      .animate-switch-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .animate-switch {
        padding:10px;
      }

      .animate-switch.ng-animate {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
      }

      .animate-switch.ng-leave.ng-leave-active,
      .animate-switch.ng-enter {
        top:-50px;
      }
      .animate-switch.ng-leave,
      .animate-switch.ng-enter.ng-enter-active {
        top:0;
      }
    </file>
    <file name="scenario.js">
      it('should start in settings', function() {
        expect(element('.doc-example-live [ng-switch]').text()).toMatch(/Settings Div/);
      });
      it('should change to home', function() {
        select('selection').option('home');
        expect(element('.doc-example-live [ng-switch]').text()).toMatch(/Home Span/);
      });
      it('should select default', function() {
        select('selection').option('other');
        expect(element('.doc-example-live [ng-switch]').text()).toMatch(/default/);
      });
    </file>
  </example>
 */
var ngSwitchDirective = ['$animate', function($animate) {
  return {
    restrict: 'EA',
    require: 'ngSwitch',

    // asks for $scope to fool the BC controller module
    controller: ['$scope', function ngSwitchController() {
     this.cases = {};
    }],
    link: function(scope, element, attr, ngSwitchController) {
      var watchExpr = attr.ngSwitch || attr.on,
          selectedTranscludes,
          selectedElements,
          selectedScopes = [];

      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
        for (var i= 0, ii=selectedScopes.length; i<ii; i++) {
          selectedScopes[i].$destroy();
          $animate.leave(selectedElements[i]);
        }

        selectedElements = [];
        selectedScopes = [];

        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
          scope.$eval(attr.change);
          forEach(selectedTranscludes, function(selectedTransclude) {
            var selectedScope = scope.$new();
            selectedScopes.push(selectedScope);
            selectedTransclude.transclude(selectedScope, function(caseElement) {
              var anchor = selectedTransclude.element;

              selectedElements.push(caseElement);
              $animate.enter(caseElement, anchor.parent(), anchor);
            });
          });
        }
      });
    }
  };
}];

var ngSwitchWhenDirective = ngDirective({
  transclude: 'element',
  priority: 800,
  require: '^ngSwitch',
  compile: function(element, attrs) {
    return function(scope, element, attr, ctrl, $transclude) {
      ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);
      ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });
    };
  }
});

var ngSwitchDefaultDirective = ngDirective({
  transclude: 'element',
  priority: 800,
  require: '^ngSwitch',
  link: function(scope, element, attr, ctrl, $transclude) {
    ctrl.cases['?'] = (ctrl.cases['?'] || []);
    ctrl.cases['?'].push({ transclude: $transclude, element: element });
   }
});

/**
 * @ngdoc directive
 * @name ng.directive:ngTransclude
 * @restrict AC
 *
 * @description
 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
 *
 * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
 *
 * @element ANY
 *
 * @example
   <doc:example module="transclude">
     <doc:source>
       <script>
         function Ctrl($scope) {
           $scope.title = 'Lorem Ipsum';
           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
         }

         angular.module('transclude', [])
          .directive('pane', function(){
             return {
               restrict: 'E',
               transclude: true,
               scope: { title:'@' },
               template: '<div style="border: 1px solid black;">' +
                           '<div style="background-color: gray">{{title}}</div>' +
                           '<div ng-transclude></div>' +
                         '</div>'
             };
         });
       </script>
       <div ng-controller="Ctrl">
         <input ng-model="title"><br>
         <textarea ng-model="text"></textarea> <br/>
         <pane title="{{title}}">{{text}}</pane>
       </div>
     </doc:source>
     <doc:scenario>
        it('should have transcluded', function() {
          input('title').enter('TITLE');
          input('text').enter('TEXT');
          expect(binding('title')).toEqual('TITLE');
          expect(binding('text')).toEqual('TEXT');
        });
     </doc:scenario>
   </doc:example>
 *
 */
var ngTranscludeDirective = ngDirective({
  controller: ['$element', '$transclude', function($element, $transclude) {
    if (!$transclude) {
      throw minErr('ngTransclude')('orphan',
          'Illegal use of ngTransclude directive in the template! ' +
          'No parent directive that requires a transclusion found. ' +
          'Element: {0}',
          startingTag($element));
    }

    // remember the transclusion fn but call it during linking so that we don't process transclusion before directives on
    // the parent element even when the transclusion replaces the current element. (we can't use priority here because
    // that applies only to compile fns and not controllers
    this.$transclude = $transclude;
  }],

  link: function($scope, $element, $attrs, controller) {
    controller.$transclude(function(clone) {
      $element.empty();
      $element.append(clone);
    });
  }
});

/**
 * @ngdoc directive
 * @name ng.directive:script
 * @restrict E
 *
 * @description
 * Load content of a script tag, with type `text/ng-template`, into `$templateCache`, so that the
 * template can be used by `ngInclude`, `ngView` or directive templates.
 *
 * @param {'text/ng-template'} type must be set to `'text/ng-template'`
 *
 * @example
  <doc:example>
    <doc:source>
      <script type="text/ng-template" id="/tpl.html">
        Content of the template.
      </script>

      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
      <div id="tpl-content" ng-include src="currentTpl"></div>
    </doc:source>
    <doc:scenario>
      it('should load template defined inside script tag', function() {
        element('#tpl-link').click();
        expect(element('#tpl-content').text()).toMatch(/Content of the template/);
      });
    </doc:scenario>
  </doc:example>
 */
var scriptDirective = ['$templateCache', function($templateCache) {
  return {
    restrict: 'E',
    terminal: true,
    compile: function(element, attr) {
      if (attr.type == 'text/ng-template') {
        var templateUrl = attr.id,
            // IE is not consistent, in scripts we have to read .text but in other nodes we have to read .textContent
            text = element[0].text;

        $templateCache.put(templateUrl, text);
      }
    }
  };
}];

var ngOptionsMinErr = minErr('ngOptions');
/**
 * @ngdoc directive
 * @name ng.directive:select
 * @restrict E
 *
 * @description
 * HTML `SELECT` element with angular data-binding.
 *
 * # `ngOptions`
 *
 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
 * elements for the `<select>` element using the array or object obtained by evaluating the
 * `ngOptions` comprehension_expression.
 *
 * When an item in the `<select>` menu is selected, the array element or object property
 * represented by the selected option will be bound to the model identified by the `ngModel`
 * directive.
 *
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
 * option. See example below for demonstration.
 *
 * Note: `ngOptions` provides iterator facility for `<option>` element which should be used instead
 * of {@link ng.directive:ngRepeat ngRepeat} when you want the
 * `select` model to be bound to a non-string value. This is because an option element can only
 * be bound to string values at present.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required The control is considered valid only if value is entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {comprehension_expression=} ngOptions in one of the following forms:
 *
 *   * for array data sources:
 *     * `label` **`for`** `value` **`in`** `array`
 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
 *     * `label`  **`group by`** `group` **`for`** `value` **`in`** `array`
 *     * `select` **`as`** `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
 *   * for object data sources:
 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`group by`** `group`
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
 *
 * Where:
 *
 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
 *   * `value`: local variable which will refer to each item in the `array` or each property value
 *      of `object` during iteration.
 *   * `key`: local variable which will refer to a property name in `object` during iteration.
 *   * `label`: The result of this expression will be the label for `<option>` element. The
 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
 *      element. If not specified, `select` expression will default to `value`.
 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
 *      DOM element.
 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
 *     `value` variable (e.g. `value.propertyName`).
 *
 * @example
    <doc:example>
      <doc:source>
        <script>
        function MyCntrl($scope) {
          $scope.colors = [
            {name:'black', shade:'dark'},
            {name:'white', shade:'light'},
            {name:'red', shade:'dark'},
            {name:'blue', shade:'dark'},
            {name:'yellow', shade:'light'}
          ];
          $scope.color = $scope.colors[2]; // red
        }
        </script>
        <div ng-controller="MyCntrl">
          <ul>
            <li ng-repeat="color in colors">
              Name: <input ng-model="color.name">
              [<a href ng-click="colors.splice($index, 1)">X</a>]
            </li>
            <li>
              [<a href ng-click="colors.push({})">add</a>]
            </li>
          </ul>
          <hr/>
          Color (null not allowed):
          <select ng-model="color" ng-options="c.name for c in colors"></select><br>

          Color (null allowed):
          <span  class="nullable">
            <select ng-model="color" ng-options="c.name for c in colors">
              <option value="">-- choose color --</option>
            </select>
          </span><br/>

          Color grouped by shade:
          <select ng-model="color" ng-options="c.name group by c.shade for c in colors">
          </select><br/>


          Select <a href ng-click="color={name:'not in list'}">bogus</a>.<br>
          <hr/>
          Currently selected: {{ {selected_color:color}  }}
          <div style="border:solid 1px black; height:20px"
               ng-style="{'background-color':color.name}">
          </div>
        </div>
      </doc:source>
      <doc:scenario>
         it('should check ng-options', function() {
           expect(binding('{selected_color:color}')).toMatch('red');
           select('color').option('0');
           expect(binding('{selected_color:color}')).toMatch('black');
           using('.nullable').select('color').option('');
           expect(binding('{selected_color:color}')).toMatch('null');
         });
      </doc:scenario>
    </doc:example>
 */

var ngOptionsDirective = valueFn({ terminal: true });
// jshint maxlen: false
var selectDirective = ['$compile', '$parse', function($compile,   $parse) {
                         //0000111110000000000022220000000000000000000000333300000000000000444444444444444000000000555555555555555000000066666666666666600000000000000007777000000000000000000088888
  var NG_OPTIONS_REGEXP = /^\s*(.*?)(?:\s+as\s+(.*?))?(?:\s+group\s+by\s+(.*))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(.*?)(?:\s+track\s+by\s+(.*?))?$/,
      nullModelCtrl = {$setViewValue: noop};
// jshint maxlen: 100

  return {
    restrict: 'E',
    require: ['select', '?ngModel'],
    controller: ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {
      var self = this,
          optionsMap = {},
          ngModelCtrl = nullModelCtrl,
          nullOption,
          unknownOption;


      self.databound = $attrs.ngModel;


      self.init = function(ngModelCtrl_, nullOption_, unknownOption_) {
        ngModelCtrl = ngModelCtrl_;
        nullOption = nullOption_;
        unknownOption = unknownOption_;
      };


      self.addOption = function(value) {
        assertNotHasOwnProperty(value, '"option value"');
        optionsMap[value] = true;

        if (ngModelCtrl.$viewValue == value) {
          $element.val(value);
          if (unknownOption.parent()) unknownOption.remove();
        }
      };


      self.removeOption = function(value) {
        if (this.hasOption(value)) {
          delete optionsMap[value];
          if (ngModelCtrl.$viewValue == value) {
            this.renderUnknownOption(value);
          }
        }
      };


      self.renderUnknownOption = function(val) {
        var unknownVal = '? ' + hashKey(val) + ' ?';
        unknownOption.val(unknownVal);
        $element.prepend(unknownOption);
        $element.val(unknownVal);
        unknownOption.prop('selected', true); // needed for IE
      };


      self.hasOption = function(value) {
        return optionsMap.hasOwnProperty(value);
      };

      $scope.$on('$destroy', function() {
        // disable unknown option so that we don't do work when the whole select is being destroyed
        self.renderUnknownOption = noop;
      });
    }],

    link: function(scope, element, attr, ctrls) {
      // if ngModel is not defined, we don't need to do anything
      if (!ctrls[1]) return;

      var selectCtrl = ctrls[0],
          ngModelCtrl = ctrls[1],
          multiple = attr.multiple,
          optionsExp = attr.ngOptions,
          nullOption = false, // if false, user will not be able to select it (used by ngOptions)
          emptyOption,
          // we can't just jqLite('<option>') since jqLite is not smart enough
          // to create it in <select> and IE barfs otherwise.
          optionTemplate = jqLite(document.createElement('option')),
          optGroupTemplate =jqLite(document.createElement('optgroup')),
          unknownOption = optionTemplate.clone();

      // find "null" option
      for(var i = 0, children = element.children(), ii = children.length; i < ii; i++) {
        if (children[i].value === '') {
          emptyOption = nullOption = children.eq(i);
          break;
        }
      }

      selectCtrl.init(ngModelCtrl, nullOption, unknownOption);

      // required validator
      if (multiple) {
        ngModelCtrl.$isEmpty = function(value) {
          return !value || value.length === 0;
        };
      }

      if (optionsExp) setupAsOptions(scope, element, ngModelCtrl);
      else if (multiple) setupAsMultiple(scope, element, ngModelCtrl);
      else setupAsSingle(scope, element, ngModelCtrl, selectCtrl);


      ////////////////////////////



      function setupAsSingle(scope, selectElement, ngModelCtrl, selectCtrl) {
        ngModelCtrl.$render = function() {
          var viewValue = ngModelCtrl.$viewValue;

          if (selectCtrl.hasOption(viewValue)) {
            if (unknownOption.parent()) unknownOption.remove();
            selectElement.val(viewValue);
            if (viewValue === '') emptyOption.prop('selected', true); // to make IE9 happy
          } else {
            if (isUndefined(viewValue) && emptyOption) {
              selectElement.val('');
            } else {
              selectCtrl.renderUnknownOption(viewValue);
            }
          }
        };

        selectElement.on('change', function() {
          scope.$apply(function() {
            if (unknownOption.parent()) unknownOption.remove();
            ngModelCtrl.$setViewValue(selectElement.val());
          });
        });
      }

      function setupAsMultiple(scope, selectElement, ctrl) {
        var lastView;
        ctrl.$render = function() {
          var items = new HashMap(ctrl.$viewValue);
          forEach(selectElement.find('option'), function(option) {
            option.selected = isDefined(items.get(option.value));
          });
        };

        // we have to do it on each watch since ngModel watches reference, but
        // we need to work of an array, so we need to see if anything was inserted/removed
        scope.$watch(function selectMultipleWatch() {
          if (!equals(lastView, ctrl.$viewValue)) {
            lastView = copy(ctrl.$viewValue);
            ctrl.$render();
          }
        });

        selectElement.on('change', function() {
          scope.$apply(function() {
            var array = [];
            forEach(selectElement.find('option'), function(option) {
              if (option.selected) {
                array.push(option.value);
              }
            });
            ctrl.$setViewValue(array);
          });
        });
      }

      function setupAsOptions(scope, selectElement, ctrl) {
        var match;

        if (! (match = optionsExp.match(NG_OPTIONS_REGEXP))) {
          throw ngOptionsMinErr('iexp',
            "Expected expression in form of " +
            "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +
            " but got '{0}'. Element: {1}",
            optionsExp, startingTag(selectElement));
        }

        var displayFn = $parse(match[2] || match[1]),
            valueName = match[4] || match[6],
            keyName = match[5],
            groupByFn = $parse(match[3] || ''),
            valueFn = $parse(match[2] ? match[1] : valueName),
            valuesFn = $parse(match[7]),
            track = match[8],
            trackFn = track ? $parse(match[8]) : null,
            // This is an array of array of existing option groups in DOM.
            // We try to reuse these if possible
            // - optionGroupsCache[0] is the options with no option group
            // - optionGroupsCache[?][0] is the parent: either the SELECT or OPTGROUP element
            optionGroupsCache = [[{element: selectElement, label:''}]];

        if (nullOption) {
          // compile the element since there might be bindings in it
          $compile(nullOption)(scope);

          // remove the class, which is added automatically because we recompile the element and it
          // becomes the compilation root
          nullOption.removeClass('ng-scope');

          // we need to remove it before calling selectElement.empty() because otherwise IE will
          // remove the label from the element. wtf?
          nullOption.remove();
        }

        // clear contents, we'll add what's needed based on the model
        selectElement.empty();

        selectElement.on('change', function() {
          scope.$apply(function() {
            var optionGroup,
                collection = valuesFn(scope) || [],
                locals = {},
                key, value, optionElement, index, groupIndex, length, groupLength, trackIndex;

            if (multiple) {
              value = [];
              for (groupIndex = 0, groupLength = optionGroupsCache.length;
                   groupIndex < groupLength;
                   groupIndex++) {
                // list of options for that group. (first item has the parent)
                optionGroup = optionGroupsCache[groupIndex];

                for(index = 1, length = optionGroup.length; index < length; index++) {
                  if ((optionElement = optionGroup[index].element)[0].selected) {
                    key = optionElement.val();
                    if (keyName) locals[keyName] = key;
                    if (trackFn) {
                      for (trackIndex = 0; trackIndex < collection.length; trackIndex++) {
                        locals[valueName] = collection[trackIndex];
                        if (trackFn(scope, locals) == key) break;
                      }
                    } else {
                      locals[valueName] = collection[key];
                    }
                    value.push(valueFn(scope, locals));
                  }
                }
              }
            } else {
              key = selectElement.val();
              if (key == '?') {
                value = undefined;
              } else if (key === ''){
                value = null;
              } else {
                if (trackFn) {
                  for (trackIndex = 0; trackIndex < collection.length; trackIndex++) {
                    locals[valueName] = collection[trackIndex];
                    if (trackFn(scope, locals) == key) {
                      value = valueFn(scope, locals);
                      break;
                    }
                  }
                } else {
                  locals[valueName] = collection[key];
                  if (keyName) locals[keyName] = key;
                  value = valueFn(scope, locals);
                }
              }
            }
            ctrl.$setViewValue(value);
          });
        });

        ctrl.$render = render;

        // TODO(vojta): can't we optimize this ?
        scope.$watch(render);

        function render() {
              // Temporary location for the option groups before we render them
          var optionGroups = {'':[]},
              optionGroupNames = [''],
              optionGroupName,
              optionGroup,
              option,
              existingParent, existingOptions, existingOption,
              modelValue = ctrl.$modelValue,
              values = valuesFn(scope) || [],
              keys = keyName ? sortedKeys(values) : values,
              key,
              groupLength, length,
              groupIndex, index,
              locals = {},
              selected,
              selectedSet = false, // nothing is selected yet
              lastElement,
              element,
              label;

          if (multiple) {
            if (trackFn && isArray(modelValue)) {
              selectedSet = new HashMap([]);
              for (var trackIndex = 0; trackIndex < modelValue.length; trackIndex++) {
                locals[valueName] = modelValue[trackIndex];
                selectedSet.put(trackFn(scope, locals), modelValue[trackIndex]);
              }
            } else {
              selectedSet = new HashMap(modelValue);
            }
          }

          // We now build up the list of options we need (we merge later)
          for (index = 0; length = keys.length, index < length; index++) {
            
            key = index;
            if (keyName) {
              key = keys[index];
              if ( key.charAt(0) === '$' ) continue;
              locals[keyName] = key;
            }

            locals[valueName] = values[key];

            optionGroupName = groupByFn(scope, locals) || '';
            if (!(optionGroup = optionGroups[optionGroupName])) {
              optionGroup = optionGroups[optionGroupName] = [];
              optionGroupNames.push(optionGroupName);
            }
            if (multiple) {
              selected = isDefined(
                selectedSet.remove(trackFn ? trackFn(scope, locals) : valueFn(scope, locals))
              );
            } else {
              if (trackFn) {
                var modelCast = {};
                modelCast[valueName] = modelValue;
                selected = trackFn(scope, modelCast) === trackFn(scope, locals);
              } else {
                selected = modelValue === valueFn(scope, locals);
              }
              selectedSet = selectedSet || selected; // see if at least one item is selected
            }
            label = displayFn(scope, locals); // what will be seen by the user

            // doing displayFn(scope, locals) || '' overwrites zero values
            label = isDefined(label) ? label : '';
            optionGroup.push({
              // either the index into array or key from object
              id: trackFn ? trackFn(scope, locals) : (keyName ? keys[index] : index),
              label: label,
              selected: selected                   // determine if we should be selected
            });
          }
          if (!multiple) {
            if (nullOption || modelValue === null) {
              // insert null option if we have a placeholder, or the model is null
              optionGroups[''].unshift({id:'', label:'', selected:!selectedSet});
            } else if (!selectedSet) {
              // option could not be found, we have to insert the undefined item
              optionGroups[''].unshift({id:'?', label:'', selected:true});
            }
          }

          // Now we need to update the list of DOM nodes to match the optionGroups we computed above
          for (groupIndex = 0, groupLength = optionGroupNames.length;
               groupIndex < groupLength;
               groupIndex++) {
            // current option group name or '' if no group
            optionGroupName = optionGroupNames[groupIndex];

            // list of options for that group. (first item has the parent)
            optionGroup = optionGroups[optionGroupName];

            if (optionGroupsCache.length <= groupIndex) {
              // we need to grow the optionGroups
              existingParent = {
                element: optGroupTemplate.clone().attr('label', optionGroupName),
                label: optionGroup.label
              };
              existingOptions = [existingParent];
              optionGroupsCache.push(existingOptions);
              selectElement.append(existingParent.element);
            } else {
              existingOptions = optionGroupsCache[groupIndex];
              existingParent = existingOptions[0];  // either SELECT (no group) or OPTGROUP element

              // update the OPTGROUP label if not the same.
              if (existingParent.label != optionGroupName) {
                existingParent.element.attr('label', existingParent.label = optionGroupName);
              }
            }

            lastElement = null;  // start at the beginning
            for(index = 0, length = optionGroup.length; index < length; index++) {
              option = optionGroup[index];
              if ((existingOption = existingOptions[index+1])) {
                // reuse elements
                lastElement = existingOption.element;
                if (existingOption.label !== option.label) {
                  lastElement.text(existingOption.label = option.label);
                }
                if (existingOption.id !== option.id) {
                  lastElement.val(existingOption.id = option.id);
                }
                // lastElement.prop('selected') provided by jQuery has side-effects
                if (lastElement[0].selected !== option.selected) {
                  lastElement.prop('selected', (existingOption.selected = option.selected));
                }
              } else {
                // grow elements

                // if it's a null option
                if (option.id === '' && nullOption) {
                  // put back the pre-compiled element
                  element = nullOption;
                } else {
                  // jQuery(v1.4.2) Bug: We should be able to chain the method calls, but
                  // in this version of jQuery on some browser the .text() returns a string
                  // rather then the element.
                  (element = optionTemplate.clone())
                      .val(option.id)
                      .attr('selected', option.selected)
                      .text(option.label);
                }

                existingOptions.push(existingOption = {
                    element: element,
                    label: option.label,
                    id: option.id,
                    selected: option.selected
                });
                if (lastElement) {
                  lastElement.after(element);
                } else {
                  existingParent.element.append(element);
                }
                lastElement = element;
              }
            }
            // remove any excessive OPTIONs in a group
            index++; // increment since the existingOptions[0] is parent element not OPTION
            while(existingOptions.length > index) {
              existingOptions.pop().element.remove();
            }
          }
          // remove any excessive OPTGROUPs from select
          while(optionGroupsCache.length > groupIndex) {
            optionGroupsCache.pop()[0].element.remove();
          }
        }
      }
    }
  };
}];

var optionDirective = ['$interpolate', function($interpolate) {
  var nullSelectCtrl = {
    addOption: noop,
    removeOption: noop
  };

  return {
    restrict: 'E',
    priority: 100,
    compile: function(element, attr) {
      if (isUndefined(attr.value)) {
        var interpolateFn = $interpolate(element.text(), true);
        if (!interpolateFn) {
          attr.$set('value', element.text());
        }
      }

      return function (scope, element, attr) {
        var selectCtrlName = '$selectController',
            parent = element.parent(),
            selectCtrl = parent.data(selectCtrlName) ||
              parent.parent().data(selectCtrlName); // in case we are in optgroup

        if (selectCtrl && selectCtrl.databound) {
          // For some reason Opera defaults to true and if not overridden this messes up the repeater.
          // We don't want the view to drive the initialization of the model anyway.
          element.prop('selected', false);
        } else {
          selectCtrl = nullSelectCtrl;
        }

        if (interpolateFn) {
          scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {
            attr.$set('value', newVal);
            if (newVal !== oldVal) selectCtrl.removeOption(oldVal);
            selectCtrl.addOption(newVal);
          });
        } else {
          selectCtrl.addOption(attr.value);
        }

        element.on('$destroy', function() {
          selectCtrl.removeOption(attr.value);
        });
      };
    }
  };
}];

var styleDirective = valueFn({
  restrict: 'E',
  terminal: true
});

  //try to bind to jquery now so that one can write angular.element().read()
  //but we will rebind on bootstrap again.
  bindJQuery();

  publishExternalAPI(angular);

  jqLite(document).ready(function() {
    angularInit(document, bootstrap);
  });

})(window, document);

!angular.$$csp() && angular.element(document).find('head').prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}</style>');d3 = function() {
  var d3 = {
    version: "3.3.13"
  };
  if (!Date.now) Date.now = function() {
    return +new Date();
  };
  var d3_arraySlice = [].slice, d3_array = function(list) {
    return d3_arraySlice.call(list);
  };
  var d3_document = document, d3_documentElement = d3_document.documentElement, d3_window = window;
  try {
    d3_array(d3_documentElement.childNodes)[0].nodeType;
  } catch (e) {
    d3_array = function(list) {
      var i = list.length, array = new Array(i);
      while (i--) array[i] = list[i];
      return array;
    };
  }
  try {
    d3_document.createElement("div").style.setProperty("opacity", 0, "");
  } catch (error) {
    var d3_element_prototype = d3_window.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = d3_window.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
    d3_element_prototype.setAttribute = function(name, value) {
      d3_element_setAttribute.call(this, name, value + "");
    };
    d3_element_prototype.setAttributeNS = function(space, local, value) {
      d3_element_setAttributeNS.call(this, space, local, value + "");
    };
    d3_style_prototype.setProperty = function(name, value, priority) {
      d3_style_setProperty.call(this, name, value + "", priority);
    };
  }
  d3.ascending = function(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  };
  d3.descending = function(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  };
  d3.min = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n && !((a = array[i]) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
    } else {
      while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
    }
    return a;
  };
  d3.max = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n && !((a = array[i]) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
    } else {
      while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
    }
    return a;
  };
  d3.extent = function(array, f) {
    var i = -1, n = array.length, a, b, c;
    if (arguments.length === 1) {
      while (++i < n && !((a = c = array[i]) != null && a <= a)) a = c = undefined;
      while (++i < n) if ((b = array[i]) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    } else {
      while (++i < n && !((a = c = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    }
    return [ a, c ];
  };
  d3.sum = function(array, f) {
    var s = 0, n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (!isNaN(a = +array[i])) s += a;
    } else {
      while (++i < n) if (!isNaN(a = +f.call(array, array[i], i))) s += a;
    }
    return s;
  };
  function d3_number(x) {
    return x != null && !isNaN(x);
  }
  d3.mean = function(array, f) {
    var n = array.length, a, m = 0, i = -1, j = 0;
    if (arguments.length === 1) {
      while (++i < n) if (d3_number(a = array[i])) m += (a - m) / ++j;
    } else {
      while (++i < n) if (d3_number(a = f.call(array, array[i], i))) m += (a - m) / ++j;
    }
    return j ? m : undefined;
  };
  d3.quantile = function(values, p) {
    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
    return e ? v + e * (values[h] - v) : v;
  };
  d3.median = function(array, f) {
    if (arguments.length > 1) array = array.map(f);
    array = array.filter(d3_number);
    return array.length ? d3.quantile(array.sort(d3.ascending), .5) : undefined;
  };
  d3.bisector = function(f) {
    return {
      left: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (f.call(a, a[mid], mid) < x) lo = mid + 1; else hi = mid;
        }
        return lo;
      },
      right: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (x < f.call(a, a[mid], mid)) hi = mid; else lo = mid + 1;
        }
        return lo;
      }
    };
  };
  var d3_bisector = d3.bisector(function(d) {
    return d;
  });
  d3.bisectLeft = d3_bisector.left;
  d3.bisect = d3.bisectRight = d3_bisector.right;
  d3.shuffle = function(array) {
    var m = array.length, t, i;
    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m], array[m] = array[i], array[i] = t;
    }
    return array;
  };
  d3.permute = function(array, indexes) {
    var i = indexes.length, permutes = new Array(i);
    while (i--) permutes[i] = array[indexes[i]];
    return permutes;
  };
  d3.pairs = function(array) {
    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
    return pairs;
  };
  d3.zip = function() {
    if (!(n = arguments.length)) return [];
    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m; ) {
      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n; ) {
        zip[j] = arguments[j][i];
      }
    }
    return zips;
  };
  function d3_zipLength(d) {
    return d.length;
  }
  d3.transpose = function(matrix) {
    return d3.zip.apply(d3, matrix);
  };
  d3.keys = function(map) {
    var keys = [];
    for (var key in map) keys.push(key);
    return keys;
  };
  d3.values = function(map) {
    var values = [];
    for (var key in map) values.push(map[key]);
    return values;
  };
  d3.entries = function(map) {
    var entries = [];
    for (var key in map) entries.push({
      key: key,
      value: map[key]
    });
    return entries;
  };
  d3.merge = function(arrays) {
    var n = arrays.length, m, i = -1, j = 0, merged, array;
    while (++i < n) j += arrays[i].length;
    merged = new Array(j);
    while (--n >= 0) {
      array = arrays[n];
      m = array.length;
      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }
    return merged;
  };
  var abs = Math.abs;
  d3.range = function(start, stop, step) {
    if (arguments.length < 3) {
      step = 1;
      if (arguments.length < 2) {
        stop = start;
        start = 0;
      }
    }
    if ((stop - start) / step === Infinity) throw new Error("infinite range");
    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
    start *= k, stop *= k, step *= k;
    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
    return range;
  };
  function d3_range_integerScale(x) {
    var k = 1;
    while (x * k % 1) k *= 10;
    return k;
  }
  function d3_class(ctor, properties) {
    try {
      for (var key in properties) {
        Object.defineProperty(ctor.prototype, key, {
          value: properties[key],
          enumerable: false
        });
      }
    } catch (e) {
      ctor.prototype = properties;
    }
  }
  d3.map = function(object) {
    var map = new d3_Map();
    if (object instanceof d3_Map) object.forEach(function(key, value) {
      map.set(key, value);
    }); else for (var key in object) map.set(key, object[key]);
    return map;
  };
  function d3_Map() {}
  d3_class(d3_Map, {
    has: function(key) {
      return d3_map_prefix + key in this;
    },
    get: function(key) {
      return this[d3_map_prefix + key];
    },
    set: function(key, value) {
      return this[d3_map_prefix + key] = value;
    },
    remove: function(key) {
      key = d3_map_prefix + key;
      return key in this && delete this[key];
    },
    keys: function() {
      var keys = [];
      this.forEach(function(key) {
        keys.push(key);
      });
      return keys;
    },
    values: function() {
      var values = [];
      this.forEach(function(key, value) {
        values.push(value);
      });
      return values;
    },
    entries: function() {
      var entries = [];
      this.forEach(function(key, value) {
        entries.push({
          key: key,
          value: value
        });
      });
      return entries;
    },
    forEach: function(f) {
      for (var key in this) {
        if (key.charCodeAt(0) === d3_map_prefixCode) {
          f.call(this, key.substring(1), this[key]);
        }
      }
    }
  });
  var d3_map_prefix = "\x00", d3_map_prefixCode = d3_map_prefix.charCodeAt(0);
  d3.nest = function() {
    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
    function map(mapType, array, depth) {
      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
      while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
          values.push(object);
        } else {
          valuesByKey.set(keyValue, [ object ]);
        }
      }
      if (mapType) {
        object = mapType();
        setter = function(keyValue, values) {
          object.set(keyValue, map(mapType, values, depth));
        };
      } else {
        object = {};
        setter = function(keyValue, values) {
          object[keyValue] = map(mapType, values, depth);
        };
      }
      valuesByKey.forEach(setter);
      return object;
    }
    function entries(map, depth) {
      if (depth >= keys.length) return map;
      var array = [], sortKey = sortKeys[depth++];
      map.forEach(function(key, keyMap) {
        array.push({
          key: key,
          values: entries(keyMap, depth)
        });
      });
      return sortKey ? array.sort(function(a, b) {
        return sortKey(a.key, b.key);
      }) : array;
    }
    nest.map = function(array, mapType) {
      return map(mapType, array, 0);
    };
    nest.entries = function(array) {
      return entries(map(d3.map, array, 0), 0);
    };
    nest.key = function(d) {
      keys.push(d);
      return nest;
    };
    nest.sortKeys = function(order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    };
    nest.sortValues = function(order) {
      sortValues = order;
      return nest;
    };
    nest.rollup = function(f) {
      rollup = f;
      return nest;
    };
    return nest;
  };
  d3.set = function(array) {
    var set = new d3_Set();
    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
    return set;
  };
  function d3_Set() {}
  d3_class(d3_Set, {
    has: function(value) {
      return d3_map_prefix + value in this;
    },
    add: function(value) {
      this[d3_map_prefix + value] = true;
      return value;
    },
    remove: function(value) {
      value = d3_map_prefix + value;
      return value in this && delete this[value];
    },
    values: function() {
      var values = [];
      this.forEach(function(value) {
        values.push(value);
      });
      return values;
    },
    forEach: function(f) {
      for (var value in this) {
        if (value.charCodeAt(0) === d3_map_prefixCode) {
          f.call(this, value.substring(1));
        }
      }
    }
  });
  d3.behavior = {};
  d3.rebind = function(target, source) {
    var i = 1, n = arguments.length, method;
    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
    return target;
  };
  function d3_rebind(target, source, method) {
    return function() {
      var value = method.apply(source, arguments);
      return value === source ? target : value;
    };
  }
  function d3_vendorSymbol(object, name) {
    if (name in object) return name;
    name = name.charAt(0).toUpperCase() + name.substring(1);
    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
      var prefixName = d3_vendorPrefixes[i] + name;
      if (prefixName in object) return prefixName;
    }
  }
  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
  function d3_noop() {}
  d3.dispatch = function() {
    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    return dispatch;
  };
  function d3_dispatch() {}
  d3_dispatch.prototype.on = function(type, listener) {
    var i = type.indexOf("."), name = "";
    if (i >= 0) {
      name = type.substring(i + 1);
      type = type.substring(0, i);
    }
    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
    if (arguments.length === 2) {
      if (listener == null) for (type in this) {
        if (this.hasOwnProperty(type)) this[type].on(name, null);
      }
      return this;
    }
  };
  function d3_dispatch_event(dispatch) {
    var listeners = [], listenerByName = new d3_Map();
    function event() {
      var z = listeners, i = -1, n = z.length, l;
      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
      return dispatch;
    }
    event.on = function(name, listener) {
      var l = listenerByName.get(name), i;
      if (arguments.length < 2) return l && l.on;
      if (l) {
        l.on = null;
        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
        listenerByName.remove(name);
      }
      if (listener) listeners.push(listenerByName.set(name, {
        on: listener
      }));
      return dispatch;
    };
    return event;
  }
  d3.event = null;
  function d3_eventPreventDefault() {
    d3.event.preventDefault();
  }
  function d3_eventSource() {
    var e = d3.event, s;
    while (s = e.sourceEvent) e = s;
    return e;
  }
  function d3_eventDispatch(target) {
    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    dispatch.of = function(thiz, argumentz) {
      return function(e1) {
        try {
          var e0 = e1.sourceEvent = d3.event;
          e1.target = target;
          d3.event = e1;
          dispatch[e1.type].apply(thiz, argumentz);
        } finally {
          d3.event = e0;
        }
      };
    };
    return dispatch;
  }
  d3.requote = function(s) {
    return s.replace(d3_requote_re, "\\$&");
  };
  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
  var d3_subclass = {}.__proto__ ? function(object, prototype) {
    object.__proto__ = prototype;
  } : function(object, prototype) {
    for (var property in prototype) object[property] = prototype[property];
  };
  function d3_selection(groups) {
    d3_subclass(groups, d3_selectionPrototype);
    return groups;
  }
  var d3_select = function(s, n) {
    return n.querySelector(s);
  }, d3_selectAll = function(s, n) {
    return n.querySelectorAll(s);
  }, d3_selectMatcher = d3_documentElement[d3_vendorSymbol(d3_documentElement, "matchesSelector")], d3_selectMatches = function(n, s) {
    return d3_selectMatcher.call(n, s);
  };
  if (typeof Sizzle === "function") {
    d3_select = function(s, n) {
      return Sizzle(s, n)[0] || null;
    };
    d3_selectAll = function(s, n) {
      return Sizzle.uniqueSort(Sizzle(s, n));
    };
    d3_selectMatches = Sizzle.matchesSelector;
  }
  d3.selection = function() {
    return d3_selectionRoot;
  };
  var d3_selectionPrototype = d3.selection.prototype = [];
  d3_selectionPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, group, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selector(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_select(selector, this);
    };
  }
  d3_selectionPrototype.selectAll = function(selector) {
    var subgroups = [], subgroup, node;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
          subgroup.parentNode = node;
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selectorAll(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_selectAll(selector, this);
    };
  }
  var d3_nsPrefix = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: "http://www.w3.org/1999/xhtml",
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };
  d3.ns = {
    prefix: d3_nsPrefix,
    qualify: function(name) {
      var i = name.indexOf(":"), prefix = name;
      if (i >= 0) {
        prefix = name.substring(0, i);
        name = name.substring(i + 1);
      }
      return d3_nsPrefix.hasOwnProperty(prefix) ? {
        space: d3_nsPrefix[prefix],
        local: name
      } : name;
    }
  };
  d3_selectionPrototype.attr = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node();
        name = d3.ns.qualify(name);
        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
      }
      for (value in name) this.each(d3_selection_attr(value, name[value]));
      return this;
    }
    return this.each(d3_selection_attr(name, value));
  };
  function d3_selection_attr(name, value) {
    name = d3.ns.qualify(name);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrConstant() {
      this.setAttribute(name, value);
    }
    function attrConstantNS() {
      this.setAttributeNS(name.space, name.local, value);
    }
    function attrFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
    }
    function attrFunctionNS() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
    }
    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
  }
  function d3_collapse(s) {
    return s.trim().replace(/\s+/g, " ");
  }
  d3_selectionPrototype.classed = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
        if (value = node.classList) {
          while (++i < n) if (!value.contains(name[i])) return false;
        } else {
          value = node.getAttribute("class");
          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
        }
        return true;
      }
      for (value in name) this.each(d3_selection_classed(value, name[value]));
      return this;
    }
    return this.each(d3_selection_classed(name, value));
  };
  function d3_selection_classedRe(name) {
    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
  }
  function d3_selection_classes(name) {
    return name.trim().split(/^|\s+/);
  }
  function d3_selection_classed(name, value) {
    name = d3_selection_classes(name).map(d3_selection_classedName);
    var n = name.length;
    function classedConstant() {
      var i = -1;
      while (++i < n) name[i](this, value);
    }
    function classedFunction() {
      var i = -1, x = value.apply(this, arguments);
      while (++i < n) name[i](this, x);
    }
    return typeof value === "function" ? classedFunction : classedConstant;
  }
  function d3_selection_classedName(name) {
    var re = d3_selection_classedRe(name);
    return function(node, value) {
      if (c = node.classList) return value ? c.add(name) : c.remove(name);
      var c = node.getAttribute("class") || "";
      if (value) {
        re.lastIndex = 0;
        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
      } else {
        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
      }
    };
  }
  d3_selectionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
        return this;
      }
      if (n < 2) return d3_window.getComputedStyle(this.node(), null).getPropertyValue(name);
      priority = "";
    }
    return this.each(d3_selection_style(name, value, priority));
  };
  function d3_selection_style(name, value, priority) {
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleConstant() {
      this.style.setProperty(name, value, priority);
    }
    function styleFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
    }
    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
  }
  d3_selectionPrototype.property = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") return this.node()[name];
      for (value in name) this.each(d3_selection_property(value, name[value]));
      return this;
    }
    return this.each(d3_selection_property(name, value));
  };
  function d3_selection_property(name, value) {
    function propertyNull() {
      delete this[name];
    }
    function propertyConstant() {
      this[name] = value;
    }
    function propertyFunction() {
      var x = value.apply(this, arguments);
      if (x == null) delete this[name]; else this[name] = x;
    }
    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
  }
  d3_selectionPrototype.text = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    } : value == null ? function() {
      this.textContent = "";
    } : function() {
      this.textContent = value;
    }) : this.node().textContent;
  };
  d3_selectionPrototype.html = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    } : value == null ? function() {
      this.innerHTML = "";
    } : function() {
      this.innerHTML = value;
    }) : this.node().innerHTML;
  };
  d3_selectionPrototype.append = function(name) {
    name = d3_selection_creator(name);
    return this.select(function() {
      return this.appendChild(name.apply(this, arguments));
    });
  };
  function d3_selection_creator(name) {
    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? function() {
      return this.ownerDocument.createElementNS(name.space, name.local);
    } : function() {
      return this.ownerDocument.createElementNS(this.namespaceURI, name);
    };
  }
  d3_selectionPrototype.insert = function(name, before) {
    name = d3_selection_creator(name);
    before = d3_selection_selector(before);
    return this.select(function() {
      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
    });
  };
  d3_selectionPrototype.remove = function() {
    return this.each(function() {
      var parent = this.parentNode;
      if (parent) parent.removeChild(this);
    });
  };
  d3_selectionPrototype.data = function(value, key) {
    var i = -1, n = this.length, group, node;
    if (!arguments.length) {
      value = new Array(n = (group = this[0]).length);
      while (++i < n) {
        if (node = group[i]) {
          value[i] = node.__data__;
        }
      }
      return value;
    }
    function bind(group, groupData) {
      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
      if (key) {
        var nodeByKeyValue = new d3_Map(), dataByKeyValue = new d3_Map(), keyValues = [], keyValue;
        for (i = -1; ++i < n; ) {
          keyValue = key.call(node = group[i], node.__data__, i);
          if (nodeByKeyValue.has(keyValue)) {
            exitNodes[i] = node;
          } else {
            nodeByKeyValue.set(keyValue, node);
          }
          keyValues.push(keyValue);
        }
        for (i = -1; ++i < m; ) {
          keyValue = key.call(groupData, nodeData = groupData[i], i);
          if (node = nodeByKeyValue.get(keyValue)) {
            updateNodes[i] = node;
            node.__data__ = nodeData;
          } else if (!dataByKeyValue.has(keyValue)) {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
          dataByKeyValue.set(keyValue, nodeData);
          nodeByKeyValue.remove(keyValue);
        }
        for (i = -1; ++i < n; ) {
          if (nodeByKeyValue.has(keyValues[i])) {
            exitNodes[i] = group[i];
          }
        }
      } else {
        for (i = -1; ++i < n0; ) {
          node = group[i];
          nodeData = groupData[i];
          if (node) {
            node.__data__ = nodeData;
            updateNodes[i] = node;
          } else {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
        }
        for (;i < m; ++i) {
          enterNodes[i] = d3_selection_dataNode(groupData[i]);
        }
        for (;i < n; ++i) {
          exitNodes[i] = group[i];
        }
      }
      enterNodes.update = updateNodes;
      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
      enter.push(enterNodes);
      update.push(updateNodes);
      exit.push(exitNodes);
    }
    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
    if (typeof value === "function") {
      while (++i < n) {
        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
      }
    } else {
      while (++i < n) {
        bind(group = this[i], value);
      }
    }
    update.enter = function() {
      return enter;
    };
    update.exit = function() {
      return exit;
    };
    return update;
  };
  function d3_selection_dataNode(data) {
    return {
      __data__: data
    };
  }
  d3_selectionPrototype.datum = function(value) {
    return arguments.length ? this.property("__data__", value) : this.property("__data__");
  };
  d3_selectionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_filter(selector) {
    return function() {
      return d3_selectMatches(this, selector);
    };
  }
  d3_selectionPrototype.order = function() {
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
        if (node = group[i]) {
          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  };
  d3_selectionPrototype.sort = function(comparator) {
    comparator = d3_selection_sortComparator.apply(this, arguments);
    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
    return this.order();
  };
  function d3_selection_sortComparator(comparator) {
    if (!arguments.length) comparator = d3.ascending;
    return function(a, b) {
      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
    };
  }
  d3_selectionPrototype.each = function(callback) {
    return d3_selection_each(this, function(node, i, j) {
      callback.call(node, node.__data__, i, j);
    });
  };
  function d3_selection_each(groups, callback) {
    for (var j = 0, m = groups.length; j < m; j++) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
        if (node = group[i]) callback(node, i, j);
      }
    }
    return groups;
  }
  d3_selectionPrototype.call = function(callback) {
    var args = d3_array(arguments);
    callback.apply(args[0] = this, args);
    return this;
  };
  d3_selectionPrototype.empty = function() {
    return !this.node();
  };
  d3_selectionPrototype.node = function() {
    for (var j = 0, m = this.length; j < m; j++) {
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        var node = group[i];
        if (node) return node;
      }
    }
    return null;
  };
  d3_selectionPrototype.size = function() {
    var n = 0;
    this.each(function() {
      ++n;
    });
    return n;
  };
  function d3_selection_enter(selection) {
    d3_subclass(selection, d3_selection_enterPrototype);
    return selection;
  }
  var d3_selection_enterPrototype = [];
  d3.selection.enter = d3_selection_enter;
  d3.selection.enter.prototype = d3_selection_enterPrototype;
  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
  d3_selection_enterPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, upgroup, group, node;
    for (var j = -1, m = this.length; ++j < m; ) {
      upgroup = (group = this[j]).update;
      subgroups.push(subgroup = []);
      subgroup.parentNode = group.parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
          subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  d3_selection_enterPrototype.insert = function(name, before) {
    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
    return d3_selectionPrototype.insert.call(this, name, before);
  };
  function d3_selection_enterInsertBefore(enter) {
    var i0, j0;
    return function(d, i, j) {
      var group = enter[j].update, n = group.length, node;
      if (j != j0) j0 = j, i0 = 0;
      if (i >= i0) i0 = i + 1;
      while (!(node = group[i0]) && ++i0 < n) ;
      return node;
    };
  }
  d3_selectionPrototype.transition = function() {
    var id = d3_transitionInheritId || ++d3_transitionId, subgroups = [], subgroup, node, transition = d3_transitionInherit || {
      time: Date.now(),
      ease: d3_ease_cubicInOut,
      delay: 0,
      duration: 250
    };
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) d3_transitionNode(node, i, id, transition);
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, id);
  };
  d3_selectionPrototype.interrupt = function() {
    return this.each(d3_selection_interrupt);
  };
  function d3_selection_interrupt() {
    var lock = this.__transition__;
    if (lock) ++lock.active;
  }
  d3.select = function(node) {
    var group = [ typeof node === "string" ? d3_select(node, d3_document) : node ];
    group.parentNode = d3_documentElement;
    return d3_selection([ group ]);
  };
  d3.selectAll = function(nodes) {
    var group = d3_array(typeof nodes === "string" ? d3_selectAll(nodes, d3_document) : nodes);
    group.parentNode = d3_documentElement;
    return d3_selection([ group ]);
  };
  var d3_selectionRoot = d3.select(d3_documentElement);
  d3_selectionPrototype.on = function(type, listener, capture) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof type !== "string") {
        if (n < 2) listener = false;
        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
        return this;
      }
      if (n < 2) return (n = this.node()["__on" + type]) && n._;
      capture = false;
    }
    return this.each(d3_selection_on(type, listener, capture));
  };
  function d3_selection_on(type, listener, capture) {
    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
    if (i > 0) type = type.substring(0, i);
    var filter = d3_selection_onFilters.get(type);
    if (filter) type = filter, wrap = d3_selection_onFilter;
    function onRemove() {
      var l = this[name];
      if (l) {
        this.removeEventListener(type, l, l.$);
        delete this[name];
      }
    }
    function onAdd() {
      var l = wrap(listener, d3_array(arguments));
      onRemove.call(this);
      this.addEventListener(type, this[name] = l, l.$ = capture);
      l._ = listener;
    }
    function removeAll() {
      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
      for (var name in this) {
        if (match = name.match(re)) {
          var l = this[name];
          this.removeEventListener(match[1], l, l.$);
          delete this[name];
        }
      }
    }
    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
  }
  var d3_selection_onFilters = d3.map({
    mouseenter: "mouseover",
    mouseleave: "mouseout"
  });
  d3_selection_onFilters.forEach(function(k) {
    if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
  });
  function d3_selection_onListener(listener, argumentz) {
    return function(e) {
      var o = d3.event;
      d3.event = e;
      argumentz[0] = this.__data__;
      try {
        listener.apply(this, argumentz);
      } finally {
        d3.event = o;
      }
    };
  }
  function d3_selection_onFilter(listener, argumentz) {
    var l = d3_selection_onListener(listener, argumentz);
    return function(e) {
      var target = this, related = e.relatedTarget;
      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
        l.call(target, e);
      }
    };
  }
  var d3_event_dragSelect = "onselectstart" in d3_document ? null : d3_vendorSymbol(d3_documentElement.style, "userSelect"), d3_event_dragId = 0;
  function d3_event_dragSuppress() {
    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
    if (d3_event_dragSelect) {
      var style = d3_documentElement.style, select = style[d3_event_dragSelect];
      style[d3_event_dragSelect] = "none";
    }
    return function(suppressClick) {
      w.on(name, null);
      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
      if (suppressClick) {
        function off() {
          w.on(click, null);
        }
        w.on(click, function() {
          d3_eventPreventDefault();
          off();
        }, true);
        setTimeout(off, 0);
      }
    };
  }
  d3.mouse = function(container) {
    return d3_mousePoint(container, d3_eventSource());
  };
  var d3_mouse_bug44083 = /WebKit/.test(d3_window.navigator.userAgent) ? -1 : 0;
  function d3_mousePoint(container, e) {
    if (e.changedTouches) e = e.changedTouches[0];
    var svg = container.ownerSVGElement || container;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      if (d3_mouse_bug44083 < 0 && (d3_window.scrollX || d3_window.scrollY)) {
        svg = d3.select("body").append("svg").style({
          position: "absolute",
          top: 0,
          left: 0,
          margin: 0,
          padding: 0,
          border: "none"
        }, "important");
        var ctm = svg[0][0].getScreenCTM();
        d3_mouse_bug44083 = !(ctm.f || ctm.e);
        svg.remove();
      }
      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
      point.y = e.clientY;
      point = point.matrixTransform(container.getScreenCTM().inverse());
      return [ point.x, point.y ];
    }
    var rect = container.getBoundingClientRect();
    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
  }
  d3.touches = function(container, touches) {
    if (arguments.length < 2) touches = d3_eventSource().touches;
    return touches ? d3_array(touches).map(function(touch) {
      var point = d3_mousePoint(container, touch);
      point.identifier = touch.identifier;
      return point;
    }) : [];
  };
  d3.behavior.drag = function() {
    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, "mousemove", "mouseup"), touchstart = dragstart(touchid, touchposition, "touchmove", "touchend");
    function drag() {
      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
    }
    function touchid() {
      return d3.event.changedTouches[0].identifier;
    }
    function touchposition(parent, id) {
      return d3.touches(parent).filter(function(p) {
        return p.identifier === id;
      })[0];
    }
    function dragstart(id, position, move, end) {
      return function() {
        var target = this, parent = target.parentNode, event_ = event.of(target, arguments), eventTarget = d3.event.target, eventId = id(), drag = eventId == null ? "drag" : "drag-" + eventId, origin_ = position(parent, eventId), dragged = 0, offset, w = d3.select(d3_window).on(move + "." + drag, moved).on(end + "." + drag, ended), dragRestore = d3_event_dragSuppress();
        if (origin) {
          offset = origin.apply(target, arguments);
          offset = [ offset.x - origin_[0], offset.y - origin_[1] ];
        } else {
          offset = [ 0, 0 ];
        }
        event_({
          type: "dragstart"
        });
        function moved() {
          var p = position(parent, eventId), dx = p[0] - origin_[0], dy = p[1] - origin_[1];
          dragged |= dx | dy;
          origin_ = p;
          event_({
            type: "drag",
            x: p[0] + offset[0],
            y: p[1] + offset[1],
            dx: dx,
            dy: dy
          });
        }
        function ended() {
          w.on(move + "." + drag, null).on(end + "." + drag, null);
          dragRestore(dragged && d3.event.target === eventTarget);
          event_({
            type: "dragend"
          });
        }
      };
    }
    drag.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return drag;
    };
    return d3.rebind(drag, event, "on");
  };
  var π = Math.PI, τ = 2 * π, halfπ = π / 2, ε = 1e-6, ε2 = ε * ε, d3_radians = π / 180, d3_degrees = 180 / π;
  function d3_sgn(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  }
  function d3_acos(x) {
    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
  }
  function d3_asin(x) {
    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
  }
  function d3_sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }
  function d3_cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }
  function d3_tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }
  function d3_haversin(x) {
    return (x = Math.sin(x / 2)) * x;
  }
  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
  d3.interpolateZoom = function(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2];
    var dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1), dr = r1 - r0, S = (dr || Math.log(w1 / w0)) / ρ;
    function interpolate(t) {
      var s = t * S;
      if (dr) {
        var coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
      }
      return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * s) ];
    }
    interpolate.duration = S * 1e3;
    return interpolate;
  };
  d3.behavior.zoom = function() {
    var view = {
      x: 0,
      y: 0,
      k: 1
    }, translate0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
    function zoom(g) {
      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on(mousemove, mousewheelreset).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
    }
    zoom.event = function(g) {
      g.each(function() {
        var event_ = event.of(this, arguments), view1 = view;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.zoom", function() {
            view = this.__chart__ || {
              x: 0,
              y: 0,
              k: 1
            };
            zoomstarted(event_);
          }).tween("zoom:zoom", function() {
            var dx = size[0], dy = size[1], cx = dx / 2, cy = dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
            return function(t) {
              var l = i(t), k = dx / l[2];
              this.__chart__ = view = {
                x: cx - l[0] * k,
                y: cy - l[1] * k,
                k: k
              };
              zoomed(event_);
            };
          }).each("end.zoom", function() {
            zoomended(event_);
          });
        } else {
          this.__chart__ = view;
          zoomstarted(event_);
          zoomed(event_);
          zoomended(event_);
        }
      });
    };
    zoom.translate = function(_) {
      if (!arguments.length) return [ view.x, view.y ];
      view = {
        x: +_[0],
        y: +_[1],
        k: view.k
      };
      rescale();
      return zoom;
    };
    zoom.scale = function(_) {
      if (!arguments.length) return view.k;
      view = {
        x: view.x,
        y: view.y,
        k: +_
      };
      rescale();
      return zoom;
    };
    zoom.scaleExtent = function(_) {
      if (!arguments.length) return scaleExtent;
      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.center = function(_) {
      if (!arguments.length) return center;
      center = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.size = function(_) {
      if (!arguments.length) return size;
      size = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.x = function(z) {
      if (!arguments.length) return x1;
      x1 = z;
      x0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    zoom.y = function(z) {
      if (!arguments.length) return y1;
      y1 = z;
      y0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    function location(p) {
      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
    }
    function point(l) {
      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
    }
    function scaleTo(s) {
      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
    }
    function translateTo(p, l) {
      l = point(l);
      view.x += p[0] - l[0];
      view.y += p[1] - l[1];
    }
    function rescale() {
      if (x1) x1.domain(x0.range().map(function(x) {
        return (x - view.x) / view.k;
      }).map(x0.invert));
      if (y1) y1.domain(y0.range().map(function(y) {
        return (y - view.y) / view.k;
      }).map(y0.invert));
    }
    function zoomstarted(event) {
      event({
        type: "zoomstart"
      });
    }
    function zoomed(event) {
      rescale();
      event({
        type: "zoom",
        scale: view.k,
        translate: [ view.x, view.y ]
      });
    }
    function zoomended(event) {
      event({
        type: "zoomend"
      });
    }
    function mousedowned() {
      var target = this, event_ = event.of(target, arguments), eventTarget = d3.event.target, dragged = 0, w = d3.select(d3_window).on(mousemove, moved).on(mouseup, ended), l = location(d3.mouse(target)), dragRestore = d3_event_dragSuppress();
      d3_selection_interrupt.call(target);
      zoomstarted(event_);
      function moved() {
        dragged = 1;
        translateTo(d3.mouse(target), l);
        zoomed(event_);
      }
      function ended() {
        w.on(mousemove, d3_window === target ? mousewheelreset : null).on(mouseup, null);
        dragRestore(dragged && d3.event.target === eventTarget);
        zoomended(event_);
      }
    }
    function touchstarted() {
      var target = this, event_ = event.of(target, arguments), locations0 = {}, distance0 = 0, scale0, eventId = d3.event.changedTouches[0].identifier, touchmove = "touchmove.zoom-" + eventId, touchend = "touchend.zoom-" + eventId, w = d3.select(d3_window).on(touchmove, moved).on(touchend, ended), t = d3.select(target).on(mousedown, null).on(touchstart, started), dragRestore = d3_event_dragSuppress();
      d3_selection_interrupt.call(target);
      started();
      zoomstarted(event_);
      function relocate() {
        var touches = d3.touches(target);
        scale0 = view.k;
        touches.forEach(function(t) {
          if (t.identifier in locations0) locations0[t.identifier] = location(t);
        });
        return touches;
      }
      function started() {
        var changed = d3.event.changedTouches;
        for (var i = 0, n = changed.length; i < n; ++i) {
          locations0[changed[i].identifier] = null;
        }
        var touches = relocate(), now = Date.now();
        if (touches.length === 1) {
          if (now - touchtime < 500) {
            var p = touches[0], l = locations0[p.identifier];
            scaleTo(view.k * 2);
            translateTo(p, l);
            d3_eventPreventDefault();
            zoomed(event_);
          }
          touchtime = now;
        } else if (touches.length > 1) {
          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
          distance0 = dx * dx + dy * dy;
        }
      }
      function moved() {
        var touches = d3.touches(target), p0, l0, p1, l1;
        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
          p1 = touches[i];
          if (l1 = locations0[p1.identifier]) {
            if (l0) break;
            p0 = p1, l0 = l1;
          }
        }
        if (l1) {
          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
          scaleTo(scale1 * scale0);
        }
        touchtime = null;
        translateTo(p0, l0);
        zoomed(event_);
      }
      function ended() {
        if (d3.event.touches.length) {
          var changed = d3.event.changedTouches;
          for (var i = 0, n = changed.length; i < n; ++i) {
            delete locations0[changed[i].identifier];
          }
          for (var identifier in locations0) {
            return void relocate();
          }
        }
        w.on(touchmove, null).on(touchend, null);
        t.on(mousedown, mousedowned).on(touchstart, touchstarted);
        dragRestore();
        zoomended(event_);
      }
    }
    function mousewheeled() {
      var event_ = event.of(this, arguments);
      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), 
      zoomstarted(event_);
      mousewheelTimer = setTimeout(function() {
        mousewheelTimer = null;
        zoomended(event_);
      }, 50);
      d3_eventPreventDefault();
      var point = center || d3.mouse(this);
      if (!translate0) translate0 = location(point);
      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
      translateTo(point, translate0);
      zoomed(event_);
    }
    function mousewheelreset() {
      translate0 = null;
    }
    function dblclicked() {
      var event_ = event.of(this, arguments), p = d3.mouse(this), l = location(p), k = Math.log(view.k) / Math.LN2;
      zoomstarted(event_);
      scaleTo(Math.pow(2, d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1));
      translateTo(p, l);
      zoomed(event_);
      zoomended(event_);
    }
    return d3.rebind(zoom, event, "on");
  };
  var d3_behavior_zoomInfinity = [ 0, Infinity ];
  var d3_behavior_zoomDelta, d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
    return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
  }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
    return d3.event.wheelDelta;
  }, "mousewheel") : (d3_behavior_zoomDelta = function() {
    return -d3.event.detail;
  }, "MozMousePixelScroll");
  function d3_Color() {}
  d3_Color.prototype.toString = function() {
    return this.rgb() + "";
  };
  d3.hsl = function(h, s, l) {
    return arguments.length === 1 ? h instanceof d3_Hsl ? d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : d3_hsl(+h, +s, +l);
  };
  function d3_hsl(h, s, l) {
    return new d3_Hsl(h, s, l);
  }
  function d3_Hsl(h, s, l) {
    this.h = h;
    this.s = s;
    this.l = l;
  }
  var d3_hslPrototype = d3_Hsl.prototype = new d3_Color();
  d3_hslPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return d3_hsl(this.h, this.s, this.l / k);
  };
  d3_hslPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return d3_hsl(this.h, this.s, k * this.l);
  };
  d3_hslPrototype.rgb = function() {
    return d3_hsl_rgb(this.h, this.s, this.l);
  };
  function d3_hsl_rgb(h, s, l) {
    var m1, m2;
    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
    l = l < 0 ? 0 : l > 1 ? 1 : l;
    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
    m1 = 2 * l - m2;
    function v(h) {
      if (h > 360) h -= 360; else if (h < 0) h += 360;
      if (h < 60) return m1 + (m2 - m1) * h / 60;
      if (h < 180) return m2;
      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
      return m1;
    }
    function vv(h) {
      return Math.round(v(h) * 255);
    }
    return d3_rgb(vv(h + 120), vv(h), vv(h - 120));
  }
  d3.hcl = function(h, c, l) {
    return arguments.length === 1 ? h instanceof d3_Hcl ? d3_hcl(h.h, h.c, h.l) : h instanceof d3_Lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : d3_hcl(+h, +c, +l);
  };
  function d3_hcl(h, c, l) {
    return new d3_Hcl(h, c, l);
  }
  function d3_Hcl(h, c, l) {
    this.h = h;
    this.c = c;
    this.l = l;
  }
  var d3_hclPrototype = d3_Hcl.prototype = new d3_Color();
  d3_hclPrototype.brighter = function(k) {
    return d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.darker = function(k) {
    return d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.rgb = function() {
    return d3_hcl_lab(this.h, this.c, this.l).rgb();
  };
  function d3_hcl_lab(h, c, l) {
    if (isNaN(h)) h = 0;
    if (isNaN(c)) c = 0;
    return d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
  }
  d3.lab = function(l, a, b) {
    return arguments.length === 1 ? l instanceof d3_Lab ? d3_lab(l.l, l.a, l.b) : l instanceof d3_Hcl ? d3_hcl_lab(l.l, l.c, l.h) : d3_rgb_lab((l = d3.rgb(l)).r, l.g, l.b) : d3_lab(+l, +a, +b);
  };
  function d3_lab(l, a, b) {
    return new d3_Lab(l, a, b);
  }
  function d3_Lab(l, a, b) {
    this.l = l;
    this.a = a;
    this.b = b;
  }
  var d3_lab_K = 18;
  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
  var d3_labPrototype = d3_Lab.prototype = new d3_Color();
  d3_labPrototype.brighter = function(k) {
    return d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.darker = function(k) {
    return d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.rgb = function() {
    return d3_lab_rgb(this.l, this.a, this.b);
  };
  function d3_lab_rgb(l, a, b) {
    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
    x = d3_lab_xyz(x) * d3_lab_X;
    y = d3_lab_xyz(y) * d3_lab_Y;
    z = d3_lab_xyz(z) * d3_lab_Z;
    return d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
  }
  function d3_lab_hcl(l, a, b) {
    return l > 0 ? d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : d3_hcl(NaN, NaN, l);
  }
  function d3_lab_xyz(x) {
    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
  }
  function d3_xyz_lab(x) {
    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
  }
  function d3_xyz_rgb(r) {
    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
  }
  d3.rgb = function(r, g, b) {
    return arguments.length === 1 ? r instanceof d3_Rgb ? d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : d3_rgb(~~r, ~~g, ~~b);
  };
  function d3_rgbNumber(value) {
    return d3_rgb(value >> 16, value >> 8 & 255, value & 255);
  }
  function d3_rgbString(value) {
    return d3_rgbNumber(value) + "";
  }
  function d3_rgb(r, g, b) {
    return new d3_Rgb(r, g, b);
  }
  function d3_Rgb(r, g, b) {
    this.r = r;
    this.g = g;
    this.b = b;
  }
  var d3_rgbPrototype = d3_Rgb.prototype = new d3_Color();
  d3_rgbPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    var r = this.r, g = this.g, b = this.b, i = 30;
    if (!r && !g && !b) return d3_rgb(i, i, i);
    if (r && r < i) r = i;
    if (g && g < i) g = i;
    if (b && b < i) b = i;
    return d3_rgb(Math.min(255, ~~(r / k)), Math.min(255, ~~(g / k)), Math.min(255, ~~(b / k)));
  };
  d3_rgbPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return d3_rgb(~~(k * this.r), ~~(k * this.g), ~~(k * this.b));
  };
  d3_rgbPrototype.hsl = function() {
    return d3_rgb_hsl(this.r, this.g, this.b);
  };
  d3_rgbPrototype.toString = function() {
    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
  };
  function d3_rgb_hex(v) {
    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
  }
  function d3_rgb_parse(format, rgb, hsl) {
    var r = 0, g = 0, b = 0, m1, m2, name;
    m1 = /([a-z]+)\((.*)\)/i.exec(format);
    if (m1) {
      m2 = m1[2].split(",");
      switch (m1[1]) {
       case "hsl":
        {
          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
        }

       case "rgb":
        {
          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
        }
      }
    }
    if (name = d3_rgb_names.get(format)) return rgb(name.r, name.g, name.b);
    if (format != null && format.charAt(0) === "#") {
      if (format.length === 4) {
        r = format.charAt(1);
        r += r;
        g = format.charAt(2);
        g += g;
        b = format.charAt(3);
        b += b;
      } else if (format.length === 7) {
        r = format.substring(1, 3);
        g = format.substring(3, 5);
        b = format.substring(5, 7);
      }
      r = parseInt(r, 16);
      g = parseInt(g, 16);
      b = parseInt(b, 16);
    }
    return rgb(r, g, b);
  }
  function d3_rgb_hsl(r, g, b) {
    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
    if (d) {
      s = l < .5 ? d / (max + min) : d / (2 - max - min);
      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
      h *= 60;
    } else {
      h = NaN;
      s = l > 0 && l < 1 ? 0 : h;
    }
    return d3_hsl(h, s, l);
  }
  function d3_rgb_lab(r, g, b) {
    r = d3_rgb_xyz(r);
    g = d3_rgb_xyz(g);
    b = d3_rgb_xyz(b);
    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
  }
  function d3_rgb_xyz(r) {
    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
  }
  function d3_rgb_parseNumber(c) {
    var f = parseFloat(c);
    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
  }
  var d3_rgb_names = d3.map({
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  });
  d3_rgb_names.forEach(function(key, value) {
    d3_rgb_names.set(key, d3_rgbNumber(value));
  });
  function d3_functor(v) {
    return typeof v === "function" ? v : function() {
      return v;
    };
  }
  d3.functor = d3_functor;
  function d3_identity(d) {
    return d;
  }
  d3.xhr = d3_xhrType(d3_identity);
  function d3_xhrType(response) {
    return function(url, mimeType, callback) {
      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
      mimeType = null;
      return d3_xhr(url, mimeType, response, callback);
    };
  }
  function d3_xhr(url, mimeType, response, callback) {
    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
    if (d3_window.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
      request.readyState > 3 && respond();
    };
    function respond() {
      var status = request.status, result;
      if (!status && request.responseText || status >= 200 && status < 300 || status === 304) {
        try {
          result = response.call(xhr, request);
        } catch (e) {
          dispatch.error.call(xhr, e);
          return;
        }
        dispatch.load.call(xhr, result);
      } else {
        dispatch.error.call(xhr, request);
      }
    }
    request.onprogress = function(event) {
      var o = d3.event;
      d3.event = event;
      try {
        dispatch.progress.call(xhr, request);
      } finally {
        d3.event = o;
      }
    };
    xhr.header = function(name, value) {
      name = (name + "").toLowerCase();
      if (arguments.length < 2) return headers[name];
      if (value == null) delete headers[name]; else headers[name] = value + "";
      return xhr;
    };
    xhr.mimeType = function(value) {
      if (!arguments.length) return mimeType;
      mimeType = value == null ? null : value + "";
      return xhr;
    };
    xhr.responseType = function(value) {
      if (!arguments.length) return responseType;
      responseType = value;
      return xhr;
    };
    xhr.response = function(value) {
      response = value;
      return xhr;
    };
    [ "get", "post" ].forEach(function(method) {
      xhr[method] = function() {
        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
      };
    });
    xhr.send = function(method, data, callback) {
      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
      request.open(method, url, true);
      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
      if (responseType != null) request.responseType = responseType;
      if (callback != null) xhr.on("error", callback).on("load", function(request) {
        callback(null, request);
      });
      dispatch.beforesend.call(xhr, request);
      request.send(data == null ? null : data);
      return xhr;
    };
    xhr.abort = function() {
      request.abort();
      return xhr;
    };
    d3.rebind(xhr, dispatch, "on");
    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
  }
  function d3_xhr_fixCallback(callback) {
    return callback.length === 1 ? function(error, request) {
      callback(error == null ? request : null);
    } : callback;
  }
  d3.dsv = function(delimiter, mimeType) {
    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
    function dsv(url, row, callback) {
      if (arguments.length < 3) callback = row, row = null;
      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
      xhr.row = function(_) {
        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
      };
      return xhr;
    }
    function response(request) {
      return dsv.parse(request.responseText);
    }
    function typedResponse(f) {
      return function(request) {
        return dsv.parse(request.responseText, f);
      };
    }
    dsv.parse = function(text, f) {
      var o;
      return dsv.parseRows(text, function(row, i) {
        if (o) return o(row, i - 1);
        var a = new Function("d", "return {" + row.map(function(name, i) {
          return JSON.stringify(name) + ": d[" + i + "]";
        }).join(",") + "}");
        o = f ? function(row, i) {
          return f(a(row), i);
        } : a;
      });
    };
    dsv.parseRows = function(text, f) {
      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
      function token() {
        if (I >= N) return EOF;
        if (eol) return eol = false, EOL;
        var j = I;
        if (text.charCodeAt(j) === 34) {
          var i = j;
          while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
              if (text.charCodeAt(i + 1) !== 34) break;
              ++i;
            }
          }
          I = i + 2;
          var c = text.charCodeAt(i + 1);
          if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10) ++I;
          } else if (c === 10) {
            eol = true;
          }
          return text.substring(j + 1, i).replace(/""/g, '"');
        }
        while (I < N) {
          var c = text.charCodeAt(I++), k = 1;
          if (c === 10) eol = true; else if (c === 13) {
            eol = true;
            if (text.charCodeAt(I) === 10) ++I, ++k;
          } else if (c !== delimiterCode) continue;
          return text.substring(j, I - k);
        }
        return text.substring(j);
      }
      while ((t = token()) !== EOF) {
        var a = [];
        while (t !== EOL && t !== EOF) {
          a.push(t);
          t = token();
        }
        if (f && !(a = f(a, n++))) continue;
        rows.push(a);
      }
      return rows;
    };
    dsv.format = function(rows) {
      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
      var fieldSet = new d3_Set(), fields = [];
      rows.forEach(function(row) {
        for (var field in row) {
          if (!fieldSet.has(field)) {
            fields.push(fieldSet.add(field));
          }
        }
      });
      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
        return fields.map(function(field) {
          return formatValue(row[field]);
        }).join(delimiter);
      })).join("\n");
    };
    dsv.formatRows = function(rows) {
      return rows.map(formatRow).join("\n");
    };
    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }
    function formatValue(text) {
      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
    }
    return dsv;
  };
  d3.csv = d3.dsv(",", "text/csv");
  d3.tsv = d3.dsv("	", "text/tab-separated-values");
  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_active, d3_timer_frame = d3_window[d3_vendorSymbol(d3_window, "requestAnimationFrame")] || function(callback) {
    setTimeout(callback, 17);
  };
  d3.timer = function(callback, delay, then) {
    var n = arguments.length;
    if (n < 2) delay = 0;
    if (n < 3) then = Date.now();
    var time = then + delay, timer = {
      c: callback,
      t: time,
      f: false,
      n: null
    };
    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
    d3_timer_queueTail = timer;
    if (!d3_timer_interval) {
      d3_timer_timeout = clearTimeout(d3_timer_timeout);
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  };
  function d3_timer_step() {
    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
    if (delay > 24) {
      if (isFinite(delay)) {
        clearTimeout(d3_timer_timeout);
        d3_timer_timeout = setTimeout(d3_timer_step, delay);
      }
      d3_timer_interval = 0;
    } else {
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  }
  d3.timer.flush = function() {
    d3_timer_mark();
    d3_timer_sweep();
  };
  function d3_timer_mark() {
    var now = Date.now();
    d3_timer_active = d3_timer_queueHead;
    while (d3_timer_active) {
      if (now >= d3_timer_active.t) d3_timer_active.f = d3_timer_active.c(now - d3_timer_active.t);
      d3_timer_active = d3_timer_active.n;
    }
    return now;
  }
  function d3_timer_sweep() {
    var t0, t1 = d3_timer_queueHead, time = Infinity;
    while (t1) {
      if (t1.f) {
        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
      } else {
        if (t1.t < time) time = t1.t;
        t1 = (t0 = t1).n;
      }
    }
    d3_timer_queueTail = t0;
    return time;
  }
  var d3_format_decimalPoint = ".", d3_format_thousandsSeparator = ",", d3_format_grouping = [ 3, 3 ], d3_format_currencySymbol = "$";
  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
  d3.formatPrefix = function(value, precision) {
    var i = 0;
    if (value) {
      if (value < 0) value *= -1;
      if (precision) value = d3.round(value, d3_format_precision(value, precision));
      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
      i = Math.max(-24, Math.min(24, Math.floor((i <= 0 ? i + 1 : i - 1) / 3) * 3));
    }
    return d3_formatPrefixes[8 + i / 3];
  };
  function d3_formatPrefix(d, i) {
    var k = Math.pow(10, abs(8 - i) * 3);
    return {
      scale: i > 8 ? function(d) {
        return d / k;
      } : function(d) {
        return d * k;
      },
      symbol: d
    };
  }
  d3.round = function(x, n) {
    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
  };
  d3.format = function(specifier) {
    var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, suffix = "", integer = false;
    if (precision) precision = +precision.substring(1);
    if (zfill || fill === "0" && align === "=") {
      zfill = fill = "0";
      align = "=";
      if (comma) width -= Math.floor((width - 1) / 4);
    }
    switch (type) {
     case "n":
      comma = true;
      type = "g";
      break;

     case "%":
      scale = 100;
      suffix = "%";
      type = "f";
      break;

     case "p":
      scale = 100;
      suffix = "%";
      type = "r";
      break;

     case "b":
     case "o":
     case "x":
     case "X":
      if (symbol === "#") symbol = "0" + type.toLowerCase();

     case "c":
     case "d":
      integer = true;
      precision = 0;
      break;

     case "s":
      scale = -1;
      type = "r";
      break;
    }
    if (symbol === "#") symbol = ""; else if (symbol === "$") symbol = d3_format_currencySymbol;
    if (type == "r" && !precision) type = "g";
    if (precision != null) {
      if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
    }
    type = d3_format_types.get(type) || d3_format_typeDefault;
    var zcomma = zfill && comma;
    return function(value) {
      if (integer && value % 1) return "";
      var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign;
      if (scale < 0) {
        var prefix = d3.formatPrefix(value, precision);
        value = prefix.scale(value);
        suffix = prefix.symbol;
      } else {
        value *= scale;
      }
      value = type(value, precision);
      var i = value.lastIndexOf("."), before = i < 0 ? value : value.substring(0, i), after = i < 0 ? "" : d3_format_decimalPoint + value.substring(i + 1);
      if (!zfill && comma) before = d3_format_group(before);
      var length = symbol.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
      if (zcomma) before = d3_format_group(padding + before);
      negative += symbol;
      value = before + after;
      return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + suffix;
    };
  };
  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
  var d3_format_types = d3.map({
    b: function(x) {
      return x.toString(2);
    },
    c: function(x) {
      return String.fromCharCode(x);
    },
    o: function(x) {
      return x.toString(8);
    },
    x: function(x) {
      return x.toString(16);
    },
    X: function(x) {
      return x.toString(16).toUpperCase();
    },
    g: function(x, p) {
      return x.toPrecision(p);
    },
    e: function(x, p) {
      return x.toExponential(p);
    },
    f: function(x, p) {
      return x.toFixed(p);
    },
    r: function(x, p) {
      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
    }
  });
  function d3_format_precision(x, p) {
    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
  }
  function d3_format_typeDefault(x) {
    return x + "";
  }
  var d3_format_group = d3_identity;
  if (d3_format_grouping) {
    var d3_format_groupingLength = d3_format_grouping.length;
    d3_format_group = function(value) {
      var i = value.length, t = [], j = 0, g = d3_format_grouping[0];
      while (i > 0 && g > 0) {
        t.push(value.substring(i -= g, i + g));
        g = d3_format_grouping[j = (j + 1) % d3_format_groupingLength];
      }
      return t.reverse().join(d3_format_thousandsSeparator);
    };
  }
  d3.geo = {};
  function d3_adder() {}
  d3_adder.prototype = {
    s: 0,
    t: 0,
    add: function(y) {
      d3_adderSum(y, this.t, d3_adderTemp);
      d3_adderSum(d3_adderTemp.s, this.s, this);
      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
    },
    reset: function() {
      this.s = this.t = 0;
    },
    valueOf: function() {
      return this.s;
    }
  };
  var d3_adderTemp = new d3_adder();
  function d3_adderSum(a, b, o) {
    var x = o.s = a + b, bv = x - a, av = x - bv;
    o.t = a - av + (b - bv);
  }
  d3.geo.stream = function(object, listener) {
    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
      d3_geo_streamObjectType[object.type](object, listener);
    } else {
      d3_geo_streamGeometry(object, listener);
    }
  };
  function d3_geo_streamGeometry(geometry, listener) {
    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
      d3_geo_streamGeometryType[geometry.type](geometry, listener);
    }
  }
  var d3_geo_streamObjectType = {
    Feature: function(feature, listener) {
      d3_geo_streamGeometry(feature.geometry, listener);
    },
    FeatureCollection: function(object, listener) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
    }
  };
  var d3_geo_streamGeometryType = {
    Sphere: function(object, listener) {
      listener.sphere();
    },
    Point: function(object, listener) {
      object = object.coordinates;
      listener.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
    },
    LineString: function(object, listener) {
      d3_geo_streamLine(object.coordinates, listener, 0);
    },
    MultiLineString: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
    },
    Polygon: function(object, listener) {
      d3_geo_streamPolygon(object.coordinates, listener);
    },
    MultiPolygon: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
    },
    GeometryCollection: function(object, listener) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
    }
  };
  function d3_geo_streamLine(coordinates, listener, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    listener.lineStart();
    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
    listener.lineEnd();
  }
  function d3_geo_streamPolygon(coordinates, listener) {
    var i = -1, n = coordinates.length;
    listener.polygonStart();
    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
    listener.polygonEnd();
  }
  d3.geo.area = function(object) {
    d3_geo_areaSum = 0;
    d3.geo.stream(object, d3_geo_area);
    return d3_geo_areaSum;
  };
  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
  var d3_geo_area = {
    sphere: function() {
      d3_geo_areaSum += 4 * π;
    },
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_areaRingSum.reset();
      d3_geo_area.lineStart = d3_geo_areaRingStart;
    },
    polygonEnd: function() {
      var area = 2 * d3_geo_areaRingSum;
      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
    }
  };
  function d3_geo_areaRingStart() {
    var λ00, φ00, λ0, cosφ0, sinφ0;
    d3_geo_area.point = function(λ, φ) {
      d3_geo_area.point = nextPoint;
      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
      sinφ0 = Math.sin(φ);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      φ = φ * d3_radians / 2 + π / 4;
      var dλ = λ - λ0, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(dλ), v = k * Math.sin(dλ);
      d3_geo_areaRingSum.add(Math.atan2(v, u));
      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
    }
    d3_geo_area.lineEnd = function() {
      nextPoint(λ00, φ00);
    };
  }
  function d3_geo_cartesian(spherical) {
    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
  }
  function d3_geo_cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function d3_geo_cartesianCross(a, b) {
    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
  }
  function d3_geo_cartesianAdd(a, b) {
    a[0] += b[0];
    a[1] += b[1];
    a[2] += b[2];
  }
  function d3_geo_cartesianScale(vector, k) {
    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
  }
  function d3_geo_cartesianNormalize(d) {
    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l;
    d[1] /= l;
    d[2] /= l;
  }
  function d3_geo_spherical(cartesian) {
    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
  }
  function d3_geo_sphericalEqual(a, b) {
    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
  }
  d3.geo.bounds = function() {
    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
    var bound = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        bound.point = ringPoint;
        bound.lineStart = ringStart;
        bound.lineEnd = ringEnd;
        dλSum = 0;
        d3_geo_area.polygonStart();
      },
      polygonEnd: function() {
        d3_geo_area.polygonEnd();
        bound.point = point;
        bound.lineStart = lineStart;
        bound.lineEnd = lineEnd;
        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
        range[0] = λ0, range[1] = λ1;
      }
    };
    function point(λ, φ) {
      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
      if (φ < φ0) φ0 = φ;
      if (φ > φ1) φ1 = φ;
    }
    function linePoint(λ, φ) {
      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
      if (p0) {
        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
        d3_geo_cartesianNormalize(inflection);
        inflection = d3_geo_spherical(inflection);
        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = inflection[1] * d3_degrees;
          if (φi > φ1) φ1 = φi;
        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = -inflection[1] * d3_degrees;
          if (φi < φ0) φ0 = φi;
        } else {
          if (φ < φ0) φ0 = φ;
          if (φ > φ1) φ1 = φ;
        }
        if (antimeridian) {
          if (λ < λ_) {
            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
          } else {
            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
          }
        } else {
          if (λ1 >= λ0) {
            if (λ < λ0) λ0 = λ;
            if (λ > λ1) λ1 = λ;
          } else {
            if (λ > λ_) {
              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
            } else {
              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
            }
          }
        }
      } else {
        point(λ, φ);
      }
      p0 = p, λ_ = λ;
    }
    function lineStart() {
      bound.point = linePoint;
    }
    function lineEnd() {
      range[0] = λ0, range[1] = λ1;
      bound.point = point;
      p0 = null;
    }
    function ringPoint(λ, φ) {
      if (p0) {
        var dλ = λ - λ_;
        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
      } else λ__ = λ, φ__ = φ;
      d3_geo_area.point(λ, φ);
      linePoint(λ, φ);
    }
    function ringStart() {
      d3_geo_area.lineStart();
    }
    function ringEnd() {
      ringPoint(λ__, φ__);
      d3_geo_area.lineEnd();
      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
      range[0] = λ0, range[1] = λ1;
      p0 = null;
    }
    function angle(λ0, λ1) {
      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
    }
    function compareRanges(a, b) {
      return a[0] - b[0];
    }
    function withinRange(x, range) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }
    return function(feature) {
      φ1 = λ1 = -(λ0 = φ0 = Infinity);
      ranges = [];
      d3.geo.stream(feature, bound);
      var n = ranges.length;
      if (n) {
        ranges.sort(compareRanges);
        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
          b = ranges[i];
          if (withinRange(b[0], a) || withinRange(b[1], a)) {
            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }
        var best = -Infinity, dλ;
        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
          b = merged[i];
          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
        }
      }
      ranges = range = null;
      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
    };
  }();
  d3.geo.centroid = function(object) {
    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
    d3.geo.stream(object, d3_geo_centroid);
    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
    if (m < ε2) {
      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
      m = x * x + y * y + z * z;
      if (m < ε2) return [ NaN, NaN ];
    }
    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
  };
  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
  var d3_geo_centroid = {
    sphere: d3_noop,
    point: d3_geo_centroidPoint,
    lineStart: d3_geo_centroidLineStart,
    lineEnd: d3_geo_centroidLineEnd,
    polygonStart: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
    }
  };
  function d3_geo_centroidPoint(λ, φ) {
    λ *= d3_radians;
    var cosφ = Math.cos(φ *= d3_radians);
    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
  }
  function d3_geo_centroidPointXYZ(x, y, z) {
    ++d3_geo_centroidW0;
    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
  }
  function d3_geo_centroidLineStart() {
    var x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroid.point = nextPoint;
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_centroidLineEnd() {
    d3_geo_centroid.point = d3_geo_centroidPoint;
  }
  function d3_geo_centroidRingStart() {
    var λ00, φ00, x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ00 = λ, φ00 = φ;
      d3_geo_centroid.point = nextPoint;
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    d3_geo_centroid.lineEnd = function() {
      nextPoint(λ00, φ00);
      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
      d3_geo_centroid.point = d3_geo_centroidPoint;
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
      d3_geo_centroidX2 += v * cx;
      d3_geo_centroidY2 += v * cy;
      d3_geo_centroidZ2 += v * cz;
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_true() {
    return true;
  }
  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
    var subject = [], clip = [];
    segments.forEach(function(segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n, p0 = segment[0], p1 = segment[n];
      if (d3_geo_sphericalEqual(p0, p1)) {
        listener.lineStart();
        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
        listener.lineEnd();
        return;
      }
      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
      a.o = b;
      subject.push(a);
      clip.push(b);
      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
      a.o = b;
      subject.push(a);
      clip.push(b);
    });
    clip.sort(compare);
    d3_geo_clipPolygonLinkCircular(subject);
    d3_geo_clipPolygonLinkCircular(clip);
    if (!subject.length) return;
    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
      clip[i].e = entry = !entry;
    }
    var start = subject[0], points, point;
    while (1) {
      var current = start, isSubject = true;
      while (current.v) if ((current = current.n) === start) return;
      points = current.z;
      listener.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.n.x, 1, listener);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.p.x, -1, listener);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      listener.lineEnd();
    }
  }
  function d3_geo_clipPolygonLinkCircular(array) {
    if (!(n = array.length)) return;
    var n, i = 0, a = array[0], b;
    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }
    a.n = b = array[0];
    b.p = a;
  }
  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other;
    this.e = entry;
    this.v = false;
    this.n = this.p = null;
  }
  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
    return function(rotate, listener) {
      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
          listener.polygonStart();
        },
        polygonEnd: function() {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = d3.merge(segments);
          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
          if (segments.length) {
            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
          } else if (clipStartInside) {
            listener.lineStart();
            interpolate(null, null, 1, listener);
            listener.lineEnd();
          }
          listener.polygonEnd();
          segments = polygon = null;
        },
        sphere: function() {
          listener.polygonStart();
          listener.lineStart();
          interpolate(null, null, 1, listener);
          listener.lineEnd();
          listener.polygonEnd();
        }
      };
      function point(λ, φ) {
        var point = rotate(λ, φ);
        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
      }
      function pointLine(λ, φ) {
        var point = rotate(λ, φ);
        line.point(point[0], point[1]);
      }
      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }
      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }
      var segments;
      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygon, ring;
      function pointRing(λ, φ) {
        ring.push([ λ, φ ]);
        var point = rotate(λ, φ);
        ringListener.point(point[0], point[1]);
      }
      function ringStart() {
        ringListener.lineStart();
        ring = [];
      }
      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringListener.lineEnd();
        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n) return;
        if (clean & 1) {
          segment = ringSegments[0];
          var n = segment.length - 1, i = -1, point;
          listener.lineStart();
          while (++i < n) listener.point((point = segment[i])[0], point[1]);
          listener.lineEnd();
          return;
        }
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
      }
      return clip;
    };
  }
  function d3_geo_clipSegmentLength1(segment) {
    return segment.length > 1;
  }
  function d3_geo_clipBufferListener() {
    var lines = [], line;
    return {
      lineStart: function() {
        lines.push(line = []);
      },
      point: function(λ, φ) {
        line.push([ λ, φ ]);
      },
      lineEnd: d3_noop,
      buffer: function() {
        var buffer = lines;
        lines = [];
        line = null;
        return buffer;
      },
      rejoin: function() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      }
    };
  }
  function d3_geo_clipSort(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
  }
  function d3_geo_pointInPolygon(point, polygon) {
    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
    d3_geo_areaRingSum.reset();
    for (var i = 0, n = polygon.length; i < n; ++i) {
      var ring = polygon[i], m = ring.length;
      if (!m) continue;
      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
      while (true) {
        if (j === m) j = 0;
        point = ring[j];
        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, antimeridian = abs(dλ) > π, k = sinφ0 * sinφ;
        d3_geo_areaRingSum.add(Math.atan2(k * Math.sin(dλ), cosφ0 * cosφ + k * Math.cos(dλ)));
        polarAngle += antimeridian ? dλ + (dλ >= 0 ? τ : -τ) : dλ;
        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
          d3_geo_cartesianNormalize(arc);
          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
          d3_geo_cartesianNormalize(intersection);
          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
          }
        }
        if (!j++) break;
        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
      }
    }
    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1;
  }
  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
  function d3_geo_clipAntimeridianLine(listener) {
    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
    return {
      lineStart: function() {
        listener.lineStart();
        clean = 1;
      },
      point: function(λ1, φ1) {
        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
        if (abs(dλ - π) < ε) {
          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          listener.point(λ1, φ0);
          clean = 0;
        } else if (sλ0 !== sλ1 && dλ >= π) {
          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          clean = 0;
        }
        listener.point(λ0 = λ1, φ0 = φ1);
        sλ0 = sλ1;
      },
      lineEnd: function() {
        listener.lineEnd();
        λ0 = φ0 = NaN;
      },
      clean: function() {
        return 2 - clean;
      }
    };
  }
  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
  }
  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
    var φ;
    if (from == null) {
      φ = direction * halfπ;
      listener.point(-π, φ);
      listener.point(0, φ);
      listener.point(π, φ);
      listener.point(π, 0);
      listener.point(π, -φ);
      listener.point(0, -φ);
      listener.point(-π, -φ);
      listener.point(-π, 0);
      listener.point(-π, φ);
    } else if (abs(from[0] - to[0]) > ε) {
      var s = from[0] < to[0] ? π : -π;
      φ = direction * s / 2;
      listener.point(-s, φ);
      listener.point(0, φ);
      listener.point(s, φ);
    } else {
      listener.point(to[0], to[1]);
    }
  }
  function d3_geo_clipCircle(radius) {
    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
    function visible(λ, φ) {
      return Math.cos(λ) * Math.cos(φ) > cr;
    }
    function clipLine(listener) {
      var point0, c0, v0, v00, clean;
      return {
        lineStart: function() {
          v00 = v0 = false;
          clean = 1;
        },
        point: function(λ, φ) {
          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
          if (!point0 && (v00 = v0 = v)) listener.lineStart();
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
              point1[0] += ε;
              point1[1] += ε;
              v = visible(point1[0], point1[1]);
            }
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              listener.lineStart();
              point2 = intersect(point1, point0);
              listener.point(point2[0], point2[1]);
            } else {
              point2 = intersect(point0, point1);
              listener.point(point2[0], point2[1]);
              listener.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
              } else {
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
              }
            }
          }
          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
            listener.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function() {
          if (v0) listener.lineEnd();
          point0 = null;
        },
        clean: function() {
          return clean | (v00 && v0) << 1;
        }
      };
    }
    function intersect(a, b, two) {
      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
      if (!determinant) return !two && a;
      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
      d3_geo_cartesianAdd(A, B);
      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
      if (t2 < 0) return;
      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
      d3_geo_cartesianAdd(q, A);
      q = d3_geo_spherical(q);
      if (!two) return q;
      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
        d3_geo_cartesianAdd(q1, A);
        return [ q, d3_geo_spherical(q1) ];
      }
    }
    function code(λ, φ) {
      var r = smallRadius ? radius : π - radius, code = 0;
      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
      return code;
    }
  }
  function d3_geom_clipLine(x0, y0, x1, y1) {
    return function(line) {
      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
      r = x0 - ax;
      if (!dx && r > 0) return;
      r /= dx;
      if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = x1 - ax;
      if (!dx && r < 0) return;
      r /= dx;
      if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      r = y0 - ay;
      if (!dy && r > 0) return;
      r /= dy;
      if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = y1 - ay;
      if (!dy && r < 0) return;
      r /= dy;
      if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      if (t0 > 0) line.a = {
        x: ax + t0 * dx,
        y: ay + t0 * dy
      };
      if (t1 < 1) line.b = {
        x: ax + t1 * dx,
        y: ay + t1 * dy
      };
      return line;
    };
  }
  var d3_geo_clipExtentMAX = 1e9;
  d3.geo.clipExtent = function() {
    var x0, y0, x1, y1, stream, clip, clipExtent = {
      stream: function(output) {
        if (stream) stream.valid = false;
        stream = clip(output);
        stream.valid = true;
        return stream;
      },
      extent: function(_) {
        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
        if (stream) stream.valid = false, stream = null;
        return clipExtent;
      }
    };
    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
  };
  function d3_geo_clipExtent(x0, y0, x1, y1) {
    return function(listener) {
      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          listener = bufferListener;
          segments = [];
          polygon = [];
          clean = true;
        },
        polygonEnd: function() {
          listener = listener_;
          segments = d3.merge(segments);
          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
          if (inside || visible) {
            listener.polygonStart();
            if (inside) {
              listener.lineStart();
              interpolate(null, null, 1, listener);
              listener.lineEnd();
            }
            if (visible) {
              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
            }
            listener.polygonEnd();
          }
          segments = polygon = ring = null;
        }
      };
      function insidePolygon(p) {
        var wn = 0, n = polygon.length, y = p[1];
        for (var i = 0; i < n; ++i) {
          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
            b = v[j];
            if (a[1] <= y) {
              if (b[1] > y && isLeft(a, b, p) > 0) ++wn;
            } else {
              if (b[1] <= y && isLeft(a, b, p) < 0) --wn;
            }
            a = b;
          }
        }
        return wn !== 0;
      }
      function isLeft(a, b, c) {
        return (b[0] - a[0]) * (c[1] - a[1]) - (c[0] - a[0]) * (b[1] - a[1]);
      }
      function interpolate(from, to, direction, listener) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
          do {
            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          } while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          listener.point(to[0], to[1]);
        }
      }
      function pointVisible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }
      function point(x, y) {
        if (pointVisible(x, y)) listener.point(x, y);
      }
      var x__, y__, v__, x_, y_, v_, first, clean;
      function lineStart() {
        clip.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }
      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferListener.rejoin();
          segments.push(bufferListener.buffer());
        }
        clip.point = point;
        if (v_) listener.lineEnd();
      }
      function linePoint(x, y) {
        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
        var v = pointVisible(x, y);
        if (polygon) ring.push([ x, y ]);
        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;
          if (v) {
            listener.lineStart();
            listener.point(x, y);
          }
        } else {
          if (v && v_) listener.point(x, y); else {
            var l = {
              a: {
                x: x_,
                y: y_
              },
              b: {
                x: x,
                y: y
              }
            };
            if (clipLine(l)) {
              if (!v_) {
                listener.lineStart();
                listener.point(l.a.x, l.a.y);
              }
              listener.point(l.b.x, l.b.y);
              if (!v) listener.lineEnd();
              clean = false;
            } else if (v) {
              listener.lineStart();
              listener.point(x, y);
              clean = false;
            }
          }
        }
        x_ = x, y_ = y, v_ = v;
      }
      return clip;
    };
    function corner(p, direction) {
      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compare(a, b) {
      return comparePoints(a.x, b.x);
    }
    function comparePoints(a, b) {
      var ca = corner(a, 1), cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
  }
  function d3_geo_compose(a, b) {
    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert) compose.invert = function(x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
  }
  function d3_geo_conic(projectAt) {
    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
    p.parallels = function(_) {
      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
    };
    return p;
  }
  function d3_geo_conicEqualArea(φ0, φ1) {
    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
    function forward(λ, φ) {
      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = ρ0 - y;
      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
    };
    return forward;
  }
  (d3.geo.conicEqualArea = function() {
    return d3_geo_conic(d3_geo_conicEqualArea);
  }).raw = d3_geo_conicEqualArea;
  d3.geo.albers = function() {
    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
  };
  d3.geo.albersUsa = function() {
    var lower48 = d3.geo.albers();
    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
    var point, pointStream = {
      point: function(x, y) {
        point = [ x, y ];
      }
    }, lower48Point, alaskaPoint, hawaiiPoint;
    function albersUsa(coordinates) {
      var x = coordinates[0], y = coordinates[1];
      point = null;
      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
      return point;
    }
    albersUsa.invert = function(coordinates) {
      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function(stream) {
      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
      return {
        point: function(x, y) {
          lower48Stream.point(x, y);
          alaskaStream.point(x, y);
          hawaiiStream.point(x, y);
        },
        sphere: function() {
          lower48Stream.sphere();
          alaskaStream.sphere();
          hawaiiStream.sphere();
        },
        lineStart: function() {
          lower48Stream.lineStart();
          alaskaStream.lineStart();
          hawaiiStream.lineStart();
        },
        lineEnd: function() {
          lower48Stream.lineEnd();
          alaskaStream.lineEnd();
          hawaiiStream.lineEnd();
        },
        polygonStart: function() {
          lower48Stream.polygonStart();
          alaskaStream.polygonStart();
          hawaiiStream.polygonStart();
        },
        polygonEnd: function() {
          lower48Stream.polygonEnd();
          alaskaStream.polygonEnd();
          hawaiiStream.polygonEnd();
        }
      };
    };
    albersUsa.precision = function(_) {
      if (!arguments.length) return lower48.precision();
      lower48.precision(_);
      alaska.precision(_);
      hawaii.precision(_);
      return albersUsa;
    };
    albersUsa.scale = function(_) {
      if (!arguments.length) return lower48.scale();
      lower48.scale(_);
      alaska.scale(_ * .35);
      hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function(_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(), x = +_[0], y = +_[1];
      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      return albersUsa;
    };
    return albersUsa.scale(1070);
  };
  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_pathAreaPolygon = 0;
      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
    }
  };
  function d3_geo_pathAreaRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathArea.point = function(x, y) {
      d3_geo_pathArea.point = nextPoint;
      x00 = x0 = x, y00 = y0 = y;
    };
    function nextPoint(x, y) {
      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
      x0 = x, y0 = y;
    }
    d3_geo_pathArea.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
  var d3_geo_pathBounds = {
    point: d3_geo_pathBoundsPoint,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_pathBoundsPoint(x, y) {
    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
  }
  function d3_geo_pathBuffer() {
    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointCircle = d3_geo_pathBufferCircle(_);
        return stream;
      },
      result: function() {
        if (buffer.length) {
          var result = buffer.join("");
          buffer = [];
          return result;
        }
      }
    };
    function point(x, y) {
      buffer.push("M", x, ",", y, pointCircle);
    }
    function pointLineStart(x, y) {
      buffer.push("M", x, ",", y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      buffer.push("L", x, ",", y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      buffer.push("Z");
    }
    return stream;
  }
  function d3_geo_pathBufferCircle(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }
  var d3_geo_pathCentroid = {
    point: d3_geo_pathCentroidPoint,
    lineStart: d3_geo_pathCentroidLineStart,
    lineEnd: d3_geo_pathCentroidLineEnd,
    polygonStart: function() {
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
    }
  };
  function d3_geo_pathCentroidPoint(x, y) {
    d3_geo_centroidX0 += x;
    d3_geo_centroidY0 += y;
    ++d3_geo_centroidZ0;
  }
  function d3_geo_pathCentroidLineStart() {
    var x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
  }
  function d3_geo_pathCentroidLineEnd() {
    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
  }
  function d3_geo_pathCentroidRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      z = y0 * x - x0 * y;
      d3_geo_centroidX2 += z * (x0 + x);
      d3_geo_centroidY2 += z * (y0 + y);
      d3_geo_centroidZ2 += z * 3;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
    d3_geo_pathCentroid.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  function d3_geo_pathContext(context) {
    var pointRadius = 4.5;
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointRadius = _;
        return stream;
      },
      result: d3_noop
    };
    function point(x, y) {
      context.moveTo(x, y);
      context.arc(x, y, pointRadius, 0, τ);
    }
    function pointLineStart(x, y) {
      context.moveTo(x, y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      context.lineTo(x, y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      context.closePath();
    }
    return stream;
  }
  function d3_geo_resample(project) {
    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
    function resample(stream) {
      return (maxDepth ? resampleRecursive : resampleNone)(stream);
    }
    function resampleNone(stream) {
      return d3_geo_transformPoint(stream, function(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      });
    }
    function resampleRecursive(stream) {
      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
      var resample = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          stream.polygonStart();
          resample.lineStart = ringStart;
        },
        polygonEnd: function() {
          stream.polygonEnd();
          resample.lineStart = lineStart;
        }
      };
      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }
      function lineStart() {
        x0 = NaN;
        resample.point = linePoint;
        stream.lineStart();
      }
      function linePoint(λ, φ) {
        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }
      function lineEnd() {
        resample.point = point;
        stream.lineEnd();
      }
      function ringStart() {
        lineStart();
        resample.point = ringPoint;
        resample.lineEnd = ringEnd;
      }
      function ringPoint(λ, φ) {
        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resample.point = linePoint;
      }
      function ringEnd() {
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
        resample.lineEnd = lineEnd;
        lineEnd();
      }
      return resample;
    }
    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
      if (d2 > 4 * δ2 && depth--) {
        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
        }
      }
    }
    resample.precision = function(_) {
      if (!arguments.length) return Math.sqrt(δ2);
      maxDepth = (δ2 = _ * _) > 0 && 16;
      return resample;
    };
    return resample;
  }
  d3.geo.path = function() {
    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
        d3.geo.stream(object, cacheStream);
      }
      return contextStream.result();
    }
    path.area = function(object) {
      d3_geo_pathAreaSum = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathArea));
      return d3_geo_pathAreaSum;
    };
    path.centroid = function(object) {
      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
    };
    path.bounds = function(object) {
      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
    };
    path.projection = function(_) {
      if (!arguments.length) return projection;
      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
      return reset();
    };
    path.context = function(_) {
      if (!arguments.length) return context;
      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return reset();
    };
    path.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };
    function reset() {
      cacheStream = null;
      return path;
    }
    return path.projection(d3.geo.albersUsa()).context(null);
  };
  function d3_geo_pathProjectStream(project) {
    var resample = d3_geo_resample(function(x, y) {
      return project([ x * d3_degrees, y * d3_degrees ]);
    });
    return function(stream) {
      return d3_geo_projectionRadians(resample(stream));
    };
  }
  d3.geo.transform = function(methods) {
    return {
      stream: function(stream) {
        var transform = new d3_geo_transform(stream);
        for (var k in methods) transform[k] = methods[k];
        return transform;
      }
    };
  };
  function d3_geo_transform(stream) {
    this.stream = stream;
  }
  d3_geo_transform.prototype = {
    point: function(x, y) {
      this.stream.point(x, y);
    },
    sphere: function() {
      this.stream.sphere();
    },
    lineStart: function() {
      this.stream.lineStart();
    },
    lineEnd: function() {
      this.stream.lineEnd();
    },
    polygonStart: function() {
      this.stream.polygonStart();
    },
    polygonEnd: function() {
      this.stream.polygonEnd();
    }
  };
  function d3_geo_transformPoint(stream, point) {
    return {
      point: point,
      sphere: function() {
        stream.sphere();
      },
      lineStart: function() {
        stream.lineStart();
      },
      lineEnd: function() {
        stream.lineEnd();
      },
      polygonStart: function() {
        stream.polygonStart();
      },
      polygonEnd: function() {
        stream.polygonEnd();
      }
    };
  }
  d3.geo.projection = d3_geo_projection;
  d3.geo.projectionMutator = d3_geo_projectionMutator;
  function d3_geo_projection(project) {
    return d3_geo_projectionMutator(function() {
      return project;
    })();
  }
  function d3_geo_projectionMutator(projectAt) {
    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
      x = project(x, y);
      return [ x[0] * k + δx, δy - x[1] * k ];
    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
    function projection(point) {
      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
      return [ point[0] * k + δx, δy - point[1] * k ];
    }
    function invert(point) {
      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
    }
    projection.stream = function(output) {
      if (stream) stream.valid = false;
      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
      stream.valid = true;
      return stream;
    };
    projection.clipAngle = function(_) {
      if (!arguments.length) return clipAngle;
      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
      return invalidate();
    };
    projection.clipExtent = function(_) {
      if (!arguments.length) return clipExtent;
      clipExtent = _;
      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
      return invalidate();
    };
    projection.scale = function(_) {
      if (!arguments.length) return k;
      k = +_;
      return reset();
    };
    projection.translate = function(_) {
      if (!arguments.length) return [ x, y ];
      x = +_[0];
      y = +_[1];
      return reset();
    };
    projection.center = function(_) {
      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
      λ = _[0] % 360 * d3_radians;
      φ = _[1] % 360 * d3_radians;
      return reset();
    };
    projection.rotate = function(_) {
      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
      δλ = _[0] % 360 * d3_radians;
      δφ = _[1] % 360 * d3_radians;
      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
      return reset();
    };
    d3.rebind(projection, projectResample, "precision");
    function reset() {
      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
      var center = project(λ, φ);
      δx = x - center[0] * k;
      δy = y + center[1] * k;
      return invalidate();
    }
    function invalidate() {
      if (stream) stream.valid = false, stream = null;
      return projection;
    }
    return function() {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return reset();
    };
  }
  function d3_geo_projectionRadians(stream) {
    return d3_geo_transformPoint(stream, function(x, y) {
      stream.point(x * d3_radians, y * d3_radians);
    });
  }
  function d3_geo_equirectangular(λ, φ) {
    return [ λ, φ ];
  }
  (d3.geo.equirectangular = function() {
    return d3_geo_projection(d3_geo_equirectangular);
  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
  d3.geo.rotation = function(rotate) {
    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    }
    forward.invert = function(coordinates) {
      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    };
    return forward;
  };
  function d3_geo_identityRotation(λ, φ) {
    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
  }
  d3_geo_identityRotation.invert = d3_geo_equirectangular;
  function d3_geo_rotation(δλ, δφ, δγ) {
    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
  }
  function d3_geo_forwardRotationλ(δλ) {
    return function(λ, φ) {
      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
    };
  }
  function d3_geo_rotationλ(δλ) {
    var rotation = d3_geo_forwardRotationλ(δλ);
    rotation.invert = d3_geo_forwardRotationλ(-δλ);
    return rotation;
  }
  function d3_geo_rotationφγ(δφ, δγ) {
    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
    function rotation(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
    }
    rotation.invert = function(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
    };
    return rotation;
  }
  d3.geo.circle = function() {
    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
    function circle() {
      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
      interpolate(null, null, 1, {
        point: function(x, y) {
          ring.push(x = rotate(x, y));
          x[0] *= d3_degrees, x[1] *= d3_degrees;
        }
      });
      return {
        type: "Polygon",
        coordinates: [ ring ]
      };
    }
    circle.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return circle;
    };
    circle.angle = function(x) {
      if (!arguments.length) return angle;
      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
      return circle;
    };
    circle.precision = function(_) {
      if (!arguments.length) return precision;
      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
      return circle;
    };
    return circle.angle(90);
  };
  function d3_geo_circleInterpolate(radius, precision) {
    var cr = Math.cos(radius), sr = Math.sin(radius);
    return function(from, to, direction, listener) {
      var step = direction * precision;
      if (from != null) {
        from = d3_geo_circleAngle(cr, from);
        to = d3_geo_circleAngle(cr, to);
        if (direction > 0 ? from < to : from > to) from += direction * τ;
      } else {
        from = radius + direction * τ;
        to = radius - .5 * step;
      }
      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
      }
    };
  }
  function d3_geo_circleAngle(cr, point) {
    var a = d3_geo_cartesian(point);
    a[0] -= cr;
    d3_geo_cartesianNormalize(a);
    var angle = d3_acos(-a[1]);
    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
  }
  d3.geo.distance = function(a, b) {
    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
  };
  d3.geo.graticule = function() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
      return {
        type: "MultiLineString",
        coordinates: lines()
      };
    }
    function lines() {
      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
        return abs(x % DX) > ε;
      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
        return abs(y % DY) > ε;
      }).map(y));
    }
    graticule.lines = function() {
      return lines().map(function(coordinates) {
        return {
          type: "LineString",
          coordinates: coordinates
        };
      });
    };
    graticule.outline = function() {
      return {
        type: "Polygon",
        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
      };
    };
    graticule.extent = function(_) {
      if (!arguments.length) return graticule.minorExtent();
      return graticule.majorExtent(_).minorExtent(_);
    };
    graticule.majorExtent = function(_) {
      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };
    graticule.minorExtent = function(_) {
      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };
    graticule.step = function(_) {
      if (!arguments.length) return graticule.minorStep();
      return graticule.majorStep(_).minorStep(_);
    };
    graticule.majorStep = function(_) {
      if (!arguments.length) return [ DX, DY ];
      DX = +_[0], DY = +_[1];
      return graticule;
    };
    graticule.minorStep = function(_) {
      if (!arguments.length) return [ dx, dy ];
      dx = +_[0], dy = +_[1];
      return graticule;
    };
    graticule.precision = function(_) {
      if (!arguments.length) return precision;
      precision = +_;
      x = d3_geo_graticuleX(y0, y1, 90);
      y = d3_geo_graticuleY(x0, x1, precision);
      X = d3_geo_graticuleX(Y0, Y1, 90);
      Y = d3_geo_graticuleY(X0, X1, precision);
      return graticule;
    };
    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
  };
  function d3_geo_graticuleX(y0, y1, dy) {
    var y = d3.range(y0, y1 - ε, dy).concat(y1);
    return function(x) {
      return y.map(function(y) {
        return [ x, y ];
      });
    };
  }
  function d3_geo_graticuleY(x0, x1, dx) {
    var x = d3.range(x0, x1 - ε, dx).concat(x1);
    return function(y) {
      return x.map(function(x) {
        return [ x, y ];
      });
    };
  }
  function d3_source(d) {
    return d.source;
  }
  function d3_target(d) {
    return d.target;
  }
  d3.geo.greatArc = function() {
    var source = d3_source, source_, target = d3_target, target_;
    function greatArc() {
      return {
        type: "LineString",
        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
      };
    }
    greatArc.distance = function() {
      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
    };
    greatArc.source = function(_) {
      if (!arguments.length) return source;
      source = _, source_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.target = function(_) {
      if (!arguments.length) return target;
      target = _, target_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.precision = function() {
      return arguments.length ? greatArc : 0;
    };
    return greatArc;
  };
  d3.geo.interpolate = function(source, target) {
    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
  };
  function d3_geo_interpolate(x0, y0, x1, y1) {
    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
    var interpolate = d ? function(t) {
      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
    } : function() {
      return [ x0 * d3_degrees, y0 * d3_degrees ];
    };
    interpolate.distance = d;
    return interpolate;
  }
  d3.geo.length = function(object) {
    d3_geo_lengthSum = 0;
    d3.geo.stream(object, d3_geo_length);
    return d3_geo_lengthSum;
  };
  var d3_geo_lengthSum;
  var d3_geo_length = {
    sphere: d3_noop,
    point: d3_noop,
    lineStart: d3_geo_lengthLineStart,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_lengthLineStart() {
    var λ0, sinφ0, cosφ0;
    d3_geo_length.point = function(λ, φ) {
      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
      d3_geo_length.point = nextPoint;
    };
    d3_geo_length.lineEnd = function() {
      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
    };
    function nextPoint(λ, φ) {
      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
    }
  }
  function d3_geo_azimuthal(scale, angle) {
    function azimuthal(λ, φ) {
      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
    }
    azimuthal.invert = function(x, y) {
      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
    };
    return azimuthal;
  }
  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
    return Math.sqrt(2 / (1 + cosλcosφ));
  }, function(ρ) {
    return 2 * Math.asin(ρ / 2);
  });
  (d3.geo.azimuthalEqualArea = function() {
    return d3_geo_projection(d3_geo_azimuthalEqualArea);
  }).raw = d3_geo_azimuthalEqualArea;
  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
    var c = Math.acos(cosλcosφ);
    return c && c / Math.sin(c);
  }, d3_identity);
  (d3.geo.azimuthalEquidistant = function() {
    return d3_geo_projection(d3_geo_azimuthalEquidistant);
  }).raw = d3_geo_azimuthalEquidistant;
  function d3_geo_conicConformal(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), t = function(φ) {
      return Math.tan(π / 4 + φ / 2);
    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
    if (!n) return d3_geo_mercator;
    function forward(λ, φ) {
      var ρ = abs(abs(φ) - halfπ) < ε ? 0 : F / Math.pow(t(φ), n);
      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
    };
    return forward;
  }
  (d3.geo.conicConformal = function() {
    return d3_geo_conic(d3_geo_conicConformal);
  }).raw = d3_geo_conicConformal;
  function d3_geo_conicEquidistant(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
    if (abs(n) < ε) return d3_geo_equirectangular;
    function forward(λ, φ) {
      var ρ = G - φ;
      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = G - y;
      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
    };
    return forward;
  }
  (d3.geo.conicEquidistant = function() {
    return d3_geo_conic(d3_geo_conicEquidistant);
  }).raw = d3_geo_conicEquidistant;
  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / cosλcosφ;
  }, Math.atan);
  (d3.geo.gnomonic = function() {
    return d3_geo_projection(d3_geo_gnomonic);
  }).raw = d3_geo_gnomonic;
  function d3_geo_mercator(λ, φ) {
    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
  }
  d3_geo_mercator.invert = function(x, y) {
    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
  };
  function d3_geo_mercatorProjection(project) {
    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
    m.scale = function() {
      var v = scale.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.translate = function() {
      var v = translate.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.clipExtent = function(_) {
      var v = clipExtent.apply(m, arguments);
      if (v === m) {
        if (clipAuto = _ == null) {
          var k = π * scale(), t = translate();
          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
        }
      } else if (clipAuto) {
        v = null;
      }
      return v;
    };
    return m.clipExtent(null);
  }
  (d3.geo.mercator = function() {
    return d3_geo_mercatorProjection(d3_geo_mercator);
  }).raw = d3_geo_mercator;
  var d3_geo_orthographic = d3_geo_azimuthal(function() {
    return 1;
  }, Math.asin);
  (d3.geo.orthographic = function() {
    return d3_geo_projection(d3_geo_orthographic);
  }).raw = d3_geo_orthographic;
  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / (1 + cosλcosφ);
  }, function(ρ) {
    return 2 * Math.atan(ρ);
  });
  (d3.geo.stereographic = function() {
    return d3_geo_projection(d3_geo_stereographic);
  }).raw = d3_geo_stereographic;
  function d3_geo_transverseMercator(λ, φ) {
    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
  }
  d3_geo_transverseMercator.invert = function(x, y) {
    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
  };
  (d3.geo.transverseMercator = function() {
    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
    projection.center = function(_) {
      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ -_[1], _[0] ]);
    };
    projection.rotate = function(_) {
      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
      [ _[0], _[1], _[2] - 90 ]);
    };
    return projection.rotate([ 0, 0 ]);
  }).raw = d3_geo_transverseMercator;
  d3.geom = {};
  function d3_geom_pointX(d) {
    return d[0];
  }
  function d3_geom_pointY(d) {
    return d[1];
  }
  d3.geom.hull = function(vertices) {
    var x = d3_geom_pointX, y = d3_geom_pointY;
    if (arguments.length) return hull(vertices);
    function hull(data) {
      if (data.length < 3) return [];
      var fx = d3_functor(x), fy = d3_functor(y), n = data.length, vertices, plen = n - 1, points = [], stack = [], d, i, j, h = 0, x1, y1, x2, y2, u, v, a, sp;
      if (fx === d3_geom_pointX && y === d3_geom_pointY) vertices = data; else for (i = 0, 
      vertices = []; i < n; ++i) {
        vertices.push([ +fx.call(this, d = data[i], i), +fy.call(this, d, i) ]);
      }
      for (i = 1; i < n; ++i) {
        if (vertices[i][1] < vertices[h][1] || vertices[i][1] == vertices[h][1] && vertices[i][0] < vertices[h][0]) h = i;
      }
      for (i = 0; i < n; ++i) {
        if (i === h) continue;
        y1 = vertices[i][1] - vertices[h][1];
        x1 = vertices[i][0] - vertices[h][0];
        points.push({
          angle: Math.atan2(y1, x1),
          index: i
        });
      }
      points.sort(function(a, b) {
        return a.angle - b.angle;
      });
      a = points[0].angle;
      v = points[0].index;
      u = 0;
      for (i = 1; i < plen; ++i) {
        j = points[i].index;
        if (a == points[i].angle) {
          x1 = vertices[v][0] - vertices[h][0];
          y1 = vertices[v][1] - vertices[h][1];
          x2 = vertices[j][0] - vertices[h][0];
          y2 = vertices[j][1] - vertices[h][1];
          if (x1 * x1 + y1 * y1 >= x2 * x2 + y2 * y2) {
            points[i].index = -1;
            continue;
          } else {
            points[u].index = -1;
          }
        }
        a = points[i].angle;
        u = i;
        v = j;
      }
      stack.push(h);
      for (i = 0, j = 0; i < 2; ++j) {
        if (points[j].index > -1) {
          stack.push(points[j].index);
          i++;
        }
      }
      sp = stack.length;
      for (;j < plen; ++j) {
        if (points[j].index < 0) continue;
        while (!d3_geom_hullCCW(stack[sp - 2], stack[sp - 1], points[j].index, vertices)) {
          --sp;
        }
        stack[sp++] = points[j].index;
      }
      var poly = [];
      for (i = sp - 1; i >= 0; --i) poly.push(data[stack[i]]);
      return poly;
    }
    hull.x = function(_) {
      return arguments.length ? (x = _, hull) : x;
    };
    hull.y = function(_) {
      return arguments.length ? (y = _, hull) : y;
    };
    return hull;
  };
  function d3_geom_hullCCW(i1, i2, i3, v) {
    var t, a, b, c, d, e, f;
    t = v[i1];
    a = t[0];
    b = t[1];
    t = v[i2];
    c = t[0];
    d = t[1];
    t = v[i3];
    e = t[0];
    f = t[1];
    return (f - b) * (c - a) - (d - b) * (e - a) > 0;
  }
  d3.geom.polygon = function(coordinates) {
    d3_subclass(coordinates, d3_geom_polygonPrototype);
    return coordinates;
  };
  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
  d3_geom_polygonPrototype.area = function() {
    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
    while (++i < n) {
      a = b;
      b = this[i];
      area += a[1] * b[0] - a[0] * b[1];
    }
    return area * .5;
  };
  d3_geom_polygonPrototype.centroid = function(k) {
    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
    if (!arguments.length) k = -1 / (6 * this.area());
    while (++i < n) {
      a = b;
      b = this[i];
      c = a[0] * b[1] - b[0] * a[1];
      x += (a[0] + b[0]) * c;
      y += (a[1] + b[1]) * c;
    }
    return [ x * k, y * k ];
  };
  d3_geom_polygonPrototype.clip = function(subject) {
    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
    while (++i < n) {
      input = subject.slice();
      subject.length = 0;
      b = this[i];
      c = input[(m = input.length - closed) - 1];
      j = -1;
      while (++j < m) {
        d = input[j];
        if (d3_geom_polygonInside(d, a, b)) {
          if (!d3_geom_polygonInside(c, a, b)) {
            subject.push(d3_geom_polygonIntersect(c, d, a, b));
          }
          subject.push(d);
        } else if (d3_geom_polygonInside(c, a, b)) {
          subject.push(d3_geom_polygonIntersect(c, d, a, b));
        }
        c = d;
      }
      if (closed) subject.push(subject[0]);
      a = b;
    }
    return subject;
  };
  function d3_geom_polygonInside(p, a, b) {
    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
  }
  function d3_geom_polygonIntersect(c, d, a, b) {
    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
    return [ x1 + ua * x21, y1 + ua * y21 ];
  }
  function d3_geom_polygonClosed(coordinates) {
    var a = coordinates[0], b = coordinates[coordinates.length - 1];
    return !(a[0] - b[0] || a[1] - b[1]);
  }
  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
  function d3_geom_voronoiBeach() {
    d3_geom_voronoiRedBlackNode(this);
    this.edge = this.site = this.circle = null;
  }
  function d3_geom_voronoiCreateBeach(site) {
    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
    beach.site = site;
    return beach;
  }
  function d3_geom_voronoiDetachBeach(beach) {
    d3_geom_voronoiDetachCircle(beach);
    d3_geom_voronoiBeaches.remove(beach);
    d3_geom_voronoiBeachPool.push(beach);
    d3_geom_voronoiRedBlackNode(beach);
  }
  function d3_geom_voronoiRemoveBeach(beach) {
    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
      x: x,
      y: y
    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
    d3_geom_voronoiDetachBeach(beach);
    var lArc = previous;
    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
      previous = lArc.P;
      disappearing.unshift(lArc);
      d3_geom_voronoiDetachBeach(lArc);
      lArc = previous;
    }
    disappearing.unshift(lArc);
    d3_geom_voronoiDetachCircle(lArc);
    var rArc = next;
    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
      next = rArc.N;
      disappearing.push(rArc);
      d3_geom_voronoiDetachBeach(rArc);
      rArc = next;
    }
    disappearing.push(rArc);
    d3_geom_voronoiDetachCircle(rArc);
    var nArcs = disappearing.length, iArc;
    for (iArc = 1; iArc < nArcs; ++iArc) {
      rArc = disappearing[iArc];
      lArc = disappearing[iArc - 1];
      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
    }
    lArc = disappearing[0];
    rArc = disappearing[nArcs - 1];
    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiAddBeach(site) {
    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
    while (node) {
      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
      if (dxl > ε) node = node.L; else {
        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
        if (dxr > ε) {
          if (!node.R) {
            lArc = node;
            break;
          }
          node = node.R;
        } else {
          if (dxl > -ε) {
            lArc = node.P;
            rArc = node;
          } else if (dxr > -ε) {
            lArc = node;
            rArc = node.N;
          } else {
            lArc = rArc = node;
          }
          break;
        }
      }
    }
    var newArc = d3_geom_voronoiCreateBeach(site);
    d3_geom_voronoiBeaches.insert(lArc, newArc);
    if (!lArc && !rArc) return;
    if (lArc === rArc) {
      d3_geom_voronoiDetachCircle(lArc);
      rArc = d3_geom_voronoiCreateBeach(lArc.site);
      d3_geom_voronoiBeaches.insert(newArc, rArc);
      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
      return;
    }
    if (!rArc) {
      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      return;
    }
    d3_geom_voronoiDetachCircle(lArc);
    d3_geom_voronoiDetachCircle(rArc);
    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
      x: (cy * hb - by * hc) / d + ax,
      y: (bx * hc - cx * hb) / d + ay
    };
    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
    if (!pby2) return rfocx;
    var lArc = arc.P;
    if (!lArc) return -Infinity;
    site = lArc.site;
    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
    if (!plby2) return lfocx;
    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    return (rfocx + lfocx) / 2;
  }
  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
    var rArc = arc.N;
    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
    var site = arc.site;
    return site.y === directrix ? site.x : Infinity;
  }
  function d3_geom_voronoiCell(site) {
    this.site = site;
    this.edges = [];
  }
  d3_geom_voronoiCell.prototype.prepare = function() {
    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
    while (iHalfEdge--) {
      edge = halfEdges[iHalfEdge].edge;
      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
    }
    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
    return halfEdges.length;
  };
  function d3_geom_voronoiCloseCells(extent) {
    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
    while (iCell--) {
      cell = cells[iCell];
      if (!cell || !cell.prepare()) continue;
      halfEdges = cell.edges;
      nHalfEdges = halfEdges.length;
      iHalfEdge = 0;
      while (iHalfEdge < nHalfEdges) {
        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
            x: x0,
            y: abs(x2 - x0) < ε ? y2 : y1
          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
            x: abs(y2 - y1) < ε ? x2 : x1,
            y: y1
          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
            x: x1,
            y: abs(x2 - x1) < ε ? y2 : y0
          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
            x: abs(y2 - y0) < ε ? x2 : x0,
            y: y0
          } : null), cell.site, null));
          ++nHalfEdges;
        }
      }
    }
  }
  function d3_geom_voronoiHalfEdgeOrder(a, b) {
    return b.angle - a.angle;
  }
  function d3_geom_voronoiCircle() {
    d3_geom_voronoiRedBlackNode(this);
    this.x = this.y = this.arc = this.site = this.cy = null;
  }
  function d3_geom_voronoiAttachCircle(arc) {
    var lArc = arc.P, rArc = arc.N;
    if (!lArc || !rArc) return;
    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
    if (lSite === rSite) return;
    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
    var d = 2 * (ax * cy - ay * cx);
    if (d >= -ε2) return;
    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
    circle.arc = arc;
    circle.site = cSite;
    circle.x = x + bx;
    circle.y = cy + Math.sqrt(x * x + y * y);
    circle.cy = cy;
    arc.circle = circle;
    var before = null, node = d3_geom_voronoiCircles._;
    while (node) {
      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
        if (node.L) node = node.L; else {
          before = node.P;
          break;
        }
      } else {
        if (node.R) node = node.R; else {
          before = node;
          break;
        }
      }
    }
    d3_geom_voronoiCircles.insert(before, circle);
    if (!before) d3_geom_voronoiFirstCircle = circle;
  }
  function d3_geom_voronoiDetachCircle(arc) {
    var circle = arc.circle;
    if (circle) {
      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
      d3_geom_voronoiCircles.remove(circle);
      d3_geom_voronoiCirclePool.push(circle);
      d3_geom_voronoiRedBlackNode(circle);
      arc.circle = null;
    }
  }
  function d3_geom_voronoiClipEdges(extent) {
    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
    while (i--) {
      e = edges[i];
      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
        e.a = e.b = null;
        edges.splice(i, 1);
      }
    }
  }
  function d3_geom_voronoiConnectEdge(edge, extent) {
    var vb = edge.b;
    if (vb) return true;
    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
    if (ry === ly) {
      if (fx < x0 || fx >= x1) return;
      if (lx > rx) {
        if (!va) va = {
          x: fx,
          y: y0
        }; else if (va.y >= y1) return;
        vb = {
          x: fx,
          y: y1
        };
      } else {
        if (!va) va = {
          x: fx,
          y: y1
        }; else if (va.y < y0) return;
        vb = {
          x: fx,
          y: y0
        };
      }
    } else {
      fm = (lx - rx) / (ry - ly);
      fb = fy - fm * fx;
      if (fm < -1 || fm > 1) {
        if (lx > rx) {
          if (!va) va = {
            x: (y0 - fb) / fm,
            y: y0
          }; else if (va.y >= y1) return;
          vb = {
            x: (y1 - fb) / fm,
            y: y1
          };
        } else {
          if (!va) va = {
            x: (y1 - fb) / fm,
            y: y1
          }; else if (va.y < y0) return;
          vb = {
            x: (y0 - fb) / fm,
            y: y0
          };
        }
      } else {
        if (ly < ry) {
          if (!va) va = {
            x: x0,
            y: fm * x0 + fb
          }; else if (va.x >= x1) return;
          vb = {
            x: x1,
            y: fm * x1 + fb
          };
        } else {
          if (!va) va = {
            x: x1,
            y: fm * x1 + fb
          }; else if (va.x < x0) return;
          vb = {
            x: x0,
            y: fm * x0 + fb
          };
        }
      }
    }
    edge.a = va;
    edge.b = vb;
    return true;
  }
  function d3_geom_voronoiEdge(lSite, rSite) {
    this.l = lSite;
    this.r = rSite;
    this.a = this.b = null;
  }
  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, rSite);
    d3_geom_voronoiEdges.push(edge);
    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
    return edge;
  }
  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, null);
    edge.a = va;
    edge.b = vb;
    d3_geom_voronoiEdges.push(edge);
    return edge;
  }
  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
    if (!edge.a && !edge.b) {
      edge.a = vertex;
      edge.l = lSite;
      edge.r = rSite;
    } else if (edge.l === rSite) {
      edge.b = vertex;
    } else {
      edge.a = vertex;
    }
  }
  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
    var va = edge.a, vb = edge.b;
    this.edge = edge;
    this.site = lSite;
    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
  }
  d3_geom_voronoiHalfEdge.prototype = {
    start: function() {
      return this.edge.l === this.site ? this.edge.a : this.edge.b;
    },
    end: function() {
      return this.edge.l === this.site ? this.edge.b : this.edge.a;
    }
  };
  function d3_geom_voronoiRedBlackTree() {
    this._ = null;
  }
  function d3_geom_voronoiRedBlackNode(node) {
    node.U = node.C = node.L = node.R = node.P = node.N = null;
  }
  d3_geom_voronoiRedBlackTree.prototype = {
    insert: function(after, node) {
      var parent, grandpa, uncle;
      if (after) {
        node.P = after;
        node.N = after.N;
        if (after.N) after.N.P = node;
        after.N = node;
        if (after.R) {
          after = after.R;
          while (after.L) after = after.L;
          after.L = node;
        } else {
          after.R = node;
        }
        parent = after;
      } else if (this._) {
        after = d3_geom_voronoiRedBlackFirst(this._);
        node.P = null;
        node.N = after;
        after.P = after.L = node;
        parent = after;
      } else {
        node.P = node.N = null;
        this._ = node;
        parent = null;
      }
      node.L = node.R = null;
      node.U = parent;
      node.C = true;
      after = node;
      while (parent && parent.C) {
        grandpa = parent.U;
        if (parent === grandpa.L) {
          uncle = grandpa.R;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.R) {
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
          }
        } else {
          uncle = grandpa.L;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.L) {
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
          }
        }
        parent = after.U;
      }
      this._.C = false;
    },
    remove: function(node) {
      if (node.N) node.N.P = node.P;
      if (node.P) node.P.N = node.N;
      node.N = node.P = null;
      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
      if (parent) {
        if (parent.L === node) parent.L = next; else parent.R = next;
      } else {
        this._ = next;
      }
      if (left && right) {
        red = next.C;
        next.C = node.C;
        next.L = left;
        left.U = next;
        if (next !== right) {
          parent = next.U;
          next.U = node.U;
          node = next.R;
          parent.L = node;
          next.R = right;
          right.U = next;
        } else {
          next.U = parent;
          parent = next;
          node = next.R;
        }
      } else {
        red = node.C;
        node = next;
      }
      if (node) node.U = parent;
      if (red) return;
      if (node && node.C) {
        node.C = false;
        return;
      }
      do {
        if (node === this._) break;
        if (node === parent.L) {
          sibling = parent.R;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            sibling = parent.R;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.R || !sibling.R.C) {
              sibling.L.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, sibling);
              sibling = parent.R;
            }
            sibling.C = parent.C;
            parent.C = sibling.R.C = false;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            node = this._;
            break;
          }
        } else {
          sibling = parent.L;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            sibling = parent.L;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.L || !sibling.L.C) {
              sibling.R.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
              sibling = parent.L;
            }
            sibling.C = parent.C;
            parent.C = sibling.L.C = false;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            node = this._;
            break;
          }
        }
        sibling.C = true;
        node = parent;
        parent = parent.U;
      } while (!node.C);
      if (node) node.C = false;
    }
  };
  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
    var p = node, q = node.R, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.R = q.L;
    if (p.R) p.R.U = p;
    q.L = p;
  }
  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
    var p = node, q = node.L, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.L = q.R;
    if (p.L) p.L.U = p;
    q.R = p;
  }
  function d3_geom_voronoiRedBlackFirst(node) {
    while (node.L) node = node.L;
    return node;
  }
  function d3_geom_voronoi(sites, bbox) {
    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
    d3_geom_voronoiEdges = [];
    d3_geom_voronoiCells = new Array(sites.length);
    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
    while (true) {
      circle = d3_geom_voronoiFirstCircle;
      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
        if (site.x !== x0 || site.y !== y0) {
          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
          d3_geom_voronoiAddBeach(site);
          x0 = site.x, y0 = site.y;
        }
        site = sites.pop();
      } else if (circle) {
        d3_geom_voronoiRemoveBeach(circle.arc);
      } else {
        break;
      }
    }
    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
    var diagram = {
      cells: d3_geom_voronoiCells,
      edges: d3_geom_voronoiEdges
    };
    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
    return diagram;
  }
  function d3_geom_voronoiVertexOrder(a, b) {
    return b.y - a.y || b.x - a.x;
  }
  d3.geom.voronoi = function(points) {
    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
    if (points) return voronoi(points);
    function voronoi(data) {
      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
          var s = e.start();
          return [ s.x, s.y ];
        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
        polygon.point = data[i];
      });
      return polygons;
    }
    function sites(data) {
      return data.map(function(d, i) {
        return {
          x: Math.round(fx(d, i) / ε) * ε,
          y: Math.round(fy(d, i) / ε) * ε,
          i: i
        };
      });
    }
    voronoi.links = function(data) {
      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
        return edge.l && edge.r;
      }).map(function(edge) {
        return {
          source: data[edge.l.i],
          target: data[edge.r.i]
        };
      });
    };
    voronoi.triangles = function(data) {
      var triangles = [];
      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
        while (++j < m) {
          e0 = e1;
          s0 = s1;
          e1 = edges[j].edge;
          s1 = e1.l === site ? e1.r : e1.l;
          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
          }
        }
      });
      return triangles;
    };
    voronoi.x = function(_) {
      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
    };
    voronoi.y = function(_) {
      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
    };
    voronoi.clipExtent = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
      return voronoi;
    };
    voronoi.size = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
    };
    return voronoi;
  };
  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
  function d3_geom_voronoiTriangleArea(a, b, c) {
    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
  }
  d3.geom.delaunay = function(vertices) {
    return d3.geom.voronoi().triangles(vertices);
  };
  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
    if (compat = arguments.length) {
      x = d3_geom_quadtreeCompatX;
      y = d3_geom_quadtreeCompatY;
      if (compat === 3) {
        y2 = y1;
        x2 = x1;
        y1 = x1 = 0;
      }
      return quadtree(points);
    }
    function quadtree(data) {
      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
      if (x1 != null) {
        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
      } else {
        x2_ = y2_ = -(x1_ = y1_ = Infinity);
        xs = [], ys = [];
        n = data.length;
        if (compat) for (i = 0; i < n; ++i) {
          d = data[i];
          if (d.x < x1_) x1_ = d.x;
          if (d.y < y1_) y1_ = d.y;
          if (d.x > x2_) x2_ = d.x;
          if (d.y > y2_) y2_ = d.y;
          xs.push(d.x);
          ys.push(d.y);
        } else for (i = 0; i < n; ++i) {
          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
          if (x_ < x1_) x1_ = x_;
          if (y_ < y1_) y1_ = y_;
          if (x_ > x2_) x2_ = x_;
          if (y_ > y2_) y2_ = y_;
          xs.push(x_);
          ys.push(y_);
        }
      }
      var dx = x2_ - x1_, dy = y2_ - y1_;
      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
      function insert(n, d, x, y, x1, y1, x2, y2) {
        if (isNaN(x) || isNaN(y)) return;
        if (n.leaf) {
          var nx = n.x, ny = n.y;
          if (nx != null) {
            if (abs(nx - x) + abs(ny - y) < .01) {
              insertChild(n, d, x, y, x1, y1, x2, y2);
            } else {
              var nPoint = n.point;
              n.x = n.y = n.point = null;
              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
              insertChild(n, d, x, y, x1, y1, x2, y2);
            }
          } else {
            n.x = x, n.y = y, n.point = d;
          }
        } else {
          insertChild(n, d, x, y, x1, y1, x2, y2);
        }
      }
      function insertChild(n, d, x, y, x1, y1, x2, y2) {
        var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, right = x >= sx, bottom = y >= sy, i = (bottom << 1) + right;
        n.leaf = false;
        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
        if (right) x1 = sx; else x2 = sx;
        if (bottom) y1 = sy; else y2 = sy;
        insert(n, d, x, y, x1, y1, x2, y2);
      }
      var root = d3_geom_quadtreeNode();
      root.add = function(d) {
        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
      };
      root.visit = function(f) {
        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
      };
      i = -1;
      if (x1 == null) {
        while (++i < n) {
          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
        }
        --i;
      } else data.forEach(root.add);
      xs = ys = data = d = null;
      return root;
    }
    quadtree.x = function(_) {
      return arguments.length ? (x = _, quadtree) : x;
    };
    quadtree.y = function(_) {
      return arguments.length ? (y = _, quadtree) : y;
    };
    quadtree.extent = function(_) {
      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
      y2 = +_[1][1];
      return quadtree;
    };
    quadtree.size = function(_) {
      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
      return quadtree;
    };
    return quadtree;
  };
  function d3_geom_quadtreeCompatX(d) {
    return d.x;
  }
  function d3_geom_quadtreeCompatY(d) {
    return d.y;
  }
  function d3_geom_quadtreeNode() {
    return {
      leaf: true,
      nodes: [],
      point: null,
      x: null,
      y: null
    };
  }
  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
    if (!f(node, x1, y1, x2, y2)) {
      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
    }
  }
  d3.interpolateRgb = d3_interpolateRgb;
  function d3_interpolateRgb(a, b) {
    a = d3.rgb(a);
    b = d3.rgb(b);
    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
    return function(t) {
      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
    };
  }
  d3.interpolateObject = d3_interpolateObject;
  function d3_interpolateObject(a, b) {
    var i = {}, c = {}, k;
    for (k in a) {
      if (k in b) {
        i[k] = d3_interpolate(a[k], b[k]);
      } else {
        c[k] = a[k];
      }
    }
    for (k in b) {
      if (!(k in a)) {
        c[k] = b[k];
      }
    }
    return function(t) {
      for (k in i) c[k] = i[k](t);
      return c;
    };
  }
  d3.interpolateNumber = d3_interpolateNumber;
  function d3_interpolateNumber(a, b) {
    b -= a = +a;
    return function(t) {
      return a + b * t;
    };
  }
  d3.interpolateString = d3_interpolateString;
  function d3_interpolateString(a, b) {
    var m, i, j, s0 = 0, s1 = 0, s = [], q = [], n, o;
    a = a + "", b = b + "";
    d3_interpolate_number.lastIndex = 0;
    for (i = 0; m = d3_interpolate_number.exec(b); ++i) {
      if (m.index) s.push(b.substring(s0, s1 = m.index));
      q.push({
        i: s.length,
        x: m[0]
      });
      s.push(null);
      s0 = d3_interpolate_number.lastIndex;
    }
    if (s0 < b.length) s.push(b.substring(s0));
    for (i = 0, n = q.length; (m = d3_interpolate_number.exec(a)) && i < n; ++i) {
      o = q[i];
      if (o.x == m[0]) {
        if (o.i) {
          if (s[o.i + 1] == null) {
            s[o.i - 1] += o.x;
            s.splice(o.i, 1);
            for (j = i + 1; j < n; ++j) q[j].i--;
          } else {
            s[o.i - 1] += o.x + s[o.i + 1];
            s.splice(o.i, 2);
            for (j = i + 1; j < n; ++j) q[j].i -= 2;
          }
        } else {
          if (s[o.i + 1] == null) {
            s[o.i] = o.x;
          } else {
            s[o.i] = o.x + s[o.i + 1];
            s.splice(o.i + 1, 1);
            for (j = i + 1; j < n; ++j) q[j].i--;
          }
        }
        q.splice(i, 1);
        n--;
        i--;
      } else {
        o.x = d3_interpolateNumber(parseFloat(m[0]), parseFloat(o.x));
      }
    }
    while (i < n) {
      o = q.pop();
      if (s[o.i + 1] == null) {
        s[o.i] = o.x;
      } else {
        s[o.i] = o.x + s[o.i + 1];
        s.splice(o.i + 1, 1);
      }
      n--;
    }
    if (s.length === 1) {
      return s[0] == null ? (o = q[0].x, function(t) {
        return o(t) + "";
      }) : function() {
        return b;
      };
    }
    return function(t) {
      for (i = 0; i < n; ++i) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  }
  var d3_interpolate_number = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
  d3.interpolate = d3_interpolate;
  function d3_interpolate(a, b) {
    var i = d3.interpolators.length, f;
    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
    return f;
  }
  d3.interpolators = [ function(a, b) {
    var t = typeof b;
    return (t === "string" ? d3_rgb_names.has(b) || /^(#|rgb\(|hsl\()/.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_Color ? d3_interpolateRgb : t === "object" ? Array.isArray(b) ? d3_interpolateArray : d3_interpolateObject : d3_interpolateNumber)(a, b);
  } ];
  d3.interpolateArray = d3_interpolateArray;
  function d3_interpolateArray(a, b) {
    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
    for (;i < na; ++i) c[i] = a[i];
    for (;i < nb; ++i) c[i] = b[i];
    return function(t) {
      for (i = 0; i < n0; ++i) c[i] = x[i](t);
      return c;
    };
  }
  var d3_ease_default = function() {
    return d3_identity;
  };
  var d3_ease = d3.map({
    linear: d3_ease_default,
    poly: d3_ease_poly,
    quad: function() {
      return d3_ease_quad;
    },
    cubic: function() {
      return d3_ease_cubic;
    },
    sin: function() {
      return d3_ease_sin;
    },
    exp: function() {
      return d3_ease_exp;
    },
    circle: function() {
      return d3_ease_circle;
    },
    elastic: d3_ease_elastic,
    back: d3_ease_back,
    bounce: function() {
      return d3_ease_bounce;
    }
  });
  var d3_ease_mode = d3.map({
    "in": d3_identity,
    out: d3_ease_reverse,
    "in-out": d3_ease_reflect,
    "out-in": function(f) {
      return d3_ease_reflect(d3_ease_reverse(f));
    }
  });
  d3.ease = function(name) {
    var i = name.indexOf("-"), t = i >= 0 ? name.substring(0, i) : name, m = i >= 0 ? name.substring(i + 1) : "in";
    t = d3_ease.get(t) || d3_ease_default;
    m = d3_ease_mode.get(m) || d3_identity;
    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
  };
  function d3_ease_clamp(f) {
    return function(t) {
      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
    };
  }
  function d3_ease_reverse(f) {
    return function(t) {
      return 1 - f(1 - t);
    };
  }
  function d3_ease_reflect(f) {
    return function(t) {
      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
    };
  }
  function d3_ease_quad(t) {
    return t * t;
  }
  function d3_ease_cubic(t) {
    return t * t * t;
  }
  function d3_ease_cubicInOut(t) {
    if (t <= 0) return 0;
    if (t >= 1) return 1;
    var t2 = t * t, t3 = t2 * t;
    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
  }
  function d3_ease_poly(e) {
    return function(t) {
      return Math.pow(t, e);
    };
  }
  function d3_ease_sin(t) {
    return 1 - Math.cos(t * halfπ);
  }
  function d3_ease_exp(t) {
    return Math.pow(2, 10 * (t - 1));
  }
  function d3_ease_circle(t) {
    return 1 - Math.sqrt(1 - t * t);
  }
  function d3_ease_elastic(a, p) {
    var s;
    if (arguments.length < 2) p = .45;
    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
    return function(t) {
      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
    };
  }
  function d3_ease_back(s) {
    if (!s) s = 1.70158;
    return function(t) {
      return t * t * ((s + 1) * t - s);
    };
  }
  function d3_ease_bounce(t) {
    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
  }
  d3.interpolateHcl = d3_interpolateHcl;
  function d3_interpolateHcl(a, b) {
    a = d3.hcl(a);
    b = d3.hcl(b);
    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
    };
  }
  d3.interpolateHsl = d3_interpolateHsl;
  function d3_interpolateHsl(a, b) {
    a = d3.hsl(a);
    b = d3.hsl(b);
    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
    };
  }
  d3.interpolateLab = d3_interpolateLab;
  function d3_interpolateLab(a, b) {
    a = d3.lab(a);
    b = d3.lab(b);
    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
    return function(t) {
      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
    };
  }
  d3.interpolateRound = d3_interpolateRound;
  function d3_interpolateRound(a, b) {
    b -= a;
    return function(t) {
      return Math.round(a + b * t);
    };
  }
  d3.transform = function(string) {
    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
    return (d3.transform = function(string) {
      if (string != null) {
        g.setAttribute("transform", string);
        var t = g.transform.baseVal.consolidate();
      }
      return new d3_transform(t ? t.matrix : d3_transformIdentity);
    })(string);
  };
  function d3_transform(m) {
    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
    if (r0[0] * r1[1] < r1[0] * r0[1]) {
      r0[0] *= -1;
      r0[1] *= -1;
      kx *= -1;
      kz *= -1;
    }
    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
    this.translate = [ m.e, m.f ];
    this.scale = [ kx, ky ];
    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
  }
  d3_transform.prototype.toString = function() {
    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
  };
  function d3_transformDot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  function d3_transformNormalize(a) {
    var k = Math.sqrt(d3_transformDot(a, a));
    if (k) {
      a[0] /= k;
      a[1] /= k;
    }
    return k;
  }
  function d3_transformCombine(a, b, k) {
    a[0] += k * b[0];
    a[1] += k * b[1];
    return a;
  }
  var d3_transformIdentity = {
    a: 1,
    b: 0,
    c: 0,
    d: 1,
    e: 0,
    f: 0
  };
  d3.interpolateTransform = d3_interpolateTransform;
  function d3_interpolateTransform(a, b) {
    var s = [], q = [], n, A = d3.transform(a), B = d3.transform(b), ta = A.translate, tb = B.translate, ra = A.rotate, rb = B.rotate, wa = A.skew, wb = B.skew, ka = A.scale, kb = B.scale;
    if (ta[0] != tb[0] || ta[1] != tb[1]) {
      s.push("translate(", null, ",", null, ")");
      q.push({
        i: 1,
        x: d3_interpolateNumber(ta[0], tb[0])
      }, {
        i: 3,
        x: d3_interpolateNumber(ta[1], tb[1])
      });
    } else if (tb[0] || tb[1]) {
      s.push("translate(" + tb + ")");
    } else {
      s.push("");
    }
    if (ra != rb) {
      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
      q.push({
        i: s.push(s.pop() + "rotate(", null, ")") - 2,
        x: d3_interpolateNumber(ra, rb)
      });
    } else if (rb) {
      s.push(s.pop() + "rotate(" + rb + ")");
    }
    if (wa != wb) {
      q.push({
        i: s.push(s.pop() + "skewX(", null, ")") - 2,
        x: d3_interpolateNumber(wa, wb)
      });
    } else if (wb) {
      s.push(s.pop() + "skewX(" + wb + ")");
    }
    if (ka[0] != kb[0] || ka[1] != kb[1]) {
      n = s.push(s.pop() + "scale(", null, ",", null, ")");
      q.push({
        i: n - 4,
        x: d3_interpolateNumber(ka[0], kb[0])
      }, {
        i: n - 2,
        x: d3_interpolateNumber(ka[1], kb[1])
      });
    } else if (kb[0] != 1 || kb[1] != 1) {
      s.push(s.pop() + "scale(" + kb + ")");
    }
    n = q.length;
    return function(t) {
      var i = -1, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  }
  function d3_uninterpolateNumber(a, b) {
    b = b - (a = +a) ? 1 / (b - a) : 0;
    return function(x) {
      return (x - a) * b;
    };
  }
  function d3_uninterpolateClamp(a, b) {
    b = b - (a = +a) ? 1 / (b - a) : 0;
    return function(x) {
      return Math.max(0, Math.min(1, (x - a) * b));
    };
  }
  d3.layout = {};
  d3.layout.bundle = function() {
    return function(links) {
      var paths = [], i = -1, n = links.length;
      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
      return paths;
    };
  };
  function d3_layout_bundlePath(link) {
    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
    while (start !== lca) {
      start = start.parent;
      points.push(start);
    }
    var k = points.length;
    while (end !== lca) {
      points.splice(k, 0, end);
      end = end.parent;
    }
    return points;
  }
  function d3_layout_bundleAncestors(node) {
    var ancestors = [], parent = node.parent;
    while (parent != null) {
      ancestors.push(node);
      node = parent;
      parent = parent.parent;
    }
    ancestors.push(node);
    return ancestors;
  }
  function d3_layout_bundleLeastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
    while (aNode === bNode) {
      sharedNode = aNode;
      aNode = aNodes.pop();
      bNode = bNodes.pop();
    }
    return sharedNode;
  }
  d3.layout.chord = function() {
    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
    function relayout() {
      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
      chords = [];
      groups = [];
      k = 0, i = -1;
      while (++i < n) {
        x = 0, j = -1;
        while (++j < n) {
          x += matrix[i][j];
        }
        groupSums.push(x);
        subgroupIndex.push(d3.range(n));
        k += x;
      }
      if (sortGroups) {
        groupIndex.sort(function(a, b) {
          return sortGroups(groupSums[a], groupSums[b]);
        });
      }
      if (sortSubgroups) {
        subgroupIndex.forEach(function(d, i) {
          d.sort(function(a, b) {
            return sortSubgroups(matrix[i][a], matrix[i][b]);
          });
        });
      }
      k = (τ - padding * n) / k;
      x = 0, i = -1;
      while (++i < n) {
        x0 = x, j = -1;
        while (++j < n) {
          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
          subgroups[di + "-" + dj] = {
            index: di,
            subindex: dj,
            startAngle: a0,
            endAngle: a1,
            value: v
          };
        }
        groups[di] = {
          index: di,
          startAngle: x0,
          endAngle: x,
          value: (x - x0) / k
        };
        x += padding;
      }
      i = -1;
      while (++i < n) {
        j = i - 1;
        while (++j < n) {
          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
          if (source.value || target.value) {
            chords.push(source.value < target.value ? {
              source: target,
              target: source
            } : {
              source: source,
              target: target
            });
          }
        }
      }
      if (sortChords) resort();
    }
    function resort() {
      chords.sort(function(a, b) {
        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
      });
    }
    chord.matrix = function(x) {
      if (!arguments.length) return matrix;
      n = (matrix = x) && matrix.length;
      chords = groups = null;
      return chord;
    };
    chord.padding = function(x) {
      if (!arguments.length) return padding;
      padding = x;
      chords = groups = null;
      return chord;
    };
    chord.sortGroups = function(x) {
      if (!arguments.length) return sortGroups;
      sortGroups = x;
      chords = groups = null;
      return chord;
    };
    chord.sortSubgroups = function(x) {
      if (!arguments.length) return sortSubgroups;
      sortSubgroups = x;
      chords = null;
      return chord;
    };
    chord.sortChords = function(x) {
      if (!arguments.length) return sortChords;
      sortChords = x;
      if (chords) resort();
      return chord;
    };
    chord.chords = function() {
      if (!chords) relayout();
      return chords;
    };
    chord.groups = function() {
      if (!groups) relayout();
      return groups;
    };
    return chord;
  };
  d3.layout.force = function() {
    var force = {}, event = d3.dispatch("start", "tick", "end"), size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, gravity = .1, theta = .8, nodes = [], links = [], distances, strengths, charges;
    function repulse(node) {
      return function(quad, x1, _, x2) {
        if (quad.point !== node) {
          var dx = quad.cx - node.x, dy = quad.cy - node.y, dn = 1 / Math.sqrt(dx * dx + dy * dy);
          if ((x2 - x1) * dn < theta) {
            var k = quad.charge * dn * dn;
            node.px -= dx * k;
            node.py -= dy * k;
            return true;
          }
          if (quad.point && isFinite(dn)) {
            var k = quad.pointCharge * dn * dn;
            node.px -= dx * k;
            node.py -= dy * k;
          }
        }
        return !quad.charge;
      };
    }
    force.tick = function() {
      if ((alpha *= .99) < .005) {
        event.end({
          type: "end",
          alpha: alpha = 0
        });
        return true;
      }
      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
      for (i = 0; i < m; ++i) {
        o = links[i];
        s = o.source;
        t = o.target;
        x = t.x - s.x;
        y = t.y - s.y;
        if (l = x * x + y * y) {
          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
          x *= l;
          y *= l;
          t.x -= x * (k = s.weight / (t.weight + s.weight));
          t.y -= y * k;
          s.x += x * (k = 1 - k);
          s.y += y * k;
        }
      }
      if (k = alpha * gravity) {
        x = size[0] / 2;
        y = size[1] / 2;
        i = -1;
        if (k) while (++i < n) {
          o = nodes[i];
          o.x += (x - o.x) * k;
          o.y += (y - o.y) * k;
        }
      }
      if (charge) {
        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
        i = -1;
        while (++i < n) {
          if (!(o = nodes[i]).fixed) {
            q.visit(repulse(o));
          }
        }
      }
      i = -1;
      while (++i < n) {
        o = nodes[i];
        if (o.fixed) {
          o.x = o.px;
          o.y = o.py;
        } else {
          o.x -= (o.px - (o.px = o.x)) * friction;
          o.y -= (o.py - (o.py = o.y)) * friction;
        }
      }
      event.tick({
        type: "tick",
        alpha: alpha
      });
    };
    force.nodes = function(x) {
      if (!arguments.length) return nodes;
      nodes = x;
      return force;
    };
    force.links = function(x) {
      if (!arguments.length) return links;
      links = x;
      return force;
    };
    force.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return force;
    };
    force.linkDistance = function(x) {
      if (!arguments.length) return linkDistance;
      linkDistance = typeof x === "function" ? x : +x;
      return force;
    };
    force.distance = force.linkDistance;
    force.linkStrength = function(x) {
      if (!arguments.length) return linkStrength;
      linkStrength = typeof x === "function" ? x : +x;
      return force;
    };
    force.friction = function(x) {
      if (!arguments.length) return friction;
      friction = +x;
      return force;
    };
    force.charge = function(x) {
      if (!arguments.length) return charge;
      charge = typeof x === "function" ? x : +x;
      return force;
    };
    force.gravity = function(x) {
      if (!arguments.length) return gravity;
      gravity = +x;
      return force;
    };
    force.theta = function(x) {
      if (!arguments.length) return theta;
      theta = +x;
      return force;
    };
    force.alpha = function(x) {
      if (!arguments.length) return alpha;
      x = +x;
      if (alpha) {
        if (x > 0) alpha = x; else alpha = 0;
      } else if (x > 0) {
        event.start({
          type: "start",
          alpha: alpha = x
        });
        d3.timer(force.tick);
      }
      return force;
    };
    force.start = function() {
      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
      for (i = 0; i < n; ++i) {
        (o = nodes[i]).index = i;
        o.weight = 0;
      }
      for (i = 0; i < m; ++i) {
        o = links[i];
        if (typeof o.source == "number") o.source = nodes[o.source];
        if (typeof o.target == "number") o.target = nodes[o.target];
        ++o.source.weight;
        ++o.target.weight;
      }
      for (i = 0; i < n; ++i) {
        o = nodes[i];
        if (isNaN(o.x)) o.x = position("x", w);
        if (isNaN(o.y)) o.y = position("y", h);
        if (isNaN(o.px)) o.px = o.x;
        if (isNaN(o.py)) o.py = o.y;
      }
      distances = [];
      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
      strengths = [];
      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
      charges = [];
      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
      function position(dimension, size) {
        if (!neighbors) {
          neighbors = new Array(n);
          for (j = 0; j < n; ++j) {
            neighbors[j] = [];
          }
          for (j = 0; j < m; ++j) {
            var o = links[j];
            neighbors[o.source.index].push(o.target);
            neighbors[o.target.index].push(o.source);
          }
        }
        var candidates = neighbors[i], j = -1, m = candidates.length, x;
        while (++j < m) if (!isNaN(x = candidates[j][dimension])) return x;
        return Math.random() * size;
      }
      return force.resume();
    };
    force.resume = function() {
      return force.alpha(.1);
    };
    force.stop = function() {
      return force.alpha(0);
    };
    force.drag = function() {
      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
      if (!arguments.length) return drag;
      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
    };
    function dragmove(d) {
      d.px = d3.event.x, d.py = d3.event.y;
      force.resume();
    }
    return d3.rebind(force, event, "on");
  };
  function d3_layout_forceDragstart(d) {
    d.fixed |= 2;
  }
  function d3_layout_forceDragend(d) {
    d.fixed &= ~6;
  }
  function d3_layout_forceMouseover(d) {
    d.fixed |= 4;
    d.px = d.x, d.py = d.y;
  }
  function d3_layout_forceMouseout(d) {
    d.fixed &= ~4;
  }
  function d3_layout_forceAccumulate(quad, alpha, charges) {
    var cx = 0, cy = 0;
    quad.charge = 0;
    if (!quad.leaf) {
      var nodes = quad.nodes, n = nodes.length, i = -1, c;
      while (++i < n) {
        c = nodes[i];
        if (c == null) continue;
        d3_layout_forceAccumulate(c, alpha, charges);
        quad.charge += c.charge;
        cx += c.charge * c.cx;
        cy += c.charge * c.cy;
      }
    }
    if (quad.point) {
      if (!quad.leaf) {
        quad.point.x += Math.random() - .5;
        quad.point.y += Math.random() - .5;
      }
      var k = alpha * charges[quad.point.index];
      quad.charge += quad.pointCharge = k;
      cx += k * quad.point.x;
      cy += k * quad.point.y;
    }
    quad.cx = cx / quad.charge;
    quad.cy = cy / quad.charge;
  }
  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1;
  d3.layout.hierarchy = function() {
    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
    function recurse(node, depth, nodes) {
      var childs = children.call(hierarchy, node, depth);
      node.depth = depth;
      nodes.push(node);
      if (childs && (n = childs.length)) {
        var i = -1, n, c = node.children = new Array(n), v = 0, j = depth + 1, d;
        while (++i < n) {
          d = c[i] = recurse(childs[i], j, nodes);
          d.parent = node;
          v += d.value;
        }
        if (sort) c.sort(sort);
        if (value) node.value = v;
      } else {
        delete node.children;
        if (value) {
          node.value = +value.call(hierarchy, node, depth) || 0;
        }
      }
      return node;
    }
    function revalue(node, depth) {
      var children = node.children, v = 0;
      if (children && (n = children.length)) {
        var i = -1, n, j = depth + 1;
        while (++i < n) v += revalue(children[i], j);
      } else if (value) {
        v = +value.call(hierarchy, node, depth) || 0;
      }
      if (value) node.value = v;
      return v;
    }
    function hierarchy(d) {
      var nodes = [];
      recurse(d, 0, nodes);
      return nodes;
    }
    hierarchy.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return hierarchy;
    };
    hierarchy.children = function(x) {
      if (!arguments.length) return children;
      children = x;
      return hierarchy;
    };
    hierarchy.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return hierarchy;
    };
    hierarchy.revalue = function(root) {
      revalue(root, 0);
      return root;
    };
    return hierarchy;
  };
  function d3_layout_hierarchyRebind(object, hierarchy) {
    d3.rebind(object, hierarchy, "sort", "children", "value");
    object.nodes = object;
    object.links = d3_layout_hierarchyLinks;
    return object;
  }
  function d3_layout_hierarchyChildren(d) {
    return d.children;
  }
  function d3_layout_hierarchyValue(d) {
    return d.value;
  }
  function d3_layout_hierarchySort(a, b) {
    return b.value - a.value;
  }
  function d3_layout_hierarchyLinks(nodes) {
    return d3.merge(nodes.map(function(parent) {
      return (parent.children || []).map(function(child) {
        return {
          source: parent,
          target: child
        };
      });
    }));
  }
  d3.layout.partition = function() {
    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
    function position(node, x, dx, dy) {
      var children = node.children;
      node.x = x;
      node.y = node.depth * dy;
      node.dx = dx;
      node.dy = dy;
      if (children && (n = children.length)) {
        var i = -1, n, c, d;
        dx = node.value ? dx / node.value : 0;
        while (++i < n) {
          position(c = children[i], x, d = c.value * dx, dy);
          x += d;
        }
      }
    }
    function depth(node) {
      var children = node.children, d = 0;
      if (children && (n = children.length)) {
        var i = -1, n;
        while (++i < n) d = Math.max(d, depth(children[i]));
      }
      return 1 + d;
    }
    function partition(d, i) {
      var nodes = hierarchy.call(this, d, i);
      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
      return nodes;
    }
    partition.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return partition;
    };
    return d3_layout_hierarchyRebind(partition, hierarchy);
  };
  d3.layout.pie = function() {
    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ;
    function pie(data) {
      var values = data.map(function(d, i) {
        return +value.call(pie, d, i);
      });
      var a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle);
      var k = ((typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a) / d3.sum(values);
      var index = d3.range(data.length);
      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
        return values[j] - values[i];
      } : function(i, j) {
        return sort(data[i], data[j]);
      });
      var arcs = [];
      index.forEach(function(i) {
        var d;
        arcs[i] = {
          data: data[i],
          value: d = values[i],
          startAngle: a,
          endAngle: a += d * k
        };
      });
      return arcs;
    }
    pie.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return pie;
    };
    pie.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return pie;
    };
    pie.startAngle = function(x) {
      if (!arguments.length) return startAngle;
      startAngle = x;
      return pie;
    };
    pie.endAngle = function(x) {
      if (!arguments.length) return endAngle;
      endAngle = x;
      return pie;
    };
    return pie;
  };
  var d3_layout_pieSortByValue = {};
  d3.layout.stack = function() {
    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
    function stack(data, index) {
      var series = data.map(function(d, i) {
        return values.call(stack, d, i);
      });
      var points = series.map(function(d) {
        return d.map(function(v, i) {
          return [ x.call(stack, v, i), y.call(stack, v, i) ];
        });
      });
      var orders = order.call(stack, points, index);
      series = d3.permute(series, orders);
      points = d3.permute(points, orders);
      var offsets = offset.call(stack, points, index);
      var n = series.length, m = series[0].length, i, j, o;
      for (j = 0; j < m; ++j) {
        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
        for (i = 1; i < n; ++i) {
          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
        }
      }
      return data;
    }
    stack.values = function(x) {
      if (!arguments.length) return values;
      values = x;
      return stack;
    };
    stack.order = function(x) {
      if (!arguments.length) return order;
      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
      return stack;
    };
    stack.offset = function(x) {
      if (!arguments.length) return offset;
      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
      return stack;
    };
    stack.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      return stack;
    };
    stack.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      return stack;
    };
    stack.out = function(z) {
      if (!arguments.length) return out;
      out = z;
      return stack;
    };
    return stack;
  };
  function d3_layout_stackX(d) {
    return d.x;
  }
  function d3_layout_stackY(d) {
    return d.y;
  }
  function d3_layout_stackOut(d, y0, y) {
    d.y0 = y0;
    d.y = y;
  }
  var d3_layout_stackOrders = d3.map({
    "inside-out": function(data) {
      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
        return max[a] - max[b];
      }), top = 0, bottom = 0, tops = [], bottoms = [];
      for (i = 0; i < n; ++i) {
        j = index[i];
        if (top < bottom) {
          top += sums[j];
          tops.push(j);
        } else {
          bottom += sums[j];
          bottoms.push(j);
        }
      }
      return bottoms.reverse().concat(tops);
    },
    reverse: function(data) {
      return d3.range(data.length).reverse();
    },
    "default": d3_layout_stackOrderDefault
  });
  var d3_layout_stackOffsets = d3.map({
    silhouette: function(data) {
      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o > max) max = o;
        sums.push(o);
      }
      for (j = 0; j < m; ++j) {
        y0[j] = (max - sums[j]) / 2;
      }
      return y0;
    },
    wiggle: function(data) {
      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
      y0[0] = o = o0 = 0;
      for (j = 1; j < m; ++j) {
        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
          }
          s2 += s3 * data[i][j][1];
        }
        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
        if (o < o0) o0 = o;
      }
      for (j = 0; j < m; ++j) y0[j] -= o0;
      return y0;
    },
    expand: function(data) {
      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
      }
      for (j = 0; j < m; ++j) y0[j] = 0;
      return y0;
    },
    zero: d3_layout_stackOffsetZero
  });
  function d3_layout_stackOrderDefault(data) {
    return d3.range(data.length);
  }
  function d3_layout_stackOffsetZero(data) {
    var j = -1, m = data[0].length, y0 = [];
    while (++j < m) y0[j] = 0;
    return y0;
  }
  function d3_layout_stackMaxIndex(array) {
    var i = 1, j = 0, v = array[0][1], k, n = array.length;
    for (;i < n; ++i) {
      if ((k = array[i][1]) > v) {
        j = i;
        v = k;
      }
    }
    return j;
  }
  function d3_layout_stackReduceSum(d) {
    return d.reduce(d3_layout_stackSum, 0);
  }
  function d3_layout_stackSum(p, d) {
    return p + d[1];
  }
  d3.layout.histogram = function() {
    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
    function histogram(data, i) {
      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
      while (++i < m) {
        bin = bins[i] = [];
        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
        bin.y = 0;
      }
      if (m > 0) {
        i = -1;
        while (++i < n) {
          x = values[i];
          if (x >= range[0] && x <= range[1]) {
            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
            bin.y += k;
            bin.push(data[i]);
          }
        }
      }
      return bins;
    }
    histogram.value = function(x) {
      if (!arguments.length) return valuer;
      valuer = x;
      return histogram;
    };
    histogram.range = function(x) {
      if (!arguments.length) return ranger;
      ranger = d3_functor(x);
      return histogram;
    };
    histogram.bins = function(x) {
      if (!arguments.length) return binner;
      binner = typeof x === "number" ? function(range) {
        return d3_layout_histogramBinFixed(range, x);
      } : d3_functor(x);
      return histogram;
    };
    histogram.frequency = function(x) {
      if (!arguments.length) return frequency;
      frequency = !!x;
      return histogram;
    };
    return histogram;
  };
  function d3_layout_histogramBinSturges(range, values) {
    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
  }
  function d3_layout_histogramBinFixed(range, n) {
    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
    while (++x <= n) f[x] = m * x + b;
    return f;
  }
  function d3_layout_histogramRange(values) {
    return [ d3.min(values), d3.max(values) ];
  }
  d3.layout.tree = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
    function tree(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0];
      function firstWalk(node, previousSibling) {
        var children = node.children, layout = node._tree;
        if (children && (n = children.length)) {
          var n, firstChild = children[0], previousChild, ancestor = firstChild, child, i = -1;
          while (++i < n) {
            child = children[i];
            firstWalk(child, previousChild);
            ancestor = apportion(child, previousChild, ancestor);
            previousChild = child;
          }
          d3_layout_treeShift(node);
          var midpoint = .5 * (firstChild._tree.prelim + child._tree.prelim);
          if (previousSibling) {
            layout.prelim = previousSibling._tree.prelim + separation(node, previousSibling);
            layout.mod = layout.prelim - midpoint;
          } else {
            layout.prelim = midpoint;
          }
        } else {
          if (previousSibling) {
            layout.prelim = previousSibling._tree.prelim + separation(node, previousSibling);
          }
        }
      }
      function secondWalk(node, x) {
        node.x = node._tree.prelim + x;
        var children = node.children;
        if (children && (n = children.length)) {
          var i = -1, n;
          x += node._tree.mod;
          while (++i < n) {
            secondWalk(children[i], x);
          }
        }
      }
      function apportion(node, previousSibling, ancestor) {
        if (previousSibling) {
          var vip = node, vop = node, vim = previousSibling, vom = node.parent.children[0], sip = vip._tree.mod, sop = vop._tree.mod, sim = vim._tree.mod, som = vom._tree.mod, shift;
          while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
            vom = d3_layout_treeLeft(vom);
            vop = d3_layout_treeRight(vop);
            vop._tree.ancestor = node;
            shift = vim._tree.prelim + sim - vip._tree.prelim - sip + separation(vim, vip);
            if (shift > 0) {
              d3_layout_treeMove(d3_layout_treeAncestor(vim, node, ancestor), node, shift);
              sip += shift;
              sop += shift;
            }
            sim += vim._tree.mod;
            sip += vip._tree.mod;
            som += vom._tree.mod;
            sop += vop._tree.mod;
          }
          if (vim && !d3_layout_treeRight(vop)) {
            vop._tree.thread = vim;
            vop._tree.mod += sim - sop;
          }
          if (vip && !d3_layout_treeLeft(vom)) {
            vom._tree.thread = vip;
            vom._tree.mod += sip - som;
            ancestor = node;
          }
        }
        return ancestor;
      }
      d3_layout_treeVisitAfter(root, function(node, previousSibling) {
        node._tree = {
          ancestor: node,
          prelim: 0,
          mod: 0,
          change: 0,
          shift: 0,
          number: previousSibling ? previousSibling._tree.number + 1 : 0
        };
      });
      firstWalk(root);
      secondWalk(root, -root._tree.prelim);
      var left = d3_layout_treeSearch(root, d3_layout_treeLeftmost), right = d3_layout_treeSearch(root, d3_layout_treeRightmost), deep = d3_layout_treeSearch(root, d3_layout_treeDeepest), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2, y1 = deep.depth || 1;
      d3_layout_treeVisitAfter(root, nodeSize ? function(node) {
        node.x *= size[0];
        node.y = node.depth * size[1];
        delete node._tree;
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = node.depth / y1 * size[1];
        delete node._tree;
      });
      return nodes;
    }
    tree.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return tree;
    };
    tree.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return tree;
    };
    tree.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return tree;
    };
    return d3_layout_hierarchyRebind(tree, hierarchy);
  };
  function d3_layout_treeSeparation(a, b) {
    return a.parent == b.parent ? 1 : 2;
  }
  function d3_layout_treeLeft(node) {
    var children = node.children;
    return children && children.length ? children[0] : node._tree.thread;
  }
  function d3_layout_treeRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? children[n - 1] : node._tree.thread;
  }
  function d3_layout_treeSearch(node, compare) {
    var children = node.children;
    if (children && (n = children.length)) {
      var child, n, i = -1;
      while (++i < n) {
        if (compare(child = d3_layout_treeSearch(children[i], compare), node) > 0) {
          node = child;
        }
      }
    }
    return node;
  }
  function d3_layout_treeRightmost(a, b) {
    return a.x - b.x;
  }
  function d3_layout_treeLeftmost(a, b) {
    return b.x - a.x;
  }
  function d3_layout_treeDeepest(a, b) {
    return a.depth - b.depth;
  }
  function d3_layout_treeVisitAfter(node, callback) {
    function visit(node, previousSibling) {
      var children = node.children;
      if (children && (n = children.length)) {
        var child, previousChild = null, i = -1, n;
        while (++i < n) {
          child = children[i];
          visit(child, previousChild);
          previousChild = child;
        }
      }
      callback(node, previousSibling);
    }
    visit(node, null);
  }
  function d3_layout_treeShift(node) {
    var shift = 0, change = 0, children = node.children, i = children.length, child;
    while (--i >= 0) {
      child = children[i]._tree;
      child.prelim += shift;
      child.mod += shift;
      shift += child.shift + (change += child.change);
    }
  }
  function d3_layout_treeMove(ancestor, node, shift) {
    ancestor = ancestor._tree;
    node = node._tree;
    var change = shift / (node.number - ancestor.number);
    ancestor.change += change;
    node.change -= change;
    node.shift += shift;
    node.prelim += shift;
    node.mod += shift;
  }
  function d3_layout_treeAncestor(vim, node, ancestor) {
    return vim._tree.ancestor.parent == node.parent ? vim._tree.ancestor : ancestor;
  }
  d3.layout.pack = function() {
    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
    function pack(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
        return radius;
      };
      root.x = root.y = 0;
      d3_layout_treeVisitAfter(root, function(d) {
        d.r = +r(d.value);
      });
      d3_layout_treeVisitAfter(root, d3_layout_packSiblings);
      if (padding) {
        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
        d3_layout_treeVisitAfter(root, function(d) {
          d.r += dr;
        });
        d3_layout_treeVisitAfter(root, d3_layout_packSiblings);
        d3_layout_treeVisitAfter(root, function(d) {
          d.r -= dr;
        });
      }
      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
      return nodes;
    }
    pack.size = function(_) {
      if (!arguments.length) return size;
      size = _;
      return pack;
    };
    pack.radius = function(_) {
      if (!arguments.length) return radius;
      radius = _ == null || typeof _ === "function" ? _ : +_;
      return pack;
    };
    pack.padding = function(_) {
      if (!arguments.length) return padding;
      padding = +_;
      return pack;
    };
    return d3_layout_hierarchyRebind(pack, hierarchy);
  };
  function d3_layout_packSort(a, b) {
    return a.value - b.value;
  }
  function d3_layout_packInsert(a, b) {
    var c = a._pack_next;
    a._pack_next = b;
    b._pack_prev = a;
    b._pack_next = c;
    c._pack_prev = b;
  }
  function d3_layout_packSplice(a, b) {
    a._pack_next = b;
    b._pack_prev = a;
  }
  function d3_layout_packIntersects(a, b) {
    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
    return .999 * dr * dr > dx * dx + dy * dy;
  }
  function d3_layout_packSiblings(node) {
    if (!(nodes = node.children) || !(n = nodes.length)) return;
    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
    function bound(node) {
      xMin = Math.min(node.x - node.r, xMin);
      xMax = Math.max(node.x + node.r, xMax);
      yMin = Math.min(node.y - node.r, yMin);
      yMax = Math.max(node.y + node.r, yMax);
    }
    nodes.forEach(d3_layout_packLink);
    a = nodes[0];
    a.x = -a.r;
    a.y = 0;
    bound(a);
    if (n > 1) {
      b = nodes[1];
      b.x = b.r;
      b.y = 0;
      bound(b);
      if (n > 2) {
        c = nodes[2];
        d3_layout_packPlace(a, b, c);
        bound(c);
        d3_layout_packInsert(a, c);
        a._pack_prev = c;
        d3_layout_packInsert(c, b);
        b = a._pack_next;
        for (i = 3; i < n; i++) {
          d3_layout_packPlace(a, b, c = nodes[i]);
          var isect = 0, s1 = 1, s2 = 1;
          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
            if (d3_layout_packIntersects(j, c)) {
              isect = 1;
              break;
            }
          }
          if (isect == 1) {
            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
              if (d3_layout_packIntersects(k, c)) {
                break;
              }
            }
          }
          if (isect) {
            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
            i--;
          } else {
            d3_layout_packInsert(a, c);
            b = c;
            bound(c);
          }
        }
      }
    }
    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
    for (i = 0; i < n; i++) {
      c = nodes[i];
      c.x -= cx;
      c.y -= cy;
      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
    }
    node.r = cr;
    nodes.forEach(d3_layout_packUnlink);
  }
  function d3_layout_packLink(node) {
    node._pack_next = node._pack_prev = node;
  }
  function d3_layout_packUnlink(node) {
    delete node._pack_next;
    delete node._pack_prev;
  }
  function d3_layout_packTransform(node, x, y, k) {
    var children = node.children;
    node.x = x += k * node.x;
    node.y = y += k * node.y;
    node.r *= k;
    if (children) {
      var i = -1, n = children.length;
      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
    }
  }
  function d3_layout_packPlace(a, b, c) {
    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
    if (db && (dx || dy)) {
      var da = b.r + c.r, dc = dx * dx + dy * dy;
      da *= da;
      db *= db;
      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
      c.x = a.x + x * dx + y * dy;
      c.y = a.y + x * dy - y * dx;
    } else {
      c.x = a.x + db;
      c.y = a.y;
    }
  }
  d3.layout.cluster = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
    function cluster(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
      d3_layout_treeVisitAfter(root, function(node) {
        var children = node.children;
        if (children && children.length) {
          node.x = d3_layout_clusterX(children);
          node.y = d3_layout_clusterY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
      d3_layout_treeVisitAfter(root, nodeSize ? function(node) {
        node.x = (node.x - root.x) * size[0];
        node.y = (root.y - node.y) * size[1];
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
      });
      return nodes;
    }
    cluster.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return cluster;
    };
    cluster.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return cluster;
    };
    cluster.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return cluster;
    };
    return d3_layout_hierarchyRebind(cluster, hierarchy);
  };
  function d3_layout_clusterY(children) {
    return 1 + d3.max(children, function(child) {
      return child.y;
    });
  }
  function d3_layout_clusterX(children) {
    return children.reduce(function(x, child) {
      return x + child.x;
    }, 0) / children.length;
  }
  function d3_layout_clusterLeft(node) {
    var children = node.children;
    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
  }
  function d3_layout_clusterRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
  }
  d3.layout.treemap = function() {
    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
    function scale(children, k) {
      var i = -1, n = children.length, child, area;
      while (++i < n) {
        area = (child = children[i]).value * (k < 0 ? 0 : k);
        child.area = isNaN(area) || area <= 0 ? 0 : area;
      }
    }
    function squarify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while ((n = remaining.length) > 0) {
          row.push(child = remaining[n - 1]);
          row.area += child.area;
          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
            remaining.pop();
            best = score;
          } else {
            row.area -= row.pop().area;
            position(row, u, rect, false);
            u = Math.min(rect.dx, rect.dy);
            row.length = row.area = 0;
            best = Infinity;
          }
        }
        if (row.length) {
          position(row, u, rect, true);
          row.length = row.area = 0;
        }
        children.forEach(squarify);
      }
    }
    function stickify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), remaining = children.slice(), child, row = [];
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while (child = remaining.pop()) {
          row.push(child);
          row.area += child.area;
          if (child.z != null) {
            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
            row.length = row.area = 0;
          }
        }
        children.forEach(stickify);
      }
    }
    function worst(row, u) {
      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
      while (++i < n) {
        if (!(r = row[i].area)) continue;
        if (r < rmin) rmin = r;
        if (r > rmax) rmax = r;
      }
      s *= s;
      u *= u;
      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
    }
    function position(row, u, rect, flush) {
      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
      if (u == rect.dx) {
        if (flush || v > rect.dy) v = rect.dy;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dy = v;
          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
        }
        o.z = true;
        o.dx += rect.x + rect.dx - x;
        rect.y += v;
        rect.dy -= v;
      } else {
        if (flush || v > rect.dx) v = rect.dx;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dx = v;
          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
        }
        o.z = false;
        o.dy += rect.y + rect.dy - y;
        rect.x += v;
        rect.dx -= v;
      }
    }
    function treemap(d) {
      var nodes = stickies || hierarchy(d), root = nodes[0];
      root.x = 0;
      root.y = 0;
      root.dx = size[0];
      root.dy = size[1];
      if (stickies) hierarchy.revalue(root);
      scale([ root ], root.dx * root.dy / root.value);
      (stickies ? stickify : squarify)(root);
      if (sticky) stickies = nodes;
      return nodes;
    }
    treemap.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return treemap;
    };
    treemap.padding = function(x) {
      if (!arguments.length) return padding;
      function padFunction(node) {
        var p = x.call(treemap, node, node.depth);
        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
      }
      function padConstant(node) {
        return d3_layout_treemapPad(node, x);
      }
      var type;
      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
      padConstant) : padConstant;
      return treemap;
    };
    treemap.round = function(x) {
      if (!arguments.length) return round != Number;
      round = x ? Math.round : Number;
      return treemap;
    };
    treemap.sticky = function(x) {
      if (!arguments.length) return sticky;
      sticky = x;
      stickies = null;
      return treemap;
    };
    treemap.ratio = function(x) {
      if (!arguments.length) return ratio;
      ratio = x;
      return treemap;
    };
    treemap.mode = function(x) {
      if (!arguments.length) return mode;
      mode = x + "";
      return treemap;
    };
    return d3_layout_hierarchyRebind(treemap, hierarchy);
  };
  function d3_layout_treemapPadNull(node) {
    return {
      x: node.x,
      y: node.y,
      dx: node.dx,
      dy: node.dy
    };
  }
  function d3_layout_treemapPad(node, padding) {
    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
    if (dx < 0) {
      x += dx / 2;
      dx = 0;
    }
    if (dy < 0) {
      y += dy / 2;
      dy = 0;
    }
    return {
      x: x,
      y: y,
      dx: dx,
      dy: dy
    };
  }
  d3.random = {
    normal: function(µ, σ) {
      var n = arguments.length;
      if (n < 2) σ = 1;
      if (n < 1) µ = 0;
      return function() {
        var x, y, r;
        do {
          x = Math.random() * 2 - 1;
          y = Math.random() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
      };
    },
    logNormal: function() {
      var random = d3.random.normal.apply(d3, arguments);
      return function() {
        return Math.exp(random());
      };
    },
    bates: function(m) {
      var random = d3.random.irwinHall(m);
      return function() {
        return random() / m;
      };
    },
    irwinHall: function(m) {
      return function() {
        for (var s = 0, j = 0; j < m; j++) s += Math.random();
        return s;
      };
    }
  };
  d3.scale = {};
  function d3_scaleExtent(domain) {
    var start = domain[0], stop = domain[domain.length - 1];
    return start < stop ? [ start, stop ] : [ stop, start ];
  }
  function d3_scaleRange(scale) {
    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
  }
  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
    return function(x) {
      return i(u(x));
    };
  }
  function d3_scale_nice(domain, nice) {
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
    if (x1 < x0) {
      dx = i0, i0 = i1, i1 = dx;
      dx = x0, x0 = x1, x1 = dx;
    }
    domain[i0] = nice.floor(x0);
    domain[i1] = nice.ceil(x1);
    return domain;
  }
  function d3_scale_niceStep(step) {
    return step ? {
      floor: function(x) {
        return Math.floor(x / step) * step;
      },
      ceil: function(x) {
        return Math.ceil(x / step) * step;
      }
    } : d3_scale_niceIdentity;
  }
  var d3_scale_niceIdentity = {
    floor: d3_identity,
    ceil: d3_identity
  };
  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
    if (domain[k] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++j <= k) {
      u.push(uninterpolate(domain[j - 1], domain[j]));
      i.push(interpolate(range[j - 1], range[j]));
    }
    return function(x) {
      var j = d3.bisect(domain, x, 1, k) - 1;
      return i[j](u[j](x));
    };
  }
  d3.scale.linear = function() {
    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
  };
  function d3_scale_linear(domain, range, interpolate, clamp) {
    var output, input;
    function rescale() {
      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
      output = linear(domain, range, uninterpolate, interpolate);
      input = linear(range, domain, uninterpolate, d3_interpolate);
      return scale;
    }
    function scale(x) {
      return output(x);
    }
    scale.invert = function(y) {
      return input(y);
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(Number);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.rangeRound = function(x) {
      return scale.range(x).interpolate(d3_interpolateRound);
    };
    scale.clamp = function(x) {
      if (!arguments.length) return clamp;
      clamp = x;
      return rescale();
    };
    scale.interpolate = function(x) {
      if (!arguments.length) return interpolate;
      interpolate = x;
      return rescale();
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      d3_scale_linearNice(domain, m);
      return rescale();
    };
    scale.copy = function() {
      return d3_scale_linear(domain, range, interpolate, clamp);
    };
    return rescale();
  }
  function d3_scale_linearRebind(scale, linear) {
    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
  }
  function d3_scale_linearNice(domain, m) {
    return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
  }
  function d3_scale_linearTickRange(domain, m) {
    if (m == null) m = 10;
    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
    extent[0] = Math.ceil(extent[0] / step) * step;
    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
    extent[2] = step;
    return extent;
  }
  function d3_scale_linearTicks(domain, m) {
    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
  }
  function d3_scale_linearTickFormat(domain, m, format) {
    var range = d3_scale_linearTickRange(domain, m);
    return d3.format(format ? format.replace(d3_format_re, function(a, b, c, d, e, f, g, h, i, j) {
      return [ b, c, d, e, f, g, h, i || "." + d3_scale_linearFormatPrecision(j, range), j ].join("");
    }) : ",." + d3_scale_linearPrecision(range[2]) + "f");
  }
  var d3_scale_linearFormatSignificant = {
    s: 1,
    g: 1,
    p: 1,
    r: 1,
    e: 1
  };
  function d3_scale_linearPrecision(value) {
    return -Math.floor(Math.log(value) / Math.LN10 + .01);
  }
  function d3_scale_linearFormatPrecision(type, range) {
    var p = d3_scale_linearPrecision(range[2]);
    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(Math.abs(range[0]), Math.abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
  }
  d3.scale.log = function() {
    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
  };
  function d3_scale_log(linear, base, positive, domain) {
    function log(x) {
      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
    }
    function pow(x) {
      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
    }
    function scale(x) {
      return linear(log(x));
    }
    scale.invert = function(x) {
      return pow(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      positive = x[0] >= 0;
      linear.domain((domain = x.map(Number)).map(log));
      return scale;
    };
    scale.base = function(_) {
      if (!arguments.length) return base;
      base = +_;
      linear.domain(domain.map(log));
      return scale;
    };
    scale.nice = function() {
      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
      linear.domain(niced);
      domain = niced.map(pow);
      return scale;
    };
    scale.ticks = function() {
      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
      if (isFinite(j - i)) {
        if (positive) {
          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
          ticks.push(pow(i));
        } else {
          ticks.push(pow(i));
          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
        }
        for (i = 0; ticks[i] < u; i++) {}
        for (j = ticks.length; ticks[j - 1] > v; j--) {}
        ticks = ticks.slice(i, j);
      }
      return ticks;
    };
    scale.tickFormat = function(n, format) {
      if (!arguments.length) return d3_scale_logFormat;
      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
      var k = Math.max(.1, n / scale.ticks().length), f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12, 
      Math.floor), e;
      return function(d) {
        return d / pow(f(log(d) + e)) <= k ? format(d) : "";
      };
    };
    scale.copy = function() {
      return d3_scale_log(linear.copy(), base, positive, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
    floor: function(x) {
      return -Math.ceil(-x);
    },
    ceil: function(x) {
      return -Math.floor(-x);
    }
  };
  d3.scale.pow = function() {
    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
  };
  function d3_scale_pow(linear, exponent, domain) {
    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
    function scale(x) {
      return linear(powp(x));
    }
    scale.invert = function(x) {
      return powb(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      linear.domain((domain = x.map(Number)).map(powp));
      return scale;
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      return scale.domain(d3_scale_linearNice(domain, m));
    };
    scale.exponent = function(x) {
      if (!arguments.length) return exponent;
      powp = d3_scale_powPow(exponent = x);
      powb = d3_scale_powPow(1 / exponent);
      linear.domain(domain.map(powp));
      return scale;
    };
    scale.copy = function() {
      return d3_scale_pow(linear.copy(), exponent, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_scale_powPow(e) {
    return function(x) {
      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
    };
  }
  d3.scale.sqrt = function() {
    return d3.scale.pow().exponent(.5);
  };
  d3.scale.ordinal = function() {
    return d3_scale_ordinal([], {
      t: "range",
      a: [ [] ]
    });
  };
  function d3_scale_ordinal(domain, ranger) {
    var index, range, rangeBand;
    function scale(x) {
      return range[((index.get(x) || ranger.t === "range" && index.set(x, domain.push(x))) - 1) % range.length];
    }
    function steps(start, step) {
      return d3.range(domain.length).map(function(i) {
        return start + step * i;
      });
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = [];
      index = new d3_Map();
      var i = -1, n = x.length, xi;
      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
      return scale[ranger.t].apply(scale, ranger.a);
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      rangeBand = 0;
      ranger = {
        t: "range",
        a: arguments
      };
      return scale;
    };
    scale.rangePoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = (stop - start) / (Math.max(1, domain.length - 1) + padding);
      range = steps(domain.length < 2 ? (start + stop) / 2 : start + step * padding / 2, step);
      rangeBand = 0;
      ranger = {
        t: "rangePoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
      range = steps(start + step * outerPadding, step);
      if (reverse) range.reverse();
      rangeBand = step * (1 - padding);
      ranger = {
        t: "rangeBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding)), error = stop - start - (domain.length - padding) * step;
      range = steps(start + Math.round(error / 2), step);
      if (reverse) range.reverse();
      rangeBand = Math.round(step * (1 - padding));
      ranger = {
        t: "rangeRoundBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeBand = function() {
      return rangeBand;
    };
    scale.rangeExtent = function() {
      return d3_scaleExtent(ranger.a[0]);
    };
    scale.copy = function() {
      return d3_scale_ordinal(domain, ranger);
    };
    return scale.domain(domain);
  }
  d3.scale.category10 = function() {
    return d3.scale.ordinal().range(d3_category10);
  };
  d3.scale.category20 = function() {
    return d3.scale.ordinal().range(d3_category20);
  };
  d3.scale.category20b = function() {
    return d3.scale.ordinal().range(d3_category20b);
  };
  d3.scale.category20c = function() {
    return d3.scale.ordinal().range(d3_category20c);
  };
  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
  d3.scale.quantile = function() {
    return d3_scale_quantile([], []);
  };
  function d3_scale_quantile(domain, range) {
    var thresholds;
    function rescale() {
      var k = 0, q = range.length;
      thresholds = [];
      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
      return scale;
    }
    function scale(x) {
      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.filter(function(d) {
        return !isNaN(d);
      }).sort(d3.ascending);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.quantiles = function() {
      return thresholds;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
    };
    scale.copy = function() {
      return d3_scale_quantile(domain, range);
    };
    return rescale();
  }
  d3.scale.quantize = function() {
    return d3_scale_quantize(0, 1, [ 0, 1 ]);
  };
  function d3_scale_quantize(x0, x1, range) {
    var kx, i;
    function scale(x) {
      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
    }
    function rescale() {
      kx = range.length / (x1 - x0);
      i = range.length - 1;
      return scale;
    }
    scale.domain = function(x) {
      if (!arguments.length) return [ x0, x1 ];
      x0 = +x[0];
      x1 = +x[x.length - 1];
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      y = y < 0 ? NaN : y / kx + x0;
      return [ y, y + 1 / kx ];
    };
    scale.copy = function() {
      return d3_scale_quantize(x0, x1, range);
    };
    return rescale();
  }
  d3.scale.threshold = function() {
    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
  };
  function d3_scale_threshold(domain, range) {
    function scale(x) {
      if (x <= x) return range[d3.bisect(domain, x)];
    }
    scale.domain = function(_) {
      if (!arguments.length) return domain;
      domain = _;
      return scale;
    };
    scale.range = function(_) {
      if (!arguments.length) return range;
      range = _;
      return scale;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return [ domain[y - 1], domain[y] ];
    };
    scale.copy = function() {
      return d3_scale_threshold(domain, range);
    };
    return scale;
  }
  d3.scale.identity = function() {
    return d3_scale_identity([ 0, 1 ]);
  };
  function d3_scale_identity(domain) {
    function identity(x) {
      return +x;
    }
    identity.invert = identity;
    identity.domain = identity.range = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(identity);
      return identity;
    };
    identity.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    identity.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    identity.copy = function() {
      return d3_scale_identity(domain);
    };
    return identity;
  }
  d3.svg = {};
  d3.svg.arc = function() {
    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function arc() {
      var r0 = innerRadius.apply(this, arguments), r1 = outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) + d3_svg_arcOffset, a1 = endAngle.apply(this, arguments) + d3_svg_arcOffset, da = (a1 < a0 && (da = a0, 
      a0 = a1, a1 = da), a1 - a0), df = da < π ? "0" : "1", c0 = Math.cos(a0), s0 = Math.sin(a0), c1 = Math.cos(a1), s1 = Math.sin(a1);
      return da >= d3_svg_arcMax ? r0 ? "M0," + r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + -r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + r1 + "M0," + r0 + "A" + r0 + "," + r0 + " 0 1,0 0," + -r0 + "A" + r0 + "," + r0 + " 0 1,0 0," + r0 + "Z" : "M0," + r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + -r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + r1 + "Z" : r0 ? "M" + r1 * c0 + "," + r1 * s0 + "A" + r1 + "," + r1 + " 0 " + df + ",1 " + r1 * c1 + "," + r1 * s1 + "L" + r0 * c1 + "," + r0 * s1 + "A" + r0 + "," + r0 + " 0 " + df + ",0 " + r0 * c0 + "," + r0 * s0 + "Z" : "M" + r1 * c0 + "," + r1 * s0 + "A" + r1 + "," + r1 + " 0 " + df + ",1 " + r1 * c1 + "," + r1 * s1 + "L0,0" + "Z";
    }
    arc.innerRadius = function(v) {
      if (!arguments.length) return innerRadius;
      innerRadius = d3_functor(v);
      return arc;
    };
    arc.outerRadius = function(v) {
      if (!arguments.length) return outerRadius;
      outerRadius = d3_functor(v);
      return arc;
    };
    arc.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return arc;
    };
    arc.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return arc;
    };
    arc.centroid = function() {
      var r = (innerRadius.apply(this, arguments) + outerRadius.apply(this, arguments)) / 2, a = (startAngle.apply(this, arguments) + endAngle.apply(this, arguments)) / 2 + d3_svg_arcOffset;
      return [ Math.cos(a) * r, Math.sin(a) * r ];
    };
    return arc;
  };
  var d3_svg_arcOffset = -halfπ, d3_svg_arcMax = τ - ε;
  function d3_svg_arcInnerRadius(d) {
    return d.innerRadius;
  }
  function d3_svg_arcOuterRadius(d) {
    return d.outerRadius;
  }
  function d3_svg_arcStartAngle(d) {
    return d.startAngle;
  }
  function d3_svg_arcEndAngle(d) {
    return d.endAngle;
  }
  function d3_svg_line(projection) {
    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
    function line(data) {
      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
      function segment() {
        segments.push("M", interpolate(projection(points), tension));
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
        } else if (points.length) {
          segment();
          points = [];
        }
      }
      if (points.length) segment();
      return segments.length ? segments.join("") : null;
    }
    line.x = function(_) {
      if (!arguments.length) return x;
      x = _;
      return line;
    };
    line.y = function(_) {
      if (!arguments.length) return y;
      y = _;
      return line;
    };
    line.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return line;
    };
    line.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      return line;
    };
    line.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return line;
    };
    return line;
  }
  d3.svg.line = function() {
    return d3_svg_line(d3_identity);
  };
  var d3_svg_lineInterpolators = d3.map({
    linear: d3_svg_lineLinear,
    "linear-closed": d3_svg_lineLinearClosed,
    step: d3_svg_lineStep,
    "step-before": d3_svg_lineStepBefore,
    "step-after": d3_svg_lineStepAfter,
    basis: d3_svg_lineBasis,
    "basis-open": d3_svg_lineBasisOpen,
    "basis-closed": d3_svg_lineBasisClosed,
    bundle: d3_svg_lineBundle,
    cardinal: d3_svg_lineCardinal,
    "cardinal-open": d3_svg_lineCardinalOpen,
    "cardinal-closed": d3_svg_lineCardinalClosed,
    monotone: d3_svg_lineMonotone
  });
  d3_svg_lineInterpolators.forEach(function(key, value) {
    value.key = key;
    value.closed = /-closed$/.test(key);
  });
  function d3_svg_lineLinear(points) {
    return points.join("L");
  }
  function d3_svg_lineLinearClosed(points) {
    return d3_svg_lineLinear(points) + "Z";
  }
  function d3_svg_lineStep(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
    if (n > 1) path.push("H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepBefore(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepAfter(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
    return path.join("");
  }
  function d3_svg_lineCardinalOpen(points, tension) {
    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, points.length - 1), d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineCardinalClosed(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
  }
  function d3_svg_lineCardinal(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineHermite(points, tangents) {
    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
      return d3_svg_lineLinear(points);
    }
    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
    if (quad) {
      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
      p0 = points[1];
      pi = 2;
    }
    if (tangents.length > 1) {
      t = tangents[1];
      p = points[pi];
      pi++;
      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      for (var i = 2; i < tangents.length; i++, pi++) {
        p = points[pi];
        t = tangents[i];
        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      }
    }
    if (quad) {
      var lp = points[pi];
      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
    }
    return path;
  }
  function d3_svg_lineCardinalTangents(points, tension) {
    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
    while (++i < n) {
      p0 = p1;
      p1 = p2;
      p2 = points[i];
      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
    }
    return tangents;
  }
  function d3_svg_lineBasis(points) {
    if (points.length < 3) return d3_svg_lineLinear(points);
    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    points.push(points[n - 1]);
    while (++i <= n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    points.pop();
    path.push("L", pi);
    return path.join("");
  }
  function d3_svg_lineBasisOpen(points) {
    if (points.length < 4) return d3_svg_lineLinear(points);
    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
    while (++i < 3) {
      pi = points[i];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
    --i;
    while (++i < n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBasisClosed(points) {
    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
    while (++i < 4) {
      pi = points[i % n];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    --i;
    while (++i < m) {
      pi = points[i % n];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBundle(points, tension) {
    var n = points.length - 1;
    if (n) {
      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
      while (++i <= n) {
        p = points[i];
        t = i / n;
        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
      }
    }
    return d3_svg_lineBasis(points);
  }
  function d3_svg_lineDot4(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
  function d3_svg_lineBasisBezier(path, x, y) {
    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
  }
  function d3_svg_lineSlope(p0, p1) {
    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
  }
  function d3_svg_lineFiniteDifferences(points) {
    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
    while (++i < j) {
      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
    }
    m[i] = d;
    return m;
  }
  function d3_svg_lineMonotoneTangents(points) {
    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
    while (++i < j) {
      d = d3_svg_lineSlope(points[i], points[i + 1]);
      if (abs(d) < ε) {
        m[i] = m[i + 1] = 0;
      } else {
        a = m[i] / d;
        b = m[i + 1] / d;
        s = a * a + b * b;
        if (s > 9) {
          s = d * 3 / Math.sqrt(s);
          m[i] = s * a;
          m[i + 1] = s * b;
        }
      }
    }
    i = -1;
    while (++i <= j) {
      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
      tangents.push([ s || 0, m[i] * s || 0 ]);
    }
    return tangents;
  }
  function d3_svg_lineMonotone(points) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
  }
  d3.svg.line.radial = function() {
    var line = d3_svg_line(d3_svg_lineRadial);
    line.radius = line.x, delete line.x;
    line.angle = line.y, delete line.y;
    return line;
  };
  function d3_svg_lineRadial(points) {
    var point, i = -1, n = points.length, r, a;
    while (++i < n) {
      point = points[i];
      r = point[0];
      a = point[1] + d3_svg_arcOffset;
      point[0] = r * Math.cos(a);
      point[1] = r * Math.sin(a);
    }
    return points;
  }
  function d3_svg_area(projection) {
    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
    function area(data) {
      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
        return x;
      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
        return y;
      } : d3_functor(y1), x, y;
      function segment() {
        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
        } else if (points0.length) {
          segment();
          points0 = [];
          points1 = [];
        }
      }
      if (points0.length) segment();
      return segments.length ? segments.join("") : null;
    }
    area.x = function(_) {
      if (!arguments.length) return x1;
      x0 = x1 = _;
      return area;
    };
    area.x0 = function(_) {
      if (!arguments.length) return x0;
      x0 = _;
      return area;
    };
    area.x1 = function(_) {
      if (!arguments.length) return x1;
      x1 = _;
      return area;
    };
    area.y = function(_) {
      if (!arguments.length) return y1;
      y0 = y1 = _;
      return area;
    };
    area.y0 = function(_) {
      if (!arguments.length) return y0;
      y0 = _;
      return area;
    };
    area.y1 = function(_) {
      if (!arguments.length) return y1;
      y1 = _;
      return area;
    };
    area.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return area;
    };
    area.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      interpolateReverse = interpolate.reverse || interpolate;
      L = interpolate.closed ? "M" : "L";
      return area;
    };
    area.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return area;
    };
    return area;
  }
  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
  d3.svg.area = function() {
    return d3_svg_area(d3_identity);
  };
  d3.svg.area.radial = function() {
    var area = d3_svg_area(d3_svg_lineRadial);
    area.radius = area.x, delete area.x;
    area.innerRadius = area.x0, delete area.x0;
    area.outerRadius = area.x1, delete area.x1;
    area.angle = area.y, delete area.y;
    area.startAngle = area.y0, delete area.y0;
    area.endAngle = area.y1, delete area.y1;
    return area;
  };
  d3.svg.chord = function() {
    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function chord(d, i) {
      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
    }
    function subgroup(self, f, d, i) {
      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) + d3_svg_arcOffset, a1 = endAngle.call(self, subgroup, i) + d3_svg_arcOffset;
      return {
        r: r,
        a0: a0,
        a1: a1,
        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
      };
    }
    function equals(a, b) {
      return a.a0 == b.a0 && a.a1 == b.a1;
    }
    function arc(r, p, a) {
      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
    }
    function curve(r0, p0, r1, p1) {
      return "Q 0,0 " + p1;
    }
    chord.radius = function(v) {
      if (!arguments.length) return radius;
      radius = d3_functor(v);
      return chord;
    };
    chord.source = function(v) {
      if (!arguments.length) return source;
      source = d3_functor(v);
      return chord;
    };
    chord.target = function(v) {
      if (!arguments.length) return target;
      target = d3_functor(v);
      return chord;
    };
    chord.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return chord;
    };
    chord.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return chord;
    };
    return chord;
  };
  function d3_svg_chordRadius(d) {
    return d.radius;
  }
  d3.svg.diagonal = function() {
    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
    function diagonal(d, i) {
      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
        x: p0.x,
        y: m
      }, {
        x: p3.x,
        y: m
      }, p3 ];
      p = p.map(projection);
      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
    }
    diagonal.source = function(x) {
      if (!arguments.length) return source;
      source = d3_functor(x);
      return diagonal;
    };
    diagonal.target = function(x) {
      if (!arguments.length) return target;
      target = d3_functor(x);
      return diagonal;
    };
    diagonal.projection = function(x) {
      if (!arguments.length) return projection;
      projection = x;
      return diagonal;
    };
    return diagonal;
  };
  function d3_svg_diagonalProjection(d) {
    return [ d.x, d.y ];
  }
  d3.svg.diagonal.radial = function() {
    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
    diagonal.projection = function(x) {
      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
    };
    return diagonal;
  };
  function d3_svg_diagonalRadialProjection(projection) {
    return function() {
      var d = projection.apply(this, arguments), r = d[0], a = d[1] + d3_svg_arcOffset;
      return [ r * Math.cos(a), r * Math.sin(a) ];
    };
  }
  d3.svg.symbol = function() {
    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
    function symbol(d, i) {
      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
    }
    symbol.type = function(x) {
      if (!arguments.length) return type;
      type = d3_functor(x);
      return symbol;
    };
    symbol.size = function(x) {
      if (!arguments.length) return size;
      size = d3_functor(x);
      return symbol;
    };
    return symbol;
  };
  function d3_svg_symbolSize() {
    return 64;
  }
  function d3_svg_symbolType() {
    return "circle";
  }
  function d3_svg_symbolCircle(size) {
    var r = Math.sqrt(size / π);
    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
  }
  var d3_svg_symbols = d3.map({
    circle: d3_svg_symbolCircle,
    cross: function(size) {
      var r = Math.sqrt(size / 5) / 2;
      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
    },
    diamond: function(size) {
      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
    },
    square: function(size) {
      var r = Math.sqrt(size) / 2;
      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
    },
    "triangle-down": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
    },
    "triangle-up": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
    }
  });
  d3.svg.symbolTypes = d3_svg_symbols.keys();
  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
  function d3_transition(groups, id) {
    d3_subclass(groups, d3_transitionPrototype);
    groups.id = id;
    return groups;
  }
  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
  d3_transitionPrototype.call = d3_selectionPrototype.call;
  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
  d3_transitionPrototype.node = d3_selectionPrototype.node;
  d3_transitionPrototype.size = d3_selectionPrototype.size;
  d3.transition = function(selection) {
    return arguments.length ? d3_transitionInheritId ? selection.transition() : selection : d3_selectionRoot.transition();
  };
  d3.transition.prototype = d3_transitionPrototype;
  d3_transitionPrototype.select = function(selector) {
    var id = this.id, subgroups = [], subgroup, subnode, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          d3_transitionNode(subnode, i, id, node.__transition__[id]);
          subgroup.push(subnode);
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_transition(subgroups, id);
  };
  d3_transitionPrototype.selectAll = function(selector) {
    var id = this.id, subgroups = [], subgroup, subnodes, node, subnode, transition;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          transition = node.__transition__[id];
          subnodes = selector.call(node, node.__data__, i, j);
          subgroups.push(subgroup = []);
          for (var k = -1, o = subnodes.length; ++k < o; ) {
            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, id, transition);
            subgroup.push(subnode);
          }
        }
      }
    }
    return d3_transition(subgroups, id);
  };
  d3_transitionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_transition(subgroups, this.id);
  };
  d3_transitionPrototype.tween = function(name, tween) {
    var id = this.id;
    if (arguments.length < 2) return this.node().__transition__[id].tween.get(name);
    return d3_selection_each(this, tween == null ? function(node) {
      node.__transition__[id].tween.remove(name);
    } : function(node) {
      node.__transition__[id].tween.set(name, tween);
    });
  };
  function d3_transition_tween(groups, name, value, tween) {
    var id = groups.id;
    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
      node.__transition__[id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
    } : (value = tween(value), function(node) {
      node.__transition__[id].tween.set(name, value);
    }));
  }
  d3_transitionPrototype.attr = function(nameNS, value) {
    if (arguments.length < 2) {
      for (value in nameNS) this.attr(value, nameNS[value]);
      return this;
    }
    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrTween(b) {
      return b == null ? attrNull : (b += "", function() {
        var a = this.getAttribute(name), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttribute(name, i(t));
        });
      });
    }
    function attrTweenNS(b) {
      return b == null ? attrNullNS : (b += "", function() {
        var a = this.getAttributeNS(name.space, name.local), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttributeNS(name.space, name.local, i(t));
        });
      });
    }
    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.attrTween = function(nameNS, tween) {
    var name = d3.ns.qualify(nameNS);
    function attrTween(d, i) {
      var f = tween.call(this, d, i, this.getAttribute(name));
      return f && function(t) {
        this.setAttribute(name, f(t));
      };
    }
    function attrTweenNS(d, i) {
      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
      return f && function(t) {
        this.setAttributeNS(name.space, name.local, f(t));
      };
    }
    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.style(priority, name[priority], value);
        return this;
      }
      priority = "";
    }
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleString(b) {
      return b == null ? styleNull : (b += "", function() {
        var a = d3_window.getComputedStyle(this, null).getPropertyValue(name), i;
        return a !== b && (i = d3_interpolate(a, b), function(t) {
          this.style.setProperty(name, i(t), priority);
        });
      });
    }
    return d3_transition_tween(this, "style." + name, value, styleString);
  };
  d3_transitionPrototype.styleTween = function(name, tween, priority) {
    if (arguments.length < 3) priority = "";
    function styleTween(d, i) {
      var f = tween.call(this, d, i, d3_window.getComputedStyle(this, null).getPropertyValue(name));
      return f && function(t) {
        this.style.setProperty(name, f(t), priority);
      };
    }
    return this.tween("style." + name, styleTween);
  };
  d3_transitionPrototype.text = function(value) {
    return d3_transition_tween(this, "text", value, d3_transition_text);
  };
  function d3_transition_text(b) {
    if (b == null) b = "";
    return function() {
      this.textContent = b;
    };
  }
  d3_transitionPrototype.remove = function() {
    return this.each("end.transition", function() {
      var p;
      if (this.__transition__.count < 2 && (p = this.parentNode)) p.removeChild(this);
    });
  };
  d3_transitionPrototype.ease = function(value) {
    var id = this.id;
    if (arguments.length < 1) return this.node().__transition__[id].ease;
    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
    return d3_selection_each(this, function(node) {
      node.__transition__[id].ease = value;
    });
  };
  d3_transitionPrototype.delay = function(value) {
    var id = this.id;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node.__transition__[id].delay = +value.call(node, node.__data__, i, j);
    } : (value = +value, function(node) {
      node.__transition__[id].delay = value;
    }));
  };
  d3_transitionPrototype.duration = function(value) {
    var id = this.id;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node.__transition__[id].duration = Math.max(1, value.call(node, node.__data__, i, j));
    } : (value = Math.max(1, value), function(node) {
      node.__transition__[id].duration = value;
    }));
  };
  d3_transitionPrototype.each = function(type, listener) {
    var id = this.id;
    if (arguments.length < 2) {
      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
      d3_transitionInheritId = id;
      d3_selection_each(this, function(node, i, j) {
        d3_transitionInherit = node.__transition__[id];
        type.call(node, node.__data__, i, j);
      });
      d3_transitionInherit = inherit;
      d3_transitionInheritId = inheritId;
    } else {
      d3_selection_each(this, function(node) {
        var transition = node.__transition__[id];
        (transition.event || (transition.event = d3.dispatch("start", "end"))).on(type, listener);
      });
    }
    return this;
  };
  d3_transitionPrototype.transition = function() {
    var id0 = this.id, id1 = ++d3_transitionId, subgroups = [], subgroup, group, node, transition;
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if (node = group[i]) {
          transition = Object.create(node.__transition__[id0]);
          transition.delay += transition.duration;
          d3_transitionNode(node, i, id1, transition);
        }
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, id1);
  };
  function d3_transitionNode(node, i, id, inherit) {
    var lock = node.__transition__ || (node.__transition__ = {
      active: 0,
      count: 0
    }), transition = lock[id];
    if (!transition) {
      var time = inherit.time;
      transition = lock[id] = {
        tween: new d3_Map(),
        time: time,
        ease: inherit.ease,
        delay: inherit.delay,
        duration: inherit.duration
      };
      ++lock.count;
      d3.timer(function(elapsed) {
        var d = node.__data__, ease = transition.ease, delay = transition.delay, duration = transition.duration, timer = d3_timer_active, tweened = [];
        timer.t = delay + time;
        if (delay <= elapsed) return start(elapsed - delay);
        timer.c = start;
        function start(elapsed) {
          if (lock.active > id) return stop();
          lock.active = id;
          transition.event && transition.event.start.call(node, d, i);
          transition.tween.forEach(function(key, value) {
            if (value = value.call(node, d, i)) {
              tweened.push(value);
            }
          });
          d3.timer(function() {
            timer.c = tick(elapsed || 1) ? d3_true : tick;
            return 1;
          }, 0, time);
        }
        function tick(elapsed) {
          if (lock.active !== id) return stop();
          var t = elapsed / duration, e = ease(t), n = tweened.length;
          while (n > 0) {
            tweened[--n].call(node, e);
          }
          if (t >= 1) {
            transition.event && transition.event.end.call(node, d, i);
            return stop();
          }
        }
        function stop() {
          if (--lock.count) delete lock[id]; else delete node.__transition__;
          return 1;
        }
      }, 0, time);
    }
  }
  d3.svg.axis = function() {
    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
    function axis(g) {
      g.each(function() {
        var g = d3.select(this);
        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick).style("opacity", 1), tickTransform;
        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
        d3.transition(path));
        tickEnter.append("line");
        tickEnter.append("text");
        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text");
        switch (orient) {
         case "bottom":
          {
            tickTransform = d3_svg_axisX;
            lineEnter.attr("y2", innerTickSize);
            textEnter.attr("y", Math.max(innerTickSize, 0) + tickPadding);
            lineUpdate.attr("x2", 0).attr("y2", innerTickSize);
            textUpdate.attr("x", 0).attr("y", Math.max(innerTickSize, 0) + tickPadding);
            text.attr("dy", ".71em").style("text-anchor", "middle");
            pathUpdate.attr("d", "M" + range[0] + "," + outerTickSize + "V0H" + range[1] + "V" + outerTickSize);
            break;
          }

         case "top":
          {
            tickTransform = d3_svg_axisX;
            lineEnter.attr("y2", -innerTickSize);
            textEnter.attr("y", -(Math.max(innerTickSize, 0) + tickPadding));
            lineUpdate.attr("x2", 0).attr("y2", -innerTickSize);
            textUpdate.attr("x", 0).attr("y", -(Math.max(innerTickSize, 0) + tickPadding));
            text.attr("dy", "0em").style("text-anchor", "middle");
            pathUpdate.attr("d", "M" + range[0] + "," + -outerTickSize + "V0H" + range[1] + "V" + -outerTickSize);
            break;
          }

         case "left":
          {
            tickTransform = d3_svg_axisY;
            lineEnter.attr("x2", -innerTickSize);
            textEnter.attr("x", -(Math.max(innerTickSize, 0) + tickPadding));
            lineUpdate.attr("x2", -innerTickSize).attr("y2", 0);
            textUpdate.attr("x", -(Math.max(innerTickSize, 0) + tickPadding)).attr("y", 0);
            text.attr("dy", ".32em").style("text-anchor", "end");
            pathUpdate.attr("d", "M" + -outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + -outerTickSize);
            break;
          }

         case "right":
          {
            tickTransform = d3_svg_axisY;
            lineEnter.attr("x2", innerTickSize);
            textEnter.attr("x", Math.max(innerTickSize, 0) + tickPadding);
            lineUpdate.attr("x2", innerTickSize).attr("y2", 0);
            textUpdate.attr("x", Math.max(innerTickSize, 0) + tickPadding).attr("y", 0);
            text.attr("dy", ".32em").style("text-anchor", "start");
            pathUpdate.attr("d", "M" + outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + outerTickSize);
            break;
          }
        }
        if (scale1.rangeBand) {
          var x = scale1, dx = x.rangeBand() / 2;
          scale0 = scale1 = function(d) {
            return x(d) + dx;
          };
        } else if (scale0.rangeBand) {
          scale0 = scale1;
        } else {
          tickExit.call(tickTransform, scale1);
        }
        tickEnter.call(tickTransform, scale0);
        tickUpdate.call(tickTransform, scale1);
      });
    }
    axis.scale = function(x) {
      if (!arguments.length) return scale;
      scale = x;
      return axis;
    };
    axis.orient = function(x) {
      if (!arguments.length) return orient;
      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
      return axis;
    };
    axis.ticks = function() {
      if (!arguments.length) return tickArguments_;
      tickArguments_ = arguments;
      return axis;
    };
    axis.tickValues = function(x) {
      if (!arguments.length) return tickValues;
      tickValues = x;
      return axis;
    };
    axis.tickFormat = function(x) {
      if (!arguments.length) return tickFormat_;
      tickFormat_ = x;
      return axis;
    };
    axis.tickSize = function(x) {
      var n = arguments.length;
      if (!n) return innerTickSize;
      innerTickSize = +x;
      outerTickSize = +arguments[n - 1];
      return axis;
    };
    axis.innerTickSize = function(x) {
      if (!arguments.length) return innerTickSize;
      innerTickSize = +x;
      return axis;
    };
    axis.outerTickSize = function(x) {
      if (!arguments.length) return outerTickSize;
      outerTickSize = +x;
      return axis;
    };
    axis.tickPadding = function(x) {
      if (!arguments.length) return tickPadding;
      tickPadding = +x;
      return axis;
    };
    axis.tickSubdivide = function() {
      return arguments.length && axis;
    };
    return axis;
  };
  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
    top: 1,
    right: 1,
    bottom: 1,
    left: 1
  };
  function d3_svg_axisX(selection, x) {
    selection.attr("transform", function(d) {
      return "translate(" + x(d) + ",0)";
    });
  }
  function d3_svg_axisY(selection, y) {
    selection.attr("transform", function(d) {
      return "translate(0," + y(d) + ")";
    });
  }
  d3.svg.brush = function() {
    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
    function brush(g) {
      g.each(function() {
        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
        var background = g.selectAll(".background").data([ 0 ]);
        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
        var resize = g.selectAll(".resize").data(resizes, d3_identity);
        resize.exit().remove();
        resize.enter().append("g").attr("class", function(d) {
          return "resize " + d;
        }).style("cursor", function(d) {
          return d3_svg_brushCursor[d];
        }).append("rect").attr("x", function(d) {
          return /[ew]$/.test(d) ? -3 : null;
        }).attr("y", function(d) {
          return /^[ns]/.test(d) ? -3 : null;
        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
        resize.style("display", brush.empty() ? "none" : null);
        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
        if (x) {
          range = d3_scaleRange(x);
          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
          redrawX(gUpdate);
        }
        if (y) {
          range = d3_scaleRange(y);
          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
          redrawY(gUpdate);
        }
        redraw(gUpdate);
      });
    }
    brush.event = function(g) {
      g.each(function() {
        var event_ = event.of(this, arguments), extent1 = {
          x: xExtent,
          y: yExtent,
          i: xExtentDomain,
          j: yExtentDomain
        }, extent0 = this.__chart__ || extent1;
        this.__chart__ = extent1;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.brush", function() {
            xExtentDomain = extent0.i;
            yExtentDomain = extent0.j;
            xExtent = extent0.x;
            yExtent = extent0.y;
            event_({
              type: "brushstart"
            });
          }).tween("brush:brush", function() {
            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
            xExtentDomain = yExtentDomain = null;
            return function(t) {
              xExtent = extent1.x = xi(t);
              yExtent = extent1.y = yi(t);
              event_({
                type: "brush",
                mode: "resize"
              });
            };
          }).each("end.brush", function() {
            xExtentDomain = extent1.i;
            yExtentDomain = extent1.j;
            event_({
              type: "brush",
              mode: "resize"
            });
            event_({
              type: "brushend"
            });
          });
        } else {
          event_({
            type: "brushstart"
          });
          event_({
            type: "brush",
            mode: "resize"
          });
          event_({
            type: "brushend"
          });
        }
      });
    };
    function redraw(g) {
      g.selectAll(".resize").attr("transform", function(d) {
        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
      });
    }
    function redrawX(g) {
      g.select(".extent").attr("x", xExtent[0]);
      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
    }
    function redrawY(g) {
      g.select(".extent").attr("y", yExtent[0]);
      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
    }
    function brushstart() {
      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(), center, origin = d3.mouse(target), offset;
      var w = d3.select(d3_window).on("keydown.brush", keydown).on("keyup.brush", keyup);
      if (d3.event.changedTouches) {
        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
      } else {
        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
      }
      g.interrupt().selectAll("*").interrupt();
      if (dragging) {
        origin[0] = xExtent[0] - origin[0];
        origin[1] = yExtent[0] - origin[1];
      } else if (resizing) {
        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
        origin[0] = xExtent[ex];
        origin[1] = yExtent[ey];
      } else if (d3.event.altKey) center = origin.slice();
      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
      d3.select("body").style("cursor", eventTarget.style("cursor"));
      event_({
        type: "brushstart"
      });
      brushmove();
      function keydown() {
        if (d3.event.keyCode == 32) {
          if (!dragging) {
            center = null;
            origin[0] -= xExtent[1];
            origin[1] -= yExtent[1];
            dragging = 2;
          }
          d3_eventPreventDefault();
        }
      }
      function keyup() {
        if (d3.event.keyCode == 32 && dragging == 2) {
          origin[0] += xExtent[1];
          origin[1] += yExtent[1];
          dragging = 0;
          d3_eventPreventDefault();
        }
      }
      function brushmove() {
        var point = d3.mouse(target), moved = false;
        if (offset) {
          point[0] += offset[0];
          point[1] += offset[1];
        }
        if (!dragging) {
          if (d3.event.altKey) {
            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
            origin[0] = xExtent[+(point[0] < center[0])];
            origin[1] = yExtent[+(point[1] < center[1])];
          } else center = null;
        }
        if (resizingX && move1(point, x, 0)) {
          redrawX(g);
          moved = true;
        }
        if (resizingY && move1(point, y, 1)) {
          redrawY(g);
          moved = true;
        }
        if (moved) {
          redraw(g);
          event_({
            type: "brush",
            mode: dragging ? "move" : "resize"
          });
        }
      }
      function move1(point, scale, i) {
        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
        if (dragging) {
          r0 -= position;
          r1 -= size + position;
        }
        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
        if (dragging) {
          max = (min += position) + size;
        } else {
          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
          if (position < min) {
            max = min;
            min = position;
          } else {
            max = position;
          }
        }
        if (extent[0] != min || extent[1] != max) {
          if (i) yExtentDomain = null; else xExtentDomain = null;
          extent[0] = min;
          extent[1] = max;
          return true;
        }
      }
      function brushend() {
        brushmove();
        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
        d3.select("body").style("cursor", null);
        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
        dragRestore();
        event_({
          type: "brushend"
        });
      }
    }
    brush.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.clamp = function(z) {
      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
      return brush;
    };
    brush.extent = function(z) {
      var x0, x1, y0, y1, t;
      if (!arguments.length) {
        if (x) {
          if (xExtentDomain) {
            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
          } else {
            x0 = xExtent[0], x1 = xExtent[1];
            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
            if (x1 < x0) t = x0, x0 = x1, x1 = t;
          }
        }
        if (y) {
          if (yExtentDomain) {
            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
          } else {
            y0 = yExtent[0], y1 = yExtent[1];
            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
            if (y1 < y0) t = y0, y0 = y1, y1 = t;
          }
        }
        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
      }
      if (x) {
        x0 = z[0], x1 = z[1];
        if (y) x0 = x0[0], x1 = x1[0];
        xExtentDomain = [ x0, x1 ];
        if (x.invert) x0 = x(x0), x1 = x(x1);
        if (x1 < x0) t = x0, x0 = x1, x1 = t;
        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
      }
      if (y) {
        y0 = z[0], y1 = z[1];
        if (x) y0 = y0[1], y1 = y1[1];
        yExtentDomain = [ y0, y1 ];
        if (y.invert) y0 = y(y0), y1 = y(y1);
        if (y1 < y0) t = y0, y0 = y1, y1 = t;
        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
      }
      return brush;
    };
    brush.clear = function() {
      if (!brush.empty()) {
        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
        xExtentDomain = yExtentDomain = null;
      }
      return brush;
    };
    brush.empty = function() {
      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
    };
    return d3.rebind(brush, event, "on");
  };
  var d3_svg_brushCursor = {
    n: "ns-resize",
    e: "ew-resize",
    s: "ns-resize",
    w: "ew-resize",
    nw: "nwse-resize",
    ne: "nesw-resize",
    se: "nwse-resize",
    sw: "nesw-resize"
  };
  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
  var d3_time = d3.time = {}, d3_date = Date, d3_time_daySymbols = [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ];
  function d3_date_utc() {
    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
  }
  d3_date_utc.prototype = {
    getDate: function() {
      return this._.getUTCDate();
    },
    getDay: function() {
      return this._.getUTCDay();
    },
    getFullYear: function() {
      return this._.getUTCFullYear();
    },
    getHours: function() {
      return this._.getUTCHours();
    },
    getMilliseconds: function() {
      return this._.getUTCMilliseconds();
    },
    getMinutes: function() {
      return this._.getUTCMinutes();
    },
    getMonth: function() {
      return this._.getUTCMonth();
    },
    getSeconds: function() {
      return this._.getUTCSeconds();
    },
    getTime: function() {
      return this._.getTime();
    },
    getTimezoneOffset: function() {
      return 0;
    },
    valueOf: function() {
      return this._.valueOf();
    },
    setDate: function() {
      d3_time_prototype.setUTCDate.apply(this._, arguments);
    },
    setDay: function() {
      d3_time_prototype.setUTCDay.apply(this._, arguments);
    },
    setFullYear: function() {
      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
    },
    setHours: function() {
      d3_time_prototype.setUTCHours.apply(this._, arguments);
    },
    setMilliseconds: function() {
      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
    },
    setMinutes: function() {
      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
    },
    setMonth: function() {
      d3_time_prototype.setUTCMonth.apply(this._, arguments);
    },
    setSeconds: function() {
      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
    },
    setTime: function() {
      d3_time_prototype.setTime.apply(this._, arguments);
    }
  };
  var d3_time_prototype = Date.prototype;
  var d3_time_formatDateTime = "%a %b %e %X %Y", d3_time_formatDate = "%m/%d/%Y", d3_time_formatTime = "%H:%M:%S";
  var d3_time_days = [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ], d3_time_dayAbbreviations = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ], d3_time_months = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ], d3_time_monthAbbreviations = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
  function d3_time_interval(local, step, number) {
    function round(date) {
      var d0 = local(date), d1 = offset(d0, 1);
      return date - d0 < d1 - date ? d0 : d1;
    }
    function ceil(date) {
      step(date = local(new d3_date(date - 1)), 1);
      return date;
    }
    function offset(date, k) {
      step(date = new d3_date(+date), k);
      return date;
    }
    function range(t0, t1, dt) {
      var time = ceil(t0), times = [];
      if (dt > 1) {
        while (time < t1) {
          if (!(number(time) % dt)) times.push(new Date(+time));
          step(time, 1);
        }
      } else {
        while (time < t1) times.push(new Date(+time)), step(time, 1);
      }
      return times;
    }
    function range_utc(t0, t1, dt) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = t0;
        return range(utc, t1, dt);
      } finally {
        d3_date = Date;
      }
    }
    local.floor = local;
    local.round = round;
    local.ceil = ceil;
    local.offset = offset;
    local.range = range;
    var utc = local.utc = d3_time_interval_utc(local);
    utc.floor = utc;
    utc.round = d3_time_interval_utc(round);
    utc.ceil = d3_time_interval_utc(ceil);
    utc.offset = d3_time_interval_utc(offset);
    utc.range = range_utc;
    return local;
  }
  function d3_time_interval_utc(method) {
    return function(date, k) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = date;
        return method(utc, k)._;
      } finally {
        d3_date = Date;
      }
    };
  }
  d3_time.year = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setMonth(0, 1);
    return date;
  }, function(date, offset) {
    date.setFullYear(date.getFullYear() + offset);
  }, function(date) {
    return date.getFullYear();
  });
  d3_time.years = d3_time.year.range;
  d3_time.years.utc = d3_time.year.utc.range;
  d3_time.day = d3_time_interval(function(date) {
    var day = new d3_date(2e3, 0);
    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
    return day;
  }, function(date, offset) {
    date.setDate(date.getDate() + offset);
  }, function(date) {
    return date.getDate() - 1;
  });
  d3_time.days = d3_time.day.range;
  d3_time.days.utc = d3_time.day.utc.range;
  d3_time.dayOfYear = function(date) {
    var year = d3_time.year(date);
    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
  };
  d3_time_daySymbols.forEach(function(day, i) {
    day = day.toLowerCase();
    i = 7 - i;
    var interval = d3_time[day] = d3_time_interval(function(date) {
      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
      return date;
    }, function(date, offset) {
      date.setDate(date.getDate() + Math.floor(offset) * 7);
    }, function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
    });
    d3_time[day + "s"] = interval.range;
    d3_time[day + "s"].utc = interval.utc.range;
    d3_time[day + "OfYear"] = function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
    };
  });
  d3_time.week = d3_time.sunday;
  d3_time.weeks = d3_time.sunday.range;
  d3_time.weeks.utc = d3_time.sunday.utc.range;
  d3_time.weekOfYear = d3_time.sundayOfYear;
  d3_time.format = d3_time_format;
  function d3_time_format(template) {
    var n = template.length;
    function format(date) {
      var string = [], i = -1, j = 0, c, p, f;
      while (++i < n) {
        if (template.charCodeAt(i) === 37) {
          string.push(template.substring(j, i));
          if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
          if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
          string.push(c);
          j = i + 1;
        }
      }
      string.push(template.substring(j, i));
      return string.join("");
    }
    format.parse = function(string) {
      var d = {
        y: 1900,
        m: 0,
        d: 1,
        H: 0,
        M: 0,
        S: 0,
        L: 0,
        Z: null
      }, i = d3_time_parse(d, template, string, 0);
      if (i != string.length) return null;
      if ("p" in d) d.H = d.H % 12 + d.p * 12;
      var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
      if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("w" in d && ("W" in d || "U" in d)) {
        date.setFullYear(d.y, 0, 1);
        date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
      } else date.setFullYear(d.y, d.m, d.d);
      date.setHours(d.H + Math.floor(d.Z / 100), d.M + d.Z % 100, d.S, d.L);
      return localZ ? date._ : date;
    };
    format.toString = function() {
      return template;
    };
    return format;
  }
  function d3_time_parse(date, template, string, j) {
    var c, p, t, i = 0, n = template.length, m = string.length;
    while (i < n) {
      if (j >= m) return -1;
      c = template.charCodeAt(i++);
      if (c === 37) {
        t = template.charAt(i++);
        p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
        if (!p || (j = p(date, string, j)) < 0) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }
    return j;
  }
  function d3_time_formatRe(names) {
    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
  }
  function d3_time_formatLookup(names) {
    var map = new d3_Map(), i = -1, n = names.length;
    while (++i < n) map.set(names[i].toLowerCase(), i);
    return map;
  }
  function d3_time_formatPad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  var d3_time_dayRe = d3_time_formatRe(d3_time_days), d3_time_dayLookup = d3_time_formatLookup(d3_time_days), d3_time_dayAbbrevRe = d3_time_formatRe(d3_time_dayAbbreviations), d3_time_dayAbbrevLookup = d3_time_formatLookup(d3_time_dayAbbreviations), d3_time_monthRe = d3_time_formatRe(d3_time_months), d3_time_monthLookup = d3_time_formatLookup(d3_time_months), d3_time_monthAbbrevRe = d3_time_formatRe(d3_time_monthAbbreviations), d3_time_monthAbbrevLookup = d3_time_formatLookup(d3_time_monthAbbreviations), d3_time_percentRe = /^%/;
  var d3_time_formatPads = {
    "-": "",
    _: " ",
    "0": "0"
  };
  var d3_time_formats = {
    a: function(d) {
      return d3_time_dayAbbreviations[d.getDay()];
    },
    A: function(d) {
      return d3_time_days[d.getDay()];
    },
    b: function(d) {
      return d3_time_monthAbbreviations[d.getMonth()];
    },
    B: function(d) {
      return d3_time_months[d.getMonth()];
    },
    c: d3_time_format(d3_time_formatDateTime),
    d: function(d, p) {
      return d3_time_formatPad(d.getDate(), p, 2);
    },
    e: function(d, p) {
      return d3_time_formatPad(d.getDate(), p, 2);
    },
    H: function(d, p) {
      return d3_time_formatPad(d.getHours(), p, 2);
    },
    I: function(d, p) {
      return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
    },
    j: function(d, p) {
      return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
    },
    L: function(d, p) {
      return d3_time_formatPad(d.getMilliseconds(), p, 3);
    },
    m: function(d, p) {
      return d3_time_formatPad(d.getMonth() + 1, p, 2);
    },
    M: function(d, p) {
      return d3_time_formatPad(d.getMinutes(), p, 2);
    },
    p: function(d) {
      return d.getHours() >= 12 ? "PM" : "AM";
    },
    S: function(d, p) {
      return d3_time_formatPad(d.getSeconds(), p, 2);
    },
    U: function(d, p) {
      return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
    },
    w: function(d) {
      return d.getDay();
    },
    W: function(d, p) {
      return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
    },
    x: d3_time_format(d3_time_formatDate),
    X: d3_time_format(d3_time_formatTime),
    y: function(d, p) {
      return d3_time_formatPad(d.getFullYear() % 100, p, 2);
    },
    Y: function(d, p) {
      return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
    },
    Z: d3_time_zone,
    "%": function() {
      return "%";
    }
  };
  var d3_time_parsers = {
    a: d3_time_parseWeekdayAbbrev,
    A: d3_time_parseWeekday,
    b: d3_time_parseMonthAbbrev,
    B: d3_time_parseMonth,
    c: d3_time_parseLocaleFull,
    d: d3_time_parseDay,
    e: d3_time_parseDay,
    H: d3_time_parseHour24,
    I: d3_time_parseHour24,
    j: d3_time_parseDayOfYear,
    L: d3_time_parseMilliseconds,
    m: d3_time_parseMonthNumber,
    M: d3_time_parseMinutes,
    p: d3_time_parseAmPm,
    S: d3_time_parseSeconds,
    U: d3_time_parseWeekNumberSunday,
    w: d3_time_parseWeekdayNumber,
    W: d3_time_parseWeekNumberMonday,
    x: d3_time_parseLocaleDate,
    X: d3_time_parseLocaleTime,
    y: d3_time_parseYear,
    Y: d3_time_parseFullYear,
    Z: d3_time_parseZone,
    "%": d3_time_parseLiteralPercent
  };
  function d3_time_parseWeekdayAbbrev(date, string, i) {
    d3_time_dayAbbrevRe.lastIndex = 0;
    var n = d3_time_dayAbbrevRe.exec(string.substring(i));
    return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function d3_time_parseWeekday(date, string, i) {
    d3_time_dayRe.lastIndex = 0;
    var n = d3_time_dayRe.exec(string.substring(i));
    return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function d3_time_parseWeekdayNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 1));
    return n ? (date.w = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberSunday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i));
    return n ? (date.U = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberMonday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i));
    return n ? (date.W = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMonthAbbrev(date, string, i) {
    d3_time_monthAbbrevRe.lastIndex = 0;
    var n = d3_time_monthAbbrevRe.exec(string.substring(i));
    return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function d3_time_parseMonth(date, string, i) {
    d3_time_monthRe.lastIndex = 0;
    var n = d3_time_monthRe.exec(string.substring(i));
    return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function d3_time_parseLocaleFull(date, string, i) {
    return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
  }
  function d3_time_parseLocaleDate(date, string, i) {
    return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
  }
  function d3_time_parseLocaleTime(date, string, i) {
    return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
  }
  function d3_time_parseFullYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 4));
    return n ? (date.y = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
  }
  function d3_time_parseZone(date, string, i) {
    return /^[+-]\d{4}$/.test(string = string.substring(i, i + 5)) ? (date.Z = +string, 
    i + 5) : -1;
  }
  function d3_time_expandYear(d) {
    return d + (d > 68 ? 1900 : 2e3);
  }
  function d3_time_parseMonthNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
  }
  function d3_time_parseDay(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.d = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseDayOfYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 3));
    return n ? (date.j = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseHour24(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.H = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMinutes(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.M = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseSeconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.S = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMilliseconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 3));
    return n ? (date.L = +n[0], i + n[0].length) : -1;
  }
  var d3_time_numberRe = /^\s*\d+/;
  function d3_time_parseAmPm(date, string, i) {
    var n = d3_time_amPmLookup.get(string.substring(i, i += 2).toLowerCase());
    return n == null ? -1 : (date.p = n, i);
  }
  var d3_time_amPmLookup = d3.map({
    am: 0,
    pm: 1
  });
  function d3_time_zone(d) {
    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = ~~(abs(z) / 60), zm = abs(z) % 60;
    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
  }
  function d3_time_parseLiteralPercent(date, string, i) {
    d3_time_percentRe.lastIndex = 0;
    var n = d3_time_percentRe.exec(string.substring(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  d3_time_format.utc = d3_time_formatUtc;
  function d3_time_formatUtc(template) {
    var local = d3_time_format(template);
    function format(date) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date();
        utc._ = date;
        return local(utc);
      } finally {
        d3_date = Date;
      }
    }
    format.parse = function(string) {
      try {
        d3_date = d3_date_utc;
        var date = local.parse(string);
        return date && date._;
      } finally {
        d3_date = Date;
      }
    };
    format.toString = local.toString;
    return format;
  }
  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
  function d3_time_formatIsoNative(date) {
    return date.toISOString();
  }
  d3_time_formatIsoNative.parse = function(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  };
  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
  d3_time.second = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 1e3) * 1e3);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
  }, function(date) {
    return date.getSeconds();
  });
  d3_time.seconds = d3_time.second.range;
  d3_time.seconds.utc = d3_time.second.utc.range;
  d3_time.minute = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 6e4) * 6e4);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
  }, function(date) {
    return date.getMinutes();
  });
  d3_time.minutes = d3_time.minute.range;
  d3_time.minutes.utc = d3_time.minute.utc.range;
  d3_time.hour = d3_time_interval(function(date) {
    var timezone = date.getTimezoneOffset() / 60;
    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
  }, function(date) {
    return date.getHours();
  });
  d3_time.hours = d3_time.hour.range;
  d3_time.hours.utc = d3_time.hour.utc.range;
  d3_time.month = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setDate(1);
    return date;
  }, function(date, offset) {
    date.setMonth(date.getMonth() + offset);
  }, function(date) {
    return date.getMonth();
  });
  d3_time.months = d3_time.month.range;
  d3_time.months.utc = d3_time.month.utc.range;
  function d3_time_scale(linear, methods, format) {
    function scale(x) {
      return linear(x);
    }
    scale.invert = function(x) {
      return d3_time_scaleDate(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
      linear.domain(x);
      return scale;
    };
    function tickMethod(extent, count) {
      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
        return d / 31536e6;
      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
    }
    scale.nice = function(interval, skip) {
      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
      if (method) interval = method[0], skip = method[1];
      function skipped(date) {
        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
      }
      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
        floor: function(date) {
          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
          return date;
        },
        ceil: function(date) {
          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
          return date;
        }
      } : interval));
    };
    scale.ticks = function(interval, skip) {
      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
        range: interval
      }, skip ];
      if (method) interval = method[0], skip = method[1];
      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
    };
    scale.tickFormat = function() {
      return format;
    };
    scale.copy = function() {
      return d3_time_scale(linear.copy(), methods, format);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_time_scaleDate(t) {
    return new Date(t);
  }
  function d3_time_scaleFormat(formats) {
    return function(date) {
      var i = formats.length - 1, f = formats[i];
      while (!f[1](date)) f = formats[--i];
      return f[0](date);
    };
  }
  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
  var d3_time_scaleLocalFormats = [ [ d3_time_format("%Y"), d3_true ], [ d3_time_format("%B"), function(d) {
    return d.getMonth();
  } ], [ d3_time_format("%b %d"), function(d) {
    return d.getDate() != 1;
  } ], [ d3_time_format("%a %d"), function(d) {
    return d.getDay() && d.getDate() != 1;
  } ], [ d3_time_format("%I %p"), function(d) {
    return d.getHours();
  } ], [ d3_time_format("%I:%M"), function(d) {
    return d.getMinutes();
  } ], [ d3_time_format(":%S"), function(d) {
    return d.getSeconds();
  } ], [ d3_time_format(".%L"), function(d) {
    return d.getMilliseconds();
  } ] ];
  var d3_time_scaleLocalFormat = d3_time_scaleFormat(d3_time_scaleLocalFormats);
  d3_time_scaleLocalMethods.year = d3_time.year;
  d3_time.scale = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
  };
  var d3_time_scaleMilliseconds = {
    range: function(start, stop, step) {
      return d3.range(+start, +stop, step).map(d3_time_scaleDate);
    },
    floor: d3_identity,
    ceil: d3_identity
  };
  var d3_time_scaleUTCMethods = d3_time_scaleLocalMethods.map(function(m) {
    return [ m[0].utc, m[1] ];
  });
  var d3_time_scaleUTCFormats = [ [ d3_time_formatUtc("%Y"), d3_true ], [ d3_time_formatUtc("%B"), function(d) {
    return d.getUTCMonth();
  } ], [ d3_time_formatUtc("%b %d"), function(d) {
    return d.getUTCDate() != 1;
  } ], [ d3_time_formatUtc("%a %d"), function(d) {
    return d.getUTCDay() && d.getUTCDate() != 1;
  } ], [ d3_time_formatUtc("%I %p"), function(d) {
    return d.getUTCHours();
  } ], [ d3_time_formatUtc("%I:%M"), function(d) {
    return d.getUTCMinutes();
  } ], [ d3_time_formatUtc(":%S"), function(d) {
    return d.getUTCSeconds();
  } ], [ d3_time_formatUtc(".%L"), function(d) {
    return d.getUTCMilliseconds();
  } ] ];
  var d3_time_scaleUTCFormat = d3_time_scaleFormat(d3_time_scaleUTCFormats);
  d3_time_scaleUTCMethods.year = d3_time.year.utc;
  d3_time.scale.utc = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleUTCMethods, d3_time_scaleUTCFormat);
  };
  d3.text = d3_xhrType(function(request) {
    return request.responseText;
  });
  d3.json = function(url, callback) {
    return d3_xhr(url, "application/json", d3_json, callback);
  };
  function d3_json(request) {
    return JSON.parse(request.responseText);
  }
  d3.html = function(url, callback) {
    return d3_xhr(url, "text/html", d3_html, callback);
  };
  function d3_html(request) {
    var range = d3_document.createRange();
    range.selectNode(d3_document.body);
    return range.createContextualFragment(request.responseText);
  }
  d3.xml = d3_xhrType(function(request) {
    return request.responseXML;
  });
  return d3;
}();(function () {
// Note: For maximum-speed code, see "Optimizing Code" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };
  Module['load'] = function load(f) {
    globalEval(read(f));
  };
  Module['arguments'] = process['argv'].slice(2);
  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }
  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };
  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  this['Module'] = Module;
  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  if (typeof console !== 'undefined') {
    Module['print'] = function print(x) {
      console.log(x);
    };
    Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];
// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + Pointer_stringify(code) + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;
      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }
      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;
// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;
function demangle(func) {
  try {
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    var i = 3;
    // params, etc.
    var basicTypes = {
      'v': 'void',
      'b': 'bool',
      'c': 'char',
      's': 'short',
      'i': 'int',
      'l': 'long',
      'f': 'float',
      'd': 'double',
      'w': 'wchar_t',
      'a': 'signed char',
      'h': 'unsigned char',
      't': 'unsigned short',
      'j': 'unsigned int',
      'm': 'unsigned long',
      'x': 'long long',
      'y': 'unsigned long long',
      'z': '...'
    };
    function dump(x) {
      //return;
      if (x) Module.print(x);
      Module.print(func);
      var pre = '';
      for (var a = 0; a < i; a++) pre += ' ';
      Module.print (pre + '^');
    }
    var subs = [];
    function parseNested() {
      i++;
      if (func[i] === 'K') i++; // ignore const
      var parts = [];
      while (func[i] !== 'E') {
        if (func[i] === 'S') { // substitution
          i++;
          var next = func.indexOf('_', i);
          var num = func.substring(i, next) || 0;
          parts.push(subs[num] || '?');
          i = next+1;
          continue;
        }
        if (func[i] === 'C') { // constructor
          parts.push(parts[parts.length-1]);
          i += 2;
          continue;
        }
        var size = parseInt(func.substr(i));
        var pre = size.toString().length;
        if (!size || !pre) { i--; break; } // counter i++ below us
        var curr = func.substr(i + pre, size);
        parts.push(curr);
        subs.push(curr);
        i += pre + size;
      }
      i++; // skip E
      return parts;
    }
    var first = true;
    function parse(rawList, limit, allowVoid) { // main parser
      limit = limit || Infinity;
      var ret = '', list = [];
      function flushList() {
        return '(' + list.join(', ') + ')';
      }
      var name;
      if (func[i] === 'N') {
        // namespaced N-E
        name = parseNested().join('::');
        limit--;
        if (limit === 0) return rawList ? [name] : name;
      } else {
        // not namespaced
        if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
        var size = parseInt(func.substr(i));
        if (size) {
          var pre = size.toString().length;
          name = func.substr(i + pre, size);
          i += pre + size;
        }
      }
      first = false;
      if (func[i] === 'I') {
        i++;
        var iList = parse(true);
        var iRet = parse(true, 1, true);
        ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
      } else {
        ret = name;
      }
      paramLoop: while (i < func.length && limit-- > 0) {
        //dump('paramLoop');
        var c = func[i++];
        if (c in basicTypes) {
          list.push(basicTypes[c]);
        } else {
          switch (c) {
            case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
            case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
            case 'L': { // literal
              i++; // skip basic type
              var end = func.indexOf('E', i);
              var size = end - i;
              list.push(func.substr(i, size));
              i += size + 2; // size + 'EE'
              break;
            }
            case 'A': { // array
              var size = parseInt(func.substr(i));
              i += size.toString().length;
              if (func[i] !== '_') throw '?';
              i++; // skip _
              list.push(parse(true, 1, true)[0] + ' [' + size + ']');
              break;
            }
            case 'E': break paramLoop;
            default: ret += '?' + c; break paramLoop;
          }
        }
      }
      if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
      return rawList ? list : ret + flushList();
    }
    return parse();
  } catch(e) {
    return func;
  }
}
function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}
function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays in asm.js. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', or (2) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited
var runtimeInitialized = false;
function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;
function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;
function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;
function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;
function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
var memoryInitializer = null;
// === Body ===
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 223120;
/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });
var _stdout;
var _stdout=_stdout=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stdin;
var _stdin=_stdin=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stderr;
var _stderr=_stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
/* memory initializer */ allocateconcat
.concat
.concat
.concat
.concat([13,0,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,17,1,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,56,255,13,0,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,18,1,55,255,55,255,55,255,55,255,55,255,19,1,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,55,255,13,0,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,54,255,13,0,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,20,1,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,53,255,13,0,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,21,1,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,52,255,13,0,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,51,255,13,0,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,22,1,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,50,255,13,0,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,49,255,13,0,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,23,1,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,48,255,13,0,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,47,255,13,0,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,46,255,13,0,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,24,1,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,45,255,13,0,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,25,1,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,26,1,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,44,255,13,0,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,27,1,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,43,255,13,0,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,28,1,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,42,255,13,0,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,41,255,13,0,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,29,1,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,40,255,13,0,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,39,255,30,1,39,255,39,255,39,255,39,255,39,255,39,255,39,255,13,0,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,31,1,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,38,255,13,0,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,32,1,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,37,255,13,0,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,36,255,13,0,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,35,255,33,1,35,255,35,255,35,255,35,255,35,255,35,255,35,255,13,0,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,34,255,13,0,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,223,0,33,255,33,255,33,255,33,255,33,255,33,255,33,255,224,0,33,255,225,0,226,0,33,255,226,0,227,0,228,0,33,255,229,0,229,0,229,0,229,0,229,0,229,0,229,0,229,0,229,0,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,230,0,231,0,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,33,255,13,0,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,232,0,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,233,0,32,255,233,0,234,0,32,255,235,0,236,0,236,0,236,0,236,0,236,0,236,0,236,0,236,0,236,0,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,32,255,13,0,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,237,0,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,231,0,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,31,255,13,0,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,229,0,229,0,229,0,229,0,229,0,229,0,229,0,229,0,229,0,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,30,255,13,0,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,237,0,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,29,255,13,0,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,238,0,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,28,255,13,0,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,239,0,239,0,239,0,239,0,239,0,239,0,239,0,239,0,239,0,239,0,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,27,255,13,0,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,26,255,13,0,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,25,255,13,0,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,232,0,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,233,0,24,255,233,0,234,0,24,255,235,0,236,0,236,0,236,0,236,0,236,0,236,0,236,0,236,0,236,0,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,24,255,13,0,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,234,0,23,255,235,0,236,0,236,0,236,0,236,0,236,0,236,0,236,0,236,0,236,0,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,23,255,13,0,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,22,255,13,0,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,35,1,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,36,1,21,255,21,255,21,255,21,255,37,1,21,255,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,21,255,13,0,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,39,1,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,40,1,20,255,20,255,20,255,20,255,37,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,20,255,13,0,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,237,0,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,19,255,13,0,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,238,0,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,18,255,13,0,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,239,0,239,0,239,0,239,0,239,0,239,0,239,0,239,0,239,0,239,0,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255,17,255])
.concat
.concat
.concat
.concat
.concat
.concat
.concat
.concat
.concat
.concat
.concat
.concat([33,0,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,199,254,33,0,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,198,254,33,0,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,197,254,33,0,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,196,254,33,0,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,195,254,33,0,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,88,1,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,194,254,33,0,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,89,1,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,193,254,33,0,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,90,1,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,192,254,33,0,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,91,1,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,191,254,33,0,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,190,254,33,0,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,189,254,33,0,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,188,254,33,0,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,92,1,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,187,254,33,0,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,93,1,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,186,254,33,0,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,94,1,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,185,254,33,0,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,95,1,96,1,97,1,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,184,254,33,0,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,98,1,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,183,254,33,0,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,182,254,33,0,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,99,1,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,181,254,33,0,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,180,254,33,0,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,179,254,33,0,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,178,254,33,0,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,177,254,33,0,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,176,254,33,0,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,175,254,33,0,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,174,254,33,0,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,100,1,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,173,254,33,0,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,101,1,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,172,254,33,0,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,102,1,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,171,254,33,0,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,170,254,33,0,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,169,254,33,0,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,168,254,33,0,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,167,254,33,0,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,103,1,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,166,254,33,0,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,165,254,33,0,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,164,254,33,0,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,163,254,33,0,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,104,1,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,162,254,33,0,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,161,254,33,0,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254,160,254])
.concat
.concat
.concat
.concat([100,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,116,97,98,117,108,97,114,32,112,97,114,97,109,101,116,101,114,115,58,32,77,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101,44,32,103,111,116,32,37,100,0,0,47,109,0,0,0,0,0,0,80,65,82,0,0,0,0,0,115,112,101,99,120,0,0,0,116,97,98,115,101,116,0,0,87,97,118,101,110,117,109,98,101,114,0,0,0,0,0,0,83,70,76,0,0,0,0,0,32,32,32,32,0,0,0,0,74,0,0,0,0,0,0,0,77,69,82,0,0,0,0,0,80,104,111,116,111,110,32,101,110,101,114,103,121,0,0,0,67,65,82,0,0,0,0,0,32,32,32,0,0,0,0,0,108,105,110,46,99,0,0,0,114,97,100,47,115,0,0,0,67,69,65,0,0,0,0,0,79,110,101,32,111,114,32,109,111,114,101,32,111,102,32,116,104,101,32,40,120,44,121,41,32,99,111,111,114,100,105,110,97,116,101,115,32,119,101,114,101,32,105,110,118,97,108,105,100,0,0,0,0,0,0,0,65,110,103,117,108,97,114,32,102,114,101,113,117,101,110,99,121,0,0,0,0,0,0,0,67,89,80,0,0,0,0,0,72,122,0,0,0,0,0,0,65,73,82,0,0,0,0,0,82,65,68,69,67,83,89,83,32,105,115,32,110,111,110,45,115,116,97,110,100,97,114,100,44,32,117,115,101,32,82,65,68,69,83,89,83,97,0,0,83,117,99,99,101,115,115,0,70,114,101,113,117,101,110,99,121,0,0,0,0,0,0,0,90,69,65,0,0,0,0,0,111,117,116,32,111,102,32,100,121,110,97,109,105,99,32,109,101,109,111,114,121,32,105,110,32,121,121,95,103,101,116,95,110,101,120,116,95,98,117,102,102,101,114,40,41,0,0,0,73,110,118,97,108,105,100,32,115,121,109,98,111,108,32,105,110,32,73,78,73,84,73,65,76,32,99,111,110,116,101,120,116,32,105,110,32,39,37,115,39,0,0,0,0,0,0,0,37,45,56,46,56,115,0,0,90,80,78,0,0,0,0,0,102,97,116,97,108,32,101,114,114,111,114,32,45,32,115,99,97,110,110,101,114,32,105,110,112,117,116,32,98,117,102,102,101,114,32,111,118,101,114,102,108,111,119,0,0,0,0,0,73,110,118,97,108,105,100,32,112,97,114,97,109,101,116,101,114,32,118,97,108,117,101,0,70,97,116,97,108,32,101,114,114,111,114,32,114,101,116,117,114,110,101,100,32,98,121,32,70,108,101,120,32,112,97,114,115,101,114,0,0,0,0,0,115,112,99,116,121,112,101,0,65,82,67,0,0,0,0,0,102,97,116,97,108,32,102,108,101,120,32,115,99,97,110,110,101,114,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,45,45,101,110,100,32,111,102,32,98,117,102,102,101,114,32,109,105,115,115,101,100,0,79,110,101,32,111,114,32,109,111,114,101,32,111,102,32,116,104,101,32,120,32,99,111,111,114,100,105,110,97,116,101,115,32,119,101,114,101,32,105,110,118,97,108,105,100,0,0,0,115,112,99,115,50,120,0,0,83,73,78,0,0,0,0,0,102,108,101,120,32,115,99,97,110,110,101,114,32,112,117,115,104,45,98,97,99,107,32,111,118,101,114,102,108,111,119,0,73,110,118,97,108,105,100,32,115,112,101,99,116,114,97,108,32,112,97,114,97,109,101,116,101,114,115,58,32,70,114,101,113,117,101,110,99,121,32,111,114,32,119,97,118,101,108,101,110,103,116,104,32,105,115,32,48,0,0,0,0,0,0,0,83,84,71,0,0,0,0,0,73,110,116,101,114,110,97,108,32,117,110,105,116,115,32,112,97,114,115,101,114,32,101,114,114,111,114,0,0,0,0,0,83,117,99,99,101,115,115,0,111,117,116,32,111,102,32,100,121,110,97,109,105,99,32,109,101,109,111,114,121,32,105,110,32,119,99,115,112,105,104,101,110,115,117,114,101,95,98,117,102,102,101,114,95,115,116,97,99,107,40,41,0,0,0,0,79,110,101,32,111,114,32,109,111,114,101,32,111,102,32,116,104,101,32,115,112,101,99,32,99,111,111,114,100,105,110,97,116,101,115,32,119,101,114,101,32,105,110,118,97,108,105,100,0,0,0,0,0,0,0,0,115,112,99,120,50,115,0,0,84,65,78,0,0,0,0,0,77,105,115,109,97,116,99,104,101,100,32,117,110,105,116,32,102,117,110,99,116,105,111,110,115,58,32,104,97,118,101,32,39,37,115,39,32,40,37,115,41,44,32,119,97,110,116,32,39,37,115,39,32,40,37,115,41,0,0,0,0,0,0,0,37,115,10,0,0,0,0,0,66,69,84,65,0,0,0,0,83,90,80,0,0,0,0,0,77,105,115,109,97,116,99,104,101,100,32,117,110,105,116,115,32,116,121,112,101,32,39,37,115,39,58,32,104,97,118,101,32,39,37,115,39,44,32,119,97,110,116,32,39,37,115,39,0,0,0,0,0,0,0,0,79,110,101,32,111,114,32,109,111,114,101,32,111,102,32,116,104,101,32,119,111,114,108,100,32,99,111,111,114,100,105,110,97,116,101,115,32,119,101,114,101,32,105,110,118,97,108,105,100,0,0,0,0,0,0,0,108,105,110,105,110,105,0,0,86,69,76,79,0,0,0,0,65,90,80,0,0,0,0,0,119,99,115,117,110,105,116,115,46,99,0,0,0,0,0,0,73,108,108,45,99,111,110,100,105,116,105,111,110,101,100,32,99,111,111,114,100,105,110,97,116,101,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,112,97,114,97,109,101,116,101,114,115,0,0,0,0,65,87,65,86,0,0,0,0,112,114,106,115,101,116,0,0,119,99,115,117,110,105,116,115,101,0,0,0,0,0,0,0,83,84,79,75,69,83,0,0,90,79,80,84,0,0,0,0,69,80,79,67,72,32,107,101,121,119,111,114,100,32,109,97,121,32,110,111,116,32,104,97,118,101,32,97,110,32,97,108,116,101,114,110,97,116,101,32,118,101,114,115,105,111,110,32,99,111,100,101,0,0,0,0,101,120,112,0,0,0,0,0,83,117,99,99,101,115,115,0,111,117,116,32,111,102,32,100,121,110,97,109,105,99,32,109,101,109,111,114,121,32,105,110,32,119,99,115,112,105,104,95,99,114,101,97,116,101,95,98,117,102,102,101,114,40,41,0,86,79,80,84,0,0,0,0,108,110,0,0,0,0,0,0,102,97,116,97,108,32,102,108,101,120,32,115,99,97,110,110,101,114,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,45,45,110,111,32,97,99,116,105,111,110,32,102,111,117,110,100,0,0,0,0,0,0,68,97,110,103,108,105,110,103,32,98,105,110,97,114,121,32,111,112,101,114,97,116,111,114,32,105,110,32,39,37,115,39,0,0,0,0,0,0,0,0,87,65,86,69,0,0,0,0,108,111,103,0,0,0,0,0,37,100,32,87,67,83,32,107,101,121,114,101,99,111,114,100,115,32,119,101,114,101,32,114,101,106,101,99,116,101,100,46,10,0,0,0,0,0,0,0,73,110,99,111,110,115,105,115,116,101,110,116,32,111,114,32,117,110,114,101,99,111,103,110,105,122,101,100,32,99,111,111,114,100,105,110,97,116,101,32,97,120,105,115,32,116,121,112,101,115,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,111,108,117,109,110,32,115,101,108,101,99,116,105,111,110,0,0,0,0,0,0,0,0,86,82,65,68,0,0,0,0,110,111,110,101,0,0,0,0,70,111,117,110,100,32,37,100,32,99,111,111,114,100,105,110,97,116,101,32,114,101,112,114,101,115,101,110,116,97,116,105,111,110,115,46,10,0,0,0,73,110,118,97,108,105,100,32,116,97,98,117,108,97,114,32,112,97,114,97,109,101,116,101,114,115,0,0,0,0,0,0,87,65,86,78,0,0,0,0,70,111,117,110,100,32,111,110,101,32,99,111,111,114,100,105,110,97,116,101,32,114,101,112,114,101,115,101,110,116,97,116,105,111,110,46,10,0,0,0,73,110,118,97,108,105,100,32,115,112,101,99,116,114,97,108,32,118,97,114,105,97,98,108,101,0,0,0,0,0,0,0,69,78,69,82,0,0,0,0,108,105,110,115,101,116,0,0,99,101,108,115,50,120,0,0,68,69,70,65,85,76,84,83,0,0,0,0,0,0,0,0,79,110,101,32,111,114,32,109,111,114,101,32,111,102,32,120,32,99,111,111,114,100,105,110,97,116,101,115,32,119,101,114,101,32,105,110,118,97,108,105,100,0,0,0,0,0,0,0,65,70,82,81,0,0,0,0,99,101,108,120,50,115,0,0,37,46,56,48,115,10,37,52,100,58,32,37,115,46,10,0,70,82,69,81,0,0,0,0,73,108,108,45,99,111,110,100,105,116,105,111,110,101,100,32,99,111,111,114,100,105,110,97,116,101,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,112,97,114,97,109,101,116,101,114,115,10,78,111,32,118,97,108,105,100,32,115,111,108,117,116,105,111,110,32,102,111,114,32,108,97,116,112,32,102,111,114,32,116,104,101,115,101,32,118,97,108,117,101,115,32,111,102,32,112,104,105,112,44,32,112,104,105,48,44,32,97,110,100,32,116,104,101,116,97,48,0,0,0,0,0,0,37,46,56,48,115,10,32,32,68,105,115,99,97,114,100,101,100,46,10,0,0,0,0,0,79,110,101,32,111,114,32,109,111,114,101,32,111,102,32,116,104,101,32,120,32,99,111,111,114,100,105,110,97,116,101,115,32,119,101,114,101,32,105,110,118,97,108,105,100,0,0,0,80,67,105,95,106,97,32,109,97,116,114,105,120,32,105,115,32,115,105,110,103,117,108,97,114,0,0,0,0,0,0,0,45,37,115,0,0,0,0,0,73,110,118,97,108,105,100,32,99,111,111,114,100,105,110,97,116,101,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,112,97,114,97,109,101,116,101,114,115,44,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,0,0,0,0,77,97,108,102,111,114,109,101,100,32,107,101,121,99,111,109,109,101,110,116,0,0,0,0,73,110,118,97,108,105,100,32,99,111,111,114,100,105,110,97,116,101,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,112,97,114,97,109,101,116,101,114,115,0,0,0,0,83,112,101,99,116,114,97,108,32,99,114,118,97,108,32,105,115,32,117,110,100,101,102,105,110,101,100,0,0,0,0,0,73,110,118,97,108,105,100,32,99,111,111,114,100,105,110,97,116,101,32,100,101,115,99,114,105,112,116,105,111,110,58,10,124,108,97,116,48,124,32,60,61,32,37,46,51,102,32,105,115,32,114,101,113,117,105,114,101,100,32,102,111,114,32,116,104,101,115,101,32,118,97,108,117,101,115,32,111,102,32,112,104,105,112,44,32,112,104,105,48,44,32,97,110,100,32,116,104,101,116,97,48,0,0,0,65,32,115,116,114,105,110,103,32,118,97,108,117,101,32,119,97,115,32,101,120,112,101,99,116,101,100,0,0,0,0,0,115,112,99,46,99,0,0,0,73,110,118,97,108,105,100,32,99,111,111,114,100,105,110,97,116,101,32,100,101,115,99,114,105,112,116,105,111,110,58,10,108,97,116,48,32,61,61,32,48,32,105,115,32,114,101,113,117,105,114,101,100,32,102,111,114,32,124,112,104,105,112,32,45,32,112,104,105,48,124,32,61,32,57,48,32,97,110,100,32,116,104,101,116,97,48,32,61,61,32,48,0,0,0,0,69,80,79,67,72,37,99,0,73,110,116,101,114,110,97,108,32,112,97,114,115,101,114,32,69,82,82,79,82,44,32,110,117,108,108,32,115,116,114,105,110,103,32,112,111,105,110,116,101,114,0,0,0,0,0,0,67,85,66,69,70,65,67,69,0,0,0,0,0,0,0,0,115,112,99,115,101,116,0,0,73,110,118,97,108,105,100,32,99,111,111,114,100,105,110,97,116,101,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,112,97,114,97,109,101,116,101,114,115,58,32,116,104,101,116,97,48,32,62,32,57,48,0,0,0,0,0,0,0,65,32,102,108,111,97,116,105,110,103,45,112,111,105,110,116,32,118,97,108,117,101,32,119,97,115,32,101,120,112,101,99,116,101,100,0,0,0,0,0,73,110,118,97,108,105,100,32,101,120,112,111,110,101,110,116,32,105,110,32,39,37,115,39,0,0,0,0,0,0,0,0,99,101,108,46,99,0,0,0,73,110,116,101,114,110,97,108,32,112,97,114,115,101,114,32,69,82,82,79,82,44,32,110,117,108,108,32,102,108,111,97,116,32,112,111,105,110,116,101,114,0,0,0,0,0,0,0,76,105,110,101,97,114,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,109,97,116,114,105,120,32,105,115,32,115,105,110,103,117,108,97,114,0,0,0,0,0,0,0,0,77,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,102,97,105,108,101,100,0,0,0,0,0,0,0,0,99,101,108,115,101,116,0,0,118,111,120,101,108,0,0,0,37,108,102,0,0,0,0,0,77,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,102,97,105,108,101,100,0,0,0,0,0,0,0,0,115,111,108,97,114,32,114,97,116,105,111,0,0,0,0,0,65,110,32,105,110,116,101,103,101,114,32,118,97,108,117,101,32,119,97,115,32,101,120,112,101,99,116,101,100,0,0,0,76,84,0,0,0,0,0,0,112,105,120,101,108,0,0,0,73,110,116,101,114,110,97,108,32,112,97,114,115,101,114,32,69,82,82,79,82,44,32,110,117,108,108,32,105,110,116,32,112,111,105,110,116,101,114,0,111,117,116,32,111,102,32,100,121,110,97,109,105,99,32,109,101,109,111,114,121,32,105,110,32,121,121,95,103,101,116,95,110,101,120,116,95,98,117,102,102,101,114,40,41,0,0,0,76,65,84,0,0,0,0,0,73,110,118,97,108,105,100,32,115,112,101,99,116,114,97,108,32,112,97,114,97,109,101,116,101,114,115,0,0,0,0,0,115,116,101,108,108,97,114,32,109,97,103,110,105,116,117,100,101,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,75,69,89,87,79,82,68,32,61,32,86,65,76,85,69,32,115,121,110,116,97,120,0,0,105,110,112,117,116,32,105,110,32,102,108,101,120,32,115,99,97,110,110,101,114,32,102,97,105,108,101,100,0,0,0,0,68,69,67,0,0,0,0,0,99,111,117,110,116,0,0,0,73,110,116,101,114,110,97,108,32,112,97,114,115,101,114,32,69,82,82,79,82,44,32,98,97,100,32,100,97,116,97,32,116,121,112,101,58,32,37,100,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,108,111,103,45,99,111,111,114,100,105,110,97,116,101,32,114,101,102,101,114,101,110,99,101,32,118,97,108,117,101,0,0,102,97,116,97,108,32,101,114,114,111,114,32,45,32,115,99,97,110,110,101,114,32,105,110,112,117,116,32,98,117,102,102,101,114,32,111,118,101,114,102,108,111,119,0,0,0,0,0,77,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,102,97,105,108,101,100,0,0,0,0,0,0,0,0,98,105,116,0,0,0,0,0,80,97,114,97,109,101,116,101,114,32,110,117,109,98,101,114,32,101,120,99,101,101,100,115,32,57,57,0,0,0,0,0,73,110,118,97,108,105,100,32,112,114,111,106,101,99,116,105,111,110,32,112,97,114,97,109,101,116,101,114,115,0,0,0,102,97,116,97,108,32,102,108,101,120,32,115,99,97,110,110,101,114,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,45,45,101,110,100,32,111,102,32,98,117,102,102,101,114,32,109,105,115,115,101,100,0,37,108,102,0,0,0,0,0,98,105,110,0,0,0,0,0,65,120,105,115,32,110,117,109,98,101,114,32,101,120,99,101,101,100,115,32,57,57,0,0,102,108,101,120,32,115,99,97,110,110,101,114,32,112,117,115,104,45,98,97,99,107,32,111,118,101,114,102,108,111,119,0,78,65,88,73,83,32,32,32,61,32,37,100,0,0,0,0,87,67,83,65,88,69,83,37,99,61,32,37,100,0,0,0,98,101,97,109,0,0,0,0,68,101,102,117,110,99,116,32,80,82,79,74,80,110,32,107,101,121,119,111,114,100,32,114,101,106,101,99,116,101,100,0,84,97,98,108,101,32,112,97,114,97,109,101,116,101,114,115,32,115,101,116,32,102,111,114,32,110,111,110,45,116,97,98,108,101,32,97,120,105,115,32,116,121,112,101,0,0,0,0,111,117,116,32,111,102,32,100,121,110,97,109,105,99,32,109,101,109,111,114,121,32,105,110,32,119,99,115,117,108,101,120,101,110,115,117,114,101,95,98,117,102,102,101,114,95,115,116,97,99,107,40,41,0,0,0,85,110,109,97,116,99,104,101,100,32,99,101,108,101,115,116,105,97,108,32,97,120,101,115,0,0,0,0,0,0,0,0,73,110,99,111,110,115,105,115,116,101,110,116,32,112,114,111,106,101,99,116,105,111,110,32,116,121,112,101,115,32,40,101,120,112,101,99,116,101,100,32,37,115,44,32,103,111,116,32,37,115,32,105,110,32,67,84,89,80,69,37,100,37,46,49,115,41,0,0,0,0,0,0,76,78,0,0,0,0,0,0,85,110,114,101,99,111,103,110,105,122,101,100,32,99,101,108,101,115,116,105,97,108,32,116,121,112,101,32,40,37,53,115,32,105,110,32,67,84,89,80,69,37,100,37,46,49,115,41,0,0,0,0,0,0,0,0,37,99,37,99,76,84,0,0,37,99,37,99,76,78,0,0,37,115,45,37,115,0,0,0,37,99,76,65,84,0,0,0,37,99,76,79,78,0,0,0,116,105,109,101,0,0,0,0,82,65,45,45,45,37,115,0,37,99,0,0,0,0,0,0,68,69,67,45,0,0,0,0,73,110,116,101,114,110,97,108,32,117,110,105,116,115,32,112,97,114,115,101,114,32,101,114,114,111,114,32,112,97,114,115,105,110,103,32,39,37,115,39,0,0,0,0,0,0,0,0,37,115,10,0,0,0,0,0,68,69,67,45,45,37,115,0,82,65,45,45,0,0,0,0,76,79,78,0,0,0,0,0,37,46,51,115,0,0,0,0,85,110,114,101,99,111,103,110,105,122,101,100,32,112,114,111,106,101,99,116,105,111,110,32,99,111,100,101,32,40,37,115,32,105,110,32,67,84,89,80,69,37,100,37,46,49,115,41,0,0,0,0,0,0,0,0,77,117,108,116,105,112,108,101,32,115,112,101,99,116,114,97,108,32,97,120,101,115,32,40,105,110,32,67,84,89,80,69,37,100,37,46,49,115,32,97,110,100,32,67,84,89,80,69,37,100,37,46,49,115,41,0,77,117,108,116,105,112,108,101,32,67,85,66,69,70,65,67,69,32,97,120,101,115,32,40,105,110,32,67,84,89,80,69,37,100,37,46,49,115,32,97,110,100,32,67,84,89,80,69,37,100,37,46,49,115,41,0,45,84,65,66,0,0,0,0,45,76,79,71,0,0,0,0,108,101,110,103,116,104,0,0,119,99,115,95,116,121,112,101,115,0,0,0,0,0,0,0,37,100,0,0,0,0,0,0,73,110,32,67,85,78,73,84,37,100,37,46,49,115,58,32,37,115,0,0,0,0,0,0,98,97,100,32,98,117,102,102,101,114,32,105,110,32,119,99,115,117,108,101,120,95,115,99,97,110,95,98,121,116,101,115,40,41,0,0,0,0,0,0,100,101,103,0,0,0,0,0,119,99,115,95,117,110,105,116,115,0,0,0,0,0,0,0,82,65,0,0,0,0,0,0,77,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,102,97,105,108,101,100,0,0,0,0,0,0,0,0,85,110,114,101,99,111,103,110,105,122,101,100,32,115,112,101,99,116,114,97,108,32,116,121,112,101,32,39,37,115,39,0,78,117,108,108,32,119,99,115,112,114,109,32,112,111,105,110,116,101,114,32,112,97,115,115,101,100,0,0,0,0,0,0,119,99,115,115,50,112,0,0,110,99,111,111,114,100,32,97,110,100,47,111,114,32,110,101,108,101,109,32,105,110,99,111,110,115,105,115,116,101,110,116,32,119,105,116,104,32,116,104,101,32,119,99,115,112,114,109,0,0,0,0,0,0,0,0,119,99,115,112,50,115,0,0,109,97,115,115,0,0,0,0,83,105,110,103,117,108,97,114,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,109,97,116,114,105,120,44,32,67,68,69,76,84,37,100,32,105,115,32,122,101,114,111,0,67,82,79,84,65,110,32,107,101,121,119,111,114,100,32,109,97,121,32,110,111,116,32,104,97,118,101,32,97,110,32,97,108,116,101,114,110,97,116,101,32,118,101,114,115,105,111,110,32,99,111,100,101,0,0,0,83,73,78,0,0,0,0,0,111,117,116,32,111,102,32,100,121,110,97,109,105,99,32,109,101,109,111,114,121,32,105,110,32,119,99,115,117,108,101,120,95,115,99,97,110,95,98,121,116,101,115,40,41,0,0,0,73,110,118,97,108,105,100,32,112,114,111,106,101,99,116,105,111,110,58,32,78,67,80,32,98,108,111,119,115,32,117,112,32,111,110,32,116,104,101,32,101,113,117,97,116,111,114,0,78,67,80,0,0,0,0,0,78,117,108,108,32,116,97,98,112,114,109,32,112,111,105,110,116,101,114,32,112,97,115,115,101,100,0,0,0,0,0,0,83,70,76,0,0,0,0,0,66,69,84,65,0,0,0,0,71,76,83,0,0,0,0,0,80,86,37,105,95,37,105,37,115,58,32,85,110,114,101,99,111,103,110,105,122,101,100,32,99,111,111,114,100,105,110,97,116,101,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,112,97,114,97,109,101,116,101,114,0,0,0,0,0,119,99,115,115,101,116,0,0,108,117,109,105,110,111,117,115,32,105,110,116,101,110,115,105,116,121,0,0,0,0,0,0,67,68,0,0,0,0,0,0,111,117,116,32,111,102,32,100,121,110,97,109,105,99,32,109,101,109,111,114,121,32,105,110,32,119,99,115,117,108,101,120,95,115,99,97,110,95,98,117,102,102,101,114,40,41,0,0,86,69,76,79,0,0,0,0,116,101,109,112,101,114,97,116,117,114,101,0,0,0,0,0,80,67,0,0,0,0,0,0,111,117,116,32,111,102,32,100,121,110,97,109,105,99,32,109,101,109,111,114,121,32,105,110,32,119,99,115,117,108,101,120,95,99,114,101,97,116,101,95,98,117,102,102,101,114,40,41,0,0,0,0,0,0,0,0,32,32,32,32,0,0,0,0,78,117,108,108,32,115,112,99,112,114,109,32,112,111,105,110,116,101,114,32,112,97,115,115,101,100,0,0,0,0,0,0,65,87,65,86,0,0,0,0,109,111,108,101,0,0,0,0,68,101,102,117,110,99,116,32,102,111,114,109,32,111,102,32,37,115,105,95,106,97,32,107,101,121,119,111,114,100,0,0,102,97,116,97,108,32,102,108,101,120,32,115,99,97,110,110,101,114,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,45,45,110,111,32,97,99,116,105,111,110,32,102,111,117,110,100,0,0,0,0,0,0,110,97,120,105,115,32,109,117,115,116,32,110,111,116,32,98,101,32,110,101,103,97,116,105,118,101,32,40,103,111,116,32,37,100,41,0,0,0,0,0,90,79,80,84,0,0,0,0,99,104,97,114,103,101,0,0,37,51,100,37,51,100,0,0,67,111,110,115,101,99,117,116,105,118,101,32,98,105,110,97,114,121,32,111,112,101,114,97,116,111,114,115,32,105,110,32,39,37,115,39,0,0,0,0,119,99,115,46,99,0,0,0,120,112,104,120,50,115,0,0,98,117,116,116,101,114,102,108,121,0,0,0,0,0,0,0,86,79,80,84,0,0,0,0,104,112,120,120,50,115,0,0,78,117,108,108,32,108,105,110,112,114,109,32,112,111,105,110,116,101,114,32,112,97,115,115,101,100,0,0,0,0,0,0,104,112,120,115,101,116,0,0,72,69,65,76,80,105,120,0,113,115,99,115,50,120,0,0,113,115,99,120,50,115,0,0,115,111,108,105,100,32,97,110,103,108,101,0,0,0,0,0,113,117,97,100,114,105,108,97,116,101,114,97,108,105,122,101,100,32,115,112,104,101,114,105,99,97,108,32,99,117,98,101,0,0,0,0,0,0,0,0,37,100,95,37,100,0,0,0,78,117,108,108,32,99,101,108,112,114,109,32,112,111,105,110,116,101,114,32,112,97,115,115,101,100,0,0,0,0,0,0,99,115,99,115,50,120,0,0,85,110,98,97,108,97,110,99,101,100,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,39,37,115,39,0,0,99,115,99,120,50,115,0,0,119,99,115,105,110,105,0,0,67,79,66,69,32,113,117,97,100,114,105,108,97,116,101,114,97,108,105,122,101,100,32,115,112,104,101,114,105,99,97,108,32,99,117,98,101,0,0,0,116,115,99,115,50,120,0,0,87,65,86,69,0,0,0,0,116,115,99,120,50,115,0,0,116,97,110,103,101,110,116,105,97,108,32,115,112,104,101,114,105,99,97,108,32,99,117,98,101,0,0,0,0,0,0,0,112,111,108,121,99,111,110,105,99,0,0,0,0,0,0,0,98,111,110,115,101,116,0,0,66,111,110,110,101,39,115,0,112,108,97,110,101,32,97,110,103,108,101,0,0,0,0,0,99,111,111,115,50,120,0,0,37,100,95,37,100,37,99,0,99,111,111,120,50,115,0,0,85,110,98,97,108,97,110,99,101,100,32,98,114,97,99,107,101,116,32,105,110,32,39,37,115,39,0,0,0,0,0,0,99,111,111,115,101,116,0,0,78,111,110,45,115,101,112,97,114,97,98,108,101,32,115,117,98,105,109,97,103,101,32,99,111,111,114,100,105,110,97,116,101,32,115,121,115,116,101,109,0,0,0,0,0,0,0,0,99,111,110,105,99,32,111,114,116,104,111,109,111,114,112,104,105,99,0,0,0,0,0,0,99,111,100,115,101,116,0,0,86,82,65,68,0,0,0,0,99,111,110,105,99,32,101,113,117,105,100,105,115,116,97,110,116,0,0,0,0,0,0,0,99,111,101,120,50,115,0,0,99,111,101,115,101,116,0,0,99,111,110,105,99,32,101,113,117,97,108,32,97,114,101,97,0,0,0,0,0,0,0,0,99,111,112,115,50,120,0,0,78,101,103,97,116,105,118,101,32,118,97,108,117,101,32,111,102,32,78,65,88,73,83,32,105,103,110,111,114,101,100,58,32,37,100,0,0,0,0,0,99,111,112,115,101,116,0,0,37,51,100,0,0,0,0,0,99,111,110,105,99,32,112,101,114,115,112,101,99,116,105,118,101,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,115,121,109,98,111,108,32,105,110,32,69,88,80,79,78,32,99,111,110,116,101,120,116,32,105,110,32,39,37,115,39,0,97,105,116,120,50,115,0,0,73,110,118,97,108,105,100,32,115,117,98,105,109,97,103,101,32,115,112,101,99,105,102,105,99,97,116,105,111,110,0,0,72,97,109,109,101,114,45,65,105,116,111,102,102,0,0,0,78,117,108,108,32,112,111,105,110,116,101,114,115,32,105,110,32,116,97,98,112,114,109,32,115,116,114,117,99,116,0,0,109,111,108,120,50,115,0,0,87,65,86,78,0,0,0,0,77,111,108,108,119,101,105,100,101,39,115,0,0,0,0,0,112,97,114,120,50,115,0,0,112,97,114,97,98,111,108,105,99,0,0,0,0,0,0,0,115,102,108,120,50,115,0,0,83,97,110,115,111,110,45,70,108,97,109,115,116,101,101,100,0,0,0,0,0,0,0,0,119,99,115,117,108,101,120,101,0,0,0,0,0,0,0,0,109,101,114,115,50,120,0,0,37,100,37,99,0,0,0,0,77,101,114,99,97,116,111,114,39,115,0,0,0,0,0,0,119,99,115,117,108,101,120,46,108,0,0,0,0,0,0,0,37,108,102,0,0,0,0,0,112,108,97,116,101,32,99,97,114,101,101,0,0,0,0,0,78,111,32,115,111,108,117,116,105,111,110,32,102,111,117,110,100,32,105,110,32,116,104,101,32,115,112,101,99,105,102,105,101,100,32,105,110,116,101,114,118,97,108,0,0,0,0,0,73,110,118,97,108,105,100,32,116,97,98,117,108,97,114,32,112,97,114,97,109,101,116,101,114,115,58,32,116,104,101,32,97,120,105,115,32,109,97,112,112,105,110,103,32,105,115,32,117,110,100,101,102,105,110,101,100,0,0,0,0,0,0,0,99,101,97,120,50,115,0,0,99,101,97,115,101,116,0,0,69,78,69,82,0,0,0,0,99,121,108,105,110,100,114,105,99,97,108,32,101,113,117,97,108,32,97,114,101,97,0,0,99,121,112,115,50,120,0,0,99,121,112,115,101,116,0,0,99,121,108,105,110,100,114,105,99,97,108,32,112,101,114,115,112,101,99,116,105,118,101,0,97,105,114,115,50,120,0,0,97,105,114,120,50,115,0,0,75,101,121,114,101,99,111,114,100,115,32,102,111,108,108,111,119,105,110,103,32,116,104,101,32,69,78,68,32,107,101,121,114,101,99,111,114,100,32,119,101,114,101,32,105,103,110,111,114,101,100,0,0,0,0,0,97,105,114,115,101,116,0,0,32,40,37,115,41,0,0,0,86,79,80,84,45,70,50,87,0,0,0,0,0,0,0,0,65,105,114,121,39,115,32,122,101,110,105,116,104,97,108,0,73,110,118,97,108,105,100,32,119,111,114,108,100,32,99,111,111,114,100,105,110,97,116,101,0,0,0,0,0,0,0,0,78,117,108,108,32,119,99,115,112,114,109,32,112,111,105,110,116,101,114,32,112,97,115,115,101,100,0,0,0,0,0,0,83,117,99,99,101,115,115,0,137,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0])
, "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  Module["_memset"] = _memset;var _llvm_memset_p0i8_i32=_memset;
  Module["_strcpy"] = _strcpy;
  var _abs=Math_abs;
  Module["_strncpy"] = _strncpy;
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }
  Module["_memcpy"] = _memcpy;var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  var _fabs=Math_abs;
  function _fmod(x, y) {
      return x % y;
    }
  Module["_strlen"] = _strlen;
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }
  var _llvm_va_start=undefined;
  function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }
  function _llvm_va_end() {}
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 0777, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },reconcile:function (src, dst, callback) {
        var total = 0;
        var create = {};
        for (var key in src.files) {
          if (!src.files.hasOwnProperty(key)) continue;
          var e = src.files[key];
          var e2 = dst.files[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create[key] = e;
            total++;
          }
        }
        var remove = {};
        for (var key in dst.files) {
          if (!dst.files.hasOwnProperty(key)) continue;
          var e = dst.files[key];
          var e2 = src.files[key];
          if (!e2) {
            remove[key] = e;
            total++;
          }
        }
        if (!total) {
          // early out
          return callback(null);
        }
        var completed = 0;
        function done(err) {
          if (err) return callback(err);
          if (++completed >= total) {
            return callback(null);
          }
        };
        // create a single transaction to handle and IDB reads / writes we'll need to do
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        transaction.onerror = function transaction_onerror() { callback(this.error); };
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
        for (var path in create) {
          if (!create.hasOwnProperty(path)) continue;
          var entry = create[path];
          if (dst.type === 'local') {
            // save file to local
            try {
              if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
              } else if (FS.isFile(entry.mode)) {
                var stream = FS.open(path, 'w+', 0666);
                FS.write(stream, entry.contents, 0, entry.contents.length, 0, true /* canOwn */);
                FS.close(stream);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // save file to IDB
            var req = store.put(entry, path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
        for (var path in remove) {
          if (!remove.hasOwnProperty(path)) continue;
          var entry = remove[path];
          if (dst.type === 'local') {
            // delete file from local
            try {
              if (FS.isDir(entry.mode)) {
                // TODO recursive delete?
                FS.rmdir(path);
              } else if (FS.isFile(entry.mode)) {
                FS.unlink(path);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // delete file from IDB
            var req = store.delete(path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
      },getLocalSet:function (mount, callback) {
        var files = {};
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
        var check = FS.readdir(mount.mountpoint)
          .filter(isRealDir)
          .map(toAbsolute(mount.mountpoint));
        while (check.length) {
          var path = check.pop();
          var stat, node;
          try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path)
              .filter(isRealDir)
              .map(toAbsolute(path)));
            files[path] = { mode: stat.mode, timestamp: stat.mtime };
          } else if (FS.isFile(stat.mode)) {
            files[path] = { contents: node.contents, mode: stat.mode, timestamp: stat.mtime };
          } else {
            return callback(new Error('node type not supported'));
          }
        }
        return callback(null, { type: 'local', files: files });
      },getDB:function (name, callback) {
        // look it up in the cache
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        req.onupgradeneeded = function req_onupgradeneeded() {
          db = req.result;
          db.createObjectStore(IDBFS.DB_STORE_NAME);
        };
        req.onsuccess = function req_onsuccess() {
          db = req.result;
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function req_onerror() {
          callback(this.error);
        };
      },getRemoteSet:function (mount, callback) {
        var files = {};
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function transaction_onerror() { callback(this.error); };
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          store.openCursor().onsuccess = function store_openCursor_onsuccess(event) {
            var cursor = event.target.result;
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, files: files });
            }
            files[cursor.key] = cursor.value;
            cursor.continue();
          };
        });
      }};
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.position = position;
          return position;
        }}};
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || { recurse_count: 0 };
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
        // start at the root
        var current = FS.root;
        var current_path = '/';
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
            this.parent = null;
            this.mount = null;
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            FS.hashAddNode(this);
          };
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
          FS.FSNode.prototype = {};
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
        return new FS.FSNode(parent, name, mode, rdev);
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
        var completed = 0;
        var total = FS.mounts.length;
        function done(err) {
          if (err) {
            return callback(err);
          }
          if (++completed >= total) {
            callback(null);
          }
        };
        // sync all mounts
        for (var i = 0; i < FS.mounts.length; i++) {
          var mount = FS.mounts[i];
          if (!mount.type.syncfs) {
            done(null);
            continue;
          }
          mount.type.syncfs(mount, populate, done);
        }
      },mount:function (type, opts, mountpoint) {
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
          mountpoint = lookup.path;  // use the absolute path
        }
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        // add to our cached list of mounts
        FS.mounts.push(mount);
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 0666;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 0777;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 0666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.errnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0);
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          this.stack = stackTrace();
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
        FS.nameTable = new Array(4096);
        FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureErrnoError();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  var _mkport=undefined;var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 0777, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    } 
  Module["_saveSetjmp"] = _saveSetjmp;
  Module["_testSetjmp"] = _testSetjmp;var _setjmp=undefined;
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16)
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text)
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text)
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j]
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }
  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  var _sqrt=Math_sqrt;
  function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }
  function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }
  function ___errno_location() {
      return ___errno_state;
    }
  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }
  function _vsprintf(s, format, va_arg) {
      return _sprintf(s, format, HEAP32[((va_arg)>>2)]);
    }
  var _floor=Math_floor;
  var _cos=Math_cos;
  var _sin=Math_sin;
  var _tan=Math_tan;
  var _acos=Math_acos;
  var _asin=Math_asin;
  var _atan=Math_atan;
  var _atan2=Math_atan2;
  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }
  var _log=Math_log;
  function _localeconv() {
      // %struct.timeval = type { char* decimal point, other stuff... }
      // var indexes = Runtime.calculateStructAlignment({ fields: ['i32', 'i32'] });
      var me = _localeconv;
      if (!me.ret) {
        me.ret = allocate([allocate(intArrayFromString('.'), 'i8', ALLOC_NORMAL)], 'i8*', ALLOC_NORMAL); // just decimal point, for now
      }
      return me.ret;
    }
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      // We use file descriptor numbers and FILE* streams interchangeably.
      return stream;
    }
  function _clearerr(stream) {
      // void clearerr(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/clearerr.html
      stream = FS.getStream(stream);
      if (!stream) {
        return;
      }
      stream.eof = false;
      stream.error = false;
    }
  var _exp=Math_exp;
  var _llvm_pow_f64=Math_pow;
  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }
  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[((ptr1++)|0)];
        var curr2 = HEAP8[((check++)|0)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }
  function _abort() {
      Module['abort']();
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
            var errorInfo = '?';
            function onContextCreationError(event) {
              errorInfo = event.statusMessage || errorInfo;
            }
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (window.scrollX + rect.left);
              y = t.pageY - (window.scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (window.scrollX + rect.left);
            y = event.pageY - (window.scrollY + rect.top);
          }
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
var Math_min = Math.min;
function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    return Module["dynCall_iiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_idiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_idiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm=(function(global,env,buffer){"use asm";var a=new global.Int8Array(buffer);var b=new global.Int16Array(buffer);var c=new global.Int32Array(buffer);var d=new global.Uint8Array(buffer);var e=new global.Uint16Array(buffer);var f=new global.Uint32Array(buffer);var g=new global.Float32Array(buffer);var h=new global.Float64Array(buffer);var i=env.STACKTOP|0;var j=env.STACK_MAX|0;var k=env.tempDoublePtr|0;var l=env.ABORT|0;var m=env._stdin|0;var n=env._stderr|0;var o=env._stdout|0;var p=+env.NaN;var q=+env.Infinity;var r=0;var s=0;var t=0;var u=0;var v=0,w=0,x=0,y=0,z=0.0,A=0,B=0,C=0,D=0.0;var E=0;var F=0;var G=0;var H=0;var I=0;var J=0;var K=0;var L=0;var M=0;var N=0;var O=global.Math.floor;var P=global.Math.abs;var Q=global.Math.sqrt;var R=global.Math.pow;var S=global.Math.cos;var T=global.Math.sin;var U=global.Math.tan;var V=global.Math.acos;var W=global.Math.asin;var X=global.Math.atan;var Y=global.Math.atan2;var Z=global.Math.exp;var _=global.Math.log;var $=global.Math.ceil;var aa=global.Math.imul;var ab=env.abort;var ac=env.assert;var ad=env.asmPrintInt;var ae=env.asmPrintFloat;var af=env.min;var ag=env.invoke_iiiiiiii;var ah=env.invoke_viiiii;var ai=env.invoke_i;var aj=env.invoke_vi;var ak=env.invoke_vii;var al=env.invoke_iiiiiiiiiii;var am=env.invoke_iiii;var an=env.invoke_ii;var ao=env.invoke_v;var ap=env.invoke_iii;var aq=env.invoke_idiiiiii;var ar=env.invoke_viiiiii;var as=env.invoke_iiiii;var at=env.invoke_iiiiii;var au=env.invoke_iiiiiii;var av=env._strncmp;var aw=env._vsnprintf;var ax=env._sscanf;var ay=env._snprintf;var az=env.__scanString;var aA=env.__getFloat;var aB=env._abort;var aC=env._fprintf;var aD=env._sqrt;var aE=env._pread;var aF=env._fflush;var aG=env.__reallyNegative;var aH=env._tan;var aI=env._strchr;var aJ=env._fputc;var aK=env._clearerr;var aL=env._log;var aM=env._fabs;var aN=env.___setErrNo;var aO=env._send;var aP=env._write;var aQ=env._abs;var aR=env._sprintf;var aS=env._log10;var aT=env._sin;var aU=env._sysconf;var aV=env._longjmp;var aW=env._exp;var aX=env._atan;var aY=env._asin;var aZ=env._read;var a_=env._time;var a$=env.__formatString;var a0=env._vfprintf;var a1=env._strstr;var a2=env._llvm_va_end;var a3=env._recv;var a4=env._fileno;var a5=env._cos;var a6=env._pwrite;var a7=env._putchar;var a8=env._llvm_pow_f64;var a9=env._sbrk;var ba=env._localeconv;var bb=env._floor;var bc=env.___errno_location;var bd=env._atan2;var be=env._fmod;var bf=env._fwrite;var bg=env._acos;var bh=env._vsprintf;var bi=env._strcmp;var bj=0.0;
// EMSCRIPTEN_START_FUNCS
function bz(a){a=a|0;var b=0;b=i;i=i+a|0;i=i+7&-8;return b|0}function bA(){return i|0}function bB(a){a=a|0;i=a}function bC(a,b){a=a|0;b=b|0;if((r|0)==0){r=a;s=b}}function bD(b){b=b|0;a[k]=a[b];a[k+1|0]=a[b+1|0];a[k+2|0]=a[b+2|0];a[k+3|0]=a[b+3|0]}function bE(b){b=b|0;a[k]=a[b];a[k+1|0]=a[b+1|0];a[k+2|0]=a[b+2|0];a[k+3|0]=a[b+3|0];a[k+4|0]=a[b+4|0];a[k+5|0]=a[b+5|0];a[k+6|0]=a[b+6|0];a[k+7|0]=a[b+7|0]}function bF(a){a=a|0;E=a}function bG(a){a=a|0;F=a}function bH(a){a=a|0;G=a}function bI(a){a=a|0;H=a}function bJ(a){a=a|0;I=a}function bK(a){a=a|0;J=a}function bL(a){a=a|0;K=a}function bM(a){a=a|0;L=a}function bN(a){a=a|0;M=a}function bO(a){a=a|0;N=a}function bP(){}function bQ(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;i=i+24|0;e=d+16|0;b1(a,b,0,0,d|0,d+8|0,e)|0;i=d;return c[e>>2]|0}function bR(a,b,d,e){a=a|0;b=+b;d=+d;e=e|0;var f=0,g=0,j=0;f=i;i=i+72|0;g=f+56|0;j=g|0;h[j>>3]=b;h[g+8>>3]=d;g=f+48|0;b_(a,1,2,j,f|0,f+16|0,f+32|0,e,g)|0;i=f;return c[g>>2]|0}function bS(a,b,d,e){a=a|0;b=+b;d=+d;e=e|0;var f=0,g=0,j=0;f=i;i=i+72|0;g=f+56|0;j=g|0;h[j>>3]=b;h[g+8>>3]=d;g=f+48|0;b$(a,1,2,j,f+16|0,f+32|0,f|0,e,g)|0;i=f;return c[g>>2]|0}function bT(a){a=a|0;var b=0;b=a;if((b|0)>=0){c[55490]=b}return c[55490]|0}function bU(a){a=a|0;var b=0;b=a;if((b|0)>=0){c[55492]=b}return c[55492]|0}function bV(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,j=0,k=0,l=0,m=0,n=0;f=i;g=b;b=d;d=e;if((d|0)==0){j=1;k=j;i=f;return k|0}e=d+1584|0;if((c[d>>2]|0)!=-1){if((c[d+1584>>2]|0)!=0){fo(c[d+1584>>2]|0)}if((c[d+796>>2]|0)!=0){fo(c[d+796>>2]|0)}if((c[d+1400>>2]|0)!=0){fo(c[d+1400>>2]|0)}if((c[d+1560>>2]|0)!=0){fo(c[d+1560>>2]|0)}if((c[d+1248>>2]|0)!=0){fo(c[d+1248>>2]|0)}}c[d+1584>>2]=0;c[d+796>>2]=0;c[d+1400>>2]=0;c[d+1560>>2]=0;c[d+1248>>2]=0;if((c[d>>2]|0)==-1){l=26}else{if((c[d+1592>>2]|0)!=137){l=26}}if((l|0)==26){if((c[d>>2]|0)==-1){c[d+752>>2]=0;c[d+760>>2]=-1;c[d+712>>2]=0}c[d+1592>>2]=0;c[d+1596>>2]=0;c[d+1600>>2]=0;c[d+1604>>2]=0;c[d+1608>>2]=0;c[d+1612>>2]=0;c[d+1616>>2]=0;c[d+1620>>2]=0;c[d+1624>>2]=0;c[d+1628>>2]=0;c[d+1632>>2]=0;c[d+1636>>2]=0;c[d+1640>>2]=0;c[d+1644>>2]=0;c[d+1648>>2]=0;c[d+1652>>2]=0;c[d+1656>>2]=0;c[d+1660>>2]=0}if((b|0)<0){m=b0(e,2,c[52964]|0,220544,146,220440,(n=i,i=i+8|0,c[n>>2]=b,n)|0)|0;i=n;j=m;k=j;i=f;return k|0}do{if((g|0)!=0){l=48}else{if((c[d+8>>2]|0)==0){l=48;break}if((c[d+12>>2]|0)==0){l=48;break}if((c[d+16>>2]|0)==0){l=48;break}if((c[d+20>>2]|0)==0){l=48;break}if((c[d+24>>2]|0)==0){l=48;break}if((c[d+28>>2]|0)==0){l=48;break}if((c[55490]|0)!=0){if((c[d+72>>2]|0)==0){l=48;break}}if((c[55492]|0)!=0){if((c[d+84>>2]|0)==0){l=48;break}}if((c[d+88>>2]|0)==0){l=48;break}if((c[d+92>>2]|0)==0){l=48;break}if((c[d+112>>2]|0)==0){l=48;break}if((c[d+116>>2]|0)==0){l=48;break}if((c[d+120>>2]|0)==0){l=48;break}if((c[d+124>>2]|0)==0){l=48}}}while(0);if((l|0)==48){L67:do{if((c[d+1592>>2]|0)==137){do{if((c[d+1596>>2]|0)>=(b|0)){if((c[d+68>>2]|0)<(c[55490]|0)){break}if((c[d+80>>2]|0)>=(c[55492]|0)){break L67}}}while(0);m=d;bW(m)|0}}while(0);if((g|0)!=0){l=55}else{if((c[d+8>>2]|0)==0){l=55}}if((l|0)==55){do{if((c[d+1600>>2]|0)!=0){c[d+8>>2]=c[d+1600>>2]}else{m=fp(b,8)|0;c[d+8>>2]=m;if((m|0)!=0){c[d+1592>>2]=137;c[d+1596>>2]=b;c[d+1600>>2]=c[d+8>>2];break}m=b0(e,2,c[52964]|0,220544,185,c[52980]|0,(n=i,i=i+1|0,i=i+7&-8,c[n>>2]=0,n)|0)|0;i=n;j=m;k=j;i=f;return k|0}}while(0)}if((g|0)!=0){l=63}else{if((c[d+12>>2]|0)==0){l=63}}if((l|0)==63){do{if((c[d+1604>>2]|0)!=0){c[d+12>>2]=c[d+1604>>2]}else{m=fp(aa(b,b)|0,8)|0;c[d+12>>2]=m;if((m|0)!=0){c[d+1592>>2]=137;c[d+1596>>2]=b;c[d+1604>>2]=c[d+12>>2];break}m=d;bW(m)|0;m=b0(e,2,c[52964]|0,220544,202,c[52980]|0,(n=i,i=i+1|0,i=i+7&-8,c[n>>2]=0,n)|0)|0;i=n;j=m;k=j;i=f;return k|0}}while(0)}if((g|0)!=0){l=71}else{if((c[d+16>>2]|0)==0){l=71}}if((l|0)==71){do{if((c[d+1608>>2]|0)!=0){c[d+16>>2]=c[d+1608>>2]}else{m=fp(b,8)|0;c[d+16>>2]=m;if((m|0)!=0){c[d+1592>>2]=137;c[d+1596>>2]=b;c[d+1608>>2]=c[d+16>>2];break}m=d;bW(m)|0;m=b0(e,2,c[52964]|0,220544,219,c[52980]|0,(n=i,i=i+1|0,i=i+7&-8,c[n>>2]=0,n)|0)|0;i=n;j=m;k=j;i=f;return k|0}}while(0)}if((g|0)!=0){l=79}else{if((c[d+20>>2]|0)==0){l=79}}if((l|0)==79){do{if((c[d+1612>>2]|0)!=0){c[d+20>>2]=c[d+1612>>2]}else{m=fp(b,8)|0;c[d+20>>2]=m;if((m|0)!=0){c[d+1592>>2]=137;c[d+1596>>2]=b;c[d+1612>>2]=c[d+20>>2];break}m=d;bW(m)|0;m=b0(e,2,c[52964]|0,220544,236,c[52980]|0,(n=i,i=i+1|0,i=i+7&-8,c[n>>2]=0,n)|0)|0;i=n;j=m;k=j;i=f;return k|0}}while(0)}if((g|0)!=0){l=87}else{if((c[d+24>>2]|0)==0){l=87}}if((l|0)==87){do{if((c[d+1616>>2]|0)!=0){c[d+24>>2]=c[d+1616>>2]}else{m=fp(b,72)|0;c[d+24>>2]=m;if((m|0)!=0){c[d+1592>>2]=137;c[d+1596>>2]=b;c[d+1616>>2]=c[d+24>>2];break}m=d;bW(m)|0;m=b0(e,2,c[52964]|0,220544,253,c[52980]|0,(n=i,i=i+1|0,i=i+7&-8,c[n>>2]=0,n)|0)|0;i=n;j=m;k=j;i=f;return k|0}}while(0)}if((g|0)!=0){l=95}else{if((c[d+28>>2]|0)==0){l=95}}if((l|0)==95){do{if((c[d+1620>>2]|0)!=0){c[d+28>>2]=c[d+1620>>2]}else{m=fp(b,72)|0;c[d+28>>2]=m;if((m|0)!=0){c[d+1592>>2]=137;c[d+1596>>2]=b;c[d+1620>>2]=c[d+28>>2];break}m=d;bW(m)|0;m=b0(e,2,c[52964]|0,220544,270,c[52980]|0,(n=i,i=i+1|0,i=i+7&-8,c[n>>2]=0,n)|0)|0;i=n;j=m;k=j;i=f;return k|0}}while(0)}if((g|0)!=0){l=103}else{if((c[d+72>>2]|0)==0){l=103}}if((l|0)==103){if((c[d+1624>>2]|0)!=0){c[d+72>>2]=c[d+1624>>2]}else{do{if((c[55490]|0)!=0){m=fp(c[55490]|0,16)|0;c[d+72>>2]=m;if((m|0)!=0){break}m=d;bW(m)|0;m=b0(e,2,c[52964]|0,220544,288,c[52980]|0,(n=i,i=i+1|0,i=i+7&-8,c[n>>2]=0,n)|0)|0;i=n;j=m;k=j;i=f;return k|0}else{c[d+72>>2]=0}}while(0);c[d+68>>2]=c[55490];c[d+1592>>2]=137;c[d+1596>>2]=b;c[d+1624>>2]=c[d+72>>2]}}if((g|0)!=0){l=114}else{if((c[d+84>>2]|0)==0){l=114}}if((l|0)==114){if((c[d+1628>>2]|0)!=0){c[d+84>>2]=c[d+1628>>2]}else{do{if((c[55492]|0)!=0){m=fp(c[55492]|0,80)|0;c[d+84>>2]=m;if((m|0)!=0){break}m=d;bW(m)|0;m=b0(e,2,c[52964]|0,220544,311,c[52980]|0,(n=i,i=i+1|0,i=i+7&-8,c[n>>2]=0,n)|0)|0;i=n;j=m;k=j;i=f;return k|0}else{c[d+84>>2]=0}}while(0);c[d+80>>2]=c[55492];c[d+1592>>2]=137;c[d+1596>>2]=b;c[d+1628>>2]=c[d+84>>2]}}if((g|0)!=0){l=125}else{if((c[d+88>>2]|0)==0){l=125}}if((l|0)==125){do{if((c[d+1632>>2]|0)!=0){c[d+88>>2]=c[d+1632>>2]}else{m=fp(aa(b,b)|0,8)|0;c[d+88>>2]=m;if((m|0)!=0){c[d+1592>>2]=137;c[d+1596>>2]=b;c[d+1632>>2]=c[d+88>>2];break}m=d;bW(m)|0;m=b0(e,2,c[52964]|0,220544,333,c[52980]|0,(n=i,i=i+1|0,i=i+7&-8,c[n>>2]=0,n)|0)|0;i=n;j=m;k=j;i=f;return k|0}}while(0)}if((g|0)!=0){l=133}else{if((c[d+92>>2]|0)==0){l=133}}if((l|0)==133){do{if((c[d+1636>>2]|0)!=0){c[d+92>>2]=c[d+1636>>2]}else{m=fp(b,8)|0;c[d+92>>2]=m;if((m|0)!=0){c[d+1592>>2]=137;c[d+1596>>2]=b;c[d+1636>>2]=c[d+92>>2];break}m=d;bW(m)|0;m=b0(e,2,c[52964]|0,220544,350,c[52980]|0,(n=i,i=i+1|0,i=i+7&-8,c[n>>2]=0,n)|0)|0;i=n;j=m;k=j;i=f;return k|0}}while(0)}if((g|0)!=0){l=141}else{if((c[d+112>>2]|0)==0){l=141}}if((l|0)==141){do{if((c[d+1640>>2]|0)!=0){c[d+112>>2]=c[d+1640>>2]}else{m=fp(b,4)|0;c[d+112>>2]=m;if((m|0)!=0){c[d+1592>>2]=137;c[d+1596>>2]=b;c[d+1640>>2]=c[d+112>>2];break}m=d;bW(m)|0;m=b0(e,2,c[52964]|0,220544,367,c[52980]|0,(n=i,i=i+1|0,i=i+7&-8,c[n>>2]=0,n)|0)|0;i=n;j=m;k=j;i=f;return k|0}}while(0)}if((g|0)!=0){l=149}else{if((c[d+116>>2]|0)==0){l=149}}if((l|0)==149){do{if((c[d+1644>>2]|0)!=0){c[d+116>>2]=c[d+1644>>2]}else{m=fp(b,72)|0;c[d+116>>2]=m;if((m|0)!=0){c[d+1592>>2]=137;c[d+1596>>2]=b;c[d+1644>>2]=c[d+116>>2];break}m=d;bW(m)|0;m=b0(e,2,c[52964]|0,220544,384,c[52980]|0,(n=i,i=i+1|0,i=i+7&-8,c[n>>2]=0,n)|0)|0;i=n;j=m;k=j;i=f;return k|0}}while(0)}if((g|0)!=0){l=157}else{if((c[d+120>>2]|0)==0){l=157}}if((l|0)==157){do{if((c[d+1648>>2]|0)!=0){c[d+120>>2]=c[d+1648>>2]}else{m=fp(b,8)|0;c[d+120>>2]=m;if((m|0)!=0){c[d+1592>>2]=137;c[d+1596>>2]=b;c[d+1648>>2]=c[d+120>>2];break}m=d;bW(m)|0;m=b0(e,2,c[52964]|0,220544,401,c[52980]|0,(n=i,i=i+1|0,i=i+7&-8,c[n>>2]=0,n)|0)|0;i=n;j=m;k=j;i=f;return k|0}}while(0)}if((g|0)!=0){l=165}else{if((c[d+124>>2]|0)==0){l=165}}if((l|0)==165){do{if((c[d+1652>>2]|0)!=0){c[d+124>>2]=c[d+1652>>2]}else{l=fp(b,8)|0;c[d+124>>2]=l;if((l|0)!=0){c[d+1592>>2]=137;c[d+1596>>2]=b;c[d+1652>>2]=c[d+124>>2];break}l=d;bW(l)|0;l=b0(e,2,c[52964]|0,220544,418,c[52980]|0,(n=i,i=i+1|0,i=i+7&-8,c[n>>2]=0,n)|0)|0;i=n;j=l;k=j;i=f;return k|0}}while(0)}}c[d>>2]=0;c[d+4>>2]=b;c[d+768>>2]=c[d+8>>2];c[d+772>>2]=c[d+12>>2];c[d+776>>2]=c[d+16>>2];c[d+804>>2]=0;l=cK(0,b,d+760|0)|0;g=l;if((l|0)!=0){l=b0(e,g,c[52964]|0,220544,439,c[211912+(g<<2)>>2]|0,(n=i,i=i+1|0,i=i+7&-8,c[n>>2]=0,n)|0)|0;i=n;j=l;k=j;i=f;return k|0}l=0;while(1){if((l|0)>=(b|0)){break}h[(c[d+20>>2]|0)+(l<<3)>>3]=0.0;l=l+1|0}l=0;while(1){if((l|0)>=(b|0)){break}n=(c[d+24>>2]|0)+(l*72|0)|0;ft(n|0,0,72)|0;n=(c[d+28>>2]|0)+(l*72|0)|0;ft(n|0,0,72)|0;l=l+1|0}h[d+32>>3]=9.87654321e+107;h[d+40>>3]=90.0;h[d+48>>3]=0.0;h[d+56>>3]=0.0;c[d+64>>2]=0;n=0;while(1){if((n|0)>=(c[d+68>>2]|0)){break}c[(c[d+72>>2]|0)+(n<<4)>>2]=0;c[(c[d+72>>2]|0)+(n<<4)+4>>2]=0;h[(c[d+72>>2]|0)+(n<<4)+8>>3]=0.0;n=n+1|0}c[d+76>>2]=0;n=0;while(1){if((n|0)>=(c[d+80>>2]|0)){break}c[(c[d+84>>2]|0)+(n*80|0)>>2]=0;c[(c[d+84>>2]|0)+(n*80|0)+4>>2]=0;g=(c[d+84>>2]|0)+(n*80|0)+8|0;ft(g|0,0,72)|0;n=n+1|0}n=c[d+88>>2]|0;l=0;while(1){if((l|0)>=(b|0)){break}g=0;while(1){if((g|0)>=(b|0)){break}e=n;n=e+8|0;h[e>>3]=0.0;g=g+1|0}l=l+1|0}l=0;while(1){if((l|0)>=(b|0)){break}h[(c[d+92>>2]|0)+(l<<3)>>3]=0.0;l=l+1|0}c[d+96>>2]=0;c[d+100>>2]=0;n=d+104|0;ft(n|0,0,4)|0;a[d+104|0]=32;c[d+108>>2]=0;n=d+632|0;ft(n|0,0,72)|0;l=0;while(1){if((l|0)>=(b|0)){break}c[(c[d+112>>2]|0)+(l<<2)>>2]=0;n=(c[d+116>>2]|0)+(l*72|0)|0;ft(n|0,0,72)|0;h[(c[d+120>>2]|0)+(l<<3)>>3]=9.87654321e+107;h[(c[d+124>>2]|0)+(l<<3)>>3]=9.87654321e+107;l=l+1|0}l=d+320|0;ft(l|0,0,72)|0;h[d+272>>3]=9.87654321e+107;l=d+392|0;ft(l|0,0,72)|0;l=d+464|0;ft(l|0,0,72)|0;h[d+536>>3]=9.87654321e+107;l=d+552|0;ft(l|0,0,72)|0;h[d+544>>3]=9.87654321e+107;h[d+296>>3]=9.87654321e+107;h[d+304>>3]=9.87654321e+107;h[d+312>>3]=9.87654321e+107;l=d+200|0;ft(l|0,0,72)|0;l=d+128|0;ft(l|0,0,72)|0;h[d+288>>3]=9.87654321e+107;h[d+280>>3]=9.87654321e+107;c[d+704>>2]=0;c[d+712>>2]=0;c[d+708>>2]=0;c[d+716>>2]=0;fu(d+720|0,220296)|0;fu(d+728|0,220296)|0;c[d+736>>2]=-1;c[d+740>>2]=-1;c[d+744>>2]=-1;c[d+748>>2]=-1;cF(d+832|0)|0;ef(d+1408|0)|0;j=0;k=j;i=f;return k|0}function bW(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}if((c[b>>2]|0)==-1){c[b+760>>2]=-1}else{if((c[b+1592>>2]|0)==137){if((c[b+8>>2]|0)==(c[b+1600>>2]|0)){c[b+8>>2]=0}if((c[b+12>>2]|0)==(c[b+1604>>2]|0)){c[b+12>>2]=0}if((c[b+16>>2]|0)==(c[b+1608>>2]|0)){c[b+16>>2]=0}if((c[b+20>>2]|0)==(c[b+1612>>2]|0)){c[b+20>>2]=0}if((c[b+24>>2]|0)==(c[b+1616>>2]|0)){c[b+24>>2]=0}if((c[b+28>>2]|0)==(c[b+1620>>2]|0)){c[b+28>>2]=0}if((c[b+72>>2]|0)==(c[b+1624>>2]|0)){c[b+72>>2]=0}if((c[b+84>>2]|0)==(c[b+1628>>2]|0)){c[b+84>>2]=0}if((c[b+88>>2]|0)==(c[b+1632>>2]|0)){c[b+88>>2]=0}if((c[b+92>>2]|0)==(c[b+1636>>2]|0)){c[b+92>>2]=0}if((c[b+112>>2]|0)==(c[b+1640>>2]|0)){c[b+112>>2]=0}if((c[b+116>>2]|0)==(c[b+1644>>2]|0)){c[b+116>>2]=0}if((c[b+120>>2]|0)==(c[b+1648>>2]|0)){c[b+120>>2]=0}if((c[b+124>>2]|0)==(c[b+1652>>2]|0)){c[b+124>>2]=0}if((c[b+712>>2]|0)==(c[b+1656>>2]|0)){c[b+712>>2]=0}if((c[b+716>>2]|0)==(c[b+1660>>2]|0)){c[b+716>>2]=0}if((c[b+1600>>2]|0)!=0){fo(c[b+1600>>2]|0)}if((c[b+1604>>2]|0)!=0){fo(c[b+1604>>2]|0)}if((c[b+1608>>2]|0)!=0){fo(c[b+1608>>2]|0)}if((c[b+1612>>2]|0)!=0){fo(c[b+1612>>2]|0)}if((c[b+1616>>2]|0)!=0){fo(c[b+1616>>2]|0)}if((c[b+1620>>2]|0)!=0){fo(c[b+1620>>2]|0)}if((c[b+1624>>2]|0)!=0){fo(c[b+1624>>2]|0)}if((c[b+1628>>2]|0)!=0){fo(c[b+1628>>2]|0)}if((c[b+1632>>2]|0)!=0){fo(c[b+1632>>2]|0)}if((c[b+1636>>2]|0)!=0){fo(c[b+1636>>2]|0)}if((c[b+1640>>2]|0)!=0){fo(c[b+1640>>2]|0)}if((c[b+1644>>2]|0)!=0){fo(c[b+1644>>2]|0)}if((c[b+1648>>2]|0)!=0){fo(c[b+1648>>2]|0)}if((c[b+1652>>2]|0)!=0){fo(c[b+1652>>2]|0)}if((c[b+1656>>2]|0)!=0){a=0;while(1){if((a|0)>=(c[b+704>>2]|0)){break}eS((c[b+1656>>2]|0)+(a*96|0)|0)|0;a=a+1|0}fo(c[b+1656>>2]|0)}if((c[b+1660>>2]|0)!=0){fo(c[b+1660>>2]|0)}}if((c[b+752>>2]|0)!=0){fo(c[b+752>>2]|0)}if((c[b+768>>2]|0)==(c[b+1600>>2]|0)){c[b+768>>2]=0}if((c[b+772>>2]|0)==(c[b+1604>>2]|0)){c[b+772>>2]=0}if((c[b+776>>2]|0)==(c[b+1608>>2]|0)){c[b+776>>2]=0}}c[b+1592>>2]=0;c[b+1596>>2]=0;c[b+1600>>2]=0;c[b+1604>>2]=0;c[b+1608>>2]=0;c[b+1612>>2]=0;c[b+1616>>2]=0;c[b+1620>>2]=0;c[b+1624>>2]=0;c[b+1628>>2]=0;c[b+1632>>2]=0;c[b+1636>>2]=0;c[b+1640>>2]=0;c[b+1644>>2]=0;c[b+1648>>2]=0;c[b+1652>>2]=0;c[b+704>>2]=0;c[b+1656>>2]=0;c[b+708>>2]=0;c[b+1660>>2]=0;c[b+752>>2]=0;c[b>>2]=0;if((c[b+1584>>2]|0)!=0){fo(c[b+1584>>2]|0);c[b+1584>>2]=0}cL(b+760|0)|0;cG(b+832|0)|0;eg(b+1408|0)|0;d=0;e=d;return e|0}function bX(b){b=b|0;var d=0,e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0.0,w=0,x=0.0,y=0.0;d=i;i=i+16|0;e=d|0;f=d+8|0;g=b;b=g+832|0;j=b+56|0;k=g+1408|0;if((g|0)==0){l=1;m=l;i=d;return m|0}n=g+1584|0;o=bY(g)|0;p=o;if((o|0)!=0){l=p;m=l;i=d;return m|0}o=bZ(g)|0;p=o;if((o|0)!=0){l=p;m=l;i=d;return m|0}do{if((c[g+736>>2]|0)>=0){if((c[(c[g+752>>2]|0)+(c[g+736>>2]<<2)>>2]|0)!=2200){break}o=b;cF(o)|0;h[b+24>>3]=+h[(c[g+20>>2]|0)+(c[g+736>>2]<<3)>>3];h[b+32>>3]=+h[(c[g+20>>2]|0)+(c[g+740>>2]<<3)>>3];h[b+40>>3]=+h[g+32>>3];h[b+48>>3]=+h[g+40>>3];q=0;L455:while(1){if((q|0)>=(c[g+64>>2]|0)){break}r=(c[(c[g+72>>2]|0)+(q<<4)>>2]|0)-1|0;s=c[(c[g+72>>2]|0)+(q<<4)+4>>2]|0;if((r|0)==-1){r=c[g+740>>2]|0}if((r|0)==(c[g+740>>2]|0)){if((s|0)<30){h[j+16+(s<<3)>>3]=+h[(c[g+72>>2]|0)+(q<<4)+8>>3]}}else{if((r|0)==(c[g+736>>2]|0)){switch(s|0){case 0:{c[b+4>>2]=+h[(c[g+72>>2]|0)+(q<<4)+8>>3]!=0.0;break};case 1:{h[b+8>>3]=+h[(c[g+72>>2]|0)+(q<<4)+8>>3];break};case 2:{h[b+16>>3]=+h[(c[g+72>>2]|0)+(q<<4)+8>>3];break};case 3:{h[b+40>>3]=+h[(c[g+72>>2]|0)+(q<<4)+8>>3];break};case 4:{h[b+48>>3]=+h[(c[g+72>>2]|0)+(q<<4)+8>>3];break};default:{t=338;break L455}}}}q=q+1|0}if((t|0)==338){o=b0(n,6,c[52958]|0,220544,1580,220056,(u=i,i=i+24|0,c[u>>2]=r+1,c[u+8>>2]=s,c[u+16>>2]=g+104,u)|0)|0;i=u;l=o;m=l;i=d;return m|0}if((av((c[g+28>>2]|0)+((c[g+736>>2]|0)*72|0)+5|0,220048,3)|0)==0){c[b+4>>2]=1;h[b+8>>3]=0.0;h[b+16>>3]=+h[(c[g+20>>2]|0)+(c[g+740>>2]<<3)>>3];o=j+4|0;fu(o|0,220032)|0}else{do{if((av((c[g+28>>2]|0)+((c[g+736>>2]|0)*72|0)+5|0,219992,3)|0)==0){if(+h[b+32>>3]!=0.0){o=j+4|0;fu(o|0,219888)|0;h[j+24>>3]=0.0;v=+co(+h[b+32>>3]);h[j+32>>3]=v/+cp(+h[b+32>>3]);break}o=b0(n,5,c[52958]|0,220544,1598,219944,(u=i,i=i+1|0,i=i+7&-8,c[u>>2]=0,u)|0)|0;i=u;l=o;m=l;i=d;return m|0}else{o=j+4|0;w=(c[g+28>>2]|0)+((c[g+736>>2]|0)*72|0)+5|0;fv(o|0,w|0,3)|0;a[j+7|0]=0}}while(0)}h[j+8>>3]=0.0;w=cH(b)|0;p=w;if((w|0)!=0){w=b0(n,p+3|0,c[52958]|0,220544,1614,c[211912+(p+3<<2)>>2]|0,(u=i,i=i+1|0,i=i+7&-8,c[u>>2]=0,u)|0)|0;i=u;l=w;m=l;i=d;return m|0}h[g+32>>3]=+h[b+40>>3];h[g+40>>3]=+h[b+48>>3];q=0;while(1){if((q|0)>=(c[g+64>>2]|0)){break}r=(c[(c[g+72>>2]|0)+(q<<4)>>2]|0)-1|0;s=c[(c[g+72>>2]|0)+(q<<4)+4>>2]|0;if((r|0)==(c[g+736>>2]|0)){w=s;if((w|0)==1){h[(c[g+72>>2]|0)+(q<<4)+8>>3]=+h[b+8>>3]}else if((w|0)==2){h[(c[g+72>>2]|0)+(q<<4)+8>>3]=+h[b+16>>3]}else if((w|0)==3){h[(c[g+72>>2]|0)+(q<<4)+8>>3]=+h[b+40>>3]}else if((w|0)==4){h[(c[g+72>>2]|0)+(q<<4)+8>>3]=+h[b+48>>3]}}q=q+1|0}}}while(0);do{if((c[g+744>>2]|0)>=0){if((c[(c[g+752>>2]|0)+(c[g+744>>2]<<2)>>2]|0)!=3300){break}b=k;ef(b)|0;b=em((c[g+28>>2]|0)+((c[g+744>>2]|0)*72|0)|0,f|0,e|0,0,0,0,0,0,n)|0;p=b;if((b|0)!=0){l=p;m=l;i=d;return m|0}b=k+4|0;j=f|0;fu(b|0,j|0)|0;j=k+12|0;b=e|0;fu(j|0,b|0)|0;h[k+16>>3]=+h[(c[g+20>>2]|0)+(c[g+744>>2]<<3)>>3];h[k+24>>3]=+h[g+48>>3];h[k+32>>3]=+h[g+56>>3];q=0;while(1){if((q|0)>=(c[g+64>>2]|0)){break}r=(c[(c[g+72>>2]|0)+(q<<4)>>2]|0)-1|0;s=c[(c[g+72>>2]|0)+(q<<4)+4>>2]|0;if((r|0)==(c[g+744>>2]|0)){if((s|0)<7){h[k+40+(s<<3)>>3]=+h[(c[g+72>>2]|0)+(q<<4)+8>>3]}}q=q+1|0}b=eh(k)|0;p=b;if((b|0)==0){break}b=b0(n,p+3|0,c[52958]|0,220544,1675,c[211912+(p+3<<2)>>2]|0,(u=i,i=i+1|0,i=i+7&-8,c[u>>2]=0,u)|0)|0;i=u;l=b;m=l;i=d;return m|0}}while(0);k=0;while(1){if((k|0)>=(c[g+704>>2]|0)){break}q=eT((c[g+712>>2]|0)+(k*96|0)|0)|0;p=q;if((q|0)!=0){t=383;break}k=k+1|0}if((t|0)==383){t=b0(n,p+3|0,c[52958]|0,220544,1683,c[211912+(p+3<<2)>>2]|0,(u=i,i=i+1|0,i=i+7&-8,c[u>>2]=0,u)|0)|0;i=u;l=t;m=l;i=d;return m|0}t=c[g+4>>2]|0;q=g+96|0;c[q>>2]=c[q>>2]&7;do{if((c[g+96>>2]|0)>1){if((c[g+96>>2]&1|0)!=0){break}q=c[g+12>>2]|0;if((c[g+96>>2]&2|0)!=0){s=c[g+88>>2]|0;r=0;while(1){if((r|0)>=(t|0)){break}k=0;while(1){if((k|0)>=(t|0)){break}e=s;s=e+8|0;f=q;q=f+8|0;h[f>>3]=+h[e>>3];k=k+1|0}h[(c[g+16>>2]|0)+(r<<3)>>3]=1.0;r=r+1|0}}else{if((c[g+96>>2]&4|0)!=0){s=c[g+736>>2]|0;r=s;do{if((s|0)>=0){e=c[g+740>>2]|0;k=e;if((e|0)<0){break}v=+h[(c[g+92>>2]|0)+(k<<3)>>3];if(+h[(c[g+16>>2]|0)+(r<<3)>>3]!=0.0){x=+h[(c[g+16>>2]|0)+(k<<3)>>3]/+h[(c[g+16>>2]|0)+(r<<3)>>3];y=+co(v);h[q+((aa(k,t)|0)<<3)+(k<<3)>>3]=y;h[q+((aa(r,t)|0)<<3)+(r<<3)>>3]=y;y=+cp(v);h[q+((aa(k,t)|0)<<3)+(r<<3)>>3]=y;h[q+((aa(r,t)|0)<<3)+(k<<3)>>3]=y;e=q+((aa(r,t)|0)<<3)+(k<<3)|0;h[e>>3]=+h[e>>3]*(-0.0-x);e=q+((aa(k,t)|0)<<3)+(r<<3)|0;h[e>>3]=+h[e>>3]/x;break}e=b0(n,3,c[52958]|0,220544,1710,219784,(u=i,i=i+8|0,c[u>>2]=r+1,u)|0)|0;i=u;l=e;m=l;i=d;return m|0}}while(0)}}}}while(0);c[g+768>>2]=c[g+8>>2];c[g+772>>2]=c[g+12>>2];c[g+776>>2]=c[g+16>>2];k=cM(g+760|0)|0;p=k;if((k|0)!=0){k=b0(n,p,c[52958]|0,220544,1727,c[211912+(p<<2)>>2]|0,(u=i,i=i+1|0,i=i+7&-8,c[u>>2]=0,u)|0)|0;i=u;l=k;m=l;i=d;return m|0}cy(4,g+104|0);cy(72,g+632|0);r=0;while(1){if((r|0)>=(t|0)){break}cy(72,(c[g+116>>2]|0)+(r*72|0)|0);r=r+1|0}cy(72,g+320|0);cy(72,g+392|0);cy(72,g+464|0);cy(72,g+552|0);cy(72,g+200|0);cy(72,g+128|0);c[g>>2]=137;l=0;m=l;i=d;return m|0}function bY(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;d=i;i=i+64|0;e=d|0;f=d+16|0;g=d+24|0;h=d+40|0;j=d+48|0;k=b;b=222648;l=0;if((k|0)==0){m=1;n=m;i=d;return n|0}o=k+1584|0;a[f|0]=0;a[g|0]=0;c[k+736>>2]=-1;c[k+740>>2]=-1;c[k+744>>2]=-1;c[k+748>>2]=-1;if((a[k+104|0]|0)!=32){b=k+104|0}p=c[k+4>>2]|0;if((c[k+752>>2]|0)!=0){fo(c[k+752>>2]|0)}c[k+752>>2]=fp(p,4)|0;if((c[k+752>>2]|0)==0){q=b0(o,2,c[52974]|0,220544,1782,c[52980]|0,(r=i,i=i+1|0,i=i+7&-8,c[r>>2]=0,r)|0)|0;i=r;m=q;n=m;i=d;return n|0}q=0;L600:while(1){if((q|0)>=(p|0)){s=542;break}cy(72,(c[k+28>>2]|0)+(q*72|0)|0);fv(e|0,(c[k+28>>2]|0)+(q*72|0)|0,15)|0;a[e+15|0]=0;do{if((fx(e|0)|0)==12){if((a[e+8|0]|0)!=45){break}a[e+8|0]=0;t=7;while(1){if((t|0)<=0){break}if((a[e+t|0]|0)!=45){s=442;break}a[e+t|0]=0;t=t-1|0}if((s|0)==442){s=0}}}while(0);c[(c[k+752>>2]|0)+(q<<2)>>2]=0;if((bi(e+4|0,219472)|0)==0){c[(c[k+752>>2]|0)+(q<<2)>>2]=400}else{if((bi(e+4|0,219464)|0)==0){c[(c[k+752>>2]|0)+(q<<2)>>2]=500}}if((c[(c[k+752>>2]|0)+(q<<2)>>2]|0)!=0){a[e+4|0]=0;t=3;while(1){if((t|0)<0){break}if((a[e+t|0]|0)!=45){s=455;break}a[e+t|0]=0;t=t-1|0}if((s|0)==455){s=0}}if((en(e|0,c[k+100>>2]|0,e|0,j|0)|0)==0){u=(c[k+28>>2]|0)+(q*72|0)|0;v=e|0;fu(u|0,v|0)|0;if((a[k+392|0]|0)==0){v=k+392|0;u=j|0;fu(v|0,u|0)|0}}do{if((fx(e|0)|0)==8){if((a[e+4|0]|0)!=45){s=465;break}if((el(e|0,0,h|0,0,0,0,0,0)|0)==0){c[(c[k+752>>2]|0)+(q<<2)>>2]=3300;if((c[k+744>>2]|0)>=0){s=495;break L600}c[k+744>>2]=q;break}t=0;while(1){if((t|0)>=(c[53034]|0)){break}if((av(e+5|0,212144+(t<<2)|0,3)|0)==0){s=500;break}t=t+1|0}if((s|0)==500){s=0}if((t|0)==(c[53034]|0)){t=0;while(1){if((t|0)>=2){break}if((av(e+5|0,211904+(t<<2)|0,3)|0)==0){s=507;break}t=t+1|0}if((s|0)==507){s=0}if((t|0)==2){s=511;break L600}}c[(c[k+752>>2]|0)+(q<<2)>>2]=2200;if((a[f|0]|0)==0){u=f|0;v=e+5|0;aR(u|0,219288,(r=i,i=i+8|0,c[r>>2]=v,r)|0)|0;i=r;if((av(e|0,219272,4)|0)==0){c[k+736>>2]=q;v=k+720|0;fu(v|0,219600)|0;v=k+728|0;fu(v|0,218408)|0;l=k+740|0;v=g|0;u=f|0;aR(v|0,219264,(r=i,i=i+8|0,c[r>>2]=u,r)|0)|0;i=r}else{if((av(e|0,219200,4)|0)==0){c[k+740>>2]=q;u=k+720|0;fu(u|0,219600)|0;u=k+728|0;fu(u|0,218408)|0;l=k+736|0;u=g|0;v=f|0;aR(u|0,219184,(r=i,i=i+8|0,c[r>>2]=v,r)|0)|0;i=r}else{if((av(e+1|0,219280,3)|0)==0){c[k+736>>2]=q;v=k+720|0;u=a[e|0]|0;aR(v|0,219168,(r=i,i=i+8|0,c[r>>2]=u,r)|0)|0;i=r;u=k+728|0;v=a[e|0]|0;aR(u|0,219160,(r=i,i=i+8|0,c[r>>2]=v,r)|0)|0;i=r;l=k+740|0;v=g|0;u=k+728|0;w=f|0;aR(v|0,219152,(r=i,i=i+16|0,c[r>>2]=u,c[r+8>>2]=w,r)|0)|0;i=r}else{if((av(e+1|0,218280,3)|0)==0){c[k+740>>2]=q;w=k+720|0;u=a[e|0]|0;aR(w|0,219168,(r=i,i=i+8|0,c[r>>2]=u,r)|0)|0;i=r;u=k+728|0;w=a[e|0]|0;aR(u|0,219160,(r=i,i=i+8|0,c[r>>2]=w,r)|0)|0;i=r;l=k+736|0;w=g|0;u=k+720|0;v=f|0;aR(w|0,219152,(r=i,i=i+16|0,c[r>>2]=u,c[r+8>>2]=v,r)|0)|0;i=r}else{if((av(e+2|0,219072,2)|0)==0){c[k+736>>2]=q;v=k+720|0;u=a[e|0]|0;w=a[e+1|0]|0;aR(v|0,219144,(r=i,i=i+16|0,c[r>>2]=u,c[r+8>>2]=w,r)|0)|0;i=r;w=k+728|0;u=a[e|0]|0;v=a[e+1|0]|0;aR(w|0,219136,(r=i,i=i+16|0,c[r>>2]=u,c[r+8>>2]=v,r)|0)|0;i=r;l=k+740|0;v=g|0;u=k+728|0;w=f|0;aR(v|0,219152,(r=i,i=i+16|0,c[r>>2]=u,c[r+8>>2]=w,r)|0)|0;i=r}else{if((av(e+2|0,218176,2)|0)!=0){s=526;break L600}c[k+740>>2]=q;w=k+720|0;u=a[e|0]|0;v=a[e+1|0]|0;aR(w|0,219144,(r=i,i=i+16|0,c[r>>2]=u,c[r+8>>2]=v,r)|0)|0;i=r;v=k+728|0;u=a[e|0]|0;w=a[e+1|0]|0;aR(v|0,219136,(r=i,i=i+16|0,c[r>>2]=u,c[r+8>>2]=w,r)|0)|0;i=r;l=k+736|0;w=g|0;u=k+720|0;v=f|0;aR(w|0,219152,(r=i,i=i+16|0,c[r>>2]=u,c[r+8>>2]=v,r)|0)|0;i=r}}}}}if((c[k+740>>2]|0)>=0){v=(c[k+752>>2]|0)+(q<<2)|0;c[v>>2]=(c[v>>2]|0)+1}}else{if((c[k+740>>2]|0)<0){v=(c[k+752>>2]|0)+(q<<2)|0;c[v>>2]=(c[v>>2]|0)+1}if((av(e|0,g|0,8)|0)!=0){s=538;break L600}c[l>>2]=q;a[g|0]=0}}else{s=465}}while(0);if((s|0)==465){s=0;if((bi(e|0,216384)|0)==0){c[(c[k+752>>2]|0)+(q<<2)>>2]=1100}else{do{if((bi(e|0,219600)|0)==0){s=470}else{if((bi(e+1|0,219280)|0)==0){s=470;break}if((bi(e+2|0,219072)|0)==0){s=470;break}do{if((bi(e|0,218408)|0)==0){s=476}else{if((bi(e+1|0,218280)|0)==0){s=476;break}if((bi(e+2|0,218176)|0)==0){s=476;break}if((bi(e|0,217776)|0)==0){if((c[k+748>>2]|0)!=-1){s=482;break L600}c[(c[k+752>>2]|0)+(q<<2)>>2]=2102;c[k+748>>2]=q}else{if((el(e|0,0,0,0,0,0,0,0)|0)==0){if((c[k+744>>2]|0)<0){c[k+744>>2]=q}v=(c[k+752>>2]|0)+(q<<2)|0;c[v>>2]=(c[v>>2]|0)+3e3}}}}while(0);if((s|0)==476){s=0;if((c[k+740>>2]|0)<0){c[k+740>>2]=q}v=(c[k+752>>2]|0)+(q<<2)|0;c[v>>2]=(c[v>>2]|0)+2001}}}while(0);if((s|0)==470){s=0;if((c[k+736>>2]|0)<0){c[k+736>>2]=q}v=(c[k+752>>2]|0)+(q<<2)|0;c[v>>2]=(c[v>>2]|0)+2e3}}}q=q+1|0}if((s|0)==482){l=b0(o,4,c[52974]|0,220544,1860,219408,(r=i,i=i+32|0,c[r>>2]=(c[k+748>>2]|0)+1,c[r+8>>2]=b,c[r+16>>2]=q+1,c[r+24>>2]=b,r)|0)|0;i=r;m=l;n=m;i=d;return n|0}else if((s|0)==495){l=b0(o,4,c[52974]|0,220544,1882,219352,(r=i,i=i+32|0,c[r>>2]=(c[k+744>>2]|0)+1,c[r+8>>2]=b,c[r+16>>2]=q+1,c[r+24>>2]=b,r)|0)|0;i=r;m=l;n=m;i=d;return n|0}else if((s|0)==511){c[(c[k+752>>2]|0)+(q<<2)>>2]=-1;l=b0(o,4,c[52974]|0,220544,1907,219296,(r=i,i=i+24|0,c[r>>2]=e+5,c[r+8>>2]=q+1,c[r+16>>2]=b,r)|0)|0;i=r;m=l;n=m;i=d;return n|0}else if((s|0)==526){c[(c[k+752>>2]|0)+(q<<2)>>2]=-1;c[k+736>>2]=-1;c[k+740>>2]=-1;l=b0(o,4,c[52974]|0,220544,1961,219080,(r=i,i=i+24|0,c[r>>2]=e,c[r+8>>2]=q+1,c[r+16>>2]=b,r)|0)|0;i=r;m=l;n=m;i=d;return n|0}else if((s|0)==538){c[k+736>>2]=-1;c[k+740>>2]=-1;l=b0(o,4,c[52974]|0,220544,1976,219e3,(r=i,i=i+32|0,c[r>>2]=g,c[r+8>>2]=e,c[r+16>>2]=q+1,c[r+24>>2]=b,r)|0)|0;i=r;m=l;n=m;i=d;return n|0}else if((s|0)==542){if((bi(g|0,222648)|0)!=0){c[k+736>>2]=-1;c[k+740>>2]=-1;g=b0(o,4,c[52974]|0,220544,1991,218968,(r=i,i=i+1|0,i=i+7&-8,c[r>>2]=0,r)|0)|0;i=r;m=g;n=m;i=d;return n|0}t=0;L754:while(1){if((t|0)>=(c[k+704>>2]|0)){s=554;break}g=0;while(1){if((g|0)>=(c[(c[k+712>>2]|0)+(t*96|0)+4>>2]|0)){break}q=c[(c[(c[k+712>>2]|0)+(t*96|0)+12>>2]|0)+(g<<2)>>2]|0;if((((c[(c[k+752>>2]|0)+(q<<2)>>2]|0)/100|0|0)%10|0|0)!=5){s=549;break L754}l=(c[k+752>>2]|0)+(q<<2)|0;c[l>>2]=(c[l>>2]|0)+(t*10|0);g=g+1|0}t=t+1|0}if((s|0)==549){t=b0(o,4,c[52974]|0,220544,2003,218864,(r=i,i=i+1|0,i=i+7&-8,c[r>>2]=0,r)|0)|0;i=r;m=t;n=m;i=d;return n|0}else if((s|0)==554){m=0;n=m;i=d;return n|0}}return 0}function bZ(b){b=b|0;var d=0,e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;d=i;i=i+64|0;e=d|0;f=d+16|0;g=d+32|0;j=d+40|0;k=d+48|0;l=d+56|0;m=b;c[l>>2]=0;if((m|0)==0){n=1;o=n;i=d;return o|0}b=m+1584|0;p=c[m+4>>2]|0;q=0;L774:while(1){if((q|0)>=(p|0)){r=592;break}s=(c[(c[m+752>>2]|0)+(q<<2)>>2]|0)/1e3|0;if((s|0)==2){t=f|0;fu(t|0,219576)|0;r=574}else if((s|0)==3){fv(e|0,(c[m+28>>2]|0)+(q*72|0)|0,8)|0;a[e+8|0]=0;el(e|0,0,0,0,f|0,0,0,0)|0;r=574}do{if((r|0)==574){r=0;if((((c[(c[m+752>>2]|0)+(q<<2)>>2]|0)/100|0|0)%10|0|0)==5){break}cy(72,(c[m+24>>2]|0)+(q*72|0)|0);if((a[(c[m+24>>2]|0)+(q*72|0)|0]|0)!=0){if((cw((c[m+24>>2]|0)+(q*72|0)|0,f|0,g,j,k,l)|0)!=0){break L774}if(+h[g>>3]!=1.0){s=(c[m+16>>2]|0)+(q<<3)|0;h[s>>3]=+h[s>>3]*+h[g>>3];s=(c[m+20>>2]|0)+(q<<3)|0;h[s>>3]=+h[s>>3]*+h[g>>3];s=0;while(1){if((s|0)>=(p|0)){break}t=(c[m+88>>2]|0)+((aa(q,p)|0)<<3)+(s<<3)|0;h[t>>3]=+h[t>>3]*+h[g>>3];s=s+1|0}fu((c[m+24>>2]|0)+(q*72|0)|0,f|0)|0}}else{s=(c[m+24>>2]|0)+(q*72|0)|0;t=f|0;fu(s|0,t|0)|0}}}while(0);q=q+1|0}if((r|0)==592){n=0;o=n;i=d;return o|0}if((a[m+104|0]|0)!=0){u=m+104|0}else{u=222648}m=(c[l>>2]|0)+16|0;b0(b,6,c[52972]|0,220544,2057,219512,(b=i,i=i+24|0,c[b>>2]=q+1,c[b+8>>2]=u,c[b+16>>2]=m,b)|0)|0;i=b;fo(c[l>>2]|0);n=6;o=n;i=d;return o|0}function b_(a,b,e,f,g,j,k,l,m){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0.0,C=0,D=0.0,E=0,F=0,G=0,H=0,I=0,J=0;n=i;o=a;a=b;b=e;e=f;f=g;g=j;j=k;k=l;l=m;m=o+832|0;p=m+56|0;if((o|0)==0){q=1;r=q;i=n;return r|0}s=o+1584|0;do{if((c[o>>2]|0)!=137){t=bX(o)|0;u=t;if((t|0)==0){break}q=u;r=q;i=n;return r|0}}while(0);do{if((a|0)>=1){if((a|0)>1){if((b|0)<(c[o+4>>2]|0)){break}}t=cO(o+760|0,a,b,e,f)|0;u=t;if((t|0)!=0){t=b0(s,u,c[52962]|0,220544,2123,c[211912+(u<<2)>>2]|0,(v=i,i=i+1|0,i=i+7&-8,c[v>>2]=0,v)|0)|0;i=v;q=t;r=q;i=n;return r|0}t=fp(a,4)|0;w=t;if((t|0)==0){t=b0(s,2,c[52962]|0,220544,2128,c[52980]|0,(v=i,i=i+1|0,i=i+7&-8,c[v>>2]=0,v)|0)|0;i=v;q=t;r=q;i=n;return r|0}c[l>>2]=0;cB(a,1,l);t=0;while(1){if((t|0)>=(c[o+4>>2]|0)){x=685;break}y=((c[(c[o+752>>2]|0)+(t<<2)>>2]|0)/100|0|0)%10|0;if((y|0)<=1){z=f+(t<<3)|0;A=k+(t<<3)|0;B=+h[(c[o+20>>2]|0)+(t<<3)>>3];C=0;while(1){if((C|0)>=(a|0)){break}h[A>>3]=+h[z>>3]+B;z=z+(b<<3)|0;A=A+(b<<3)|0;C=C+1|0}}else{if((c[(c[o+752>>2]|0)+(t<<2)>>2]|0)==2200){if((c[o+748>>2]|0)!=-1){if(+h[p+8>>3]==0.0){D=90.0}else{D=+h[p+8>>3]*3.141592653589793/2.0}z=f;A=l;E=1<<t|1<<c[o+740>>2];C=0;while(1){if((C|0)>=(a|0)){break}F=~~(+h[z+(c[o+748>>2]<<3)>>3]+.5);if(+P(+(+h[z+(c[o+748>>2]<<3)>>3]- +(F|0)))>1.0e-10){G=A;c[G>>2]=c[G>>2]|E;G=b0(s,8,c[52962]|0,220544,2169,c[52986]|0,(v=i,i=i+1|0,i=i+7&-8,c[v>>2]=0,v)|0)|0;i=v;u=G}else{c[A>>2]=0;switch(F|0){case 0:{F=z+(c[o+740>>2]<<3)|0;h[F>>3]=+h[F>>3]+D;break};case 1:{break};case 2:{F=z+(t<<3)|0;h[F>>3]=+h[F>>3]+D;break};case 3:{F=z+(t<<3)|0;h[F>>3]=+h[F>>3]+D*2.0;break};case 4:{F=z+(t<<3)|0;h[F>>3]=+h[F>>3]+D*3.0;break};case 5:{F=z+(c[o+740>>2]<<3)|0;h[F>>3]=+h[F>>3]-D;break};default:{F=A;c[F>>2]=c[F>>2]|E;F=b0(s,8,c[52962]|0,220544,2194,c[52986]|0,(v=i,i=i+1|0,i=i+7&-8,c[v>>2]=0,v)|0)|0;i=v;u=F}}}z=z+(b<<3)|0;C=C+1|0;A=A+4|0}}H=a;A=0;F=cz(a,b,f+(t<<3)|0)|0;I=F;if((F|0)!=0){H=1;A=a}F=cz(a,b,f+(c[o+740>>2]<<3)|0)|0;G=F;if((F|0)!=0){A=1}F=cI(m,H,A,b,b,f+(t<<3)|0,f+(c[o+740>>2]<<3)|0,g,j,k+(t<<3)|0,k+(c[o+740>>2]<<3)|0,w)|0;J=F;if((F|0)!=0){if((J|0)!=5){x=647;break}F=b0(s,8,c[52962]|0,220544,2219,c[52986]|0,(v=i,i=i+1|0,i=i+7&-8,c[v>>2]=0,v)|0)|0;i=v;u=F}do{if((I|0)!=0){if((G|0)==0){break}cA(a,b,k+(t<<3)|0);cA(a,b,k+(c[o+740>>2]<<3)|0);cA(a,1,g);cA(a,1,j);cB(a,1,w)}}while(0);if((J|0)==5){E=1<<t|1<<c[o+740>>2];cC(a,w,E,l)}}else{if((y|0)==3){x=657}else{if((y|0)==4){x=657}}if((x|0)==657){x=0;H=a;G=cz(a,b,f+(t<<3)|0)|0;I=G;if((G|0)!=0){H=1}J=0;if((c[(c[o+752>>2]|0)+(t<<2)>>2]|0)==3300){J=ej(o+1408|0,H,b,b,f+(t<<3)|0,k+(t<<3)|0,w)|0;if((J|0)==3){G=b0(s,8,c[52962]|0,220544,2253,c[52986]|0,(v=i,i=i+1|0,i=i+7&-8,c[v>>2]=0,v)|0)|0;i=v;u=G}else{if((J|0)!=0){x=663;break}}}else{if((y|0)==4){J=cQ(+h[(c[o+20>>2]|0)+(t<<3)>>3],H,b,b,f+(t<<3)|0,k+(t<<3)|0,w)|0;if((J|0)==3){if((c[s>>2]|0)==0){G=s;F=c[52962]|0;A=c[52986]|0;b0(G,8,F,220544,2264,A,(v=i,i=i+1|0,i=i+7&-8,c[v>>2]=0,v)|0)|0;i=v}}else{if((J|0)==2){x=672;break}}}}if((I|0)!=0){cA(a,b,k+(t<<3)|0);cB(a,1,w)}if((J|0)==3){cC(a,w,1<<t,l)}}}}t=t+1|0}do{if((x|0)==647){A=b0(s,J+3|0,c[52962]|0,220544,2221,c[211912+(J+3<<2)>>2]|0,(v=i,i=i+1|0,i=i+7&-8,c[v>>2]=0,v)|0)|0;i=v;u=A}else if((x|0)==685){A=0;while(1){if((A|0)>=(c[o+704>>2]|0)){break}J=eU((c[o+712>>2]|0)+(A*96|0)|0,a,b,f,k,w)|0;if((J|0)==4){F=b0(s,8,c[52962]|0,220544,2290,c[52986]|0,(v=i,i=i+1|0,i=i+7&-8,c[v>>2]=0,v)|0)|0;i=v;u=F;E=0;F=0;while(1){if((F|0)>=(c[(c[o+712>>2]|0)+(A*96|0)+4>>2]|0)){break}E=E|1<<c[(c[(c[o+712>>2]|0)+(A*96|0)+12>>2]|0)+(F<<2)>>2];F=F+1|0}cC(a,w,E,l)}else{if((J|0)!=0){x=694;break}}A=A+1|0}if((x|0)==694){if((J|0)==3){J=5}A=b0(s,J,c[52962]|0,220544,2300,c[211912+(J<<2)>>2]|0,(v=i,i=i+1|0,i=i+7&-8,c[v>>2]=0,v)|0)|0;i=v;u=A;break}t=c[o+4>>2]|0;while(1){if((t|0)>=(b|0)){break}h[k+(t<<3)>>3]=0.0;cA(a,b,k+(t<<3)|0);t=t+1|0}}else if((x|0)==672){A=212256+(J<<2)|0;b0(s,5,c[52962]|0,220544,2267,d[A]|d[A+1|0]<<8|d[A+2|0]<<16|d[A+3|0]<<24|0,(v=i,i=i+1|0,i=i+7&-8,c[v>>2]=0,v)|0)|0;i=v}else if((x|0)==663){A=b0(s,J+3|0,c[52962]|0,220544,2255,c[211912+(J+3<<2)>>2]|0,(v=i,i=i+1|0,i=i+7&-8,c[v>>2]=0,v)|0)|0;i=v;u=A}}while(0);fo(w);q=u;r=q;i=n;return r|0}}while(0);u=b0(s,4,c[52962]|0,220544,2116,219712,(v=i,i=i+1|0,i=i+7&-8,c[v>>2]=0,v)|0)|0;i=v;q=u;r=q;i=n;return r|0}function b$(a,b,e,f,g,j,k,l,m){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0.0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0.0;n=i;o=a;a=b;b=e;e=f;f=g;g=j;j=k;k=l;l=m;m=o+832|0;p=m+56|0;if((o|0)==0){q=1;r=q;i=n;return r|0}s=o+1584|0;do{if((c[o>>2]|0)!=137){t=bX(o)|0;u=t;if((t|0)==0){break}q=u;r=q;i=n;return r|0}}while(0);do{if((a|0)>=1){if((a|0)>1){if((b|0)<(c[o+4>>2]|0)){break}}t=fp(a,4)|0;v=t;if((t|0)==0){t=b0(s,2,c[52960]|0,220544,2359,c[52980]|0,(w=i,i=i+1|0,i=i+7&-8,c[w>>2]=0,w)|0)|0;i=w;q=t;r=q;i=n;return r|0}u=0;c[l>>2]=0;cB(a,1,l);t=0;while(1){if((t|0)>=(c[o+4>>2]|0)){x=801;break}y=((c[(c[o+752>>2]|0)+(t<<2)>>2]|0)/100|0|0)%10|0;if((y|0)<=1){z=e+(t<<3)|0;A=j+(t<<3)|0;B=+h[(c[o+20>>2]|0)+(t<<3)>>3];C=0;while(1){if((C|0)>=(a|0)){break}h[A>>3]=+h[z>>3]-B;z=z+(b<<3)|0;A=A+(b<<3)|0;C=C+1|0}}else{if((c[(c[o+752>>2]|0)+(t<<2)>>2]|0)==2200){z=a;D=0;E=cz(a,b,e+(t<<3)|0)|0;F=E;if((E|0)!=0){z=1;D=a}E=cz(a,b,e+(c[o+740>>2]<<3)|0)|0;G=E;if((E|0)!=0){D=1}E=cJ(m,z,D,b,b,e+(t<<3)|0,e+(c[o+740>>2]<<3)|0,f,g,j+(t<<3)|0,j+(c[o+740>>2]<<3)|0,v)|0;H=E;if((E|0)!=0){if((H|0)!=6){x=741;break}E=b0(s,9,c[52960]|0,220544,2401,c[52987]|0,(w=i,i=i+1|0,i=i+7&-8,c[w>>2]=0,w)|0)|0;i=w;u=E}do{if((F|0)!=0){if((G|0)==0){break}cA(a,b,j+(t<<3)|0);cA(a,b,j+(c[o+740>>2]<<3)|0);cA(a,1,f);cA(a,1,g);cB(a,1,v)}}while(0);if((H|0)==6){I=1<<t|1<<c[o+740>>2];cC(a,v,I,l)}if((c[o+748>>2]|0)!=-1){if(+h[p+8>>3]==0.0){J=90.0}else{J=+h[p+8>>3]*3.141592653589793/2.0}A=j;C=0;while(1){if((C|0)>=(a|0)){break}if(+h[A+(c[o+740>>2]<<3)>>3]<-.5*J){G=A+(c[o+740>>2]<<3)|0;h[G>>3]=+h[G>>3]+J;h[A+(c[o+748>>2]<<3)>>3]=5.0}else{if(+h[A+(c[o+740>>2]<<3)>>3]>.5*J){G=A+(c[o+740>>2]<<3)|0;h[G>>3]=+h[G>>3]-J;h[A+(c[o+748>>2]<<3)>>3]=0.0}else{if(+h[A+(t<<3)>>3]>2.5*J){G=A+(t<<3)|0;h[G>>3]=+h[G>>3]-3.0*J;h[A+(c[o+748>>2]<<3)>>3]=4.0}else{if(+h[A+(t<<3)>>3]>1.5*J){G=A+(t<<3)|0;h[G>>3]=+h[G>>3]-2.0*J;h[A+(c[o+748>>2]<<3)>>3]=3.0}else{if(+h[A+(t<<3)>>3]>.5*J){G=A+(t<<3)|0;h[G>>3]=+h[G>>3]-J;h[A+(c[o+748>>2]<<3)>>3]=2.0}else{h[A+(c[o+748>>2]<<3)>>3]=1.0}}}}}A=A+(b<<3)|0;C=C+1|0}}}else{if((y|0)==3){x=775}else{if((y|0)==4){x=775}}if((x|0)==775){x=0;G=a;F=cz(a,b,e+(t<<3)|0)|0;E=F;if((F|0)!=0){G=1}H=0;if((c[(c[o+752>>2]|0)+(t<<2)>>2]|0)==3300){H=ek(o+1408|0,G,b,b,e+(t<<3)|0,j+(t<<3)|0,v)|0;if((H|0)==4){F=b0(s,9,c[52960]|0,220544,2470,c[52987]|0,(w=i,i=i+1|0,i=i+7&-8,c[w>>2]=0,w)|0)|0;i=w;u=F}else{if((H|0)!=0){x=781;break}}}else{if((y|0)==4){H=cR(+h[(c[o+20>>2]|0)+(t<<3)>>3],G,b,b,e+(t<<3)|0,j+(t<<3)|0,v)|0;if((H|0)==4){G=b0(s,9,c[52960]|0,220544,2480,c[52987]|0,(w=i,i=i+1|0,i=i+7&-8,c[w>>2]=0,w)|0)|0;i=w;u=G}else{if((H|0)==2){x=788;break}}}}if((E|0)!=0){cA(a,b,j+(t<<3)|0);cB(a,1,v)}if((H|0)==4){cC(a,v,1<<t,l)}}}}t=t+1|0}do{if((x|0)==741){E=b0(s,H+3|0,c[52960]|0,220544,2403,c[211912+(H+3<<2)>>2]|0,(w=i,i=i+1|0,i=i+7&-8,c[w>>2]=0,w)|0)|0;i=w;u=E}else if((x|0)==781){E=b0(s,H+3|0,c[52960]|0,220544,2472,c[211912+(H+3<<2)>>2]|0,(w=i,i=i+1|0,i=i+7&-8,c[w>>2]=0,w)|0)|0;i=w;u=E}else if((x|0)==788){E=212256+(H<<2)|0;G=b0(s,5,c[52960]|0,220544,2482,d[E]|d[E+1|0]<<8|d[E+2|0]<<16|d[E+3|0]<<24|0,(w=i,i=i+1|0,i=i+7&-8,c[w>>2]=0,w)|0)|0;i=w;u=G}else if((x|0)==801){G=0;while(1){if((G|0)>=(c[o+704>>2]|0)){break}H=eV((c[o+712>>2]|0)+(G*96|0)|0,a,b,e,j,v)|0;if((H|0)==5){E=b0(s,9,c[52960]|0,220544,2506,c[52987]|0,(w=i,i=i+1|0,i=i+7&-8,c[w>>2]=0,w)|0)|0;i=w;u=E;I=0;E=0;while(1){if((E|0)>=(c[(c[o+712>>2]|0)+(G*96|0)+4>>2]|0)){break}I=I|1<<c[(c[(c[o+712>>2]|0)+(G*96|0)+12>>2]|0)+(E<<2)>>2];E=E+1|0}cC(a,v,I,l)}else{if((H|0)!=0){x=810;break}}G=G+1|0}if((x|0)==810){if((H|0)==3){H=5}G=b0(s,H,c[52960]|0,220544,2516,c[211912+(H<<2)>>2]|0,(w=i,i=i+1|0,i=i+7&-8,c[w>>2]=0,w)|0)|0;i=w;u=G;break}t=c[o+4>>2]|0;while(1){if((t|0)>=(b|0)){break}h[j+(t<<3)>>3]=0.0;cA(a,b,j+(t<<3)|0);t=t+1|0}G=cP(o+760|0,a,b,j,k)|0;H=G;if((G|0)!=0){G=b0(s,H,c[52960]|0,220544,2531,c[211912+(H<<2)>>2]|0,(w=i,i=i+1|0,i=i+7&-8,c[w>>2]=0,w)|0)|0;i=w;u=G;break}else{break}}}while(0);fo(v);q=u;r=q;i=n;return r|0}}while(0);u=b0(s,4,c[52960]|0,220544,2353,219712,(w=i,i=i+1|0,i=i+7&-8,c[w>>2]=0,w)|0)|0;i=w;q=u;r=q;i=n;return r|0}function b0(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0;j=i;i=i+144|0;k=j|0;l=j+128|0;m=a;a=b;b=d;d=e;e=f;f=g;if((c[55650]|0)==0){n=a;o=n;i=j;return o|0}if((m|0)==0){n=a;o=n;i=j;return o|0}g=c[m>>2]|0;if((a|0)!=0){if((g|0)==0){p=fp(1,176)|0;g=p;c[m>>2]=p}c[g>>2]=a;c[g+8>>2]=b;c[g+12>>2]=d;c[g+4>>2]=e;e=k|0;d=f;fv(e|0,d|0,128)|0;d=l|0;c[d>>2]=h;c[d+4>>2]=0;d=g+16|0;h=k|0;k=l|0;aw(d|0,160,h|0,k|0)|0;}else{if((g|0)!=0){fo(g);c[m>>2]=0}}n=a;o=n;i=j;return o|0}function b1(e,f,g,j,k,l,p){e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;p=p|0;var q=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,ab=0,ac=0,ad=0,ae=0,af=0,ag=0,ah=0,al=0,aq=0,av=0,aw=0,ax=0,ay=0,az=0,aA=0;q=i;i=i+888|0;t=1;u=0;v=i;i=i+168|0;c[v>>2]=0;while(1)switch(t|0){case 1:w=q|0;x=q+8|0;y=q+16|0;z=q+24|0;A=q+32|0;B=q+112|0;C=q+224|0;D=q+232|0;E=q+344|0;F=q+456|0;G=q+672|0;H=e;I=f;J=g;K=j;L=k;M=l;N=p;c[C>>2]=0;O=0;t=2;break;case 2:if((O|0)<27){t=3;break}else{t=5;break};case 3:c[B+(O<<2)>>2]=0;c[E+(O<<2)>>2]=0;c[D+(O<<2)>>2]=0;h[F+(O<<3)>>3]=9.87654321e+107;h[G+(O<<3)>>3]=9.87654321e+107;t=4;break;case 4:O=O+1|0;t=2;break;case 5:c[55608]=H;c[55606]=I;P=H;Q=0;c[L>>2]=0;c[z>>2]=0;c[y>>2]=0;c[x>>2]=0;a[w]=32;R=-1;S=-1;T=0;U=0;V=0;c[M>>2]=0;c[N>>2]=0;W=1;X=fy(222440,t,v)|0;t=572;break;case 572:if((X|0)!=0){t=6;break}else{t=7;break};case 6:Y=3;t=571;break;case 7:c[55496]=1;if((c[55516]|0)!=0){t=19;break}else{t=8;break};case 8:c[55516]=1;if((c[55496]|0)!=0){t=10;break}else{t=9;break};case 9:c[55496]=1;t=10;break;case 10:if((c[55604]|0)!=0){t=12;break}else{t=11;break};case 11:c[55604]=c[m>>2];t=12;break;case 12:if((c[55600]|0)!=0){t=14;break}else{t=13;break};case 13:c[55600]=c[o>>2];t=14;break;case 14:if((c[55540]|0)!=0){t=15;break}else{t=16;break};case 15:if((c[(c[55540]|0)+(c[55532]<<2)>>2]|0)!=0){t=18;break}else{t=17;break};case 16:if(0){t=18;break}else{t=17;break};case 17:ao(6);if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;Z=ap(6,c[55604]|0,16384)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;c[(c[55540]|0)+(c[55532]<<2)>>2]=Z;t=18;break;case 18:ao(2);if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;t=19;break;case 19:t=20;break;case 20:_=c[55528]|0;a[_]=a[222080]|0;$=_;ab=c[55496]|0;ab=ab+(c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]|0)|0;t=21;break;case 21:t=22;break;case 22:Z=b[93960+(ab<<8)+(d[_]<<1)>>1]|0;ab=Z;if((Z|0)>0){t=23;break}else{t=26;break};case 23:if((b[207592+(ab<<1)>>1]|0)!=0){t=24;break}else{t=25;break};case 24:c[55508]=ab;c[55512]=_;t=25;break;case 25:_=_+1|0;t=22;break;case 26:ab=-ab|0;t=27;break;case 27:ac=b[207592+(ab<<1)>>1]|0;c[55598]=$;c[55602]=_-$;a[222080]=a[_]|0;a[_]=0;c[55528]=_;t=28;break;case 28:switch(ac|0){case 15:{t=103;break};case 16:{t=108;break};case 17:{t=113;break};case 18:{t=118;break};case 19:{t=123;break};case 20:{t=128;break};case 21:{t=133;break};case 22:{t=138;break};case 23:{t=145;break};case 24:{t=152;break};case 25:{t=166;break};case 26:{t=171;break};case 27:{t=178;break};case 28:{t=185;break};case 29:{t=192;break};case 30:{t=199;break};case 31:{t=206;break};case 32:{t=211;break};case 33:{t=222;break};case 34:{t=227;break};case 35:{t=232;break};case 36:{t=237;break};case 37:{t=242;break};case 38:{t=247;break};case 39:{t=259;break};case 40:{t=272;break};case 41:{t=277;break};case 42:{t=282;break};case 0:{t=29;break};case 43:{t=290;break};case 44:case 45:{t=293;break};case 46:{t=296;break};case 47:{t=299;break};case 1:{t=30;break};case 48:case 49:case 50:case 51:{t=302;break};case 52:case 53:case 54:case 55:case 56:case 57:{t=309;break};case 58:{t=312;break};case 59:{t=326;break};case 60:case 61:{t=329;break};case 62:{t=339;break};case 63:{t=342;break};case 64:case 65:{t=345;break};case 66:{t=351;break};case 67:case 68:case 69:case 70:{t=354;break};case 71:case 72:case 73:case 74:case 75:case 76:{t=357;break};case 77:{t=360;break};case 78:{t=363;break};case 79:{t=372;break};case 80:{t=375;break};case 2:{t=38;break};case 81:{t=401;break};case 82:{t=404;break};case 83:{t=425;break};case 84:{t=428;break};case 3:{t=43;break};case 85:{t=454;break};case 86:{t=457;break};case 4:{t=48;break};case 87:{t=495;break};case 88:case 89:{t=498;break};case 90:{t=501;break};case 91:{t=504;break};case 92:{t=514;break};case 93:{t=523;break};case 5:{t=53;break};case 96:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:{t=531;break};case 94:{t=550;break};case 95:{t=557;break};case 6:{t=58;break};case 7:{t=63;break};case 8:{t=68;break};case 9:{t=73;break};case 10:{t=78;break};case 11:{t=83;break};case 12:{t=88;break};case 13:{t=93;break};case 14:{t=98;break};default:{t=569;break}}break;case 29:a[_]=a[222080]|0;_=(c[55512]|0)+1|0;ab=c[55508]|0;t=27;break;case 30:if((c[55602]|0)>0){t=31;break}else{t=32;break};case 31:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=32;break;case 32:if((W|0)==1){t=33;break}else{t=34;break};case 33:am(10,c[55598]|0,218792,(ad=i,i=i+8|0,c[ad>>2]=C,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;t=34;break;case 34:if((c[C>>2]|0)<0){t=35;break}else{t=36;break};case 35:ae=A|0;am(8,ae|0,221176,(ad=i,i=i+8|0,c[ad>>2]=c[C>>2],ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;c[C>>2]=0;c[55496]=29;t=37;break;case 36:c[55496]=27;t=37;break;case 37:t=570;break;case 38:if((c[55602]|0)>0){t=39;break}else{t=40;break};case 39:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=40;break;case 40:if((W|0)==1){t=41;break}else{t=42;break};case 41:am(10,c[55598]|0,218808,(ad=i,i=i+16|0,c[ad>>2]=w,c[ad+8>>2]=x,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;ar(2,c[C>>2]|0,c[x>>2]|0,0,a[w]|0,B|0,0);if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;t=42;break;case 42:c[55496]=31;t=570;break;case 43:if((c[55602]|0)>0){t=44;break}else{t=45;break};case 44:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=45;break;case 45:R=1;if((W|0)==2){t=46;break}else{t=47;break};case 46:T=(c[N>>2]|0)+8|0;t=47;break;case 47:c[55496]=7;t=570;break;case 48:if((c[55602]|0)>0){t=49;break}else{t=50;break};case 49:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=50;break;case 50:R=1;if((W|0)==2){t=51;break}else{t=52;break};case 51:T=(c[N>>2]|0)+12|0;t=52;break;case 52:U=1;c[55496]=9;t=570;break;case 53:if((c[55602]|0)>0){t=54;break}else{t=55;break};case 54:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=55;break;case 55:R=1;if((W|0)==2){t=56;break}else{t=57;break};case 56:T=(c[N>>2]|0)+88|0;t=57;break;case 57:U=2;c[55496]=9;t=570;break;case 58:if((c[55602]|0)>0){t=59;break}else{t=60;break};case 59:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=60;break;case 60:R=1;if((W|0)==2){t=61;break}else{t=62;break};case 61:T=(c[N>>2]|0)+16|0;t=62;break;case 62:c[55496]=7;t=570;break;case 63:if((c[55602]|0)>0){t=64;break}else{t=65;break};case 64:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=65;break;case 65:R=1;if((W|0)==2){t=66;break}else{t=67;break};case 66:T=(c[N>>2]|0)+92|0;t=67;break;case 67:U=4;c[55496]=3;t=570;break;case 68:if((c[55602]|0)>0){t=69;break}else{t=70;break};case 69:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=70;break;case 70:R=2;if((W|0)==2){t=71;break}else{t=72;break};case 71:T=(c[N>>2]|0)+24|0;t=72;break;case 72:c[55496]=7;t=570;break;case 73:if((c[55602]|0)>0){t=74;break}else{t=75;break};case 74:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=75;break;case 75:R=2;if((W|0)==2){t=76;break}else{t=77;break};case 76:T=(c[N>>2]|0)+28|0;t=77;break;case 77:c[55496]=7;t=570;break;case 78:if((c[55602]|0)>0){t=79;break}else{t=80;break};case 79:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=80;break;case 80:R=1;if((W|0)==2){t=81;break}else{t=82;break};case 81:T=(c[N>>2]|0)+20|0;t=82;break;case 82:c[55496]=7;t=570;break;case 83:if((c[55602]|0)>0){t=84;break}else{t=85;break};case 84:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=85;break;case 85:R=1;if((W|0)==2){t=86;break}else{t=87;break};case 86:T=(c[N>>2]|0)+32|0;t=87;break;case 87:c[55496]=13;t=570;break;case 88:if((c[55602]|0)>0){t=89;break}else{t=90;break};case 89:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=90;break;case 90:R=1;if((W|0)==2){t=91;break}else{t=92;break};case 91:T=(c[N>>2]|0)+40|0;t=92;break;case 92:c[55496]=13;t=570;break;case 93:if((c[55602]|0)>0){t=94;break}else{t=95;break};case 94:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=95;break;case 95:R=1;if((W|0)==2){t=96;break}else{t=97;break};case 96:T=(c[N>>2]|0)+48|0;t=97;break;case 97:c[55496]=13;t=570;break;case 98:if((c[55602]|0)>0){t=99;break}else{t=100;break};case 99:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=100;break;case 100:R=1;if((W|0)==2){t=101;break}else{t=102;break};case 101:T=(c[N>>2]|0)+48|0;t=102;break;case 102:ak(4,32,c[55598]|0);if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;c[55496]=13;t=570;break;case 103:if((c[55602]|0)>0){t=104;break}else{t=105;break};case 104:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=105;break;case 105:R=1;if((W|0)==2){t=106;break}else{t=107;break};case 106:T=(c[N>>2]|0)+56|0;t=107;break;case 107:c[55496]=13;t=570;break;case 108:if((c[55602]|0)>0){t=109;break}else{t=110;break};case 109:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=110;break;case 110:R=1;if((W|0)==2){t=111;break}else{t=112;break};case 111:T=(c[N>>2]|0)+72|0;t=112;break;case 112:V=E|0;c[55496]=11;t=570;break;case 113:if((c[55602]|0)>0){t=114;break}else{t=115;break};case 114:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=115;break;case 115:R=1;if((W|0)==2){t=116;break}else{t=117;break};case 116:T=(c[N>>2]|0)+72|0;t=117;break;case 117:V=E|0;c[55496]=5;t=570;break;case 118:if((c[55602]|0)>0){t=119;break}else{t=120;break};case 119:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=120;break;case 120:R=2;if((W|0)==2){t=121;break}else{t=122;break};case 121:T=(c[N>>2]|0)+84|0;t=122;break;case 122:V=D|0;c[55496]=11;t=570;break;case 123:if((c[55602]|0)>0){t=124;break}else{t=125;break};case 124:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=125;break;case 125:R=2;if((W|0)==2){t=126;break}else{t=127;break};case 126:T=(c[N>>2]|0)+116|0;t=127;break;case 127:c[55496]=7;t=570;break;case 128:if((c[55602]|0)>0){t=129;break}else{t=130;break};case 129:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=130;break;case 130:R=1;if((W|0)==2){t=131;break}else{t=132;break};case 131:T=(c[N>>2]|0)+120|0;t=132;break;case 132:c[55496]=7;t=570;break;case 133:if((c[55602]|0)>0){t=134;break}else{t=135;break};case 134:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=135;break;case 135:R=1;if((W|0)==2){t=136;break}else{t=137;break};case 136:T=(c[N>>2]|0)+124|0;t=137;break;case 137:c[55496]=7;t=570;break;case 138:if((c[55602]|0)>0){t=139;break}else{t=140;break};case 139:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=140;break;case 140:R=2;if((W|0)==2){t=141;break}else{t=142;break};case 141:T=(c[N>>2]|0)+128|0;t=142;break;case 142:if((K|0)<-10){t=143;break}else{t=144;break};case 143:Q=(c[55608]|0)-80|0;t=144;break;case 144:c[55496]=15;t=570;break;case 145:if((c[55602]|0)>0){t=146;break}else{t=147;break};case 146:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=147;break;case 147:R=2;if((W|0)==2){t=148;break}else{t=149;break};case 148:T=(c[N>>2]|0)+200|0;t=149;break;case 149:if((K|0)<-10){t=150;break}else{t=151;break};case 150:Q=(c[55608]|0)-80|0;t=151;break;case 151:c[55496]=15;t=570;break;case 152:if((c[55602]|0)>0){t=153;break}else{t=154;break};case 153:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=154;break;case 154:am(10,c[55598]|0,217720,(ad=i,i=i+8|0,c[ad>>2]=w,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;if((a[w]|0)==32){t=156;break}else{t=155;break};case 155:if((J&2|0)!=0){t=156;break}else{t=161;break};case 156:R=1;if((W|0)==2){t=157;break}else{t=160;break};case 157:T=F|0;if((a[w]|0)>=65){t=158;break}else{t=159;break};case 158:T=T+(c[B+((a[w]|0)-65+1<<2)>>2]<<3)|0;t=159;break;case 159:t=160;break;case 160:ak(4,32,c[55598]|0);if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;c[55496]=13;t=165;break;case 161:if((J&268435456|0)!=0){t=162;break}else{t=163;break};case 162:ae=216400;c[55496]=29;t=164;break;case 163:c[55496]=27;t=164;break;case 164:t=165;break;case 165:t=570;break;case 166:if((c[55602]|0)>0){t=167;break}else{t=168;break};case 167:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=168;break;case 168:R=1;if((W|0)==2){t=169;break}else{t=170;break};case 169:T=(c[N>>2]|0)+272|0;t=170;break;case 170:c[55496]=13;t=570;break;case 171:if((c[55602]|0)>0){t=172;break}else{t=173;break};case 172:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=173;break;case 173:R=1;if((W|0)==2){t=174;break}else{t=175;break};case 174:T=(c[N>>2]|0)+280|0;t=175;break;case 175:if((K|0)<-10){t=176;break}else{t=177;break};case 176:Q=(c[55608]|0)-80|0;t=177;break;case 177:c[55496]=15;t=570;break;case 178:if((c[55602]|0)>0){t=179;break}else{t=180;break};case 179:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=180;break;case 180:R=1;if((W|0)==2){t=181;break}else{t=182;break};case 181:T=(c[N>>2]|0)+288|0;t=182;break;case 182:if((K|0)<-10){t=183;break}else{t=184;break};case 183:Q=(c[55608]|0)-80|0;t=184;break;case 184:c[55496]=15;t=570;break;case 185:if((c[55602]|0)>0){t=186;break}else{t=187;break};case 186:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=187;break;case 187:R=1;if((W|0)==2){t=188;break}else{t=189;break};case 188:T=(c[N>>2]|0)+296|0;t=189;break;case 189:if((K|0)<-10){t=190;break}else{t=191;break};case 190:Q=(c[55608]|0)-80|0;t=191;break;case 191:c[55496]=15;t=570;break;case 192:if((c[55602]|0)>0){t=193;break}else{t=194;break};case 193:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=194;break;case 194:R=1;if((W|0)==2){t=195;break}else{t=196;break};case 195:T=(c[N>>2]|0)+304|0;t=196;break;case 196:if((K|0)<-10){t=197;break}else{t=198;break};case 197:Q=(c[55608]|0)-80|0;t=198;break;case 198:c[55496]=15;t=570;break;case 199:if((c[55602]|0)>0){t=200;break}else{t=201;break};case 200:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=201;break;case 201:R=1;if((W|0)==2){t=202;break}else{t=203;break};case 202:T=(c[N>>2]|0)+312|0;t=203;break;case 203:if((K|0)<-10){t=204;break}else{t=205;break};case 204:Q=(c[55608]|0)-80|0;t=205;break;case 205:c[55496]=15;t=570;break;case 206:if((c[55602]|0)>0){t=207;break}else{t=208;break};case 207:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=208;break;case 208:R=2;if((W|0)==2){t=209;break}else{t=210;break};case 209:T=(c[N>>2]|0)+320|0;t=210;break;case 210:c[55496]=13;t=570;break;case 211:if((c[55602]|0)>0){t=212;break}else{t=213;break};case 212:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=213;break;case 213:if((J&64|0)!=0){t=214;break}else{t=217;break};case 214:R=2;if((W|0)==2){t=215;break}else{t=216;break};case 215:T=(c[N>>2]|0)+320|0;t=216;break;case 216:ak(4,32,c[55598]|0);if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;c[55496]=13;t=221;break;case 217:if((J&268435456|0)!=0){t=218;break}else{t=219;break};case 218:ae=215352;c[55496]=29;t=220;break;case 219:c[55496]=27;t=220;break;case 220:t=221;break;case 221:t=570;break;case 222:if((c[55602]|0)>0){t=223;break}else{t=224;break};case 223:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=224;break;case 224:R=2;if((W|0)==2){t=225;break}else{t=226;break};case 225:T=(c[N>>2]|0)+392|0;t=226;break;case 226:c[55496]=13;t=570;break;case 227:if((c[55602]|0)>0){t=228;break}else{t=229;break};case 228:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=229;break;case 229:R=2;if((W|0)==2){t=230;break}else{t=231;break};case 230:T=(c[N>>2]|0)+464|0;t=231;break;case 231:c[55496]=13;t=570;break;case 232:if((c[55602]|0)>0){t=233;break}else{t=234;break};case 233:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=234;break;case 234:R=2;if((W|0)==2){t=235;break}else{t=236;break};case 235:T=(c[N>>2]|0)+552|0;t=236;break;case 236:c[55496]=13;t=570;break;case 237:if((c[55602]|0)>0){t=238;break}else{t=239;break};case 238:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=239;break;case 239:R=1;if((W|0)==2){t=240;break}else{t=241;break};case 240:T=(c[N>>2]|0)+624|0;t=241;break;case 241:c[55496]=13;t=570;break;case 242:if((c[55602]|0)>0){t=243;break}else{t=244;break};case 243:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=244;break;case 244:R=1;if((W|0)==2){t=245;break}else{t=246;break};case 245:T=(c[N>>2]|0)+536|0;t=246;break;case 246:c[55496]=13;t=570;break;case 247:if((c[55602]|0)>0){t=248;break}else{t=249;break};case 248:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=249;break;case 249:am(10,c[55598]|0,214560,(ad=i,i=i+8|0,c[ad>>2]=w,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;if((a[w]|0)==32){t=251;break}else{t=250;break};case 250:if((J&4|0)!=0){t=251;break}else{t=254;break};case 251:R=0;if((W|0)==2){t=252;break}else{t=253;break};case 252:T=(c[N>>2]|0)+100|0;t=253;break;case 253:ak(4,a[w]|0,c[55598]|0);if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;c[55496]=13;t=258;break;case 254:if((J&268435456|0)!=0){t=255;break}else{t=256;break};case 255:ae=213840;c[55496]=29;t=257;break;case 256:c[55496]=27;t=257;break;case 257:t=258;break;case 258:t=570;break;case 259:if((c[55602]|0)>0){t=260;break}else{t=261;break};case 260:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=261;break;case 261:am(10,c[55598]|0,213128,(ad=i,i=i+8|0,c[ad>>2]=w,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;if((J&128|0)!=0){t=262;break}else{t=267;break};case 262:R=1;if((W|0)==2){t=263;break}else{t=266;break};case 263:T=G|0;if((a[w]|0)>=65){t=264;break}else{t=265;break};case 264:T=T+(c[B+((a[w]|0)-65+1<<2)>>2]<<3)|0;t=265;break;case 265:t=266;break;case 266:ak(4,32,c[55598]|0);if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;c[55496]=13;t=271;break;case 267:if((J&268435456|0)!=0){t=268;break}else{t=269;break};case 268:ae=212744;c[55496]=29;t=270;break;case 269:c[55496]=27;t=270;break;case 270:t=271;break;case 271:t=570;break;case 272:if((c[55602]|0)>0){t=273;break}else{t=274;break};case 273:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=274;break;case 274:R=2;if((W|0)==2){t=275;break}else{t=276;break};case 275:T=(c[N>>2]|0)+632|0;t=276;break;case 276:c[55496]=13;t=570;break;case 277:if((c[55602]|0)>0){t=278;break}else{t=279;break};case 278:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=279;break;case 279:R=1;if((W|0)==2){t=280;break}else{t=281;break};case 280:T=(c[N>>2]|0)+544|0;t=281;break;case 281:c[55496]=13;t=570;break;case 282:if((c[55602]|0)>0){t=283;break}else{t=284;break};case 283:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=284;break;case 284:t=285;break;case 285:a[_]=a[222080]|0;Z=$+0|0;_=Z;c[55528]=Z;c[55598]=$;c[55602]=_-$;a[222080]=a[_]|0;a[_]=0;c[55528]=_;t=286;break;case 286:if((c[55606]|0)!=0){t=287;break}else{t=288;break};case 287:c[55606]=0;ae=221776;c[55496]=29;t=289;break;case 288:c[55496]=27;t=289;break;case 289:t=570;break;case 290:if((c[55602]|0)>0){t=291;break}else{t=292;break};case 291:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=292;break;case 292:c[55496]=27;t=570;break;case 293:if((c[55602]|0)>0){t=294;break}else{t=295;break};case 294:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=295;break;case 295:am(10,c[55598]|0,221496,(ad=i,i=i+16|0,c[ad>>2]=x,c[ad+8>>2]=w,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;S=(c[x>>2]|0)-1|0;c[55496]=17;t=570;break;case 296:if((c[55602]|0)>0){t=297;break}else{t=298;break};case 297:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=298;break;case 298:am(10,c[55598]|0,221224,(ad=i,i=i+8|0,c[ad>>2]=x,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;c[55496]=17;t=570;break;case 299:if((c[55602]|0)>0){t=300;break}else{t=301;break};case 300:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=301;break;case 301:c[55496]=27;t=570;break;case 302:if((c[55602]|0)>0){t=303;break}else{t=304;break};case 303:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=304;break;case 304:am(10,c[55598]|0,220960,(ad=i,i=i+24|0,c[ad>>2]=x,c[ad+8>>2]=y,c[ad+16>>2]=w,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;if((W|0)==2){t=305;break}else{t=308;break};case 305:af=c[N>>2]|0;if((a[w]|0)!=32){t=306;break}else{t=307;break};case 306:af=af+((c[B+((a[w]|0)-65+1<<2)>>2]|0)*1664|0)|0;t=307;break;case 307:Z=aa((c[x>>2]|0)-1|0,c[af+4>>2]|0)|0;S=Z+(c[y>>2]|0)-1|0;t=308;break;case 308:c[55496]=17;t=570;break;case 309:if((c[55602]|0)>0){t=310;break}else{t=311;break};case 310:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=311;break;case 311:am(10,c[55598]|0,220712,(ad=i,i=i+16|0,c[ad>>2]=x,c[ad+8>>2]=y,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;c[55496]=17;t=570;break;case 312:if((c[55602]|0)>0){t=313;break}else{t=314;break};case 313:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=314;break;case 314:if((J&16|0)!=0){t=315;break}else{t=316;break};case 315:if((U|0)==1){t=318;break}else{t=316;break};case 316:if((J&8|0)!=0){t=317;break}else{t=321;break};case 317:if((U|0)==2){t=318;break}else{t=321;break};case 318:am(10,c[55598]|0,220496,(ad=i,i=i+16|0,c[ad>>2]=x,c[ad+8>>2]=y,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;a[w]=32;if((W|0)==2){t=319;break}else{t=320;break};case 319:Z=aa((c[x>>2]|0)-1|0,c[(c[N>>2]|0)+4>>2]|0)|0;S=Z+(c[y>>2]|0)-1|0;t=320;break;case 320:c[55496]=17;t=325;break;case 321:if((J&268435456|0)!=0){t=322;break}else{t=323;break};case 322:ae=A|0;am(8,ae|0,220352,(ad=i,i=i+8|0,c[ad>>2]=(U|0)==1?220232:220152,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;c[55496]=29;t=324;break;case 323:c[55496]=27;t=324;break;case 324:t=325;break;case 325:t=570;break;case 326:if((c[55602]|0)>0){t=327;break}else{t=328;break};case 327:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=328;break;case 328:c[55496]=27;t=570;break;case 329:if((c[55602]|0)>0){t=330;break}else{t=331;break};case 330:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=331;break;case 331:am(10,c[55598]|0,221496,(ad=i,i=i+16|0,c[ad>>2]=x,c[ad+8>>2]=w,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;if((a[w]|0)==32){t=333;break}else{t=332;break};case 332:if((J&1|0)!=0){t=333;break}else{t=334;break};case 333:S=(c[x>>2]|0)-1|0;c[55496]=17;t=338;break;case 334:if((J&268435456|0)!=0){t=335;break}else{t=336;break};case 335:ae=219832;c[55496]=29;t=337;break;case 336:c[55496]=27;t=337;break;case 337:t=338;break;case 338:t=570;break;case 339:if((c[55602]|0)>0){t=340;break}else{t=341;break};case 340:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=341;break;case 341:am(10,c[55598]|0,219504,(ad=i,i=i+8|0,c[ad>>2]=x,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;a[w]=32;S=(c[x>>2]|0)-1|0;c[55496]=17;t=570;break;case 342:if((c[55602]|0)>0){t=343;break}else{t=344;break};case 343:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=344;break;case 344:c[55496]=27;t=570;break;case 345:if((c[55602]|0)>0){t=346;break}else{t=347;break};case 346:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=347;break;case 347:S=-1;if((((c[55496]|0)-1|0)/2|0|0)==6){t=348;break}else{t=349;break};case 348:am(10,c[55598]|0,219192,(ad=i,i=i+8|0,c[ad>>2]=w,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;t=350;break;case 349:ak(4,a[c[55598]|0]|0,c[55598]|0);if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;a[w]=0;t=350;break;case 350:c[55496]=17;t=570;break;case 351:if((c[55602]|0)>0){t=352;break}else{t=353;break};case 352:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=353;break;case 353:c[55496]=27;t=570;break;case 354:if((c[55602]|0)>0){t=355;break}else{t=356;break};case 355:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=356;break;case 356:am(10,c[55598]|0,220960,(ad=i,i=i+24|0,c[ad>>2]=x,c[ad+8>>2]=z,c[ad+16>>2]=w,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;S=-1;c[55496]=17;t=570;break;case 357:if((c[55602]|0)>0){t=358;break}else{t=359;break};case 358:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=359;break;case 359:am(10,c[55598]|0,220712,(ad=i,i=i+16|0,c[ad>>2]=x,c[ad+8>>2]=z,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;c[55496]=17;t=570;break;case 360:if((c[55602]|0)>0){t=361;break}else{t=362;break};case 361:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=362;break;case 362:c[55496]=27;t=570;break;case 363:if((c[55602]|0)>0){t=364;break}else{t=365;break};case 364:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=365;break;case 365:if((J&32|0)!=0){t=366;break}else{t=367;break};case 366:am(10,c[55598]|0,219504,(ad=i,i=i+8|0,c[ad>>2]=z,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;c[x>>2]=0;a[w]=32;S=-1;c[55496]=17;t=371;break;case 367:if((J&268435456|0)!=0){t=368;break}else{t=369;break};case 368:ae=218832;c[55496]=29;t=370;break;case 369:c[55496]=27;t=370;break;case 370:t=371;break;case 371:t=570;break;case 372:if((c[55602]|0)>0){t=373;break}else{t=374;break};case 373:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=374;break;case 374:c[55496]=27;t=570;break;case 375:if((c[55602]|0)>0){t=376;break}else{t=377;break};case 376:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=377;break;case 377:if((c[x>>2]|0)>99){t=380;break}else{t=378;break};case 378:if((c[y>>2]|0)>99){t=380;break}else{t=379;break};case 379:if((c[z>>2]|0)>99){t=380;break}else{t=390;break};case 380:if((J&268435456|0)!=0){t=381;break}else{t=388;break};case 381:ae=A|0;if((c[x>>2]|0)>99){t=383;break}else{t=382;break};case 382:if((c[y>>2]|0)>99){t=383;break}else{t=384;break};case 383:am(8,ae|0,218736,(ad=i,i=i+1|0,i=i+7&-8,c[ad>>2]=0,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;t=387;break;case 384:if((c[z>>2]|0)>99){t=385;break}else{t=386;break};case 385:am(8,ae|0,218600,(ad=i,i=i+1|0,i=i+7&-8,c[ad>>2]=0,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;t=386;break;case 386:t=387;break;case 387:c[55496]=29;t=389;break;case 388:c[55496]=27;t=389;break;case 389:t=400;break;case 390:if((R|0)==0){t=391;break}else{t=392;break};case 391:c[55496]=19;t=399;break;case 392:if((R|0)==1){t=393;break}else{t=394;break};case 393:c[55496]=21;t=398;break;case 394:if((R|0)==2){t=395;break}else{t=396;break};case 395:c[55496]=23;t=397;break;case 396:ae=A|0;am(8,ae|0,218424,(ad=i,i=i+8|0,c[ad>>2]=R,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;c[55496]=29;t=397;break;case 397:t=398;break;case 398:t=399;break;case 399:t=400;break;case 400:t=570;break;case 401:if((c[55602]|0)>0){t=402;break}else{t=403;break};case 402:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=403;break;case 403:ae=218344;c[55496]=29;t=570;break;case 404:if((c[55602]|0)>0){t=405;break}else{t=406;break};case 405:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=406;break;case 406:if((W|0)==1){t=407;break}else{t=408;break};case 407:ar(2,c[C>>2]|0,c[x>>2]|0,c[y>>2]|0,a[w]|0,B|0,V|0);if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;c[55496]=31;t=424;break;case 408:if((T|0)!=0){t=409;break}else{t=422;break};case 409:O=0;t=410;break;case 410:if((O|0)<(c[M>>2]|0)){t=411;break}else{t=421;break};case 411:if((a[w]|0)>=65){t=412;break}else{t=413;break};case 412:O=c[B+((a[w]|0)-65+1<<2)>>2]|0;t=413;break;case 413:ag=T;if((O|0)!=0){t=414;break}else{t=415;break};case 414:ah=(c[N>>2]|0)+(O*1664|0)-(c[N>>2]|0)|0;ag=T+ah|0;t=415;break;case 415:if((S|0)>=0){t=416;break}else{t=417;break};case 416:ag=(c[ag>>2]|0)+(S<<2)|0;t=417;break;case 417:am(10,c[55598]|0,219504,(ad=i,i=i+8|0,c[ad>>2]=ag,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;if((a[w]|0)!=0){t=418;break}else{t=419;break};case 418:t=421;break;case 419:t=420;break;case 420:O=O+1|0;t=410;break;case 421:c[55496]=25;t=423;break;case 422:ae=218192;c[55496]=29;t=423;break;case 423:t=424;break;case 424:t=570;break;case 425:if((c[55602]|0)>0){t=426;break}else{t=427;break};case 426:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=427;break;case 427:ae=218144;c[55496]=29;t=570;break;case 428:if((c[55602]|0)>0){t=429;break}else{t=430;break};case 429:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=430;break;case 430:if((W|0)==1){t=431;break}else{t=432;break};case 431:ar(2,c[C>>2]|0,c[x>>2]|0,c[y>>2]|0,a[w]|0,B|0,V|0);if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;c[55496]=31;t=453;break;case 432:if((T|0)!=0){t=433;break}else{t=451;break};case 433:O=0;t=434;break;case 434:if((O|0)<(c[M>>2]|0)){t=435;break}else{t=450;break};case 435:if((a[w]|0)>=65){t=436;break}else{t=437;break};case 436:O=c[B+((a[w]|0)-65+1<<2)>>2]|0;t=437;break;case 437:ag=T;if((O|0)!=0){t=438;break}else{t=439;break};case 438:ah=(c[N>>2]|0)+(O*1664|0)-(c[N>>2]|0)|0;ag=T+ah|0;t=439;break;case 439:if((S|0)>=0){t=440;break}else{t=441;break};case 440:ag=(c[ag>>2]|0)+(S<<3)|0;t=444;break;case 441:if((V|0)==(E|0)){t=442;break}else{t=443;break};case 442:Z=(c[N>>2]|0)+(O*1664|0)+64|0;al=c[Z>>2]|0;c[Z>>2]=al+1;aq=al;c[(c[(c[N>>2]|0)+(O*1664|0)+72>>2]|0)+(aq<<4)>>2]=c[x>>2];c[(c[(c[N>>2]|0)+(O*1664|0)+72>>2]|0)+(aq<<4)+4>>2]=c[z>>2];ag=(c[(c[N>>2]|0)+(O*1664|0)+72>>2]|0)+(aq<<4)+8|0;t=443;break;case 443:t=444;break;case 444:am(2,c[55598]|0,218088,ag|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;if((U|0)!=0){t=445;break}else{t=446;break};case 445:al=(c[N>>2]|0)+(O*1664|0)+96|0;c[al>>2]=c[al>>2]|U;U=0;t=446;break;case 446:if((a[w]|0)!=0){t=447;break}else{t=448;break};case 447:t=450;break;case 448:t=449;break;case 449:O=O+1|0;t=434;break;case 450:c[55496]=25;t=452;break;case 451:ae=217944;c[55496]=29;t=452;break;case 452:t=453;break;case 453:t=570;break;case 454:if((c[55602]|0)>0){t=455;break}else{t=456;break};case 455:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=456;break;case 456:ae=217864;c[55496]=29;t=570;break;case 457:if((c[55602]|0)>0){t=458;break}else{t=459;break};case 458:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=459;break;case 459:if((W|0)==1){t=460;break}else{t=461;break};case 460:ar(2,c[C>>2]|0,c[x>>2]|0,c[y>>2]|0,a[w]|0,B|0,V|0);if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;c[55496]=31;t=494;break;case 461:if((T|0)!=0){t=462;break}else{t=492;break};case 462:O=0;t=463;break;case 463:if((O|0)<(c[M>>2]|0)){t=464;break}else{t=491;break};case 464:if((a[w]|0)>=65){t=465;break}else{t=466;break};case 465:O=c[B+((a[w]|0)-65+1<<2)>>2]|0;t=466;break;case 466:ag=T;if((O|0)!=0){t=467;break}else{t=468;break};case 467:ah=(c[N>>2]|0)+(O*1664|0)-(c[N>>2]|0)|0;ag=T+ah|0;t=468;break;case 468:if((S|0)>=0){t=469;break}else{t=470;break};case 469:ag=(c[ag>>2]|0)+(S*72|0)|0;t=473;break;case 470:if((V|0)==(D|0)){t=471;break}else{t=472;break};case 471:al=(c[N>>2]|0)+(O*1664|0)+76|0;Z=c[al>>2]|0;c[al>>2]=Z+1;aq=Z;c[(c[(c[N>>2]|0)+(O*1664|0)+84>>2]|0)+(aq*80|0)>>2]=c[x>>2];c[(c[(c[N>>2]|0)+(O*1664|0)+84>>2]|0)+(aq*80|0)+4>>2]=c[z>>2];ag=(c[(c[N>>2]|0)+(O*1664|0)+84>>2]|0)+(aq*80|0)+8|0;t=472;break;case 472:t=473;break;case 473:av=ag;ap(4,av|0,(c[55598]|0)+1|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;aw=0;ax=0;t=474;break;case 474:if((ax|0)<72){t=475;break}else{t=487;break};case 475:if((aw|0)<(ax|0)){t=476;break}else{t=477;break};case 476:a[av+aw|0]=a[av+ax|0]|0;t=477;break;case 477:if((a[av+ax|0]|0)==0){t=478;break}else{t=481;break};case 478:if((aw|0)!=0){t=479;break}else{t=480;break};case 479:a[av+(aw-1)|0]=0;t=480;break;case 480:t=487;break;case 481:if((a[av+ax|0]|0)==39){t=482;break}else{t=484;break};case 482:if((a[av+(ax+1)|0]|0)==39){t=483;break}else{t=484;break};case 483:ax=ax+1|0;t=484;break;case 484:t=485;break;case 485:aw=aw+1|0;t=486;break;case 486:ax=ax+1|0;t=474;break;case 487:if((a[w]|0)!=0){t=488;break}else{t=489;break};case 488:t=491;break;case 489:t=490;break;case 490:O=O+1|0;t=463;break;case 491:c[55496]=25;t=493;break;case 492:ae=217728;c[55496]=29;t=493;break;case 493:t=494;break;case 494:t=570;break;case 495:if((c[55602]|0)>0){t=496;break}else{t=497;break};case 496:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=497;break;case 497:ae=217584;c[55496]=29;t=570;break;case 498:if((c[55602]|0)>0){t=499;break}else{t=500;break};case 499:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=500;break;case 500:c[55496]=31;t=570;break;case 501:if((c[55602]|0)>0){t=502;break}else{t=503;break};case 502:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=503;break;case 503:ae=217376;c[55496]=29;t=570;break;case 504:if((c[55602]|0)>0){t=505;break}else{t=506;break};case 505:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=506;break;case 506:if((W|0)==2){t=507;break}else{t=513;break};case 507:if((K|0)<0){t=508;break}else{t=509;break};case 508:Q=(c[55608]|0)-80|0;t=512;break;case 509:if((K|0)>2){t=510;break}else{t=511;break};case 510:am(6,c[n>>2]|0,217200,(ad=i,i=i+8|0,c[ad>>2]=(c[55608]|0)-80,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;t=511;break;case 511:t=512;break;case 512:t=513;break;case 513:c[55496]=31;t=570;break;case 514:if((c[55602]|0)>0){t=515;break}else{t=516;break};case 515:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=516;break;case 516:Z=L;c[Z>>2]=(c[Z>>2]|0)+1;if((W|0)==2){t=517;break}else{t=522;break};case 517:if(((K|0)%10|0|0)==-1){t=518;break}else{t=519;break};case 518:Q=(c[55608]|0)-80|0;t=519;break;case 519:Z=an(2,(K|0)%10|0|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;if((Z|0)>1){t=520;break}else{t=521;break};case 520:Z=c[L>>2]|0;am(6,c[n>>2]|0,217048,(ad=i,i=i+24|0,c[ad>>2]=(c[55608]|0)-80,c[ad+8>>2]=Z,c[ad+16>>2]=ae,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;t=521;break;case 521:t=522;break;case 522:c[55496]=31;t=570;break;case 523:if((c[55602]|0)>0){t=524;break}else{t=525;break};case 524:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=525;break;case 525:if((W|0)==2){t=526;break}else{t=530;break};case 526:if((Q|0)!=0){t=527;break}else{t=530;break};case 527:if(P>>>0<Q>>>0){t=528;break}else{t=529;break};case 528:am(4,P|0,Q|0,80)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;t=529;break;case 529:P=P+80|0;t=530;break;case 530:c[z>>2]=0;c[y>>2]=0;c[x>>2]=0;a[w]=32;R=-1;Q=0;U=0;V=0;c[55496]=1;t=570;break;case 531:if((W|0)==1){t=532;break}else{t=543;break};case 532:Z=au(2,c[C>>2]|0,B|0,E|0,D|0,M|0,N|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;ay=Z;if((Z|0)!=0){t=534;break}else{t=533;break};case 533:if((c[M>>2]|0)==0){t=534;break}else{t=535;break};case 534:ai(10)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;Y=ay;t=571;break;case 535:Z=an(2,(K|0)%10|0|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;if((Z|0)>2){t=536;break}else{t=542;break};case 536:if((c[M>>2]|0)==1){t=537;break}else{t=540;break};case 537:Z=ap(8,(c[N>>2]|0)+632|0,216968)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;if((Z|0)!=0){t=538;break}else{t=539;break};case 538:am(6,c[n>>2]|0,216872,(ad=i,i=i+1|0,i=i+7&-8,c[ad>>2]=0,ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;t=539;break;case 539:t=541;break;case 540:am(6,c[n>>2]|0,216792,(ad=i,i=i+8|0,c[ad>>2]=c[M>>2],ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;t=541;break;case 541:t=542;break;case 542:c[55608]=H;c[55606]=I;c[L>>2]=0;W=2;c[z>>2]=0;c[y>>2]=0;c[x>>2]=0;a[w]=32;R=-1;aj(2,c[55604]|0);if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;t=549;break;case 543:ai(10)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;if((K|0)<0){t=544;break}else{t=545;break};case 544:a[P]=0;t=548;break;case 545:if((K|0)==1){t=546;break}else{t=547;break};case 546:am(6,c[n>>2]|0,216648,(ad=i,i=i+8|0,c[ad>>2]=c[L>>2],ad)|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;i=ad;t=547;break;case 547:t=548;break;case 548:Z=at(2,B|0,F|0,G|0,M|0,N|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;Y=Z;t=571;break;case 549:t=570;break;case 550:if((c[55602]|0)>0){t=551;break}else{t=552;break};case 551:c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]=(a[(c[55598]|0)+((c[55602]|0)-1)|0]|0)==10;t=552;break;case 552:t=553;break;case 553:Z=as(2,c[55598]|0,c[55602]|0,1,c[55600]|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;if((Z|0)!=0){t=554;break}else{t=555;break};case 554:t=555;break;case 555:t=556;break;case 556:t=570;break;case 557:az=_-(c[55598]|0)-1|0;a[_]=a[222080]|0;if((c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+44>>2]|0)==0){t=558;break}else{t=559;break};case 558:c[55500]=c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+16>>2];c[c[(c[55540]|0)+(c[55532]<<2)>>2]>>2]=c[55604];c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+44>>2]=1;t=559;break;case 559:if((c[55528]|0)>>>0<=((c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+4>>2]|0)+(c[55500]|0)|0)>>>0){t=560;break}else{t=563;break};case 560:c[55528]=(c[55598]|0)+az;Z=ai(12)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;ab=Z;Z=an(8,ab|0)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;aA=Z;$=c[55598]|0;if((aA|0)!=0){t=561;break}else{t=562;break};case 561:Z=(c[55528]|0)+1|0;c[55528]=Z;_=Z;ab=aA;t=21;break;case 562:_=c[55528]|0;t=27;break;case 563:Z=ai(8)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;if((Z|0)==1){t=564;break}else if((Z|0)==0){t=565;break}else if((Z|0)==2){t=566;break}else{t=567;break};case 564:c[55524]=0;c[55528]=c[55598];ac=(((c[55496]|0)-1|0)/2|0)+96|0;t=28;break;case 565:c[55528]=(c[55598]|0)+az;Z=ai(12)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;ab=Z;_=c[55528]|0;$=c[55598]|0;t=21;break;case 566:c[55528]=(c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+4>>2]|0)+(c[55500]|0);Z=ai(12)|0;if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;ab=Z;_=c[55528]|0;$=c[55598]|0;t=27;break;case 567:t=568;break;case 568:t=570;break;case 569:aj(4,216536);if((r|0)!=0&(s|0)!=0){u=fz(c[r>>2]|0,v)|0;if((u|0)>0){t=-1;break}else return 0}r=s=0;t=570;break;case 570:t=20;break;case 571:i=q;return Y|0;case-1:if((u|0)==5){X=s;t=572}r=s=0;break}return 0}function b2(){var a=0,b=0,d=0,e=0;if((c[55540]|0)==0){a=1;c[55540]=cg(a<<2)|0;if((c[55540]|0)==0){ce(215928)}b=c[55540]|0;d=a<<2;ft(b|0,0,d|0)|0;c[55536]=a;c[55532]=0;return}if((c[55532]|0)>>>0<((c[55536]|0)-1|0)>>>0){return}d=8;a=(c[55536]|0)+d|0;c[55540]=cm(c[55540]|0,a<<2)|0;if((c[55540]|0)==0){ce(215928)}b=(c[55540]|0)+(c[55536]<<2)|0;e=d<<2;ft(b|0,0,e|0)|0;c[55536]=a;return}function b3(a,b){a=a|0;b=b|0;var d=0;d=cg(48)|0;if((d|0)==0){ce(216472)}c[d+12>>2]=b;c[d+4>>2]=cg((c[d+12>>2]|0)+2|0)|0;if((c[d+4>>2]|0)==0){ce(216472)}c[d+20>>2]=1;cf(d,a);return d|0}function b4(){var b=0;c[55500]=c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+16>>2];b=c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+8>>2]|0;c[55528]=b;c[55598]=b;c[55604]=c[c[(c[55540]|0)+(c[55532]<<2)>>2]>>2];a[222080]=a[c[55528]|0]|0;return}function b5(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;h=a;a=b;b=d;d=e;e=g;if((d<<24>>24|0)==0){return}g=0;if((d<<24>>24|0)!=32){g=(d<<24>>24)-65+1|0}d=f+(g<<2)|0;if((c[d>>2]|0)<(h|0)){c[d>>2]=h}if((c[d>>2]|0)<(a|0)){c[d>>2]=a}if((c[d>>2]|0)<(b|0)){c[d>>2]=b}if((e|0)==0){return}b=e+(g<<2)|0;c[b>>2]=(c[b>>2]|0)+1;return}function b6(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=b;b=d;d=c[55528]|0;a[d]=a[222080]|0;if(d>>>0>=((c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+4>>2]|0)+2|0)>>>0){f=e;g=f&255;h=d;i=h-1|0;d=i;a[i]=g;j=b;c[55598]=j;k=d;l=a[k]|0;a[222080]=l;m=d;c[55528]=m;return}n=(c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+4>>2]|0)+((c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+12>>2]|0)+2)|0;o=(c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+4>>2]|0)+((c[55500]|0)+2)|0;while(1){if(o>>>0<=(c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+4>>2]|0)>>>0){break}p=o-1|0;o=p;q=n-1|0;n=q;a[q]=a[p]|0}d=d+(n-o)|0;b=b+(n-o)|0;o=c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+12>>2]|0;c[55500]=o;c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+16>>2]=o;if(d>>>0<((c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+4>>2]|0)+2|0)>>>0){ce(215784)}f=e;g=f&255;h=d;i=h-1|0;d=i;a[i]=g;j=b;c[55598]=j;k=d;l=a[k]|0;a[222080]=l;m=d;c[55528]=m;return}function b7(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;i=b;b=d;d=e;e=f;f=g;g=h;h=0;c[f>>2]=0;j=0;while(1){if((j|0)>=27){break}if((c[b+(j<<2)>>2]|0)!=0){k=f;c[k>>2]=(c[k>>2]|0)+1}j=j+1|0}if((c[f>>2]|0)!=0){l=0}else{l=(i|0)!=0}k=l&1;if(l){b5(i,0,0,32,b,0);c[f>>2]=1}if((c[f>>2]|0)!=0){i=fp(c[f>>2]|0,1664)|0;c[g>>2]=i;if((i|0)==0){m=2;n=m;return n|0}i=bT(-1)|0;l=bU(-1)|0;o=c[g>>2]|0;c[f>>2]=0;j=0;while(1){if((j|0)>=27){break}if((c[b+(j<<2)>>2]|0)!=0){c[o>>2]=-1;p=c[d+(j<<2)>>2]|0;bT(p)|0;p=c[e+(j<<2)>>2]|0;bU(p)|0;p=bV(1,c[b+(j<<2)>>2]|0,o)|0;h=p;if((p|0)!=0){q=907;break}if((j|0)!=0){a[o+104|0]=j+65-1&255}if((k|0)!=0){p=o+632|0;fu(p|0,216968)|0}p=f;r=c[p>>2]|0;c[p>>2]=r+1;c[b+(j<<2)>>2]=r;o=o+1664|0}j=j+1|0}if((q|0)==907){q=f;f=g;e_(q,f)|0}bT(i)|0;bU(l)|0}m=h;n=m;return n|0}function b8(){var a=0,b=0;while(1){if((c[55540]|0)!=0){a=c[(c[55540]|0)+(c[55532]<<2)>>2]|0}else{a=0}if((a|0)==0){break}if((c[55540]|0)!=0){b=c[(c[55540]|0)+(c[55532]<<2)>>2]|0}else{b=0}ch(b);c[(c[55540]|0)+(c[55532]<<2)>>2]=0;ck()}ci(c[55540]|0);c[55540]=0;cl()|0;return 0}function b9(a){a=a|0;var b=0,d=0,e=0,f=0;b=a;if((c[55540]|0)!=0){if((c[(c[55540]|0)+(c[55532]<<2)>>2]|0)==0){d=933}}else{if(!0){d=933}}if((d|0)==933){b2();d=b3(c[55604]|0,16384)|0;c[(c[55540]|0)+(c[55532]<<2)>>2]=d}if((c[55540]|0)!=0){e=c[(c[55540]|0)+(c[55532]<<2)>>2]|0;f=b;cf(e,f);b4();return}else{e=0;f=b;cf(e,f);b4();return}}function ca(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0.0,i=0,j=0.0,k=0.0,l=0,m=0,n=0,o=0;a=b;b=d;d=e;e=f;g=299792458.0;f=0;while(1){if((f|0)>=(c[d>>2]|0)){i=952;break}do{if(+h[(c[e>>2]|0)+(f*1664|0)+272>>3]==9.87654321e+107){if(+h[a+(f<<3)>>3]==9.87654321e+107){break}h[(c[e>>2]|0)+(f*1664|0)+272>>3]=+h[a+(f<<3)>>3]}}while(0);do{if(+h[(c[e>>2]|0)+(f*1664|0)+544>>3]==9.87654321e+107){if(+h[b+(f<<3)>>3]==9.87654321e+107){break}j=+h[b+(f<<3)>>3]/g;k=(1.0+j)/+Q(1.0-j*j)-1.0;h[(c[e>>2]|0)+(f*1664|0)+544>>3]=k}}while(0);l=eZ((c[e>>2]|0)+(f*1664|0)|0)|0;m=l;if((l|0)!=0){i=949;break}f=f+1|0}if((i|0)==952){n=0;o=n;return o|0}else if((i|0)==949){e_(d,e)|0;n=m;o=n;return o|0}return 0}function cb(){var e=0,f=0;e=c[55496]|0;e=e+(c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+28>>2]|0)|0;f=c[55598]|0;while(1){if(f>>>0>=(c[55528]|0)>>>0){break}if((a[f]|0)!=0){e=b[93960+(e<<8)+(d[f]<<1)>>1]|0}else{e=c[209952+(e<<2)>>2]|0}if((b[207592+(e<<1)>>1]|0)!=0){c[55508]=e;c[55512]=f}f=f+1|0}return e|0}function cc(a){a=a|0;var d=0,e=0,f=0;d=a;a=c[55528]|0;d=c[209952+(d<<2)>>2]|0;e=(d|0)==0|0;if((e|0)==0){if((b[207592+(d<<1)>>1]|0)!=0){c[55508]=d;c[55512]=a}}if((e|0)!=0){f=0;return f|0}else{f=d;return f|0}return 0}function cd(){var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;b=c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+4>>2]|0;d=c[55598]|0;if((c[55528]|0)>>>0>((c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+4>>2]|0)+((c[55500]|0)+1)|0)>>>0){ce(215664)}if((c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+40>>2]|0)==0){if(((c[55528]|0)-(c[55598]|0)|0)==1){e=1;f=e;return f|0}else{e=2;f=e;return f|0}}g=(c[55528]|0)-(c[55598]|0)-1|0;h=0;while(1){if((h|0)>=(g|0)){break}i=d;d=i+1|0;j=b;b=j+1|0;a[j]=a[i]|0;h=h+1|0}if((c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+44>>2]|0)==2){c[55500]=0;c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+16>>2]=0}else{h=(c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+12>>2]|0)-g-1|0;while(1){if((h|0)>0){break}if((c[55540]|0)!=0){k=c[(c[55540]|0)+(c[55532]<<2)>>2]|0}else{k=0}b=k;d=(c[55528]|0)-(c[b+4>>2]|0)|0;if((c[b+20>>2]|0)!=0){if((c[b+12>>2]<<1|0)<=0){i=b+12|0;c[i>>2]=(c[i>>2]|0)+(((c[b+12>>2]|0)>>>0)/8|0)}else{i=b+12|0;c[i>>2]=c[i>>2]<<1}c[b+4>>2]=cm(c[b+4>>2]|0,(c[b+12>>2]|0)+2|0)|0}else{c[b+4>>2]=0}if((c[b+4>>2]|0)==0){ce(215536)}c[55528]=(c[b+4>>2]|0)+d;h=(c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+12>>2]|0)-g-1|0}if((h|0)>8192){h=8192}if((c[55606]|0)!=0){h=(c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+4>>2]|0)+g|0;k=c[55608]|0;fv(h|0,k|0,80)|0;a[(c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+4>>2]|0)+g+80|0]=10;c[55608]=(c[55608]|0)+80;c[55606]=(c[55606]|0)-1;c[55500]=81}else{c[55500]=0}c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+16>>2]=c[55500]}if((c[55500]|0)==0){if((g|0)==0){l=1;b9(c[55604]|0)}else{l=2;c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+44>>2]=2}}else{l=0}if(((c[55500]|0)+g|0)>>>0>(c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+12>>2]|0)>>>0){k=cm(c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+4>>2]|0,(c[55500]|0)+g+(c[55500]>>1)|0)|0;c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+4>>2]=k;if((c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+4>>2]|0)==0){ce(215424)}}c[55500]=(c[55500]|0)+g;a[(c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+4>>2]|0)+(c[55500]|0)|0]=0;a[(c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+4>>2]|0)+((c[55500]|0)+1)|0]=0;c[55598]=c[(c[(c[55540]|0)+(c[55532]<<2)>>2]|0)+4>>2];e=l;f=e;return f|0}function ce(a){a=a|0;var b=0;aC(c[n>>2]|0,216120,(b=i,i=i+8|0,c[b>>2]=a,b)|0)|0;i=b;aV(222440,2)}function cf(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0;d=a;a=c[(bc()|0)>>2]|0;cj(d);c[d>>2]=b;c[d+40>>2]=1;if((c[55540]|0)!=0){e=c[(c[55540]|0)+(c[55532]<<2)>>2]|0}else{e=0}if((d|0)==(e|0)){f=d;g=f+24|0;c[g>>2]=0;h=a;i=bc()|0;c[i>>2]=h;return}c[d+32>>2]=1;c[d+36>>2]=0;f=d;g=f+24|0;c[g>>2]=0;h=a;i=bc()|0;c[i>>2]=h;return}function cg(a){a=a|0;return fn(a)|0}function ch(a){a=a|0;var b=0,d=0;b=a;if((b|0)==0){return}if((c[55540]|0)!=0){d=c[(c[55540]|0)+(c[55532]<<2)>>2]|0}else{d=0}if((b|0)==(d|0)){c[(c[55540]|0)+(c[55532]<<2)>>2]=0}if((c[b+20>>2]|0)!=0){ci(c[b+4>>2]|0)}ci(b);return}function ci(a){a=a|0;fo(a);return}function cj(b){b=b|0;var d=0,e=0;d=b;if((d|0)==0){return}c[d+16>>2]=0;a[c[d+4>>2]|0]=0;a[(c[d+4>>2]|0)+1|0]=0;c[d+8>>2]=c[d+4>>2];c[d+28>>2]=1;c[d+44>>2]=0;if((c[55540]|0)!=0){e=c[(c[55540]|0)+(c[55532]<<2)>>2]|0}else{e=0}if((d|0)!=(e|0)){return}b4();return}function ck(){var a=0,b=0;if((c[55540]|0)!=0){if((c[(c[55540]|0)+(c[55532]<<2)>>2]|0)==0){a=1062}}else{if(!0){a=1062}}if((a|0)==1062){return}if((c[55540]|0)!=0){b=c[(c[55540]|0)+(c[55532]<<2)>>2]|0}else{b=0}ch(b);c[(c[55540]|0)+(c[55532]<<2)>>2]=0;if((c[55532]|0)>>>0>0>>>0){c[55532]=(c[55532]|0)-1}do{if((c[55540]|0)!=0){if((c[(c[55540]|0)+(c[55532]<<2)>>2]|0)!=0){break}return}else{if(0){break}return}}while(0);b4();c[55524]=1;return}function cl(){c[55540]=0;c[55532]=0;c[55536]=0;c[55528]=0;c[55516]=0;c[55496]=0;c[55604]=0;c[55600]=0;return 0}function cm(a,b){a=a|0;b=b|0;return fq(a,b)|0}function cn(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;i=i+16|0;f=e|0;g=a;a=b;do{if((c[55596]|0)==0){if((c[55592]|0)!=0){break}c[55592]=g}}while(0);g=f|0;c[g>>2]=d;c[g+4>>2]=0;if((c[55592]|0)!=0){h=a0(c[55592]|0,a|0,f|0)|0}else{g=(c[55594]|0)-(c[55596]|0)|0;do{if(((c[55590]|0)-g|0)>>>0<128>>>0){c[55590]=(c[55590]|0)+1024;d=fq(c[55596]|0,c[55590]|0)|0;if((d|0)!=0){c[55596]=d;c[55594]=(c[55596]|0)+g;break}fo(c[55596]|0);c[55596]=0;j=1;k=j;i=e;return k|0}}while(0);h=bh(c[55594]|0,a|0,f|0)|0;c[55594]=(c[55594]|0)+h}j=h;k=j;i=e;return k|0}function co(a){a=+a;var b=0.0,c=0,d=0.0,e=0;b=a;do{if(+be(+b,+90.0)==0.0){c=(P(~~+O(b/90.0+.5)|0)|0)%4|0;if((c|0)==0){d=1.0;break}else if((c|0)==3){d=0.0;break}else if((c|0)==1){d=0.0;break}else if((c|0)==2){d=-1.0;break}else{e=1100;break}}else{e=1100}}while(0);if((e|0)==1100){d=+S(b*3.141592653589793/180.0)}return+d}function cp(a){a=+a;var b=0.0,c=0,d=0.0,e=0;b=a;do{if(+be(+b,+90.0)==0.0){c=(P(~~+O(b/90.0-.5)|0)|0)%4|0;if((c|0)==0){d=1.0;break}else if((c|0)==1){d=0.0;break}else if((c|0)==3){d=0.0;break}else if((c|0)==2){d=-1.0;break}else{e=1109;break}}else{e=1109}}while(0);if((e|0)==1109){d=+T(b*3.141592653589793/180.0)}return+d}function cq(a,b,c){a=+a;b=b|0;c=c|0;var d=0.0,e=0;d=a;e=b;b=c;do{if(+be(+d,+90.0)==0.0){c=(P(~~+O(d/90.0+.5)|0)|0)%4|0;if((c|0)==0){h[e>>3]=0.0;h[b>>3]=1.0;return}else if((c|0)==3){h[e>>3]=d>0.0?-1.0:1.0;h[b>>3]=0.0;return}else if((c|0)==1){h[e>>3]=d>0.0?1.0:-1.0;h[b>>3]=0.0;return}else if((c|0)==2){h[e>>3]=0.0;h[b>>3]=-1.0;return}else{break}}}while(0);h[e>>3]=+T(d*3.141592653589793/180.0);h[b>>3]=+S(d*3.141592653589793/180.0);return}function cr(a){a=+a;var b=0.0,c=0.0,d=0.0;b=a;a=+be(+b,+360.0);do{if(a!=0.0){if(+P(+a)==180.0){break}do{if(a!=45.0){if(a==225.0){break}do{if(a!=-135.0){if(a==-315.0){break}c=+U(b*3.141592653589793/180.0);d=c;return+d}}while(0);c=-1.0;d=c;return+d}}while(0);c=1.0;d=c;return+d}}while(0);c=0.0;d=c;return+d}function cs(a){a=+a;var b=0.0,c=0.0,d=0;b=a;L1506:do{if(b>=1.0){if(b-1.0<1.0e-10){c=0.0;break}else{d=1154;break}}else{if(b==0.0){c=90.0;break}do{if(b<=-1.0){if(b+1.0>-1.0e-10){c=180.0;break L1506}else{break}}}while(0);d=1154}}while(0);if((d|0)==1154){c=+V(b)*180.0/3.141592653589793}return+c}function ct(a){a=+a;var b=0.0,c=0.0,d=0;b=a;L1526:do{if(b<=-1.0){if(b+1.0>-1.0e-10){c=-90.0;break}else{d=1168;break}}else{if(b==0.0){c=0.0;break}do{if(b>=1.0){if(b-1.0<1.0e-10){c=90.0;break L1526}else{break}}}while(0);d=1168}}while(0);if((d|0)==1168){c=+W(b)*180.0/3.141592653589793}return+c}function cu(a){a=+a;var b=0.0,c=0.0;b=a;do{if(b==-1.0){c=-45.0}else{if(b==0.0){c=0.0;break}if(b==1.0){c=45.0;break}c=+X(b)*180.0/3.141592653589793}}while(0);return+c}function cv(a,b){a=+a;b=+b;var c=0.0,d=0.0,e=0;c=a;a=b;do{if(c==0.0){if(a>=0.0){d=0.0;break}if(a<0.0){d=180.0;break}e=1195}else{if(a==0.0){if(c>0.0){d=90.0;break}if(c<0.0){d=-90.0;break}}e=1195}}while(0);if((e|0)==1195){d=+Y(+c,+a)*180.0/3.141592653589793}return+d}function cw(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;j=i;i=i+304|0;k=j|0;l=j+8|0;m=j+16|0;n=j+24|0;o=j+32|0;p=j+168|0;q=a;a=b;b=d;d=e;e=f;f=g;g=e$(q,k,m,o|0,f)|0;r=g;if((g|0)!=0){s=r;t=s;i=j;return t|0}g=e$(a,l,n,p|0,f)|0;r=g;if((g|0)!=0){s=r;t=s;i=j;return t|0}r=0;while(1){if((r|0)>=17){break}if(+h[o+(r<<3)>>3]!=+h[p+(r<<3)>>3]){u=1204;break}r=r+1|0}if((u|0)==1204){u=b0(f,10,c[52930]|0,216280,128,216144,(v=i,i=i+24|0,c[v>>2]=c[211728+(r<<2)>>2],c[v+8>>2]=q,c[v+16>>2]=a,v)|0)|0;i=v;s=u;t=s;i=j;return t|0}h[b>>3]=0.0;h[d>>3]=0.0;h[e>>3]=1.0;u=c[k>>2]|0;do{if((u|0)==1){do{if((c[l>>2]|0)==1){h[b>>3]=1.0;h[d>>3]=+aS(+(+h[m>>3]/+h[n>>3]))}else{if((c[l>>2]|0)==2){h[b>>3]=+_(10.0);h[d>>3]=+_(+h[m>>3]/+h[n>>3]);break}else{r=c[211800+(c[k>>2]<<2)>>2]|0;p=c[211800+(c[l>>2]<<2)>>2]|0;o=b0(f,11,c[52930]|0,216280,163,216056,(v=i,i=i+32|0,c[v>>2]=q,c[v+8>>2]=r,c[v+16>>2]=a,c[v+24>>2]=p,v)|0)|0;i=v;s=o;t=s;i=j;return t|0}}}while(0)}else if((u|0)==2){do{if((c[l>>2]|0)==1){h[b>>3]=1.0/+_(10.0);h[d>>3]=+_(+h[m>>3]/+h[n>>3])}else{if((c[l>>2]|0)==2){h[b>>3]=1.0;h[d>>3]=+_(+h[m>>3]/+h[n>>3]);break}else{o=c[211800+(c[k>>2]<<2)>>2]|0;p=c[211800+(c[l>>2]<<2)>>2]|0;r=b0(f,11,c[52930]|0,216280,183,216056,(v=i,i=i+32|0,c[v>>2]=q,c[v+8>>2]=o,c[v+16>>2]=a,c[v+24>>2]=p,v)|0)|0;i=v;s=r;t=s;i=j;return t|0}}}while(0)}else if((u|0)==0){if((c[l>>2]|0)==0){h[b>>3]=+h[m>>3]/+h[n>>3];break}r=c[211800+(c[k>>2]<<2)>>2]|0;p=c[211800+(c[l>>2]<<2)>>2]|0;o=b0(f,11,c[52930]|0,216280,142,216056,(v=i,i=i+32|0,c[v>>2]=q,c[v+8>>2]=r,c[v+16>>2]=a,c[v+24>>2]=p,v)|0)|0;i=v;s=o;t=s;i=j;return t|0}else if((u|0)==3){if((c[l>>2]|0)==3){h[b>>3]=1.0;h[e>>3]=+h[m>>3]/+h[n>>3];break}o=c[211800+(c[k>>2]<<2)>>2]|0;p=c[211800+(c[l>>2]<<2)>>2]|0;r=b0(f,11,c[52930]|0,216280,193,216056,(v=i,i=i+32|0,c[v>>2]=q,c[v+8>>2]=o,c[v+16>>2]=a,c[v+24>>2]=p,v)|0)|0;i=v;s=r;t=s;i=j;return t|0}else{r=b0(f,9,c[52930]|0,216280,204,215888,(v=i,i=i+1|0,i=i+7&-8,c[v>>2]=0,v)|0)|0;i=v;s=r;t=s;i=j;return t|0}}while(0);s=0;t=s;i=j;return t|0}function cx(b,c){b=b|0;c=c|0;var d=0;d=b;b=c;c=fx(b|0)|0;while(1){if((c|0)>=(d|0)){break}a[b+c|0]=32;c=c+1|0}return}function cy(b,c){b=b|0;c=c|0;var d=0,e=0,f=0;d=b;b=c;if((d|0)<=0){return}a[b+d-1|0]=0;c=0;while(1){if((c|0)>=(d|0)){break}if((a[b+c|0]|0)==0){e=1250;break}c=c+1|0}if((e|0)==1250){f=c+1|0;while(1){if((f|0)>=(d|0)){break}a[b+f|0]=0;f=f+1|0}}f=c-1|0;while(1){if((f|0)<=0){break}if((a[b+f|0]|0)!=32){e=1260;break}a[b+f|0]=0;f=f-1|0}return}function cz(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0.0,f=0,g=0,i=0;d=a;a=b;b=c;do{if((d|0)>0){if((a|0)<=0){break}e=+h[b>>3];c=b+(a<<3)|0;while(1){if(c>>>0>=(b+((aa(d,a)|0)<<3)|0)>>>0){f=1276;break}if(+h[c>>3]!=e){f=1273;break}c=c+(a<<3)|0}if((f|0)==1273){g=0;i=g;return i|0}else if((f|0)==1276){g=1;i=g;return i|0}}}while(0);g=0;i=g;return i|0}function cA(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0.0;d=a;a=b;b=c;do{if((d|0)>0){if((a|0)<=0){break}e=+h[b>>3];c=b+(a<<3)|0;while(1){if(c>>>0>=(b+((aa(d,a)|0)<<3)|0)>>>0){break}h[c>>3]=e;c=c+(a<<3)|0}return}}while(0);return}function cB(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=a;a=b;b=d;do{if((e|0)>0){if((a|0)<=0){break}d=c[b>>2]|0;f=b+(a<<2)|0;while(1){if(f>>>0>=(b+((aa(e,a)|0)<<2)|0)>>>0){break}c[f>>2]=d;f=f+(a<<2)|0}return}}while(0);return}function cC(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=a;a=b;b=d;d=e;do{if((b|0)!=0){if((f|0)<=0){break}if((a|0)==0){g=d;while(1){if(g>>>0>=(d+(f<<2)|0)>>>0){break}e=g;c[e>>2]=c[e>>2]|b;g=g+4|0}return}g=d;while(1){if(g>>>0>=(d+(f<<2)|0)>>>0){break}e=a;a=e+4|0;if((c[e>>2]|0)!=0){e=g;c[e>>2]=c[e>>2]|b}g=g+4|0}return}}while(0);return}function cD(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;b=i;i=i+72|0;e=ax(cE(a,b|0)|0,218720,(a=i,i=i+8|0,c[a>>2]=d,a)|0)|0;i=a;i=b;return(e|0)<1|0}function cE(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;e=b;b=d;d=c[(ba()|0)>>2]|0;do{if((a[d|0]|0)==46){if((a[d+1|0]|0)!=0){break}f=e;g=f;return g|0}}while(0);h=b;i=fx(d|0)|0;while(1){if((a[e]|0)==0){break}if((a[e]|0)==46){j=h;k=d;l=i;fv(j|0,k|0,l|0)|0;h=h+i|0}else{l=h;h=l+1|0;a[l]=a[e]|0}e=e+1|0}a[h]=0;f=b;g=f;return g|0}function cF(a){a=a|0;var b=0,d=0,e=0,f=0;b=a;if((b|0)==0){d=1;e=d;return e|0}c[b>>2]=0;c[b+4>>2]=0;h[b+8>>3]=9.87654321e+107;h[b+16>>3]=9.87654321e+107;h[b+24>>3]=0.0;h[b+32>>3]=0.0;h[b+40>>3]=9.87654321e+107;h[b+48>>3]=90.0;a=0;while(1){if((a|0)>=5){break}f=a;a=f+1|0;h[b+520+(f<<3)>>3]=0.0}c[b+560>>2]=-1;c[b+568>>2]=0;d=cS(b+56|0)|0;e=d;return e|0}function cG(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}if((c[b+568>>2]|0)!=0){fo(c[b+568>>2]|0);c[b+568>>2]=0}cT(b+56|0)|0;d=0;e=d;return e|0}function cH(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0;b=i;i=i+48|0;d=b|0;e=b+8|0;f=b+16|0;g=b+24|0;j=b+32|0;k=b+40|0;l=a;if((l|0)==0){m=1;n=m;i=b;return n|0}a=l+568|0;o=l+56|0;if((c[l+4>>2]|0)!=0){h[o+256>>3]=+h[l+8>>3];h[o+264>>3]=+h[l+16>>3]}else{h[o+256>>3]=9.87654321e+107;h[o+264>>3]=9.87654321e+107}if((cU(o)|0)!=0){p=b0(a,2,c[53080]|0,217936,192,c[53086]|0,(q=i,i=i+1|0,i=i+7&-8,c[q>>2]=0,q)|0)|0;i=q;m=p;n=m;i=b;return n|0}if(+h[l+8>>3]==9.87654321e+107){h[l+8>>3]=+h[o+256>>3]}if(+h[l+16>>3]==9.87654321e+107){h[l+16>>3]=+h[o+264>>3]}else{if(+P(+(+h[l+16>>3]))>90.0){if(+P(+(+h[l+16>>3]))>90.0000000001){o=b0(a,3,c[53080]|0,217936,205,217800,(q=i,i=i+1|0,i=i+7&-8,c[q>>2]=0,q)|0)|0;i=q;m=o;n=m;i=b;return n|0}if(+h[l+16>>3]>90.0){h[l+16>>3]=90.0}else{h[l+16>>3]=-90.0}}}r=+h[l+24>>3];s=+h[l+32>>3];t=+h[l+40>>3];u=+h[l+48>>3];if(t==9.87654321e+107){v=1375}else{if(t==999.0){v=1375}}if((v|0)==1375){t=s<+h[l+16>>3]?180.0:0.0;t=t+ +h[l+8>>3];if(t<-180.0){t=t+360.0}else{if(t>180.0){t=t-360.0}}h[l+40>>3]=t}c[l+560>>2]=0;if(+h[l+16>>3]==90.0){w=r;u=s}else{cq(s,g,d);cq(+h[l+16>>3],k,f);if(t==+h[l+8>>3]){h[j>>3]=0.0;h[e>>3]=1.0;x=+h[l+16>>3];y=90.0-s}else{cq(t- +h[l+8>>3],j,e);z=+h[f>>3]*+h[e>>3];A=+h[k>>3];B=+Q(z*z+A*A);if(B==0.0){if(+h[g>>3]!=0.0){e=b0(a,3,c[53080]|0,217936,264,217624,(q=i,i=i+1|0,i=i+7&-8,c[q>>2]=0,q)|0)|0;i=q;m=e;n=m;i=b;return n|0}c[l+560>>2]=2;if(u>90.0){u=90.0}else{if(u<-90.0){u=-90.0}}}else{s=+h[g>>3]/B;if(+P(+s)>1.0){if(+P(+s)-1.0>=1.0e-10){e=c[53080]|0;C=+ct(B);v=b0(a,3,e,217936,287,217480,(q=i,i=i+8|0,h[q>>3]=C,q)|0)|0;i=q;m=v;n=m;i=b;return n|0}if(s>0.0){s=1.0}else{s=-1.0}}x=+cv(A,z);y=+cs(s)}}if((c[l+560>>2]|0)==0){s=x+y;if(s>180.0){s=s-360.0}else{if(s<-180.0){s=s+360.0}}C=x-y;if(C>180.0){C=C-360.0}else{if(C<-180.0){C=C+360.0}}do{if(+P(+s)<90.0000000001){if(+P(+C)>=90.0000000001){break}c[l+560>>2]=1}}while(0);if(+P(+(u-s))<+P(+(u-C))){if(+P(+s)<90.0000000001){u=s}else{u=C}}else{if(+P(+C)<90.0000000001){u=C}else{u=s}}if(+P(+u)<90.0000000001){if(u>90.0){u=90.0}else{if(u<-90.0){u=-90.0}}}}s=+co(u);B=s*+h[d>>3];if(+P(+B)<1.0e-10){if(+P(+(+h[d>>3]))<1.0e-10){w=r}else{if(u>0.0){w=r+t- +h[l+8>>3]-180.0}else{w=r-t+ +h[l+8>>3]}}}else{s=+h[k>>3];C=+cp(u);z=(s-C*+h[g>>3])/B;A=+h[j>>3]*+h[f>>3]/+h[d>>3];do{if(z==0.0){if(A!=0.0){break}d=b0(a,3,c[53080]|0,217936,363,217312,(q=i,i=i+1|0,i=i+7&-8,c[q>>2]=0,q)|0)|0;i=q;m=d;n=m;i=b;return n|0}}while(0);w=r- +cv(A,z)}if(r>=0.0){if(w<0.0){w=w+360.0}else{if(w>360.0){w=w-360.0}}}else{if(w>0.0){w=w-360.0}else{if(w<-360.0){w=w+360.0}}}}h[l+48>>3]=u;h[l+520>>3]=w;h[l+528>>3]=90.0-u;h[l+536>>3]=t;cq(+h[l+528>>3],l+552|0,l+544|0);c[l+564>>2]=+h[l+552>>3]==0.0;c[l>>2]=137;if(+P(+u)>90.0000000001){l=b0(a,4,c[53080]|0,217936,399,217072,(q=i,i=i+1|0,i=i+7&-8,c[q>>2]=0,q)|0)|0;i=q;m=l;n=m;i=b;return n|0}else{m=0;n=m;i=b;return n|0}return 0}function cI(a,b,d,e,f,g,h,j,k,l,m,n){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;var o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;o=i;p=a;a=b;b=d;d=e;e=f;f=g;g=h;h=j;j=k;k=l;l=m;m=n;if((p|0)==0){q=1;r=q;i=o;return r|0}n=p+568|0;do{if((c[p>>2]|0)!=137){s=cH(p)|0;t=s;if((s|0)==0){break}q=t;r=q;i=o;return r|0}}while(0);s=p+56|0;u=bp[c[s+456>>2]&127](s,a,b,d,1,f,g,h,j,m)|0;t=u;do{if((u|0)!=0){if((t|0)==3){t=5}m=n;g=t;f=c[53078]|0;d=c[212336+(t<<2)>>2]|0;b0(m,g,f,217936,441,d,(d=i,i=i+1|0,i=i+7&-8,c[d>>2]=0,d)|0)|0;i=d;if((t|0)==5){break}q=t;r=q;i=o;return r|0}}while(0);if((b|0)>0){v=aa(a,b)|0}else{v=a}eo(p+520|0,v,0,1,e,h,j,k,l)|0;q=t;r=q;i=o;return r|0}function cJ(a,b,d,e,f,g,h,j,k,l,m,n){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;var o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;o=i;p=a;a=b;b=d;d=e;e=f;f=g;g=h;h=j;j=k;k=l;l=m;m=n;if((p|0)==0){q=1;r=q;i=o;return r|0}n=p+568|0;do{if((c[p>>2]|0)!=137){s=cH(p)|0;t=s;if((s|0)==0){break}q=t;r=q;i=o;return r|0}}while(0);ep(p+520|0,a,b,d,1,f,g,h,j)|0;if((c[p+564>>2]|0)!=0){u=a;v=b}else{if((b|0)>0){w=aa(a,b)|0}else{w=a}u=w;v=0}w=p+56|0;p=bp[c[w+460>>2]&127](w,u,v,1,e,h,j,k,l,m)|0;t=p;if((p|0)==0){q=0;r=q;i=o;return r|0}if((t|0)!=2){t=6}p=b0(n,t,c[53082]|0,217936,500,c[212336+(t<<2)>>2]|0,(t=i,i=i+1|0,i=i+7&-8,c[t>>2]=0,t)|0)|0;i=t;q=p;r=q;i=o;return r|0}function cK(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,j=0,k=0,l=0,m=0;e=i;f=a;a=b;b=d;if((b|0)==0){g=1;j=g;i=e;return j|0}d=b+36|0;if((c[b>>2]|0)!=-1){if((c[b+36>>2]|0)!=0){fo(c[b+36>>2]|0)}}c[b+36>>2]=0;if((c[b>>2]|0)==-1){k=1524}else{if((c[b+44>>2]|0)!=137){k=1524}}if((k|0)==1524){c[b+44>>2]=0;c[b+48>>2]=0;c[b+56>>2]=0;c[b+60>>2]=0;c[b+64>>2]=0}if((a|0)<0){l=b0(d,2,c[53072]|0,215224,83,214248,(m=i,i=i+8|0,c[m>>2]=a,m)|0)|0;i=m;g=l;j=g;i=e;return j|0}do{if((f|0)!=0){k=1531}else{if((c[b+8>>2]|0)==0){k=1531;break}if((c[b+12>>2]|0)==0){k=1531;break}if((c[b+16>>2]|0)==0){k=1531}}}while(0);if((k|0)==1531){do{if((c[b+44>>2]|0)==137){if((c[b+48>>2]|0)>=(a|0)){break}l=b;cL(l)|0}}while(0);if((f|0)!=0){k=1536}else{if((c[b+8>>2]|0)==0){k=1536}}if((k|0)==1536){do{if((c[b+56>>2]|0)!=0){c[b+8>>2]=c[b+56>>2]}else{l=fp(a,8)|0;c[b+8>>2]=l;if((l|0)!=0){c[b+44>>2]=137;c[b+48>>2]=a;c[b+56>>2]=c[b+8>>2];break}l=b0(d,2,c[53072]|0,215224,107,c[53076]|0,(m=i,i=i+1|0,i=i+7&-8,c[m>>2]=0,m)|0)|0;i=m;g=l;j=g;i=e;return j|0}}while(0)}if((f|0)!=0){k=1544}else{if((c[b+12>>2]|0)==0){k=1544}}if((k|0)==1544){do{if((c[b+60>>2]|0)!=0){c[b+12>>2]=c[b+60>>2]}else{l=fp(aa(a,a)|0,8)|0;c[b+12>>2]=l;if((l|0)!=0){c[b+44>>2]=137;c[b+48>>2]=a;c[b+60>>2]=c[b+12>>2];break}l=b;cL(l)|0;l=b0(d,2,c[53072]|0,215224,124,c[53076]|0,(m=i,i=i+1|0,i=i+7&-8,c[m>>2]=0,m)|0)|0;i=m;g=l;j=g;i=e;return j|0}}while(0)}if((f|0)!=0){k=1552}else{if((c[b+16>>2]|0)==0){k=1552}}if((k|0)==1552){do{if((c[b+64>>2]|0)!=0){c[b+16>>2]=c[b+64>>2]}else{k=fp(a,8)|0;c[b+16>>2]=k;if((k|0)!=0){c[b+44>>2]=137;c[b+48>>2]=a;c[b+64>>2]=c[b+16>>2];break}k=b;cL(k)|0;k=b0(d,2,c[53072]|0,215224,141,c[53076]|0,(m=i,i=i+1|0,i=i+7&-8,c[m>>2]=0,m)|0)|0;i=m;g=k;j=g;i=e;return j|0}}while(0)}}if((c[b>>2]|0)==137){if((c[b+20>>2]|0)!=0){fo(c[b+20>>2]|0)}if((c[b+24>>2]|0)!=0){fo(c[b+24>>2]|0)}}c[b+20>>2]=0;c[b+24>>2]=0;c[b+40>>2]=0;c[b>>2]=0;c[b+4>>2]=a;m=0;while(1){if((m|0)>=(a|0)){break}h[(c[b+8>>2]|0)+(m<<3)>>3]=0.0;m=m+1|0}d=c[b+12>>2]|0;k=0;while(1){if((k|0)>=(a|0)){break}m=0;while(1){if((m|0)>=(a|0)){break}if((m|0)==(k|0)){h[d>>3]=1.0}else{h[d>>3]=0.0}d=d+8|0;m=m+1|0}k=k+1|0}k=0;while(1){if((k|0)>=(a|0)){break}h[(c[b+16>>2]|0)+(k<<3)>>3]=1.0;k=k+1|0}g=0;j=g;i=e;return j|0}function cL(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}if((c[b>>2]|0)!=-1){if((c[b+44>>2]|0)==137){if((c[b+8>>2]|0)==(c[b+56>>2]|0)){c[b+8>>2]=0}if((c[b+12>>2]|0)==(c[b+60>>2]|0)){c[b+12>>2]=0}if((c[b+16>>2]|0)==(c[b+64>>2]|0)){c[b+16>>2]=0}if((c[b+56>>2]|0)!=0){fo(c[b+56>>2]|0)}if((c[b+60>>2]|0)!=0){fo(c[b+60>>2]|0)}if((c[b+64>>2]|0)!=0){fo(c[b+64>>2]|0)}}}c[b+44>>2]=0;c[b+48>>2]=0;c[b+56>>2]=0;c[b+60>>2]=0;c[b+64>>2]=0;if((c[b>>2]|0)==137){if((c[b+20>>2]|0)!=0){fo(c[b+20>>2]|0)}if((c[b+24>>2]|0)!=0){fo(c[b+24>>2]|0)}}c[b+20>>2]=0;c[b+24>>2]=0;c[b+40>>2]=0;if((c[b+36>>2]|0)!=0){fo(c[b+36>>2]|0);c[b+36>>2]=0}c[b>>2]=0;d=0;e=d;return e|0}function cM(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;b=i;d=a;if((d|0)==0){e=1;f=e;i=b;return f|0}a=d+36|0;g=c[d+4>>2]|0;c[d+28>>2]=1;j=c[d+12>>2]|0;k=0;while(1){if((k|0)>=(g|0)){break}l=0;while(1){if((l|0)>=(g|0)){break}if((l|0)==(k|0)){m=j;j=m+8|0;if(+h[m>>3]!=1.0){n=1630;break}}else{m=j;j=m+8|0;if(+h[m>>3]!=0.0){n=1633;break}}l=l+1|0}if((n|0)==1630){n=0;c[d+28>>2]=0}else if((n|0)==1633){n=0;c[d+28>>2]=0}k=k+1|0}do{if((c[d+28>>2]|0)!=0){if((c[d>>2]|0)==137){if((c[d+20>>2]|0)!=0){fo(c[d+20>>2]|0)}if((c[d+24>>2]|0)!=0){fo(c[d+24>>2]|0)}}c[d+20>>2]=0;c[d+24>>2]=0;c[d+40>>2]=0}else{if((c[d>>2]|0)!=137){n=1649}else{if((c[d+40>>2]|0)<(g|0)){n=1649}}do{if((n|0)==1649){if((c[d>>2]|0)==137){if((c[d+20>>2]|0)!=0){fo(c[d+20>>2]|0)}if((c[d+24>>2]|0)!=0){fo(c[d+24>>2]|0)}}m=fp(aa(g,g)|0,8)|0;c[d+20>>2]=m;if((m|0)==0){m=b0(a,2,c[53070]|0,215224,445,c[53076]|0,(o=i,i=i+1|0,i=i+7&-8,c[o>>2]=0,o)|0)|0;i=o;e=m;f=e;i=b;return f|0}m=fp(aa(g,g)|0,8)|0;c[d+24>>2]=m;if((m|0)!=0){c[d+40>>2]=g;break}fo(c[d+20>>2]|0);m=b0(a,2,c[53070]|0,215224,450,c[53076]|0,(o=i,i=i+1|0,i=i+7&-8,c[o>>2]=0,o)|0)|0;i=o;e=m;f=e;i=b;return f|0}}while(0);j=c[d+12>>2]|0;m=c[d+20>>2]|0;k=0;while(1){if((k|0)>=(g|0)){break}l=0;while(1){if((l|0)>=(g|0)){break}p=j;j=p+8|0;q=m;m=q+8|0;h[q>>3]=+h[(c[d+16>>2]|0)+(k<<3)>>3]*+h[p>>3];l=l+1|0}k=k+1|0}m=cN(g,c[d+20>>2]|0,c[d+24>>2]|0)|0;p=m;if((m|0)==0){break}m=b0(a,p,c[53070]|0,215224,467,c[212296+(p<<2)>>2]|0,(o=i,i=i+1|0,i=i+7&-8,c[o>>2]=0,o)|0)|0;i=o;e=m;f=e;i=b;return f|0}}while(0);c[d>>2]=137;e=0;f=e;i=b;return f|0}function cN(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0.0,p=0,q=0.0,r=0.0,s=0,t=0,u=0;e=a;a=b;b=d;d=fp(e,4)|0;f=d;if((d|0)==0){g=2;i=g;return i|0}d=fp(e,4)|0;j=d;if((d|0)==0){fo(f);g=2;i=g;return i|0}d=fp(e,8)|0;k=d;if((d|0)==0){fo(f);fo(j);g=2;i=g;return i|0}d=fp(aa(e,e)|0,8)|0;l=d;if((d|0)==0){fo(f);fo(j);fo(k);g=2;i=g;return i|0}d=0;m=0;while(1){if((d|0)>=(e|0)){break}c[f+(d<<2)>>2]=d;h[k+(d<<3)>>3]=0.0;n=0;while(1){if((n|0)>=(e|0)){break}o=+P(+(+h[a+(m<<3)>>3]));if(o>+h[k+(d<<3)>>3]){h[k+(d<<3)>>3]=o}h[l+(m<<3)>>3]=+h[a+(m<<3)>>3];n=n+1|0;m=m+1|0}if(+h[k+(d<<3)>>3]==0.0){p=1695;break}d=d+1|0}if((p|0)==1695){fo(f);fo(j);fo(k);fo(l);g=3;i=g;return i|0}p=0;while(1){if((p|0)>=(e|0)){break}q=+P(+(+h[l+((aa(p,e)|0)+p<<3)>>3]));r=q/+h[k+(p<<3)>>3];a=p;d=p+1|0;while(1){if((d|0)>=(e|0)){break}s=(aa(d,e)|0)+p|0;q=+P(+(+h[l+(s<<3)>>3]));o=q/+h[k+(d<<3)>>3];if(o>r){r=o;a=d}d=d+1|0}if((a|0)>(p|0)){n=0;t=aa(a,e)|0;u=aa(p,e)|0;while(1){if((n|0)>=(e|0)){break}o=+h[l+(t<<3)>>3];h[l+(t<<3)>>3]=+h[l+(u<<3)>>3];h[l+(u<<3)>>3]=o;n=n+1|0;t=t+1|0;u=u+1|0}o=+h[k+(a<<3)>>3];h[k+(a<<3)>>3]=+h[k+(p<<3)>>3];h[k+(p<<3)>>3]=o;u=c[f+(a<<2)>>2]|0;c[f+(a<<2)>>2]=c[f+(p<<2)>>2];c[f+(p<<2)>>2]=u}d=p+1|0;while(1){if((d|0)>=(e|0)){break}s=(aa(d,e)|0)+p|0;if(+h[l+(s<<3)>>3]!=0.0){r=+h[l+((aa(p,e)|0)+p<<3)>>3];u=l+(s<<3)|0;h[u>>3]=+h[u>>3]/r;n=p+1|0;while(1){if((n|0)>=(e|0)){break}r=+h[l+(s<<3)>>3]*+h[l+((aa(p,e)|0)+n<<3)>>3];u=l+((aa(d,e)|0)+n<<3)|0;h[u>>3]=+h[u>>3]-r;n=n+1|0}}d=d+1|0}p=p+1|0}d=0;while(1){if((d|0)>=(e|0)){break}c[j+(c[f+(d<<2)>>2]<<2)>>2]=d;d=d+1|0}d=0;m=0;while(1){if((d|0)>=(e|0)){break}n=0;while(1){if((n|0)>=(e|0)){break}h[b+(m<<3)>>3]=0.0;n=n+1|0;m=m+1|0}d=d+1|0}p=0;while(1){if((p|0)>=(e|0)){break}h[b+((aa(c[j+(p<<2)>>2]|0,e)|0)+p<<3)>>3]=1.0;d=(c[j+(p<<2)>>2]|0)+1|0;while(1){if((d|0)>=(e|0)){break}n=c[j+(p<<2)>>2]|0;while(1){if((n|0)>=(d|0)){break}o=+h[l+((aa(d,e)|0)+n<<3)>>3];r=o*+h[b+((aa(n,e)|0)+p<<3)>>3];m=b+((aa(d,e)|0)+p<<3)|0;h[m>>3]=+h[m>>3]-r;n=n+1|0}d=d+1|0}d=e-1|0;while(1){if((d|0)<0){break}n=d+1|0;while(1){if((n|0)>=(e|0)){break}r=+h[l+((aa(d,e)|0)+n<<3)>>3];o=r*+h[b+((aa(n,e)|0)+p<<3)>>3];m=b+((aa(d,e)|0)+p<<3)|0;h[m>>3]=+h[m>>3]-o;n=n+1|0}o=+h[l+((aa(d,e)|0)+d<<3)>>3];m=b+((aa(d,e)|0)+p<<3)|0;h[m>>3]=+h[m>>3]/o;d=d-1|0}p=p+1|0}fo(f);fo(j);fo(k);fo(l);g=0;i=g;return i|0}function cO(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0.0,p=0;g=a;a=b;b=d;d=e;e=f;if((g|0)==0){i=1;j=i;return j|0}do{if((c[g>>2]|0)!=137){f=cM(g)|0;if((f|0)==0){break}i=f;j=i;return j|0}}while(0);f=c[g+4>>2]|0;k=d;d=e;if((c[g+28>>2]|0)!=0){l=0;while(1){if((l|0)>=(a|0)){break}m=0;while(1){if((m|0)>=(f|0)){break}e=k;k=e+8|0;n=d;d=n+8|0;h[n>>3]=+h[(c[g+16>>2]|0)+(m<<3)>>3]*(+h[e>>3]- +h[(c[g+8>>2]|0)+(m<<3)>>3]);m=m+1|0}k=k+(b-f<<3)|0;d=d+(b-f<<3)|0;l=l+1|0}}else{l=0;while(1){if((l|0)>=(a|0)){break}m=0;while(1){if((m|0)>=(f|0)){break}h[d+(m<<3)>>3]=0.0;m=m+1|0}e=0;while(1){if((e|0)>=(f|0)){break}n=k;k=n+8|0;o=+h[n>>3]- +h[(c[g+8>>2]|0)+(e<<3)>>3];n=(c[g+20>>2]|0)+(e<<3)|0;m=0;while(1){if((m|0)>=(f|0)){break}p=d+(m<<3)|0;h[p>>3]=+h[p>>3]+ +h[n>>3]*o;m=m+1|0;n=n+(f<<3)|0}e=e+1|0}k=k+(b-f<<3)|0;d=d+(b<<3)|0;l=l+1|0}}i=0;j=i;return j|0}function cP(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;g=a;a=b;b=d;d=e;e=f;if((g|0)==0){i=1;j=i;return j|0}do{if((c[g>>2]|0)!=137){f=cM(g)|0;if((f|0)==0){break}i=f;j=i;return j|0}}while(0);f=c[g+4>>2]|0;k=d;d=e;if((c[g+28>>2]|0)!=0){l=0;while(1){if((l|0)>=(a|0)){break}m=0;while(1){if((m|0)>=(f|0)){break}e=k;k=e+8|0;n=d;d=n+8|0;h[n>>3]=+h[e>>3]/+h[(c[g+16>>2]|0)+(m<<3)>>3]+ +h[(c[g+8>>2]|0)+(m<<3)>>3];m=m+1|0}d=d+(b-f<<3)|0;k=k+(b-f<<3)|0;l=l+1|0}}else{l=0;while(1){if((l|0)>=(a|0)){break}e=c[g+24>>2]|0;m=0;while(1){if((m|0)>=(f|0)){break}h[d>>3]=0.0;n=0;while(1){if((n|0)>=(f|0)){break}o=d;h[o>>3]=+h[o>>3]+ +h[e>>3]*+h[k+(n<<3)>>3];e=e+8|0;n=n+1|0}n=d;d=n+8|0;h[n>>3]=+h[n>>3]+ +h[(c[g+8>>2]|0)+(m<<3)>>3];m=m+1|0}d=d+(b-f<<3)|0;k=k+(b<<3)|0;l=l+1|0}}i=0;j=i;return j|0}function cQ(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0.0,k=0,l=0,m=0,n=0;j=a;k=b;b=d;d=e;if(j<=0.0){l=2;m=l;return m|0}e=f;f=g;g=i;i=0;while(1){if((i|0)>=(k|0)){break}h[f>>3]=j*+Z(+h[e>>3]/j);n=g;g=n+4|0;c[n>>2]=0;i=i+1|0;e=e+(b<<3)|0;f=f+(d<<3)|0}l=0;m=l;return m|0}function cR(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0.0,k=0,l=0,m=0,n=0,o=0;j=a;k=b;b=d;d=e;if(j<=0.0){l=2;m=l;return m|0}e=g;g=f;f=i;i=0;n=0;while(1){if((n|0)>=(k|0)){break}if(+h[g>>3]>0.0){h[e>>3]=j*+_(+h[g>>3]/j);o=f;f=o+4|0;c[o>>2]=0}else{o=f;f=o+4|0;c[o>>2]=1;i=4}n=n+1|0;g=g+(b<<3)|0;e=e+(d<<3)|0}l=i;m=l;return m|0}function cS(b){b=b|0;var d=0,e=0,f=0,g=0;d=b;if((d|0)==0){e=1;f=e;return f|0}c[d>>2]=0;fu(d+4|0,215216)|0;h[d+16>>3]=0.0;h[d+24>>3]=9.87654321e+107;h[d+32>>3]=9.87654321e+107;h[d+40>>3]=9.87654321e+107;b=4;while(1){if((b|0)>=30){break}g=b;b=g+1|0;h[d+16+(g<<3)>>3]=0.0}h[d+8>>3]=0.0;h[d+256>>3]=9.87654321e+107;h[d+264>>3]=9.87654321e+107;c[d+272>>2]=3;fu(d+276|0,214224)|0;b=9;while(1){if((b|0)>=40){break}g=b;b=g+1|0;a[d+276+g|0]=0}c[d+316>>2]=0;c[d+320>>2]=0;c[d+324>>2]=0;c[d+328>>2]=0;c[d+332>>2]=0;c[d+336>>2]=0;c[d+340>>2]=0;h[d+344>>3]=0.0;h[d+352>>3]=0.0;c[d+360>>2]=0;c[d+364>>2]=0;b=0;while(1){if((b|0)>=10){break}g=b;b=g+1|0;h[d+368+(g<<3)>>3]=0.0}c[d+448>>2]=0;c[d+452>>2]=0;c[d+456>>2]=0;c[d+460>>2]=0;e=0;f=e;return f|0}function cT(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}if((c[b+360>>2]|0)!=0){fo(c[b+360>>2]|0);c[b+360>>2]=0}d=0;e=d;return e|0}function cU(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;e=b;if((e|0)==0){f=1;g=f;i=d;return g|0}b=e+360|0;a[e+7|0]=0;if((bi(e+4|0,216272)|0)==0){h=cV(e)|0}else{if((bi(e+4|0,216136)|0)==0){h=cW(e)|0}else{if((bi(e+4|0,216048)|0)==0){h=cX(e)|0}else{if((bi(e+4|0,215880)|0)==0){h=cY(e)|0}else{if((bi(e+4|0,215776)|0)==0){h=cZ(e)|0}else{if((bi(e+4|0,215656)|0)==0){h=c_(e)|0}else{if((bi(e+4|0,215528)|0)==0){h=c$(e)|0}else{if((bi(e+4|0,215416)|0)==0){h=c0(e)|0}else{if((bi(e+4|0,215344)|0)==0){h=c1(e)|0}else{if((bi(e+4|0,215328)|0)==0){h=c2(e)|0}else{if((bi(e+4|0,215240)|0)==0){h=c3(e)|0}else{if((bi(e+4|0,215208)|0)==0){h=c4(e)|0}else{if((bi(e+4|0,215184)|0)==0){h=c5(e)|0}else{if((bi(e+4|0,215160)|0)==0){h=c6(e)|0}else{if((bi(e+4|0,215120)|0)==0){h=c7(e)|0}else{if((bi(e+4|0,214992)|0)==0){h=c8(e)|0}else{if((bi(e+4|0,214816)|0)==0){h=c9(e)|0}else{if((bi(e+4|0,214680)|0)==0){h=da(e)|0}else{if((bi(e+4|0,214552)|0)==0){h=db(e)|0}else{if((bi(e+4|0,214456)|0)==0){h=dc(e)|0}else{if((bi(e+4|0,214304)|0)==0){h=dd(e)|0}else{if((bi(e+4|0,214216)|0)==0){h=de(e)|0}else{if((bi(e+4|0,214200)|0)==0){h=df(e)|0}else{if((bi(e+4|0,214168)|0)==0){h=dg(e)|0}else{if((bi(e+4|0,214128)|0)==0){h=dh(e)|0}else{if((bi(e+4|0,214080)|0)==0){h=di(e)|0}else{if((bi(e+4|0,213976)|0)==0){h=dj(e)|0}else{if((bi(e+4|0,213928)|0)==0){h=dk(e)|0}else{j=b0(b,2,c[53032]|0,213832,365,213784,(b=i,i=i+8|0,c[b>>2]=e+4,b)|0)|0;i=b;h=j}}}}}}}}}}}}}}}}}}}}}}}}}}}}f=h;g=f;i=d;return g|0}function cV(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=i;d=a;if((d|0)==0){e=1;f=e;i=b;return f|0}c[d>>2]=101;fu(d+4|0,216272)|0;if(+h[d+24>>3]==9.87654321e+107){h[d+24>>3]=0.0}if(+h[d+32>>3]==9.87654321e+107){h[d+32>>3]=0.0}if(+h[d+8>>3]==0.0){h[d+8>>3]=57.29577951308232}fu(d+276|0,213592)|0;c[d+316>>2]=1;c[d+320>>2]=102;c[d+324>>2]=+h[d+32>>3]==0.0;c[d+328>>2]=0;c[d+332>>2]=0;c[d+336>>2]=0;c[d+340>>2]=+h[d+24>>3]<=1.0;h[d+368>>3]=+h[d+8>>3]*(+h[d+24>>3]+1.0);if(+h[d+368>>3]==0.0){a=b0(d+360|0,2,213576,213832,507,213688,(g=i,i=i+8|0,c[g>>2]=d+276,g)|0)|0;i=g;e=a;f=e;i=b;return f|0}h[d+392>>3]=+co(+h[d+32>>3]);if(+h[d+392>>3]==0.0){a=b0(d+360|0,2,213576,213832,512,213688,(g=i,i=i+8|0,c[g>>2]=d+276,g)|0)|0;i=g;e=a;f=e;i=b;return f|0}h[d+384>>3]=1.0/+h[d+392>>3];h[d+400>>3]=+cp(+h[d+32>>3]);h[d+376>>3]=+h[d+400>>3]/+h[d+392>>3];if(+P(+(+h[d+24>>3]))>1.0){h[d+408>>3]=+ct(-1.0/+h[d+24>>3])}else{h[d+408>>3]=-90.0}h[d+416>>3]=+h[d+24>>3]*+h[d+392>>3];a=+P(+(+h[d+416>>3]))<1.0;h[d+424>>3]=a?1.0:0.0;c[d+456>>2]=14;c[d+460>>2]=54;e=dl(d,0.0,90.0)|0;f=e;i=b;return f|0}function cW(a){a=a|0;var b=0,d=0,e=0,f=0,g=0.0,j=0,k=0.0;b=i;d=a;if((d|0)==0){e=1;f=e;i=b;return f|0}c[d>>2]=102;fu(d+4|0,216136)|0;if(+h[d+24>>3]==9.87654321e+107){h[d+24>>3]=0.0}if(+h[d+32>>3]==9.87654321e+107){h[d+32>>3]=0.0}if(+h[d+40>>3]==9.87654321e+107){h[d+40>>3]=90.0}if(+h[d+8>>3]==0.0){h[d+8>>3]=57.29577951308232}fu(d+276|0,213096)|0;c[d+316>>2]=1;c[d+320>>2]=103;c[d+324>>2]=+h[d+40>>3]==90.0;c[d+328>>2]=0;c[d+332>>2]=0;c[d+336>>2]=0;c[d+340>>2]=+h[d+24>>3]<=1.0;h[d+368>>3]=1.0/+h[d+8>>3];g=+h[d+24>>3];h[d+392>>3]=g*+cp(+h[d+40>>3])+1.0;if(+h[d+392>>3]==0.0){a=b0(d+360|0,2,213088,213832,819,213688,(j=i,i=i+8|0,c[j>>2]=d+276,j)|0)|0;i=j;e=a;f=e;i=b;return f|0}g=-0.0- +h[d+24>>3];k=g*+co(+h[d+40>>3]);h[d+376>>3]=k*+cp(+h[d+32>>3]);k=+h[d+24>>3];g=k*+co(+h[d+40>>3]);h[d+384>>3]=g*+co(+h[d+32>>3]);h[d+400>>3]=+h[d+8>>3]*+h[d+376>>3];h[d+408>>3]=+h[d+8>>3]*+h[d+384>>3];h[d+416>>3]=+h[d+8>>3]*+h[d+392>>3];h[d+424>>3]=(+h[d+392>>3]-1.0)*+h[d+392>>3]-1.0;if(+P(+(+h[d+392>>3]-1.0))<1.0){h[d+432>>3]=+ct(1.0- +h[d+392>>3])}else{h[d+432>>3]=-90.0}c[d+456>>2]=36;c[d+460>>2]=26;e=dl(d,0.0,90.0)|0;f=e;i=b;return f|0}function cX(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}c[b>>2]=103;fu(b+4|0,216048)|0;if(+h[b+8>>3]==0.0){h[b+8>>3]=57.29577951308232}fu(b+276|0,213056)|0;c[b+316>>2]=1;c[b+320>>2]=0;c[b+324>>2]=1;c[b+328>>2]=0;c[b+332>>2]=0;c[b+336>>2]=0;c[b+340>>2]=1;c[b+456>>2]=24;c[b+460>>2]=42;d=dl(b,0.0,90.0)|0;e=d;return e|0}function cY(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}c[b>>2]=104;fu(b+4|0,215880)|0;fu(b+276|0,212984)|0;c[b+316>>2]=1;c[b+320>>2]=0;c[b+324>>2]=1;c[b+328>>2]=0;c[b+332>>2]=1;c[b+336>>2]=0;c[b+340>>2]=1;if(+h[b+8>>3]==0.0){h[b+8>>3]=57.29577951308232;h[b+368>>3]=114.59155902616465;h[b+376>>3]=.008726646259971648}else{h[b+368>>3]=+h[b+8>>3]*2.0;h[b+376>>3]=1.0/+h[b+368>>3]}c[b+456>>2]=4;c[b+460>>2]=40;d=dl(b,0.0,90.0)|0;e=d;return e|0}function cZ(a){a=a|0;var b=0,d=0,e=0,f=0;b=a;if((b|0)==0){d=1;e=d;return e|0}c[b>>2]=105;fu(b+4|0,215776)|0;if(+h[b+24>>3]==9.87654321e+107){h[b+24>>3]=0.0}if(+h[b+32>>3]==9.87654321e+107){h[b+32>>3]=0.0}if(+h[b+8>>3]==0.0){h[b+8>>3]=57.29577951308232}fu(b+276|0,212840)|0;c[b+316>>2]=1;c[b+320>>2]=102;if(+h[b+24>>3]==0.0){f=+h[b+32>>3]==0.0}else{f=0}c[b+324>>2]=f&1;c[b+328>>2]=0;c[b+332>>2]=0;c[b+336>>2]=0;c[b+340>>2]=0;h[b+368>>3]=1.0/+h[b+8>>3];h[b+376>>3]=+h[b+24>>3]*+h[b+24>>3]+ +h[b+32>>3]*+h[b+32>>3];h[b+384>>3]=+h[b+376>>3]+1.0;h[b+392>>3]=+h[b+376>>3]-1.0;c[b+456>>2]=88;c[b+460>>2]=78;d=dl(b,0.0,90.0)|0;e=d;return e|0}function c_(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}c[b>>2]=106;fu(b+4|0,215656)|0;fu(b+276|0,212696)|0;c[b+316>>2]=1;c[b+320>>2]=0;c[b+324>>2]=1;c[b+328>>2]=0;c[b+332>>2]=0;c[b+336>>2]=1;c[b+340>>2]=0;if(+h[b+8>>3]==0.0){h[b+8>>3]=57.29577951308232;h[b+368>>3]=1.0;h[b+376>>3]=1.0}else{h[b+368>>3]=+h[b+8>>3]*3.141592653589793/180.0;h[b+376>>3]=1.0/+h[b+368>>3]}c[b+456>>2]=90;c[b+460>>2]=60;d=dl(b,0.0,90.0)|0;e=d;return e|0}function c$(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,j=0,k=0.0,l=0.0,m=0.0,n=0.0,o=0,p=0,q=0.0,r=0.0;b=i;d=a;if((d|0)==0){e=1;f=e;i=b;return f|0}fu(d+4|0,215528)|0;c[d>>2]=107;if(+h[d+24>>3]==9.87654321e+107){h[d+24>>3]=0.0}if(+h[d+32>>3]==9.87654321e+107){h[d+32>>3]=0.0}if(+h[d+40>>3]==9.87654321e+107){h[d+40>>3]=0.0}if(+h[d+8>>3]==0.0){h[d+8>>3]=57.29577951308232}fu(d+276|0,212648)|0;c[d+316>>2]=1;c[d+320>>2]=30;c[d+324>>2]=1;c[d+328>>2]=0;c[d+332>>2]=0;c[d+336>>2]=0;c[d+340>>2]=0;a=29;while(1){if((a|0)>=0){g=+h[d+16+(a<<3)>>3]==0.0}else{g=0}if(!g){break}a=a-1|0}if((a|0)<0){g=b0(d+360|0,2,212632,213832,2100,213688,(j=i,i=i+8|0,c[j>>2]=d+276,j)|0)|0;i=j;e=g;f=e;i=b;return f|0}c[d+452>>2]=a;if((a|0)<2){h[d+368>>3]=3.141592653589793}else{k=0.0;l=+h[d+24>>3];if(l<=0.0){g=b0(d+360|0,2,212632,213832,2114,213688,(j=i,i=i+8|0,c[j>>2]=d+276,j)|0)|0;i=j;e=g;f=e;i=b;return f|0}g=0;while(1){if((g|0)>=180){break}m=+(g|0)*3.141592653589793/180.0;n=0.0;o=a;while(1){if((o|0)<=0){break}n=n*m+ +(o|0)*+h[d+16+(o<<3)>>3];o=o-1|0}if(n<=0.0){p=2085;break}k=m;l=n;g=g+1|0}if((g|0)==180){q=3.141592653589793;c[d+336>>2]=1}else{g=1;while(1){if((g|0)>10){break}q=k-l*(m-k)/(n-l);r=0.0;o=a;while(1){if((o|0)<=0){break}r=r*q+ +(o|0)*+h[d+16+(o<<3)>>3];o=o-1|0}if(+P(+r)<1.0e-13){p=2097;break}if(r<0.0){m=q;n=r}else{k=q;l=r}g=g+1|0}}l=0.0;o=a;while(1){if((o|0)<0){break}l=l*q+ +h[d+16+(o<<3)>>3];o=o-1|0}h[d+368>>3]=q;h[d+376>>3]=l}c[d+456>>2]=84;c[d+460>>2]=112;e=dl(d,0.0,90.0)|0;f=e;i=b;return f|0}function c0(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}c[b>>2]=108;fu(b+4|0,215416)|0;fu(b+276|0,212536)|0;c[b+316>>2]=1;c[b+320>>2]=0;c[b+324>>2]=1;c[b+328>>2]=1;c[b+332>>2]=0;c[b+336>>2]=1;c[b+340>>2]=0;if(+h[b+8>>3]==0.0){h[b+8>>3]=57.29577951308232;h[b+368>>3]=114.59155902616465;h[b+376>>3]=.008726646259971648}else{h[b+368>>3]=+h[b+8>>3]*2.0;h[b+376>>3]=1.0/+h[b+368>>3]}c[b+456>>2]=50;c[b+460>>2]=52;d=dl(b,0.0,90.0)|0;e=d;return e|0}function c1(a){a=a|0;var b=0,d=0,e=0,f=0,g=0.0,j=0;b=i;d=a;if((d|0)==0){e=1;f=e;i=b;return f|0}c[d>>2]=109;fu(d+4|0,215344)|0;if(+h[d+24>>3]==9.87654321e+107){h[d+24>>3]=90.0}if(+h[d+8>>3]==0.0){h[d+8>>3]=57.29577951308232}fu(d+276|0,221864)|0;c[d+316>>2]=1;c[d+320>>2]=101;c[d+324>>2]=1;c[d+328>>2]=0;c[d+332>>2]=0;c[d+336>>2]=0;c[d+340>>2]=1;h[d+368>>3]=+h[d+8>>3]*2.0;do{if(+h[d+24>>3]==90.0){h[d+376>>3]=-.5;h[d+384>>3]=1.0}else{if(+h[d+24>>3]>-90.0){g=+co((90.0- +h[d+24>>3])/2.0);h[d+376>>3]=+_(g)*g*g/(1.0-g*g);h[d+384>>3]=.5- +h[d+376>>3];break}else{a=b0(d+360|0,2,221832,213832,2714,213688,(j=i,i=i+8|0,c[j>>2]=d+276,j)|0)|0;i=j;e=a;f=e;i=b;return f|0}}}while(0);h[d+392>>3]=+h[d+368>>3]*+h[d+384>>3];h[d+400>>3]=1.0e-4;h[d+408>>3]=+h[d+384>>3]*1.0e-4;h[d+416>>3]=57.29577951308232/+h[d+384>>3];c[d+456>>2]=108;c[d+460>>2]=34;e=dl(d,0.0,90.0)|0;f=e;i=b;return f|0}function c2(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,j=0;b=i;d=a;if((d|0)==0){e=1;f=e;i=b;return f|0}c[d>>2]=201;fu(d+4|0,215328)|0;if(+h[d+24>>3]==9.87654321e+107){h[d+24>>3]=1.0}if(+h[d+32>>3]==9.87654321e+107){h[d+32>>3]=1.0}fu(d+276|0,221736)|0;c[d+316>>2]=2;c[d+320>>2]=102;c[d+324>>2]=0;c[d+328>>2]=0;c[d+332>>2]=0;if(+h[d+24>>3]<-1.0){g=1}else{g=0.0<+h[d+24>>3]}c[d+336>>2]=g&1;c[d+340>>2]=((c[d+336>>2]|0)!=0^1)&1;do{if(+h[d+8>>3]==0.0){h[d+8>>3]=57.29577951308232;h[d+368>>3]=+h[d+32>>3];if(+h[d+368>>3]==0.0){g=b0(d+360|0,2,221728,213832,3008,213688,(j=i,i=i+8|0,c[j>>2]=d+276,j)|0)|0;i=j;e=g;f=e;i=b;return f|0}h[d+376>>3]=1.0/+h[d+368>>3];h[d+384>>3]=57.29577951308232*(+h[d+24>>3]+ +h[d+32>>3]);if(+h[d+384>>3]!=0.0){h[d+392>>3]=1.0/+h[d+384>>3];break}g=b0(d+360|0,2,221728,213832,3015,213688,(j=i,i=i+8|0,c[j>>2]=d+276,j)|0)|0;i=j;e=g;f=e;i=b;return f|0}else{h[d+368>>3]=+h[d+8>>3]*+h[d+32>>3]*3.141592653589793/180.0;if(+h[d+368>>3]==0.0){g=b0(d+360|0,2,221728,213832,3022,213688,(j=i,i=i+8|0,c[j>>2]=d+276,j)|0)|0;i=j;e=g;f=e;i=b;return f|0}h[d+376>>3]=1.0/+h[d+368>>3];h[d+384>>3]=+h[d+8>>3]*(+h[d+24>>3]+ +h[d+32>>3]);if(+h[d+384>>3]!=0.0){h[d+392>>3]=1.0/+h[d+384>>3];break}g=b0(d+360|0,2,221728,213832,3029,213688,(j=i,i=i+8|0,c[j>>2]=d+276,j)|0)|0;i=j;e=g;f=e;i=b;return f|0}}while(0);c[d+456>>2]=64;c[d+460>>2]=20;e=dl(d,0.0,0.0)|0;f=e;i=b;return f|0}function c3(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=i;d=a;if((d|0)==0){e=1;f=e;i=b;return f|0}c[d>>2]=202;fu(d+4|0,215240)|0;if(+h[d+24>>3]==9.87654321e+107){h[d+24>>3]=1.0}fu(d+276|0,221696)|0;c[d+316>>2]=2;c[d+320>>2]=101;c[d+324>>2]=0;c[d+328>>2]=1;c[d+332>>2]=0;c[d+336>>2]=1;c[d+340>>2]=0;L2826:do{if(+h[d+8>>3]==0.0){h[d+8>>3]=57.29577951308232;h[d+368>>3]=1.0;h[d+376>>3]=1.0;do{if(+h[d+24>>3]>0.0){if(+h[d+24>>3]>1.0){break}h[d+384>>3]=+h[d+8>>3]/+h[d+24>>3];h[d+392>>3]=+h[d+24>>3]/+h[d+8>>3];break L2826}}while(0);a=b0(d+360|0,2,221680,213832,3235,213688,(g=i,i=i+8|0,c[g>>2]=d+276,g)|0)|0;i=g;e=a;f=e;i=b;return f|0}else{h[d+368>>3]=+h[d+8>>3]*3.141592653589793/180.0;h[d+376>>3]=57.29577951308232/+h[d+8>>3];do{if(+h[d+24>>3]>0.0){if(+h[d+24>>3]>1.0){break}h[d+384>>3]=+h[d+8>>3]/+h[d+24>>3];h[d+392>>3]=+h[d+24>>3]/+h[d+8>>3];break L2826}}while(0);a=b0(d+360|0,2,221680,213832,3243,213688,(g=i,i=i+8|0,c[g>>2]=d+276,g)|0)|0;i=g;e=a;f=e;i=b;return f|0}}while(0);c[d+456>>2]=30;c[d+460>>2]=46;e=dl(d,0.0,0.0)|0;f=e;i=b;return f|0}function c4(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}c[b>>2]=203;fu(b+4|0,215208)|0;fu(b+276|0,221544)|0;c[b+316>>2]=2;c[b+320>>2]=0;c[b+324>>2]=0;c[b+328>>2]=0;c[b+332>>2]=0;c[b+336>>2]=1;c[b+340>>2]=0;if(+h[b+8>>3]==0.0){h[b+8>>3]=57.29577951308232;h[b+368>>3]=1.0;h[b+376>>3]=1.0}else{h[b+368>>3]=+h[b+8>>3]*3.141592653589793/180.0;h[b+376>>3]=1.0/+h[b+368>>3]}c[b+456>>2]=44;c[b+460>>2]=106;d=dl(b,0.0,0.0)|0;e=d;return e|0}function c5(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}c[b>>2]=204;fu(b+4|0,215184)|0;fu(b+276|0,221504)|0;c[b+316>>2]=2;c[b+320>>2]=0;c[b+324>>2]=0;c[b+328>>2]=0;c[b+332>>2]=1;c[b+336>>2]=0;c[b+340>>2]=1;if(+h[b+8>>3]==0.0){h[b+8>>3]=57.29577951308232;h[b+368>>3]=1.0;h[b+376>>3]=1.0}else{h[b+368>>3]=+h[b+8>>3]*3.141592653589793/180.0;h[b+376>>3]=1.0/+h[b+368>>3]}c[b+456>>2]=66;c[b+460>>2]=72;d=dl(b,0.0,0.0)|0;e=d;return e|0}function c6(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}c[b>>2]=301;fu(b+4|0,215160)|0;fu(b+276|0,221448)|0;c[b+316>>2]=3;c[b+320>>2]=0;c[b+324>>2]=0;c[b+328>>2]=1;c[b+332>>2]=0;c[b+336>>2]=1;c[b+340>>2]=0;if(+h[b+8>>3]==0.0){h[b+8>>3]=57.29577951308232;h[b+368>>3]=1.0;h[b+376>>3]=1.0}else{h[b+368>>3]=+h[b+8>>3]*3.141592653589793/180.0;h[b+376>>3]=1.0/+h[b+368>>3]}c[b+456>>2]=86;c[b+460>>2]=80;d=dl(b,0.0,0.0)|0;e=d;return e|0}function c7(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}c[b>>2]=302;fu(b+4|0,215120)|0;fu(b+276|0,221424)|0;c[b+316>>2]=3;c[b+320>>2]=0;c[b+324>>2]=0;c[b+328>>2]=1;c[b+332>>2]=0;c[b+336>>2]=1;c[b+340>>2]=0;if(+h[b+8>>3]==0.0){h[b+8>>3]=57.29577951308232;h[b+368>>3]=1.0;h[b+376>>3]=1.0;h[b+384>>3]=180.0;h[b+392>>3]=1.0/+h[b+384>>3]}else{h[b+368>>3]=+h[b+8>>3]*3.141592653589793/180.0;h[b+376>>3]=1.0/+h[b+368>>3];h[b+384>>3]=3.141592653589793*+h[b+8>>3];h[b+392>>3]=1.0/+h[b+384>>3]}c[b+456>>2]=58;c[b+460>>2]=76;d=dl(b,0.0,0.0)|0;e=d;return e|0}function c8(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}c[b>>2]=303;fu(b+4|0,214992)|0;if(+h[b+8>>3]==0.0){h[b+8>>3]=57.29577951308232}fu(b+276|0,221400)|0;c[b+316>>2]=3;c[b+320>>2]=0;c[b+324>>2]=0;c[b+328>>2]=1;c[b+332>>2]=0;c[b+336>>2]=1;c[b+340>>2]=0;h[b+368>>3]=1.4142135623730951*+h[b+8>>3];h[b+376>>3]=+h[b+368>>3]/90.0;h[b+384>>3]=1.0/+h[b+368>>3];h[b+392>>3]=90.0/+h[b+8>>3];h[b+400>>3]=.6366197723675814;c[b+456>>2]=94;c[b+460>>2]=102;d=dl(b,0.0,0.0)|0;e=d;return e|0}function c9(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}c[b>>2]=401;fu(b+4|0,214816)|0;if(+h[b+8>>3]==0.0){h[b+8>>3]=57.29577951308232}fu(b+276|0,221336)|0;c[b+316>>2]=4;c[b+320>>2]=0;c[b+324>>2]=0;c[b+328>>2]=1;c[b+332>>2]=0;c[b+336>>2]=1;c[b+340>>2]=0;h[b+368>>3]=+h[b+8>>3]*2.0*+h[b+8>>3];h[b+376>>3]=1.0/(+h[b+368>>3]*2.0);h[b+384>>3]=+h[b+376>>3]/4.0;h[b+392>>3]=1.0/(+h[b+8>>3]*2.0);c[b+456>>2]=104;c[b+460>>2]=48;d=dl(b,0.0,0.0)|0;e=d;return e|0}function da(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,j=0.0;b=i;d=a;if((d|0)==0){e=1;f=e;i=b;return f|0}c[d>>2]=501;fu(d+4|0,214680)|0;fu(d+276|0,221232)|0;if(+h[d+24>>3]==9.87654321e+107){a=b0(d+360|0,2,221216,213832,4758,213688,(g=i,i=i+8|0,c[g>>2]=d+276,g)|0)|0;i=g;e=a;f=e;i=b;return f|0}if(+h[d+32>>3]==9.87654321e+107){h[d+32>>3]=0.0}if(+h[d+8>>3]==0.0){h[d+8>>3]=57.29577951308232}c[d+316>>2]=5;c[d+320>>2]=102;c[d+324>>2]=0;c[d+328>>2]=0;c[d+332>>2]=0;c[d+336>>2]=0;c[d+340>>2]=1;h[d+368>>3]=+cp(+h[d+24>>3]);if(+h[d+368>>3]==0.0){a=b0(d+360|0,2,221216,213832,4773,213688,(g=i,i=i+8|0,c[g>>2]=d+276,g)|0)|0;i=g;e=a;f=e;i=b;return f|0}h[d+376>>3]=1.0/+h[d+368>>3];j=+h[d+8>>3];h[d+392>>3]=j*+co(+h[d+32>>3]);if(+h[d+392>>3]==0.0){a=b0(d+360|0,2,221216,213832,4780,213688,(g=i,i=i+8|0,c[g>>2]=d+276,g)|0)|0;i=g;e=a;f=e;i=b;return f|0}else{h[d+400>>3]=1.0/+h[d+392>>3];h[d+408>>3]=1.0/+cr(+h[d+24>>3]);h[d+384>>3]=+h[d+392>>3]*+h[d+408>>3];c[d+456>>2]=98;c[d+460>>2]=2;e=dl(d,0.0,+h[d+24>>3])|0;f=e;i=b;return f|0}return 0}function db(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,j=0.0,k=0.0,l=0.0;b=i;d=a;if((d|0)==0){e=1;f=e;i=b;return f|0}c[d>>2]=502;fu(d+4|0,214552)|0;fu(d+276|0,221144)|0;if(+h[d+24>>3]==9.87654321e+107){a=b0(d+360|0,2,221136,213832,5009,213688,(g=i,i=i+8|0,c[g>>2]=d+276,g)|0)|0;i=g;e=a;f=e;i=b;return f|0}if(+h[d+32>>3]==9.87654321e+107){h[d+32>>3]=0.0}if(+h[d+8>>3]==0.0){h[d+8>>3]=57.29577951308232}c[d+316>>2]=5;c[d+320>>2]=102;c[d+324>>2]=0;c[d+328>>2]=1;c[d+332>>2]=0;c[d+336>>2]=1;c[d+340>>2]=0;j=+h[d+24>>3]- +h[d+32>>3];k=+h[d+24>>3]+ +h[d+32>>3];l=+cp(j);h[d+368>>3]=(l+ +cp(k))/2.0;if(+h[d+368>>3]==0.0){a=b0(d+360|0,2,221136,213832,5027,213688,(g=i,i=i+8|0,c[g>>2]=d+276,g)|0)|0;i=g;e=a;f=e;i=b;return f|0}else{h[d+376>>3]=1.0/+h[d+368>>3];h[d+392>>3]=+h[d+8>>3]/+h[d+368>>3];l=+cp(j);h[d+400>>3]=l*+cp(k)+1.0;h[d+408>>3]=+h[d+368>>3]*2.0;h[d+416>>3]=+h[d+392>>3]*+h[d+392>>3]*+h[d+400>>3];h[d+424>>3]=1.0/(+h[d+8>>3]*2.0*+h[d+392>>3]);h[d+432>>3]=+h[d+392>>3]*+Q(+h[d+400>>3]+ +h[d+408>>3]);k=+h[d+392>>3];l=+h[d+400>>3];j=+h[d+408>>3];h[d+384>>3]=k*+Q(l-j*+cp(+h[d+24>>3]));c[d+456>>2]=92;c[d+460>>2]=12;e=dl(d,0.0,+h[d+24>>3])|0;f=e;i=b;return f|0}return 0}function dc(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,j=0.0,k=0.0;b=i;d=a;if((d|0)==0){e=1;f=e;i=b;return f|0}c[d>>2]=503;fu(d+4|0,214456)|0;fu(d+276|0,221104)|0;if(+h[d+24>>3]==9.87654321e+107){a=b0(d+360|0,2,221088,213832,5261,213688,(g=i,i=i+8|0,c[g>>2]=d+276,g)|0)|0;i=g;e=a;f=e;i=b;return f|0}if(+h[d+32>>3]==9.87654321e+107){h[d+32>>3]=0.0}if(+h[d+8>>3]==0.0){h[d+8>>3]=57.29577951308232}c[d+316>>2]=5;c[d+320>>2]=102;c[d+324>>2]=0;c[d+328>>2]=0;c[d+332>>2]=0;c[d+336>>2]=1;c[d+340>>2]=0;if(+h[d+32>>3]==0.0){j=+h[d+8>>3];h[d+368>>3]=j*+cp(+h[d+24>>3])*3.141592653589793/180.0}else{j=+h[d+8>>3];k=j*+cp(+h[d+24>>3]);j=k*+cp(+h[d+32>>3]);h[d+368>>3]=j/+h[d+32>>3]}if(+h[d+368>>3]==0.0){a=b0(d+360|0,2,221088,213832,5281,213688,(g=i,i=i+8|0,c[g>>2]=d+276,g)|0)|0;i=g;e=a;f=e;i=b;return f|0}else{h[d+376>>3]=1.0/+h[d+368>>3];j=+h[d+8>>3];k=j*+co(+h[d+32>>3]);j=k*+co(+h[d+24>>3]);h[d+384>>3]=j/+h[d+368>>3];h[d+392>>3]=+h[d+384>>3]+ +h[d+24>>3];c[d+456>>2]=70;c[d+460>>2]=32;e=dl(d,0.0,+h[d+24>>3])|0;f=e;i=b;return f|0}return 0}function dd(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,j=0.0,k=0.0,l=0.0,m=0.0;b=i;d=a;if((d|0)==0){e=1;f=e;i=b;return f|0}c[d>>2]=504;fu(d+4|0,214304)|0;fu(d+276|0,221064)|0;if(+h[d+24>>3]==9.87654321e+107){a=b0(d+360|0,2,221008,213832,5486,213688,(g=i,i=i+8|0,c[g>>2]=d+276,g)|0)|0;i=g;e=a;f=e;i=b;return f|0}if(+h[d+32>>3]==9.87654321e+107){h[d+32>>3]=0.0}if(+h[d+8>>3]==0.0){h[d+8>>3]=57.29577951308232}c[d+316>>2]=5;c[d+320>>2]=102;c[d+324>>2]=0;c[d+328>>2]=0;c[d+332>>2]=1;c[d+336>>2]=0;c[d+340>>2]=1;j=+h[d+24>>3]- +h[d+32>>3];k=+h[d+24>>3]+ +h[d+32>>3];l=+cr((90.0-j)/2.0);m=+co(j);if(j==k){h[d+368>>3]=+cp(j)}else{j=+cr((90.0-k)/2.0);h[d+368>>3]=+_(+co(k)/m)/+_(j/l)}if(+h[d+368>>3]==0.0){a=b0(d+360|0,2,221008,213832,5513,213688,(g=i,i=i+8|0,c[g>>2]=d+276,g)|0)|0;i=g;e=a;f=e;i=b;return f|0}h[d+376>>3]=1.0/+h[d+368>>3];h[d+392>>3]=+h[d+8>>3]*(m/+h[d+368>>3])/+R(+l,+(+h[d+368>>3]));if(+h[d+392>>3]==0.0){a=b0(d+360|0,2,221008,213832,5520,213688,(g=i,i=i+8|0,c[g>>2]=d+276,g)|0)|0;i=g;e=a;f=e;i=b;return f|0}else{l=+h[d+392>>3];m=+cr((90.0- +h[d+24>>3])/2.0);h[d+384>>3]=l*+R(+m,+(+h[d+368>>3]));h[d+400>>3]=1.0/+h[d+392>>3];c[d+456>>2]=62;c[d+460>>2]=18;e=dl(d,0.0,+h[d+24>>3])|0;f=e;i=b;return f|0}return 0}function de(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,j=0.0,k=0.0,l=0.0;b=i;d=a;if((d|0)==0){e=1;f=e;i=b;return f|0}c[d>>2]=601;fu(d+4|0,214216)|0;fu(d+276|0,220928)|0;if(+h[d+24>>3]==9.87654321e+107){a=b0(d+360|0,2,220920,213832,5741,213688,(g=i,i=i+8|0,c[g>>2]=d+276,g)|0)|0;i=g;e=a;f=e;i=b;return f|0}if(+h[d+24>>3]==0.0){e=c6(d)|0;f=e;i=b;return f|0}c[d+316>>2]=6;c[d+320>>2]=101;c[d+324>>2]=0;c[d+328>>2]=1;c[d+332>>2]=0;c[d+336>>2]=1;c[d+340>>2]=0;if(+h[d+8>>3]==0.0){h[d+8>>3]=57.29577951308232;h[d+376>>3]=1.0;j=+h[d+8>>3];k=j*+co(+h[d+24>>3]);j=k/+cp(+h[d+24>>3]);h[d+384>>3]=j+ +h[d+24>>3]}else{h[d+376>>3]=+h[d+8>>3]*3.141592653589793/180.0;j=+h[d+8>>3];k=+co(+h[d+24>>3]);l=k/+cp(+h[d+24>>3]);h[d+384>>3]=j*(l+ +h[d+24>>3]*3.141592653589793/180.0)}c[d+456>>2]=82;c[d+460>>2]=74;e=dl(d,0.0,0.0)|0;f=e;i=b;return f|0}function df(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}c[b>>2]=602;fu(b+4|0,214200)|0;fu(b+276|0,220904)|0;c[b+316>>2]=6;c[b+320>>2]=0;c[b+324>>2]=0;c[b+328>>2]=0;c[b+332>>2]=0;c[b+336>>2]=1;c[b+340>>2]=0;if(+h[b+8>>3]==0.0){h[b+8>>3]=57.29577951308232;h[b+368>>3]=1.0;h[b+376>>3]=1.0;h[b+384>>3]=114.59155902616465}else{h[b+368>>3]=+h[b+8>>3]*3.141592653589793/180.0;h[b+376>>3]=1.0/+h[b+368>>3];h[b+384>>3]=+h[b+8>>3]*2.0}c[b+456>>2]=100;c[b+460>>2]=68;d=dl(b,0.0,0.0)|0;e=d;return e|0}function dg(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}c[b>>2]=701;fu(b+4|0,214168)|0;fu(b+276|0,220872)|0;c[b+316>>2]=7;c[b+320>>2]=0;c[b+324>>2]=0;c[b+328>>2]=0;c[b+332>>2]=0;c[b+336>>2]=1;c[b+340>>2]=0;if(+h[b+8>>3]==0.0){h[b+8>>3]=57.29577951308232;h[b+368>>3]=45.0;h[b+376>>3]=.022222222222222223}else{h[b+368>>3]=+h[b+8>>3]*3.141592653589793/4.0;h[b+376>>3]=1.0/+h[b+368>>3]}c[b+456>>2]=6;c[b+460>>2]=28;d=dl(b,0.0,0.0)|0;e=d;return e|0}function dh(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}c[b>>2]=702;fu(b+4|0,214128)|0;fu(b+276|0,220808)|0;c[b+316>>2]=7;c[b+320>>2]=0;c[b+324>>2]=0;c[b+328>>2]=0;c[b+332>>2]=0;c[b+336>>2]=1;c[b+340>>2]=0;if(+h[b+8>>3]==0.0){h[b+8>>3]=57.29577951308232;h[b+368>>3]=45.0;h[b+376>>3]=.022222222222222223}else{h[b+368>>3]=+h[b+8>>3]*3.141592653589793/4.0;h[b+376>>3]=1.0/+h[b+368>>3]}c[b+456>>2]=56;c[b+460>>2]=22;d=dl(b,0.0,0.0)|0;e=d;return e|0}function di(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}c[b>>2]=703;fu(b+4|0,214080)|0;fu(b+276|0,220672)|0;c[b+316>>2]=7;c[b+320>>2]=0;c[b+324>>2]=0;c[b+328>>2]=1;c[b+332>>2]=0;c[b+336>>2]=1;c[b+340>>2]=0;if(+h[b+8>>3]==0.0){h[b+8>>3]=57.29577951308232;h[b+368>>3]=45.0;h[b+376>>3]=.022222222222222223}else{h[b+368>>3]=+h[b+8>>3]*3.141592653589793/4.0;h[b+376>>3]=1.0/+h[b+368>>3]}c[b+456>>2]=96;c[b+460>>2]=16;d=dl(b,0.0,0.0)|0;e=d;return e|0}function dj(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=i;d=a;if((d|0)==0){e=1;f=e;i=b;return f|0}c[d>>2]=801;fu(d+4|0,213976)|0;if(+h[d+24>>3]==9.87654321e+107){h[d+24>>3]=4.0}if(+h[d+32>>3]==9.87654321e+107){h[d+32>>3]=3.0}fu(d+276|0,220632)|0;c[d+316>>2]=8;c[d+320>>2]=102;c[d+324>>2]=0;c[d+328>>2]=1;c[d+332>>2]=0;c[d+336>>2]=1;c[d+340>>2]=0;do{if(+h[d+24>>3]>0.0){if(+h[d+32>>3]<=0.0){break}c[d+448>>2]=(~~(+h[d+24>>3]+.5)|0)%2|0;c[d+452>>2]=(~~(+h[d+32>>3]+.5)|0)%2|0;if(+h[d+8>>3]==0.0){h[d+8>>3]=57.29577951308232;h[d+368>>3]=1.0;h[d+376>>3]=1.0}else{h[d+368>>3]=+h[d+8>>3]*3.141592653589793/180.0;h[d+376>>3]=57.29577951308232/+h[d+8>>3]}h[d+384>>3]=(+h[d+32>>3]-1.0)/+h[d+32>>3];h[d+392>>3]=+h[d+32>>3]*90.0/+h[d+24>>3];h[d+400>>3]=(+h[d+32>>3]+1.0)/2.0;h[d+408>>3]=(+h[d+32>>3]-1.0)*90.0/+h[d+24>>3];h[d+416>>3]=180.0/+h[d+24>>3];h[d+424>>3]=+h[d+24>>3]/360.0;h[d+432>>3]=+h[d+392>>3]*+h[d+368>>3];h[d+440>>3]=+h[d+416>>3]*+h[d+368>>3];c[d+456>>2]=38;c[d+460>>2]=110;e=dl(d,0.0,0.0)|0;f=e;i=b;return f|0}}while(0);a=b0(d+360|0,2,220624,213832,7581,213688,(g=i,i=i+8|0,c[g>>2]=d+276,g)|0)|0;i=g;e=a;f=e;i=b;return f|0}function dk(a){a=a|0;var b=0,d=0,e=0,f=0.0;b=a;if((b|0)==0){d=1;e=d;return e|0}c[b>>2]=802;fu(b+4|0,213928)|0;fu(b+276|0,220560)|0;c[b+316>>2]=8;c[b+320>>2]=0;c[b+324>>2]=0;c[b+328>>2]=1;c[b+332>>2]=0;c[b+336>>2]=1;c[b+340>>2]=0;if(+h[b+8>>3]==0.0){h[b+8>>3]=57.29577951308232;h[b+368>>3]=1.0;h[b+376>>3]=1.0}else{h[b+368>>3]=+h[b+8>>3]*3.141592653589793/180.0;h[b+376>>3]=57.29577951308232/+h[b+8>>3]}f=+Q(2.0);a=b+368|0;h[a>>3]=+h[a>>3]/f;f=+Q(2.0);a=b+376|0;h[a>>3]=+h[a>>3]/f;h[b+384>>3]=.6666666666666666;h[b+392>>3]=1.0e-4;h[b+400>>3]=+Q(+h[b+384>>3])*180.0/3.141592653589793;h[b+408>>3]=90.0- +h[b+392>>3]*+h[b+400>>3];h[b+416>>3]=+Q(1.5)*3.141592653589793/180.0;c[b+456>>2]=8;c[b+460>>2]=10;d=dl(b,0.0,90.0)|0;e=d;return e|0}function dl(a,b,d){a=a|0;b=+b;d=+d;var e=0,f=0,g=0,j=0,k=0,l=0.0,m=0,n=0,o=0,p=0;e=i;i=i+24|0;f=e|0;g=e+8|0;j=e+16|0;k=a;l=b;b=d;if((k|0)==0){m=1;n=m;i=e;return n|0}h[k+344>>3]=0.0;h[k+352>>3]=0.0;do{if(+h[k+256>>3]==9.87654321e+107){o=58}else{if(+h[k+264>>3]==9.87654321e+107){o=58;break}if((bp[c[k+460>>2]&127](k,1,1,1,1,k+256|0,k+264|0,g,j,f)|0)==0){h[k+344>>3]=+h[g>>3];h[k+352>>3]=+h[j>>3];break}a=b0(k+360|0,2,213768,213832,443,213688,(p=i,i=i+8|0,c[p>>2]=k+276,p)|0)|0;i=p;m=a;n=m;i=e;return n|0}}while(0);if((o|0)==58){h[k+256>>3]=l;h[k+264>>3]=b}m=0;n=m;i=e;return n|0}function dm(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0;n=i;o=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((o|0)==0){p=1;q=p;i=n;return q|0}do{if((c[o>>2]|0)!=101){m=cV(o)|0;r=m;if((m|0)==0){break}p=r;q=p;i=n;return q|0}}while(0);if((b|0)>0){s=a;t=b}else{s=1;t=1;b=a}r=0;m=f;f=0;u=aa(a,e)|0;v=0;while(1){if((v|0)>=(a|0)){break}w=+h[m>>3]+ +h[o+344>>3];x=j+(f<<3)|0;y=0;while(1){if((y|0)>=(t|0)){break}h[x>>3]=w;x=x+(u<<3)|0;y=y+1|0}v=v+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;x=j;j=k;k=l;y=0;while(1){if((y|0)>=(b|0)){break}z=+h[m>>3]+ +h[o+352>>3];A=z*+h[o+392>>3];B=A*A;C=+h[o+368>>3]+z*+h[o+400>>3];v=0;while(1){if((v|0)>=(s|0)){break}w=+h[x>>3];z=+Q(w*w+B);do{if(z==0.0){h[x>>3]=0.0;h[j>>3]=90.0;l=k;k=l+4|0;c[l>>2]=0;D=108}else{h[x>>3]=+cv(w,-0.0-A);E=z/C;F=E*+h[o+24>>3]/+Q(E*E+1.0);E=+cv(1.0,E);if(+P(+F)>1.0){if(+P(+F)>1.0000000000001){h[j>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;if((r|0)==0){l=b0(o+360|0,3,213552,213832,620,213416,(g=i,i=i+8|0,c[g>>2]=o+276,g)|0)|0;i=g;r=l}break}if(F<0.0){G=-0.0- +P(+90.0)}else{G=+P(+90.0)}F=G}else{F=+ct(F)}H=E-F;I=E+F+180.0;if(H>90.0){H=H-360.0}if(I>90.0){I=I-360.0}if(H>I){J=H}else{J=I}h[j>>3]=J;l=k;k=l+4|0;c[l>>2]=0;D=108}}while(0);if((D|0)==108){D=0}v=v+1|0;x=x+(e<<3)|0;j=j+(e<<3)|0}y=y+1|0;m=m+(d<<3)|0}p=r;q=p;i=n;return q|0}function dn(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0.0,E=0.0,F=0,G=0.0,H=0.0,I=0.0,J=0.0;n=i;i=i+32|0;o=n|0;p=n+8|0;q=n+16|0;r=n+24|0;s=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((s|0)==0){t=1;u=t;i=n;return u|0}do{if((c[s>>2]|0)!=101){m=cV(s)|0;v=m;if((m|0)==0){break}t=v;u=t;i=n;return u|0}}while(0);if((b|0)>0){w=a;x=b}else{w=1;x=1;b=a}v=0;m=f;f=0;y=aa(a,e)|0;z=0;while(1){if((z|0)>=(a|0)){break}cq(+h[m>>3],q,o);A=j+(f<<3)|0;B=k+(f<<3)|0;C=0;while(1){if((C|0)>=(x|0)){break}h[A>>3]=+h[q>>3];h[B>>3]=+h[o>>3];A=A+(y<<3)|0;B=B+(y<<3)|0;C=C+1|0}z=z+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;A=j;B=k;k=l;C=0;while(1){if((C|0)>=(b|0)){break}cq(+h[m>>3],r,p);z=0;while(1){if((z|0)>=(w|0)){break}D=+h[s+376>>3]*+h[B>>3];E=+h[s+24>>3]+ +h[r>>3]+ +h[p>>3]*D;if(E==0.0){h[A>>3]=0.0;h[B>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;if((v|0)==0){l=b0(s+360|0,4,213328,213832,713,213192,(F=i,i=i+8|0,c[F>>2]=s+276,F)|0)|0;i=F;v=l}}else{G=+h[s+368>>3]*+h[p>>3]/E;l=0;if((c[s+272>>2]&1|0)!=0){if(+h[m>>3]<+h[s+408>>3]){l=1;if((v|0)==0){j=b0(s+360|0,4,213328,213832,724,213192,(F=i,i=i+8|0,c[F>>2]=s+276,F)|0)|0;i=F;v=j}}else{if(+h[s+424>>3]>0.0){E=+h[s+24>>3]/+Q(D*D+1.0);if(+P(+E)<=1.0){D=+cu(-0.0-D);E=+ct(E);H=D-E;I=D+E+180.0;if(H>90.0){H=H-360.0}if(I>90.0){I=I-360.0}if(H>I){J=H}else{J=I}if(+h[m>>3]<J){l=1;if((v|0)==0){j=b0(s+360|0,4,213328,213832,741,213192,(F=i,i=i+8|0,c[F>>2]=s+276,F)|0)|0;i=F;v=j}}}}}}h[A>>3]=G*+h[A>>3]- +h[s+344>>3];h[B>>3]=(-0.0-G)*+h[B>>3]*+h[s+384>>3]- +h[s+352>>3];j=k;k=j+4|0;c[j>>2]=l}z=z+1|0;A=A+(e<<3)|0;B=B+(e<<3)|0}C=C+1|0;m=m+(d<<3)|0}t=v;u=t;i=n;return u|0}function dp(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0,G=0.0,H=0.0,I=0.0,J=0.0,K=0,L=0.0,M=0.0,N=0.0;n=i;o=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((o|0)==0){p=1;q=p;i=n;return q|0}do{if((c[o>>2]|0)!=102){m=cW(o)|0;r=m;if((m|0)==0){break}p=r;q=p;i=n;return q|0}}while(0);if((b|0)>0){s=a;t=b}else{s=1;t=1;b=a}r=0;m=f;f=0;u=aa(a,e)|0;v=0;while(1){if((v|0)>=(a|0)){break}w=(+h[m>>3]+ +h[o+344>>3])*+h[o+368>>3];x=j+(f<<3)|0;y=0;while(1){if((y|0)>=(t|0)){break}h[x>>3]=w;x=x+(u<<3)|0;y=y+1|0}v=v+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;x=j;j=k;k=l;y=0;while(1){if((y|0)>=(b|0)){break}z=(+h[m>>3]+ +h[o+352>>3])*+h[o+368>>3];v=0;while(1){if((v|0)>=(s|0)){break}w=+h[x>>3];A=w*w+z*z;B=(w- +h[o+376>>3])/+h[o+392>>3];C=(z- +h[o+384>>3])/+h[o+392>>3];D=w*B+z*C;L251:do{if(A<1.0e-10){E=A/2.0;h[j>>3]=90.0-57.29577951308232*+Q(A/(1.0+D));F=222}else{G=B*B+C*C;H=G+1.0;I=D-G;J=I*I-H*(A-D-D+G-1.0);if(J<0.0){h[x>>3]=0.0;h[j>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;if((r|0)==0){l=b0(o+360|0,3,213080,213832,926,213416,(K=i,i=i+8|0,c[K>>2]=o+276,K)|0)|0;i=K;r=l}break}J=+Q(J);G=(-0.0-I+J)/H;L=(-0.0-I-J)/H;if(G>L){M=G}else{M=L}H=M;if(H>1.0){if(H-1.0<1.0e-13){H=1.0}else{if(G<L){N=G}else{N=L}H=N}}if(H<-1.0){if(H+1.0>-1.0e-13){H=-1.0}}do{if(H<=1.0){if(H<-1.0){break}h[j>>3]=+ct(H);E=1.0-H;F=222;break L251}}while(0);h[x>>3]=0.0;h[j>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;if((r|0)==0){l=b0(o+360|0,3,213080,213832,953,213416,(K=i,i=i+8|0,c[K>>2]=o+276,K)|0)|0;i=K;r=l}}}while(0);if((F|0)==222){F=0;h[x>>3]=+cv(w-B*E,-0.0-(z-C*E));l=k;k=l+4|0;c[l>>2]=0}v=v+1|0;x=x+(e<<3)|0;j=j+(e<<3)|0}y=y+1|0;m=m+(d<<3)|0}p=r;q=p;i=n;return q|0}function dq(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0.0,C=0.0,D=0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0;n=i;i=i+16|0;o=n|0;p=n+8|0;q=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((q|0)==0){r=1;s=r;i=n;return s|0}do{if((c[q>>2]|0)!=102){m=cW(q)|0;t=m;if((m|0)==0){break}r=t;s=r;i=n;return s|0}}while(0);if((b|0)>0){u=a;v=b}else{u=1;v=1;b=a}t=0;m=f;f=0;w=aa(a,e)|0;x=0;while(1){if((x|0)>=(a|0)){break}cq(+h[m>>3],p,o);y=j+(f<<3)|0;z=k+(f<<3)|0;A=0;while(1){if((A|0)>=(v|0)){break}h[y>>3]=+h[p>>3];h[z>>3]=+h[o>>3];y=y+(w<<3)|0;z=z+(w<<3)|0;A=A+1|0}x=x+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;y=j;z=k;k=l;A=0;while(1){if((A|0)>=(b|0)){break}B=1.0- +cp(+h[m>>3]);C=+h[q+392>>3]-B;if(C==0.0){x=0;while(1){if((x|0)>=(u|0)){break}h[y>>3]=0.0;h[z>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;x=x+1|0;y=y+(e<<3)|0;z=z+(e<<3)|0}if((t|0)==0){l=b0(q+360|0,4,213072,213832,1040,213192,(D=i,i=i+8|0,c[D>>2]=q+276,D)|0)|0;i=D;t=l}}else{E=+h[q+416>>3];F=E*+co(+h[m>>3])/C;E=+h[q+400>>3]*B/C+ +h[q+344>>3];G=+h[q+408>>3]*B/C+ +h[q+352>>3];x=0;while(1){if((x|0)>=(u|0)){break}l=0;if((c[q+272>>2]&1|0)!=0){if(+h[m>>3]<+h[q+432>>3]){l=1;if((t|0)==0){j=b0(q+360|0,4,213072,213832,1054,213192,(D=i,i=i+8|0,c[D>>2]=q+276,D)|0)|0;i=D;t=j}}else{if(+P(+(+h[q+24>>3]))>1.0){B=+h[q+376>>3]*+h[y>>3]- +h[q+384>>3]*+h[z>>3];C=1.0/+Q(+h[q+424>>3]+B*B);if(+P(+C)<=1.0){B=+cv(B,+h[q+392>>3]-1.0);C=+ct(C);H=B-C;I=B+C+180.0;if(H>90.0){H=H-360.0}if(I>90.0){I=I-360.0}if(H>I){J=H}else{J=I}if(+h[m>>3]<J){l=1;if((t|0)==0){j=b0(q+360|0,4,213072,213832,1072,213192,(D=i,i=i+8|0,c[D>>2]=q+276,D)|0)|0;i=D;t=j}}}}}}h[y>>3]=F*+h[y>>3]-E;h[z>>3]=(-0.0-F)*+h[z>>3]-G;j=k;k=j+4|0;c[j>>2]=l;x=x+1|0;y=y+(e<<3)|0;z=z+(e<<3)|0}}A=A+1|0;m=m+(d<<3)|0}r=t;s=r;i=n;return s|0}function dr(a,b,d,e,f,g,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0,w=0.0,x=0.0,y=0.0;m=a;a=b;b=d;d=e;e=f;f=g;g=i;i=j;j=k;k=l;if((m|0)==0){n=1;o=n;return o|0}do{if((c[m>>2]|0)!=103){l=cX(m)|0;if((l|0)==0){break}n=l;o=n;return o|0}}while(0);if((b|0)>0){p=a;q=b}else{p=1;q=1;b=a}l=f;f=0;r=aa(a,e)|0;s=0;while(1){if((s|0)>=(a|0)){break}t=+h[l>>3]+ +h[m+344>>3];u=i+(f<<3)|0;v=0;while(1){if((v|0)>=(q|0)){break}h[u>>3]=t;u=u+(r<<3)|0;v=v+1|0}s=s+1|0;f=f+e|0;l=l+(d<<3)|0}l=g;u=i;i=j;j=k;v=0;while(1){if((v|0)>=(b|0)){break}w=+h[l>>3]+ +h[m+352>>3];x=w*w;s=0;while(1){if((s|0)>=(p|0)){break}t=+h[u>>3];y=+Q(t*t+x);if(y==0.0){h[u>>3]=0.0}else{h[u>>3]=+cv(t,-0.0-w)}h[i>>3]=+cv(+h[m+8>>3],y);k=j;j=k+4|0;c[k>>2]=0;s=s+1|0;u=u+(e<<3)|0;i=i+(e<<3)|0}v=v+1|0;l=l+(d<<3)|0}n=0;o=n;return o|0}function ds(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0.0,C=0,D=0.0,E=0.0;n=i;i=i+16|0;o=n|0;p=n+8|0;q=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((q|0)==0){r=1;s=r;i=n;return s|0}do{if((c[q>>2]|0)!=103){m=cX(q)|0;t=m;if((m|0)==0){break}r=t;s=r;i=n;return s|0}}while(0);if((b|0)>0){u=a;v=b}else{u=1;v=1;b=a}t=0;m=f;f=0;w=aa(a,e)|0;x=0;while(1){if((x|0)>=(a|0)){break}cq(+h[m>>3],p,o);y=j+(f<<3)|0;z=k+(f<<3)|0;A=0;while(1){if((A|0)>=(v|0)){break}h[y>>3]=+h[p>>3];h[z>>3]=+h[o>>3];y=y+(w<<3)|0;z=z+(w<<3)|0;A=A+1|0}x=x+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;y=j;z=k;k=l;A=0;while(1){if((A|0)>=(b|0)){break}B=+cp(+h[m>>3]);if(B==0.0){x=0;while(1){if((x|0)>=(u|0)){break}h[y>>3]=0.0;h[z>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;x=x+1|0;y=y+(e<<3)|0;z=z+(e<<3)|0}if((t|0)==0){l=b0(q+360|0,4,213048,213832,1276,213192,(C=i,i=i+8|0,c[C>>2]=q+276,C)|0)|0;i=C;t=l}}else{D=+h[q+8>>3];E=D*+co(+h[m>>3])/B;l=0;if((c[q+272>>2]&1|0)!=0){if(B<0.0){l=1;if((t|0)==0){j=b0(q+360|0,4,213048,213832,1286,213192,(C=i,i=i+8|0,c[C>>2]=q+276,C)|0)|0;i=C;t=j}}}x=0;while(1){if((x|0)>=(u|0)){break}h[y>>3]=E*+h[y>>3]- +h[q+344>>3];h[z>>3]=(-0.0-E)*+h[z>>3]- +h[q+352>>3];j=k;k=j+4|0;c[j>>2]=l;x=x+1|0;y=y+(e<<3)|0;z=z+(e<<3)|0}}A=A+1|0;m=m+(d<<3)|0}r=t;s=r;i=n;return s|0}function dt(a,b,d,e,f,g,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0,w=0.0,x=0.0,y=0.0;m=a;a=b;b=d;d=e;e=f;f=g;g=i;i=j;j=k;k=l;if((m|0)==0){n=1;o=n;return o|0}do{if((c[m>>2]|0)!=104){l=cY(m)|0;if((l|0)==0){break}n=l;o=n;return o|0}}while(0);if((b|0)>0){p=a;q=b}else{p=1;q=1;b=a}l=f;f=0;r=aa(a,e)|0;s=0;while(1){if((s|0)>=(a|0)){break}t=+h[l>>3]+ +h[m+344>>3];u=i+(f<<3)|0;v=0;while(1){if((v|0)>=(q|0)){break}h[u>>3]=t;u=u+(r<<3)|0;v=v+1|0}s=s+1|0;f=f+e|0;l=l+(d<<3)|0}l=g;u=i;i=j;j=k;v=0;while(1){if((v|0)>=(b|0)){break}w=+h[l>>3]+ +h[m+352>>3];x=w*w;s=0;while(1){if((s|0)>=(p|0)){break}t=+h[u>>3];y=+Q(t*t+x);if(y==0.0){h[u>>3]=0.0}else{h[u>>3]=+cv(t,-0.0-w)}h[i>>3]=90.0- +cu(y*+h[m+376>>3])*2.0;k=j;j=k+4|0;c[k>>2]=0;s=s+1|0;u=u+(e<<3)|0;i=i+(e<<3)|0}v=v+1|0;l=l+(d<<3)|0}n=0;o=n;return o|0}function du(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0.0,C=0.0,D=0.0;n=i;i=i+16|0;o=n|0;p=n+8|0;q=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((q|0)==0){r=1;s=r;i=n;return s|0}do{if((c[q>>2]|0)!=104){m=cY(q)|0;t=m;if((m|0)==0){break}r=t;s=r;i=n;return s|0}}while(0);if((b|0)>0){u=a;v=b}else{u=1;v=1;b=a}t=0;m=f;f=0;w=aa(a,e)|0;x=0;while(1){if((x|0)>=(a|0)){break}cq(+h[m>>3],p,o);y=j+(f<<3)|0;z=k+(f<<3)|0;A=0;while(1){if((A|0)>=(v|0)){break}h[y>>3]=+h[p>>3];h[z>>3]=+h[o>>3];y=y+(w<<3)|0;z=z+(w<<3)|0;A=A+1|0}x=x+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;y=j;z=k;k=l;A=0;while(1){if((A|0)>=(b|0)){break}B=+cp(+h[m>>3])+1.0;if(B==0.0){x=0;while(1){if((x|0)>=(u|0)){break}h[y>>3]=0.0;h[z>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;x=x+1|0;y=y+(e<<3)|0;z=z+(e<<3)|0}if((t|0)==0){l=b0(q+360|0,4,212936,213832,1497,213192,(j=i,i=i+8|0,c[j>>2]=q+276,j)|0)|0;i=j;t=l}}else{C=+h[q+368>>3];D=C*+co(+h[m>>3])/B;x=0;while(1){if((x|0)>=(u|0)){break}h[y>>3]=D*+h[y>>3]- +h[q+344>>3];h[z>>3]=(-0.0-D)*+h[z>>3]- +h[q+352>>3];l=k;k=l+4|0;c[l>>2]=0;x=x+1|0;y=y+(e<<3)|0;z=z+(e<<3)|0}}A=A+1|0;m=m+(d<<3)|0}r=t;s=r;i=n;return s|0}function dv(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0.0,t=0.0,u=0,v=0,w=0,x=0,y=0.0,z=0,A=0,B=0.0,C=0.0,D=0.0,E=0,F=0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0;n=i;o=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((o|0)==0){p=1;q=p;i=n;return q|0}do{if((c[o>>2]|0)!=105){m=cZ(o)|0;r=m;if((m|0)==0){break}p=r;q=p;i=n;return q|0}}while(0);s=+h[o+24>>3];t=+h[o+32>>3];if((b|0)>0){u=a;v=b}else{u=1;v=1;b=a}r=0;m=f;f=0;w=aa(a,e)|0;x=0;while(1){if((x|0)>=(a|0)){break}y=(+h[m>>3]+ +h[o+344>>3])*+h[o+368>>3];z=j+(f<<3)|0;A=0;while(1){if((A|0)>=(v|0)){break}h[z>>3]=y;z=z+(w<<3)|0;A=A+1|0}x=x+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;z=j;j=k;k=l;A=0;while(1){if((A|0)>=(b|0)){break}B=(+h[m>>3]+ +h[o+352>>3])*+h[o+368>>3];C=B*B;x=0;while(1){if((x|0)>=(u|0)){break}y=+h[z>>3];D=y*y+C;L597:do{if(+h[o+376>>3]==0.0){if(D!=0.0){h[z>>3]=+cv(y,-0.0-B)}else{h[z>>3]=0.0}do{if(D<.5){h[j>>3]=+cs(+Q(D))}else{if(D<=1.0){h[j>>3]=+ct(+Q(1.0-D));break}l=k;k=l+4|0;c[l>>2]=1;if((r|0)==0){l=b0(o+360|0,3,212800,213832,1655,213416,(E=i,i=i+8|0,c[E>>2]=o+276,E)|0)|0;i=E;r=l}break L597}}while(0);F=508}else{G=y*s+B*t;L615:do{if(D<1.0e-10){H=D/2.0;h[j>>3]=90.0-57.29577951308232*+Q(D/(1.0+G))}else{I=+h[o+384>>3];J=G- +h[o+376>>3];K=J*J-I*(D-G-G+ +h[o+392>>3]);if(K<0.0){h[z>>3]=0.0;h[j>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;if((r|0)==0){l=b0(o+360|0,3,212800,213832,1679,213416,(E=i,i=i+8|0,c[E>>2]=o+276,E)|0)|0;i=E;r=l}break L597}K=+Q(K);L=(-0.0-J+K)/I;M=(-0.0-J-K)/I;if(L>M){N=L}else{N=M}I=N;if(I>1.0){if(I-1.0<1.0e-13){I=1.0}else{if(L<M){O=L}else{O=M}I=O}}if(I<-1.0){if(I+1.0>-1.0e-13){I=-1.0}}do{if(I<=1.0){if(I<-1.0){break}h[j>>3]=+ct(I);H=1.0-I;break L615}}while(0);h[z>>3]=0.0;h[j>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;if((r|0)==0){l=b0(o+360|0,3,212800,213832,1706,213416,(E=i,i=i+8|0,c[E>>2]=o+276,E)|0)|0;i=E;r=l}break L597}}while(0);G=-0.0-B+t*H;I=y-s*H;do{if(G==0.0){if(I!=0.0){F=506;break}h[z>>3]=0.0}else{F=506}}while(0);if((F|0)==506){F=0;h[z>>3]=+cv(I,G)}F=508}}while(0);if((F|0)==508){F=0;l=k;k=l+4|0;c[l>>2]=0}x=x+1|0;z=z+(e<<3)|0;j=j+(e<<3)|0}A=A+1|0;m=m+(d<<3)|0}p=r;q=p;i=n;return q|0}function dw(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0.0,C=0.0,D=0.0,E=0.0,F=0,G=0,H=0.0,I=0.0;n=i;i=i+16|0;o=n|0;p=n+8|0;q=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((q|0)==0){r=1;s=r;i=n;return s|0}do{if((c[q>>2]|0)!=105){m=cZ(q)|0;t=m;if((m|0)==0){break}r=t;s=r;i=n;return s|0}}while(0);if((b|0)>0){u=a;v=b}else{u=1;v=1;b=a}t=0;m=f;f=0;w=aa(a,e)|0;x=0;while(1){if((x|0)>=(a|0)){break}cq(+h[m>>3],p,o);y=j+(f<<3)|0;z=k+(f<<3)|0;A=0;while(1){if((A|0)>=(v|0)){break}h[y>>3]=+h[p>>3];h[z>>3]=+h[o>>3];y=y+(w<<3)|0;z=z+(w<<3)|0;A=A+1|0}x=x+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;y=j;z=k;k=l;A=0;while(1){if((A|0)>=(b|0)){break}B=(90.0- +P(+(+h[m>>3])))*3.141592653589793/180.0;if(B<1.0e-5){if(+h[m>>3]>0.0){C=B*B/2.0}else{C=2.0-B*B/2.0}D=B}else{C=1.0- +cp(+h[m>>3]);D=+co(+h[m>>3])}E=+h[q+8>>3]*D;if(+h[q+376>>3]==0.0){F=0;if((c[q+272>>2]&1|0)!=0){if(+h[m>>3]<0.0){F=1;if((t|0)==0){l=b0(q+360|0,4,212736,213832,1810,213192,(G=i,i=i+8|0,c[G>>2]=q+276,G)|0)|0;i=G;t=l}}}x=0;while(1){if((x|0)>=(u|0)){break}h[y>>3]=E*+h[y>>3]- +h[q+344>>3];h[z>>3]=(-0.0-E)*+h[z>>3]- +h[q+352>>3];l=k;k=l+4|0;c[l>>2]=F;x=x+1|0;y=y+(e<<3)|0;z=z+(e<<3)|0}}else{C=C*+h[q+8>>3];H=+h[q+24>>3]*C- +h[q+344>>3];I=+h[q+32>>3]*C- +h[q+352>>3];x=0;while(1){if((x|0)>=(u|0)){break}F=0;if((c[q+272>>2]&1|0)!=0){B=-0.0- +cu(+h[q+24>>3]*+h[y>>3]- +h[q+32>>3]*+h[z>>3]);if(+h[m>>3]<B){F=1;if((t|0)==0){l=b0(q+360|0,4,212736,213832,1832,213192,(G=i,i=i+8|0,c[G>>2]=q+276,G)|0)|0;i=G;t=l}}}h[y>>3]=E*+h[y>>3]+H;h[z>>3]=(-0.0-E)*+h[z>>3]+I;l=k;k=l+4|0;c[l>>2]=F;x=x+1|0;y=y+(e<<3)|0;z=z+(e<<3)|0}}A=A+1|0;m=m+(d<<3)|0}r=t;s=r;i=n;return s|0}function dx(a,b,d,e,f,g,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0,w=0.0,x=0.0,y=0.0;m=a;a=b;b=d;d=e;e=f;f=g;g=i;i=j;j=k;k=l;if((m|0)==0){n=1;o=n;return o|0}do{if((c[m>>2]|0)!=106){l=c_(m)|0;if((l|0)==0){break}n=l;o=n;return o|0}}while(0);if((b|0)>0){p=a;q=b}else{p=1;q=1;b=a}l=f;f=0;r=aa(a,e)|0;s=0;while(1){if((s|0)>=(a|0)){break}t=+h[l>>3]+ +h[m+344>>3];u=i+(f<<3)|0;v=0;while(1){if((v|0)>=(q|0)){break}h[u>>3]=t;u=u+(r<<3)|0;v=v+1|0}s=s+1|0;f=f+e|0;l=l+(d<<3)|0}l=g;u=i;i=j;j=k;v=0;while(1){if((v|0)>=(b|0)){break}w=+h[l>>3]+ +h[m+352>>3];x=w*w;s=0;while(1){if((s|0)>=(p|0)){break}t=+h[u>>3];y=+Q(t*t+x);if(y==0.0){h[u>>3]=0.0;h[i>>3]=90.0}else{h[u>>3]=+cv(t,-0.0-w);h[i>>3]=90.0-y*+h[m+376>>3]}k=j;j=k+4|0;c[k>>2]=0;s=s+1|0;u=u+(e<<3)|0;i=i+(e<<3)|0}v=v+1|0;l=l+(d<<3)|0}n=0;o=n;return o|0}function dy(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0.0;n=i;i=i+16|0;o=n|0;p=n+8|0;q=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((q|0)==0){r=1;s=r;i=n;return s|0}do{if((c[q>>2]|0)!=106){m=c_(q)|0;if((m|0)==0){break}r=m;s=r;i=n;return s|0}}while(0);if((b|0)>0){t=a;u=b}else{t=1;u=1;b=a}m=f;f=0;v=aa(a,e)|0;w=0;while(1){if((w|0)>=(a|0)){break}cq(+h[m>>3],p,o);x=j+(f<<3)|0;y=k+(f<<3)|0;z=0;while(1){if((z|0)>=(u|0)){break}h[x>>3]=+h[p>>3];h[y>>3]=+h[o>>3];x=x+(v<<3)|0;y=y+(v<<3)|0;z=z+1|0}w=w+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;x=j;y=k;k=l;z=0;while(1){if((z|0)>=(b|0)){break}A=+h[q+368>>3]*(90.0- +h[m>>3]);w=0;while(1){if((w|0)>=(t|0)){break}h[x>>3]=A*+h[x>>3]- +h[q+344>>3];h[y>>3]=(-0.0-A)*+h[y>>3]- +h[q+352>>3];l=k;k=l+4|0;c[l>>2]=0;w=w+1|0;x=x+(e<<3)|0;y=y+(e<<3)|0}z=z+1|0;m=m+(d<<3)|0}r=0;s=r;i=n;return s|0}function dz(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0.0,y=0,z=0,A=0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0,J=0.0,K=0.0,L=0.0,M=0.0;n=i;o=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((o|0)==0){p=1;q=p;i=n;return q|0}do{if((c[o>>2]|0)!=107){m=c$(o)|0;r=m;if((m|0)==0){break}p=r;q=p;i=n;return q|0}}while(0);m=c[o+452>>2]|0;if((b|0)>0){s=a;t=b}else{s=1;t=1;b=a}r=0;u=f;f=0;v=aa(a,e)|0;w=0;while(1){if((w|0)>=(a|0)){break}x=+h[u>>3]+ +h[o+344>>3];y=j+(f<<3)|0;z=0;while(1){if((z|0)>=(t|0)){break}h[y>>3]=x;y=y+(v<<3)|0;z=z+1|0}w=w+1|0;f=f+e|0;u=u+(d<<3)|0}u=g;y=j;j=k;k=l;z=0;L842:while(1){if((z|0)>=(b|0)){A=733;break}B=+h[u>>3]+ +h[o+352>>3];C=B*B;w=0;while(1){if((w|0)>=(s|0)){break}x=+h[y>>3];D=+Q(x*x+C);E=D/+h[o+8>>3];if(E==0.0){h[y>>3]=0.0}else{h[y>>3]=+cv(x,-0.0-B)}if((m|0)<1){A=660;break L842}L853:do{if((m|0)==1){F=(E- +h[o+16>>3])/+h[o+24>>3];A=728}else{if((m|0)==2){D=+h[o+32>>3];G=+h[o+24>>3];H=G*G-4.0*D*(+h[o+16>>3]-E);if(H<0.0){h[j>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;if((r|0)==0){l=b0(o+360|0,3,212608,213832,2259,213416,(I=i,i=i+8|0,c[I>>2]=o+276,I)|0)|0;i=I;r=l}break}H=+Q(H);J=(-0.0-G+H)/(2.0*D);K=(-0.0-G-H)/(2.0*D);if(J<K){L=J}else{L=K}F=L;if(F<-1.0e-13){if(J>K){M=J}else{M=K}F=M}do{if(F<0.0){if(F>=-1.0e-13){F=0.0;break}h[j>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;if((r|0)==0){l=b0(o+360|0,3,212608,213832,2273,213416,(I=i,i=i+8|0,c[I>>2]=o+276,I)|0)|0;i=I;r=l}break L853}else{do{if(F>3.141592653589793){if(F<=3.141592653589893){F=3.141592653589793;break}h[j>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;if((r|0)==0){l=b0(o+360|0,3,212608,213832,2281,213416,(I=i,i=i+8|0,c[I>>2]=o+276,I)|0)|0;i=I;r=l}break L853}}while(0)}}while(0)}else{J=0.0;D=+h[o+16>>3];K=+h[o+368>>3];H=+h[o+376>>3];do{if(E<D){if(E>=D-1.0e-13){F=J;break}h[j>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;if((r|0)==0){l=b0(o+360|0,3,212608,213832,2297,213416,(I=i,i=i+8|0,c[I>>2]=o+276,I)|0)|0;i=I;r=l}break L853}else{do{if(E>H){if(E<=H+1.0e-13){F=K;break}h[j>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;if((r|0)==0){l=b0(o+360|0,3,212608,213832,2305,213416,(I=i,i=i+8|0,c[I>>2]=o+276,I)|0)|0;i=I;r=l}break L853}else{l=0;while(1){if((l|0)>=100){break}G=(H-E)/(H-D);if(G<.1){G=.1}else{if(G>.9){G=.9}}F=K-G*(K-J);G=0.0;g=m;while(1){if((g|0)<0){break}G=G*F+ +h[o+16+(g<<3)>>3];g=g-1|0}if(G<E){if(E-G<1.0e-13){A=715;break}D=G;J=F}else{if(G-E<1.0e-13){A=718;break}H=G;K=F}if(+P(+(K-J))<1.0e-13){A=721;break}l=l+1|0}if((A|0)==715){A=0}else if((A|0)==718){A=0}else if((A|0)==721){A=0}}}while(0)}}while(0)}A=728}}while(0);if((A|0)==728){A=0;h[j>>3]=90.0-F*180.0/3.141592653589793;l=k;k=l+4|0;c[l>>2]=0}w=w+1|0;y=y+(e<<3)|0;j=j+(e<<3)|0}z=z+1|0;u=u+(d<<3)|0}if((A|0)==660){d=b0(o+360|0,2,212608,213832,2245,213688,(I=i,i=i+8|0,c[I>>2]=o+276,I)|0)|0;i=I;p=d;q=p;i=n;return q|0}else if((A|0)==733){p=r;q=p;i=n;return q|0}return 0}function dA(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0.0,C=0.0;n=i;i=i+16|0;o=n|0;p=n+8|0;q=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((q|0)==0){r=1;s=r;i=n;return s|0}do{if((c[q>>2]|0)!=107){m=c$(q)|0;t=m;if((m|0)==0){break}r=t;s=r;i=n;return s|0}}while(0);if((b|0)>0){u=a;v=b}else{u=1;v=1;b=a}t=0;m=f;f=0;w=aa(a,e)|0;x=0;while(1){if((x|0)>=(a|0)){break}cq(+h[m>>3],p,o);y=j+(f<<3)|0;z=k+(f<<3)|0;A=0;while(1){if((A|0)>=(v|0)){break}h[y>>3]=+h[p>>3];h[z>>3]=+h[o>>3];y=y+(w<<3)|0;z=z+(w<<3)|0;A=A+1|0}x=x+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;y=j;z=k;k=l;A=0;while(1){if((A|0)>=(b|0)){break}B=(90.0- +h[m>>3])*3.141592653589793/180.0;C=0.0;l=c[q+452>>2]|0;while(1){if((l|0)<0){break}C=C*B+ +h[q+16+(l<<3)>>3];l=l-1|0}C=C*+h[q+8>>3];l=0;if((c[q+272>>2]&1|0)!=0){if(B>+h[q+368>>3]){l=1;if((t|0)==0){j=b0(q+360|0,4,212584,213832,2422,213192,(g=i,i=i+8|0,c[g>>2]=q+276,g)|0)|0;i=g;t=j}}}x=0;while(1){if((x|0)>=(u|0)){break}h[y>>3]=C*+h[y>>3]- +h[q+344>>3];h[z>>3]=(-0.0-C)*+h[z>>3]- +h[q+352>>3];j=k;k=j+4|0;c[j>>2]=l;x=x+1|0;y=y+(e<<3)|0;z=z+(e<<3)|0}A=A+1|0;m=m+(d<<3)|0}r=t;s=r;i=n;return s|0}function dB(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0;n=i;o=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((o|0)==0){p=1;q=p;i=n;return q|0}do{if((c[o>>2]|0)!=108){m=c0(o)|0;r=m;if((m|0)==0){break}p=r;q=p;i=n;return q|0}}while(0);if((b|0)>0){s=a;t=b}else{s=1;t=1;b=a}r=0;m=f;f=0;u=aa(a,e)|0;v=0;while(1){if((v|0)>=(a|0)){break}w=+h[m>>3]+ +h[o+344>>3];x=j+(f<<3)|0;y=0;while(1){if((y|0)>=(t|0)){break}h[x>>3]=w;x=x+(u<<3)|0;y=y+1|0}v=v+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;x=j;j=k;k=l;y=0;while(1){if((y|0)>=(b|0)){break}z=+h[m>>3]+ +h[o+352>>3];A=z*z;v=0;while(1){if((v|0)>=(s|0)){break}w=+h[x>>3];B=+Q(w*w+A);if(B==0.0){h[x>>3]=0.0}else{h[x>>3]=+cv(w,-0.0-z)}C=B*+h[o+376>>3];do{if(+P(+C)>1.0){if(+P(+(B- +h[o+368>>3]))<1.0e-12){h[j>>3]=-90.0;D=811;break}h[j>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;if((r|0)==0){l=b0(o+360|0,3,212440,213832,2567,213416,(g=i,i=i+8|0,c[g>>2]=o+276,g)|0)|0;i=g;r=l}}else{h[j>>3]=90.0- +ct(C)*2.0;D=811}}while(0);if((D|0)==811){D=0;l=k;k=l+4|0;c[l>>2]=0}v=v+1|0;x=x+(e<<3)|0;j=j+(e<<3)|0}y=y+1|0;m=m+(d<<3)|0}p=r;q=p;i=n;return q|0}function dC(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0.0,B=0.0;n=i;i=i+16|0;o=n|0;p=n+8|0;q=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((q|0)==0){r=1;s=r;i=n;return s|0}do{if((c[q>>2]|0)!=108){m=c0(q)|0;if((m|0)==0){break}r=m;s=r;i=n;return s|0}}while(0);if((b|0)>0){t=a;u=b}else{t=1;u=1;b=a}m=f;f=0;v=aa(a,e)|0;w=0;while(1){if((w|0)>=(a|0)){break}cq(+h[m>>3],p,o);x=j+(f<<3)|0;y=k+(f<<3)|0;z=0;while(1){if((z|0)>=(u|0)){break}h[x>>3]=+h[p>>3];h[y>>3]=+h[o>>3];x=x+(v<<3)|0;y=y+(v<<3)|0;z=z+1|0}w=w+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;x=j;y=k;k=l;z=0;while(1){if((z|0)>=(b|0)){break}A=+h[q+368>>3];B=A*+cp((90.0- +h[m>>3])/2.0);w=0;while(1){if((w|0)>=(t|0)){break}h[x>>3]=B*+h[x>>3]- +h[q+344>>3];h[y>>3]=(-0.0-B)*+h[y>>3]- +h[q+352>>3];l=k;k=l+4|0;c[l>>2]=0;w=w+1|0;x=x+(e<<3)|0;y=y+(e<<3)|0}z=z+1|0;m=m+(d<<3)|0}r=0;s=r;i=n;return s|0}function dD(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0,L=0.0,M=0.0;n=i;o=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((o|0)==0){p=1;q=p;i=n;return q|0}do{if((c[o>>2]|0)!=109){m=c1(o)|0;r=m;if((m|0)==0){break}p=r;q=p;i=n;return q|0}}while(0);if((b|0)>0){s=a;t=b}else{s=1;t=1;b=a}r=0;m=f;f=0;u=aa(a,e)|0;v=0;while(1){if((v|0)>=(a|0)){break}w=+h[m>>3]+ +h[o+344>>3];x=j+(f<<3)|0;y=0;while(1){if((y|0)>=(t|0)){break}h[x>>3]=w;x=x+(u<<3)|0;y=y+1|0}v=v+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;x=j;j=k;k=l;y=0;while(1){if((y|0)>=(b|0)){break}z=+h[m>>3]+ +h[o+352>>3];A=z*z;v=0;while(1){if((v|0)>=(s|0)){break}w=+h[x>>3];B=+Q(w*w+A);C=B/+h[o+368>>3];if(C==0.0){h[x>>3]=0.0}else{h[x>>3]=+cv(w,-0.0-z)}L1132:do{if(C==0.0){D=0.0;E=910}else{do{if(C<+h[o+408>>3]){D=C*+h[o+416>>3]}else{B=1.0;F=1.0;G=0.0;H=0.0;l=0;while(1){if((l|0)>=30){break}B=F/2.0;I=+Q(1.0-B*B)/B;J=+_(B)/I;G=-0.0-(J+ +h[o+376>>3]*I);if(G>=C){E=881;break}F=B;H=G;l=l+1|0}if((E|0)==881){E=0}if((l|0)==30){h[j>>3]=0.0;g=k;k=g+4|0;c[g>>2]=1;if((r|0)==0){g=b0(o+360|0,3,221768,213832,2820,213416,(K=i,i=i+8|0,c[K>>2]=o+276,K)|0)|0;i=K;r=g}break L1132}l=0;while(1){if((l|0)>=100){break}J=(G-C)/(G-H);if(J<.1){J=.1}else{if(J>.9){J=.9}}L=B-J*(B-F);I=+Q(1.0-L*L)/L;J=+_(L)/I;M=-0.0-(J+ +h[o+376>>3]*I);if(M<C){if(C-M<1.0e-12){E=897;break}H=M;F=L}else{if(M-C<1.0e-12){E=900;break}G=M;B=L}l=l+1|0}if((E|0)==897){E=0}else if((E|0)==900){E=0}if((l|0)!=100){D=+cs(L);break}h[j>>3]=0.0;g=k;k=g+4|0;c[g>>2]=1;if((r|0)==0){g=b0(o+360|0,3,221768,213832,2850,213416,(K=i,i=i+8|0,c[K>>2]=o+276,K)|0)|0;i=K;r=g}break L1132}}while(0);E=910}}while(0);if((E|0)==910){E=0;h[j>>3]=90.0-2.0*D;g=k;k=g+4|0;c[g>>2]=0}v=v+1|0;x=x+(e<<3)|0;j=j+(e<<3)|0}y=y+1|0;m=m+(d<<3)|0}p=r;q=p;i=n;return q|0}function dE(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0.0,C=0.0,D=0.0,E=0.0;n=i;i=i+16|0;o=n|0;p=n+8|0;q=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((q|0)==0){r=1;s=r;i=n;return s|0}do{if((c[q>>2]|0)!=109){m=c1(q)|0;t=m;if((m|0)==0){break}r=t;s=r;i=n;return s|0}}while(0);if((b|0)>0){u=a;v=b}else{u=1;v=1;b=a}t=0;m=f;f=0;w=aa(a,e)|0;x=0;while(1){if((x|0)>=(a|0)){break}cq(+h[m>>3],p,o);y=j+(f<<3)|0;z=k+(f<<3)|0;A=0;while(1){if((A|0)>=(v|0)){break}h[y>>3]=+h[p>>3];h[z>>3]=+h[o>>3];y=y+(w<<3)|0;z=z+(w<<3)|0;A=A+1|0}x=x+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;y=j;z=k;k=l;A=0;while(1){if((A|0)>=(b|0)){break}l=0;if(+h[m>>3]==90.0){B=0.0}else{if(+h[m>>3]>-90.0){C=(90.0- +h[m>>3])*.017453292519943295/2.0;if(C<+h[q+400>>3]){B=C*+h[q+392>>3]}else{C=+co((90.0- +h[m>>3])/2.0);D=+Q(1.0-C*C)/C;E=+_(C)/D;B=(-0.0- +h[q+368>>3])*(E+ +h[q+376>>3]*D)}}else{B=0.0;l=1;if((t|0)==0){j=b0(q+360|0,4,221760,213832,2941,213192,(g=i,i=i+8|0,c[g>>2]=q+276,g)|0)|0;i=g;t=j}}}x=0;while(1){if((x|0)>=(u|0)){break}h[y>>3]=B*+h[y>>3]- +h[q+344>>3];h[z>>3]=(-0.0-B)*+h[z>>3]- +h[q+352>>3];j=k;k=j+4|0;c[j>>2]=l;x=x+1|0;y=y+(e<<3)|0;z=z+(e<<3)|0}A=A+1|0;m=m+(d<<3)|0}r=t;s=r;i=n;return s|0}function dF(a,b,d,e,f,g,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0,w=0.0,x=0.0;m=a;a=b;b=d;d=e;e=f;f=g;g=i;i=j;j=k;k=l;if((m|0)==0){n=1;o=n;return o|0}do{if((c[m>>2]|0)!=201){l=c2(m)|0;if((l|0)==0){break}n=l;o=n;return o|0}}while(0);if((b|0)>0){p=a;q=b}else{p=1;q=1;b=a}l=f;f=0;r=aa(a,e)|0;s=0;while(1){if((s|0)>=(a|0)){break}t=+h[m+376>>3]*(+h[l>>3]+ +h[m+344>>3]);u=i+(f<<3)|0;v=0;while(1){if((v|0)>=(q|0)){break}h[u>>3]=t;u=u+(r<<3)|0;v=v+1|0}s=s+1|0;f=f+e|0;l=l+(d<<3)|0}l=g;g=j;j=k;v=0;while(1){if((v|0)>=(b|0)){break}t=+h[m+392>>3]*(+h[l>>3]+ +h[m+352>>3]);w=+cv(t,1.0);x=w+ +ct(t*+h[m+24>>3]/+Q(t*t+1.0));s=0;while(1){if((s|0)>=(p|0)){break}h[g>>3]=x;k=j;j=k+4|0;c[k>>2]=0;s=s+1|0;g=g+(e<<3)|0}v=v+1|0;l=l+(d<<3)|0}n=0;o=n;return o|0}function dG(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0.0;n=i;o=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((o|0)==0){p=1;q=p;i=n;return q|0}do{if((c[o>>2]|0)!=201){m=c2(o)|0;r=m;if((m|0)==0){break}p=r;q=p;i=n;return q|0}}while(0);if((b|0)>0){s=a;t=b}else{s=1;t=1;b=a}r=0;m=f;f=0;u=aa(a,e)|0;v=0;while(1){if((v|0)>=(a|0)){break}w=+h[o+368>>3]*+h[m>>3]- +h[o+344>>3];x=j+(f<<3)|0;y=0;while(1){if((y|0)>=(t|0)){break}h[x>>3]=w;x=x+(u<<3)|0;y=y+1|0}v=v+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;g=k;k=l;y=0;while(1){if((y|0)>=(b|0)){break}w=+h[o+24>>3];z=w+ +co(+h[m>>3]);l=0;if(z==0.0){l=1;if((r|0)==0){f=b0(o+360|0,4,221720,213832,3168,213192,(u=i,i=i+8|0,c[u>>2]=o+276,u)|0)|0;i=u;r=f}}else{w=+h[o+384>>3];z=w*+cp(+h[m>>3])/z}z=z- +h[o+352>>3];v=0;while(1){if((v|0)>=(s|0)){break}h[g>>3]=z;f=k;k=f+4|0;c[f>>2]=l;v=v+1|0;g=g+(e<<3)|0}y=y+1|0;m=m+(d<<3)|0}p=r;q=p;i=n;return q|0}function dH(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0.0;n=i;o=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((o|0)==0){p=1;q=p;i=n;return q|0}do{if((c[o>>2]|0)!=202){m=c3(o)|0;r=m;if((m|0)==0){break}p=r;q=p;i=n;return q|0}}while(0);if((b|0)>0){s=a;t=b}else{s=1;t=1;b=a}r=0;m=f;f=0;u=aa(a,e)|0;v=0;while(1){if((v|0)>=(a|0)){break}w=+h[o+376>>3]*(+h[m>>3]+ +h[o+344>>3]);x=j+(f<<3)|0;y=0;while(1){if((y|0)>=(t|0)){break}h[x>>3]=w;x=x+(u<<3)|0;y=y+1|0}v=v+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;g=k;k=l;y=0;while(1){if((y|0)>=(b|0)){break}w=+h[o+392>>3]*(+h[m>>3]+ +h[o+352>>3]);l=0;if(+P(+w)>1.0){if(+P(+w)>1.0000000000001){w=0.0;l=1;if((r|0)==0){f=b0(o+360|0,3,221672,213832,3319,213416,(u=i,i=i+8|0,c[u>>2]=o+276,u)|0)|0;i=u;r=f}}else{if(w<0.0){z=-0.0- +P(+90.0)}else{z=+P(+90.0)}w=z}}else{w=+ct(w)}v=0;while(1){if((v|0)>=(s|0)){break}h[g>>3]=w;f=k;k=f+4|0;c[f>>2]=l;v=v+1|0;g=g+(e<<3)|0}y=y+1|0;m=m+(d<<3)|0}p=r;q=p;i=n;return q|0}function dI(a,b,d,e,f,g,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0,w=0.0;m=a;a=b;b=d;d=e;e=f;f=g;g=i;i=j;j=k;k=l;if((m|0)==0){n=1;o=n;return o|0}do{if((c[m>>2]|0)!=202){l=c3(m)|0;if((l|0)==0){break}n=l;o=n;return o|0}}while(0);if((b|0)>0){p=a;q=b}else{p=1;q=1;b=a}l=f;f=0;r=aa(a,e)|0;s=0;while(1){if((s|0)>=(a|0)){break}t=+h[m+368>>3]*+h[l>>3]- +h[m+344>>3];u=i+(f<<3)|0;v=0;while(1){if((v|0)>=(q|0)){break}h[u>>3]=t;u=u+(r<<3)|0;v=v+1|0}s=s+1|0;f=f+e|0;l=l+(d<<3)|0}l=g;g=j;j=k;v=0;while(1){if((v|0)>=(b|0)){break}t=+h[m+384>>3];w=t*+cp(+h[l>>3]);t=w- +h[m+352>>3];s=0;while(1){if((s|0)>=(p|0)){break}h[g>>3]=t;k=j;j=k+4|0;c[k>>2]=0;s=s+1|0;g=g+(e<<3)|0}v=v+1|0;l=l+(d<<3)|0}n=0;o=n;return o|0}function dJ(a,b,d,e,f,g,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0;m=a;a=b;b=d;d=e;e=f;f=g;g=i;i=j;j=k;k=l;if((m|0)==0){n=1;o=n;return o|0}do{if((c[m>>2]|0)!=203){l=c4(m)|0;if((l|0)==0){break}n=l;o=n;return o|0}}while(0);if((b|0)>0){p=a;q=b}else{p=1;q=1;b=a}l=f;f=0;r=aa(a,e)|0;s=0;while(1){if((s|0)>=(a|0)){break}t=+h[m+376>>3]*(+h[l>>3]+ +h[m+344>>3]);u=i+(f<<3)|0;v=0;while(1){if((v|0)>=(q|0)){break}h[u>>3]=t;u=u+(r<<3)|0;v=v+1|0}s=s+1|0;f=f+e|0;l=l+(d<<3)|0}l=g;g=j;j=k;v=0;while(1){if((v|0)>=(b|0)){break}t=+h[m+376>>3]*(+h[l>>3]+ +h[m+352>>3]);s=0;while(1){if((s|0)>=(p|0)){break}h[g>>3]=t;k=j;j=k+4|0;c[k>>2]=0;s=s+1|0;g=g+(e<<3)|0}v=v+1|0;l=l+(d<<3)|0}n=0;o=n;return o|0}function dK(a,b,d,e,f,g,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0;m=a;a=b;b=d;d=e;e=f;f=g;g=i;i=j;j=k;k=l;if((m|0)==0){n=1;o=n;return o|0}do{if((c[m>>2]|0)!=203){l=c4(m)|0;if((l|0)==0){break}n=l;o=n;return o|0}}while(0);if((b|0)>0){p=a;q=b}else{p=1;q=1;b=a}l=f;f=0;r=aa(a,e)|0;s=0;while(1){if((s|0)>=(a|0)){break}t=+h[m+368>>3]*+h[l>>3]- +h[m+344>>3];u=i+(f<<3)|0;v=0;while(1){if((v|0)>=(q|0)){break}h[u>>3]=t;u=u+(r<<3)|0;v=v+1|0}s=s+1|0;f=f+e|0;l=l+(d<<3)|0}l=g;g=j;j=k;v=0;while(1){if((v|0)>=(b|0)){break}t=+h[m+368>>3]*+h[l>>3]- +h[m+352>>3];s=0;while(1){if((s|0)>=(p|0)){break}h[g>>3]=t;k=j;j=k+4|0;c[k>>2]=0;s=s+1|0;g=g+(e<<3)|0}v=v+1|0;l=l+(d<<3)|0}n=0;o=n;return o|0}function dL(a,b,d,e,f,g,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0;m=a;a=b;b=d;d=e;e=f;f=g;g=i;i=j;j=k;k=l;if((m|0)==0){n=1;o=n;return o|0}do{if((c[m>>2]|0)!=204){l=c5(m)|0;if((l|0)==0){break}n=l;o=n;return o|0}}while(0);if((b|0)>0){p=a;q=b}else{p=1;q=1;b=a}l=f;f=0;r=aa(a,e)|0;s=0;while(1){if((s|0)>=(a|0)){break}t=+h[m+376>>3]*(+h[l>>3]+ +h[m+344>>3]);u=i+(f<<3)|0;v=0;while(1){if((v|0)>=(q|0)){break}h[u>>3]=t;u=u+(r<<3)|0;v=v+1|0}s=s+1|0;f=f+e|0;l=l+(d<<3)|0}l=g;g=j;j=k;v=0;while(1){if((v|0)>=(b|0)){break}t=+cu(+Z((+h[l>>3]+ +h[m+352>>3])/+h[m+8>>3]))*2.0-90.0;s=0;while(1){if((s|0)>=(p|0)){break}h[g>>3]=t;k=j;j=k+4|0;c[k>>2]=0;s=s+1|0;g=g+(e<<3)|0}v=v+1|0;l=l+(d<<3)|0}n=0;o=n;return o|0}function dM(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0,A=0.0,B=0.0;n=i;o=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((o|0)==0){p=1;q=p;i=n;return q|0}do{if((c[o>>2]|0)!=204){m=c5(o)|0;r=m;if((m|0)==0){break}p=r;q=p;i=n;return q|0}}while(0);if((b|0)>0){s=a;t=b}else{s=1;t=1;b=a}r=0;m=f;f=0;u=aa(a,e)|0;v=0;while(1){if((v|0)>=(a|0)){break}w=+h[o+368>>3]*+h[m>>3]- +h[o+344>>3];x=j+(f<<3)|0;y=0;while(1){if((y|0)>=(t|0)){break}h[x>>3]=w;x=x+(u<<3)|0;y=y+1|0}v=v+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;g=k;k=l;y=0;while(1){if((y|0)>=(b|0)){break}l=0;do{if(+h[m>>3]<=-90.0){z=1207}else{if(+h[m>>3]>=90.0){z=1207;break}w=+h[o+8>>3];A=w*+_(+cr((+h[m>>3]+90.0)/2.0));B=A- +h[o+352>>3]}}while(0);if((z|0)==1207){z=0;B=0.0;l=1;if((r|0)==0){f=b0(o+360|0,4,221488,213832,3763,213192,(u=i,i=i+8|0,c[u>>2]=o+276,u)|0)|0;i=u;r=f}}v=0;while(1){if((v|0)>=(s|0)){break}h[g>>3]=B;f=k;k=f+4|0;c[f>>2]=l;v=v+1|0;g=g+(e<<3)|0}y=y+1|0;m=m+(d<<3)|0}p=r;q=p;i=n;return q|0}function dN(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0.0,A=0.0;n=i;o=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((o|0)==0){p=1;q=p;i=n;return q|0}do{if((c[o>>2]|0)!=301){m=c6(o)|0;r=m;if((m|0)==0){break}p=r;q=p;i=n;return q|0}}while(0);if((b|0)>0){s=a;t=b}else{s=1;t=1;b=a}r=0;m=f;f=0;u=aa(a,e)|0;v=0;while(1){if((v|0)>=(a|0)){break}w=+h[o+376>>3]*(+h[m>>3]+ +h[o+344>>3]);x=j+(f<<3)|0;y=0;while(1){if((y|0)>=(t|0)){break}h[x>>3]=w;x=x+(u<<3)|0;y=y+1|0}v=v+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;x=j;j=k;k=l;y=0;while(1){if((y|0)>=(b|0)){break}z=+h[m>>3]+ +h[o+352>>3];w=+S(z/+h[o+8>>3]);l=0;if(w==0.0){l=1;if((r|0)==0){g=b0(o+360|0,3,221440,213832,3893,213416,(f=i,i=i+8|0,c[f>>2]=o+276,f)|0)|0;i=f;r=g}}else{w=1.0/w}A=+h[o+376>>3]*z;v=0;while(1){if((v|0)>=(s|0)){break}g=x;h[g>>3]=+h[g>>3]*w;h[j>>3]=A;g=k;k=g+4|0;c[g>>2]=l;v=v+1|0;x=x+(e<<3)|0;j=j+(e<<3)|0}y=y+1|0;m=m+(d<<3)|0}p=r;q=p;i=n;return q|0}function dO(a,b,d,e,f,g,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0,w=0.0;m=a;a=b;b=d;d=e;e=f;f=g;g=i;i=j;j=k;k=l;if((m|0)==0){n=1;o=n;return o|0}do{if((c[m>>2]|0)!=301){l=c6(m)|0;if((l|0)==0){break}n=l;o=n;return o|0}}while(0);if((b|0)>0){p=a;q=b}else{p=1;q=1;b=a}l=f;f=0;r=aa(a,e)|0;s=0;while(1){if((s|0)>=(a|0)){break}t=+h[m+368>>3]*+h[l>>3];u=i+(f<<3)|0;v=0;while(1){if((v|0)>=(q|0)){break}h[u>>3]=t;u=u+(r<<3)|0;v=v+1|0}s=s+1|0;f=f+e|0;l=l+(d<<3)|0}l=g;u=i;i=j;j=k;v=0;while(1){if((v|0)>=(b|0)){break}t=+co(+h[l>>3]);w=+h[m+368>>3]*+h[l>>3]- +h[m+352>>3];s=0;while(1){if((s|0)>=(p|0)){break}h[u>>3]=t*+h[u>>3]- +h[m+344>>3];h[i>>3]=w;k=j;j=k+4|0;c[k>>2]=0;s=s+1|0;u=u+(e<<3)|0;i=i+(e<<3)|0}v=v+1|0;l=l+(d<<3)|0}n=0;o=n;return o|0}function dP(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0.0,y=0.0,z=0,A=0,B=0,C=0,D=0;n=i;o=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((o|0)==0){p=1;q=p;i=n;return q|0}do{if((c[o>>2]|0)!=302){m=c7(o)|0;r=m;if((m|0)==0){break}p=r;q=p;i=n;return q|0}}while(0);if((b|0)>0){s=a;t=b}else{s=1;t=1;b=a}r=0;m=f;f=0;u=aa(a,e)|0;v=0;while(1){if((v|0)>=(a|0)){break}w=+h[m>>3]+ +h[o+344>>3];x=+h[o+376>>3]*w;y=+P(+w)-1.0e-13;z=j+(f<<3)|0;A=k+(f<<3)|0;B=0;while(1){if((B|0)>=(t|0)){break}h[z>>3]=x;h[A>>3]=y;z=z+(u<<3)|0;A=A+(u<<3)|0;B=B+1|0}v=v+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;z=j;A=k;k=l;B=0;while(1){if((B|0)>=(b|0)){break}w=+h[o+392>>3]*(+h[m>>3]+ +h[o+352>>3]);l=0;do{if(w>1.0){C=1308}else{if(w<-1.0){C=1308;break}x=1.0-4.0*w*w;if(x==0.0){l=-1}else{x=1.0/x}y=+ct(w)*3.0}}while(0);if((C|0)==1308){C=0;x=0.0;y=0.0;l=1;if((r|0)==0){j=b0(o+360|0,3,221416,213832,4107,213416,(D=i,i=i+8|0,c[D>>2]=o+276,D)|0)|0;i=D;r=j}}v=0;while(1){if((v|0)>=(s|0)){break}if((l|0)<0){if(+h[A>>3]<0.0){j=k;k=j+4|0;c[j>>2]=0}else{j=k;k=j+4|0;c[j>>2]=1;if((r|0)==0){j=b0(o+360|0,3,221416,213832,4127,213416,(D=i,i=i+8|0,c[D>>2]=o+276,D)|0)|0;i=D;r=j}}}j=z;h[j>>3]=+h[j>>3]*x;h[A>>3]=y;v=v+1|0;z=z+(e<<3)|0;A=A+(e<<3)|0}B=B+1|0;m=m+(d<<3)|0}p=r;q=p;i=n;return q|0}function dQ(a,b,d,e,f,g,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0,w=0.0,x=0.0;m=a;a=b;b=d;d=e;e=f;f=g;g=i;i=j;j=k;k=l;if((m|0)==0){n=1;o=n;return o|0}do{if((c[m>>2]|0)!=302){l=c7(m)|0;if((l|0)==0){break}n=l;o=n;return o|0}}while(0);if((b|0)>0){p=a;q=b}else{p=1;q=1;b=a}l=f;f=0;r=aa(a,e)|0;s=0;while(1){if((s|0)>=(a|0)){break}t=+h[m+368>>3]*+h[l>>3];u=i+(f<<3)|0;v=0;while(1){if((v|0)>=(q|0)){break}h[u>>3]=t;u=u+(r<<3)|0;v=v+1|0}s=s+1|0;f=f+e|0;l=l+(d<<3)|0}l=g;u=i;i=j;j=k;v=0;while(1){if((v|0)>=(b|0)){break}w=+cp(+h[l>>3]/3.0);t=1.0-4.0*w*w;x=+h[m+384>>3]*w- +h[m+352>>3];s=0;while(1){if((s|0)>=(p|0)){break}h[u>>3]=t*+h[u>>3]- +h[m+344>>3];h[i>>3]=x;k=j;j=k+4|0;c[k>>2]=0;s=s+1|0;u=u+(e<<3)|0;i=i+(e<<3)|0}v=v+1|0;l=l+(d<<3)|0}n=0;o=n;return o|0}function dR(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0.0,y=0.0,z=0,A=0,B=0,C=0.0,D=0.0,E=0,F=0.0,G=0.0,H=0.0;n=i;o=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((o|0)==0){p=1;q=p;i=n;return q|0}do{if((c[o>>2]|0)!=303){m=c8(o)|0;r=m;if((m|0)==0){break}p=r;q=p;i=n;return q|0}}while(0);if((b|0)>0){s=a;t=b}else{s=1;t=1;b=a}r=0;m=f;f=0;u=aa(a,e)|0;v=0;while(1){if((v|0)>=(a|0)){break}w=+h[m>>3]+ +h[o+344>>3];x=+h[o+392>>3]*w;y=+P(+w)-1.0e-12;z=j+(f<<3)|0;A=k+(f<<3)|0;B=0;while(1){if((B|0)>=(t|0)){break}h[z>>3]=x;h[A>>3]=y;z=z+(u<<3)|0;A=A+(u<<3)|0;B=B+1|0}v=v+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;z=j;A=k;k=l;B=0;while(1){if((B|0)>=(b|0)){break}w=+h[m>>3]+ +h[o+352>>3];C=w/+h[o+8>>3];D=2.0-C*C;l=0;if(D<=1.0e-12){if(D<-1.0e-12){l=1;if((r|0)==0){j=b0(o+360|0,3,221384,213832,4333,213416,(E=i,i=i+8|0,c[E>>2]=o+276,E)|0)|0;i=E;r=j}}else{l=-1}D=0.0;x=0.0}else{D=+Q(D);x=1.0/D}F=w*+h[o+384>>3];if(+P(+F)>1.0){if(+P(+F)>1.000000000001){F=0.0;l=1;if((r|0)==0){j=b0(o+360|0,3,221384,213832,4352,213416,(E=i,i=i+8|0,c[E>>2]=o+276,E)|0)|0;i=E;r=j}}else{if(F<0.0){G=-0.0- +P(+1.0)}else{G=+P(+1.0)}F=G+C*D/3.141592653589793}}else{w=+W(F);F=w*+h[o+400>>3]+C*D/3.141592653589793}if(+P(+F)>1.0){if(+P(+F)>1.000000000001){F=0.0;l=1;if((r|0)==0){j=b0(o+360|0,3,221384,213832,4364,213416,(E=i,i=i+8|0,c[E>>2]=o+276,E)|0)|0;i=E;r=j}}else{if(F<0.0){H=-0.0- +P(+1.0)}else{H=+P(+1.0)}F=H}}y=+ct(F);v=0;while(1){if((v|0)>=(s|0)){break}if((l|0)<0){if(+h[A>>3]<0.0){j=k;k=j+4|0;c[j>>2]=0}else{j=k;k=j+4|0;c[j>>2]=1;if((r|0)==0){j=b0(o+360|0,3,221384,213832,4378,213416,(E=i,i=i+8|0,c[E>>2]=o+276,E)|0)|0;i=E;r=j}}}j=z;h[j>>3]=+h[j>>3]*x;h[A>>3]=y;v=v+1|0;z=z+(e<<3)|0;A=A+(e<<3)|0}B=B+1|0;m=m+(d<<3)|0}p=r;q=p;i=n;return q|0}function dS(a,b,d,e,f,g,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0;m=a;a=b;b=d;d=e;e=f;f=g;g=i;i=j;j=k;k=l;if((m|0)==0){n=1;o=n;return o|0}do{if((c[m>>2]|0)!=303){l=c8(m)|0;if((l|0)==0){break}n=l;o=n;return o|0}}while(0);if((b|0)>0){p=a;q=b}else{p=1;q=1;b=a}l=f;f=0;r=aa(a,e)|0;s=0;while(1){if((s|0)>=(a|0)){break}t=+h[m+376>>3]*+h[l>>3];u=i+(f<<3)|0;v=0;while(1){if((v|0)>=(q|0)){break}h[u>>3]=t;u=u+(r<<3)|0;v=v+1|0}s=s+1|0;f=f+e|0;l=l+(d<<3)|0}l=g;u=i;i=j;j=k;v=0;while(1){if((v|0)>=(b|0)){break}if(+P(+(+h[l>>3]))==90.0){t=0.0;if(+h[l>>3]<0.0){w=-0.0- +P(+(+h[m+368>>3]))}else{w=+P(+(+h[m+368>>3]))}x=w}else{if(+h[l>>3]==0.0){t=1.0;x=0.0}else{y=3.141592653589793*+cp(+h[l>>3]);z=-3.141592653589793;A=3.141592653589793;B=y;k=0;while(1){if((k|0)>=100){break}C=B-y+ +T(B);if(C<0.0){if(C>-1.0e-13){D=1459;break}z=B}else{if(C<1.0e-13){D=1462;break}A=B}B=(z+A)/2.0;k=k+1|0}if((D|0)==1462){D=0}else if((D|0)==1459){D=0}A=B/2.0;t=+S(A);x=+h[m+368>>3]*+T(A)}}x=x- +h[m+352>>3];s=0;while(1){if((s|0)>=(p|0)){break}h[u>>3]=t*+h[u>>3]- +h[m+344>>3];h[i>>3]=x;k=j;j=k+4|0;c[k>>2]=0;s=s+1|0;u=u+(e<<3)|0;i=i+(e<<3)|0}v=v+1|0;l=l+(d<<3)|0}n=0;o=n;return o|0}function dT(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0.0,y=0.0,z=0,A=0,B=0,C=0.0,D=0,E=0.0,F=0.0,G=0.0,H=0,I=0.0;n=i;o=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((o|0)==0){p=1;q=p;i=n;return q|0}do{if((c[o>>2]|0)!=401){m=c9(o)|0;r=m;if((m|0)==0){break}p=r;q=p;i=n;return q|0}}while(0);if((b|0)>0){s=a;t=b}else{s=1;t=1;b=a}r=0;m=f;f=0;u=aa(a,e)|0;v=0;while(1){if((v|0)>=(a|0)){break}w=+h[m>>3]+ +h[o+344>>3];x=1.0-w*w*+h[o+384>>3];y=w*+h[o+392>>3];z=j+(f<<3)|0;A=k+(f<<3)|0;B=0;while(1){if((B|0)>=(t|0)){break}h[z>>3]=x;h[A>>3]=y;z=z+(u<<3)|0;A=A+(u<<3)|0;B=B+1|0}v=v+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;z=j;A=k;k=l;B=0;while(1){if((B|0)>=(b|0)){break}w=+h[m>>3]+ +h[o+352>>3];C=w*w*+h[o+376>>3];v=0;while(1){if((v|0)>=(s|0)){break}x=+h[z>>3]-C;l=0;if(x<.5){if(x<.4999999999999){l=1;if((r|0)==0){j=b0(o+360|0,3,221296,213832,4611,213416,(D=i,i=i+8|0,c[D>>2]=o+276,D)|0)|0;i=D;r=j}}x=.5}E=+Q(x);F=2.0*E*E-1.0;G=E*+h[A>>3];do{if(F==0.0){if(G!=0.0){H=1509;break}h[z>>3]=0.0}else{H=1509}}while(0);if((H|0)==1509){H=0;h[z>>3]=+cv(G,F)*2.0}y=E*w/+h[o+8>>3];if(+P(+y)>1.0){if(+P(+y)>1.0000000000001){l=1;if((r|0)==0){j=b0(o+360|0,3,221296,213832,4630,213416,(D=i,i=i+8|0,c[D>>2]=o+276,D)|0)|0;i=D;r=j}}if(y<0.0){I=-0.0- +P(+90.0)}else{I=+P(+90.0)}y=I}else{y=+ct(y)}h[A>>3]=y;j=k;k=j+4|0;c[j>>2]=l;v=v+1|0;z=z+(e<<3)|0;A=A+(e<<3)|0}B=B+1|0;m=m+(d<<3)|0}p=r;q=p;i=n;return q|0}function dU(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0.0,A=0,B=0,C=0;n=i;i=i+32|0;o=n|0;p=n+8|0;q=n+16|0;r=n+24|0;s=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((s|0)==0){t=1;u=t;i=n;return u|0}do{if((c[s>>2]|0)!=401){m=c9(s)|0;if((m|0)==0){break}t=m;u=t;i=n;return u|0}}while(0);if((b|0)>0){v=a;w=b}else{v=1;w=1;b=a}m=f;f=0;x=aa(a,e)|0;y=0;while(1){if((y|0)>=(a|0)){break}z=+h[m>>3]/2.0;cq(z,q,o);A=j+(f<<3)|0;B=k+(f<<3)|0;C=0;while(1){if((C|0)>=(w|0)){break}h[A>>3]=+h[q>>3];h[B>>3]=+h[o>>3];A=A+(x<<3)|0;B=B+(x<<3)|0;C=C+1|0}y=y+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;A=j;B=k;k=l;C=0;while(1){if((C|0)>=(b|0)){break}cq(+h[m>>3],r,p);y=0;while(1){if((y|0)>=(v|0)){break}z=+Q(+h[s+368>>3]/(+h[p>>3]*+h[B>>3]+1.0));h[A>>3]=2.0*z*+h[p>>3]*+h[A>>3]- +h[s+344>>3];h[B>>3]=z*+h[r>>3]- +h[s+352>>3];l=k;k=l+4|0;c[l>>2]=0;y=y+1|0;A=A+(e<<3)|0;B=B+(e<<3)|0}C=C+1|0;m=m+(d<<3)|0}t=0;u=t;i=n;return u|0}function dV(a,b,d,e,f,g,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0;m=a;a=b;b=d;d=e;e=f;f=g;g=i;i=j;j=k;k=l;if((m|0)==0){n=1;o=n;return o|0}do{if((c[m>>2]|0)!=501){l=da(m)|0;if((l|0)==0){break}n=l;o=n;return o|0}}while(0);if((b|0)>0){p=a;q=b}else{p=1;q=1;b=a}l=f;f=0;r=aa(a,e)|0;s=0;while(1){if((s|0)>=(a|0)){break}t=+h[l>>3]+ +h[m+344>>3];u=i+(f<<3)|0;v=0;while(1){if((v|0)>=(q|0)){break}h[u>>3]=t;u=u+(r<<3)|0;v=v+1|0}s=s+1|0;f=f+e|0;l=l+(d<<3)|0}l=g;u=i;i=j;j=k;v=0;while(1){if((v|0)>=(b|0)){break}w=+h[m+384>>3]-(+h[l>>3]+ +h[m+352>>3]);x=w*w;s=0;while(1){if((s|0)>=(p|0)){break}t=+h[u>>3];y=+Q(t*t+x);if(+h[m+24>>3]<0.0){y=-0.0-y}if(y==0.0){z=0.0}else{z=+cv(t/y,w/y)}h[u>>3]=z*+h[m+376>>3];A=+h[m+24>>3];h[i>>3]=A+ +cu(+h[m+408>>3]-y*+h[m+400>>3]);k=j;j=k+4|0;c[k>>2]=0;s=s+1|0;u=u+(e<<3)|0;i=i+(e<<3)|0}v=v+1|0;l=l+(d<<3)|0}n=0;o=n;return o|0}function dW(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0.0,C=0.0,D=0.0,E=0.0,F=0,G=0.0,H=0.0;n=i;i=i+16|0;o=n|0;p=n+8|0;q=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((q|0)==0){r=1;s=r;i=n;return s|0}do{if((c[q>>2]|0)!=501){m=da(q)|0;t=m;if((m|0)==0){break}r=t;s=r;i=n;return s|0}}while(0);if((b|0)>0){u=a;v=b}else{u=1;v=1;b=a}t=0;m=f;f=0;w=aa(a,e)|0;x=0;while(1){if((x|0)>=(a|0)){break}cq(+h[q+368>>3]*+h[m>>3],p,o);y=j+(f<<3)|0;z=k+(f<<3)|0;A=0;while(1){if((A|0)>=(v|0)){break}h[y>>3]=+h[p>>3];h[z>>3]=+h[o>>3];y=y+(w<<3)|0;z=z+(w<<3)|0;A=A+1|0}x=x+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;y=j;z=k;k=l;B=+h[q+352>>3]- +h[q+384>>3];A=0;while(1){if((A|0)>=(b|0)){break}C=+h[m>>3]- +h[q+24>>3];D=+co(C);l=0;if(D==0.0){E=0.0;l=1;if((t|0)==0){j=b0(q+360|0,4,221168,213832,4940,213192,(F=i,i=i+8|0,c[F>>2]=q+276,F)|0)|0;i=F;t=j}}else{G=+h[q+384>>3];H=+h[q+392>>3];E=G-H*+cp(C)/D;if((c[q+272>>2]&1|0)!=0){if(E*+h[q+368>>3]<0.0){l=1;if((t|0)==0){j=b0(q+360|0,4,221168,213832,4949,213192,(F=i,i=i+8|0,c[F>>2]=q+276,F)|0)|0;i=F;t=j}}}}x=0;while(1){if((x|0)>=(u|0)){break}h[y>>3]=E*+h[y>>3]- +h[q+344>>3];h[z>>3]=(-0.0-E)*+h[z>>3]-B;j=k;k=j+4|0;c[j>>2]=l;x=x+1|0;y=y+(e<<3)|0;z=z+(e<<3)|0}A=A+1|0;m=m+(d<<3)|0}r=t;s=r;i=n;return s|0}function dX(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0;n=i;o=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((o|0)==0){p=1;q=p;i=n;return q|0}do{if((c[o>>2]|0)!=502){m=db(o)|0;r=m;if((m|0)==0){break}p=r;q=p;i=n;return q|0}}while(0);if((b|0)>0){s=a;t=b}else{s=1;t=1;b=a}r=0;m=f;f=0;u=aa(a,e)|0;v=0;while(1){if((v|0)>=(a|0)){break}w=+h[m>>3]+ +h[o+344>>3];x=j+(f<<3)|0;y=0;while(1){if((y|0)>=(t|0)){break}h[x>>3]=w;x=x+(u<<3)|0;y=y+1|0}v=v+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;x=j;j=k;k=l;y=0;while(1){if((y|0)>=(b|0)){break}z=+h[o+384>>3]-(+h[m>>3]+ +h[o+352>>3]);A=z*z;v=0;while(1){if((v|0)>=(s|0)){break}w=+h[x>>3];B=+Q(w*w+A);if(+h[o+24>>3]<0.0){B=-0.0-B}if(B==0.0){C=0.0}else{C=+cv(w/B,z/B)}l=0;if(+P(+(B- +h[o+432>>3]))<1.0e-12){D=-90.0}else{E=(+h[o+416>>3]-B*B)*+h[o+424>>3];if(+P(+E)>1.0){if(+P(+(E-1.0))<1.0e-12){D=90.0}else{if(+P(+(E+1.0))<1.0e-12){D=-90.0}else{D=0.0;l=1;if((r|0)==0){g=b0(o+360|0,3,221128,213832,5132,213416,(f=i,i=i+8|0,c[f>>2]=o+276,f)|0)|0;i=f;r=g}}}}else{D=+ct(E)}}h[x>>3]=C*+h[o+376>>3];h[j>>3]=D;g=k;k=g+4|0;c[g>>2]=l;v=v+1|0;x=x+(e<<3)|0;j=j+(e<<3)|0}y=y+1|0;m=m+(d<<3)|0}p=r;q=p;i=n;return q|0}function dY(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0;n=i;i=i+16|0;o=n|0;p=n+8|0;q=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((q|0)==0){r=1;s=r;i=n;return s|0}do{if((c[q>>2]|0)!=502){m=db(q)|0;if((m|0)==0){break}r=m;s=r;i=n;return s|0}}while(0);if((b|0)>0){t=a;u=b}else{t=1;u=1;b=a}m=f;f=0;v=aa(a,e)|0;w=0;while(1){if((w|0)>=(a|0)){break}cq(+h[q+368>>3]*+h[m>>3],p,o);x=j+(f<<3)|0;y=k+(f<<3)|0;z=0;while(1){if((z|0)>=(u|0)){break}h[x>>3]=+h[p>>3];h[y>>3]=+h[o>>3];x=x+(v<<3)|0;y=y+(v<<3)|0;z=z+1|0}w=w+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;x=j;y=k;k=l;A=+h[q+352>>3]- +h[q+384>>3];z=0;while(1){if((z|0)>=(b|0)){break}if(+h[m>>3]==-90.0){B=+h[q+432>>3]}else{C=+h[q+392>>3];D=+h[q+400>>3];E=+h[q+408>>3];B=C*+Q(D-E*+cp(+h[m>>3]))}w=0;while(1){if((w|0)>=(t|0)){break}h[x>>3]=B*+h[x>>3]- +h[q+344>>3];h[y>>3]=(-0.0-B)*+h[y>>3]-A;l=k;k=l+4|0;c[l>>2]=0;w=w+1|0;x=x+(e<<3)|0;y=y+(e<<3)|0}z=z+1|0;m=m+(d<<3)|0}r=0;s=r;i=n;return s|0}function dZ(a,b,d,e,f,g,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0,w=0.0,x=0.0,y=0.0,z=0.0;m=a;a=b;b=d;d=e;e=f;f=g;g=i;i=j;j=k;k=l;if((m|0)==0){n=1;o=n;return o|0}do{if((c[m>>2]|0)!=503){l=dc(m)|0;if((l|0)==0){break}n=l;o=n;return o|0}}while(0);if((b|0)>0){p=a;q=b}else{p=1;q=1;b=a}l=f;f=0;r=aa(a,e)|0;s=0;while(1){if((s|0)>=(a|0)){break}t=+h[l>>3]+ +h[m+344>>3];u=i+(f<<3)|0;v=0;while(1){if((v|0)>=(q|0)){break}h[u>>3]=t;u=u+(r<<3)|0;v=v+1|0}s=s+1|0;f=f+e|0;l=l+(d<<3)|0}l=g;u=i;i=j;j=k;v=0;while(1){if((v|0)>=(b|0)){break}w=+h[m+384>>3]-(+h[l>>3]+ +h[m+352>>3]);x=w*w;s=0;while(1){if((s|0)>=(p|0)){break}t=+h[u>>3];y=+Q(t*t+x);if(+h[m+24>>3]<0.0){y=-0.0-y}if(y==0.0){z=0.0}else{z=+cv(t/y,w/y)}h[u>>3]=z*+h[m+376>>3];h[i>>3]=+h[m+392>>3]-y;k=j;j=k+4|0;c[k>>2]=0;s=s+1|0;u=u+(e<<3)|0;i=i+(e<<3)|0}v=v+1|0;l=l+(d<<3)|0}n=0;o=n;return o|0}function d_(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0.0,B=0.0;n=i;i=i+16|0;o=n|0;p=n+8|0;q=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((q|0)==0){r=1;s=r;i=n;return s|0}do{if((c[q>>2]|0)!=503){m=dc(q)|0;if((m|0)==0){break}r=m;s=r;i=n;return s|0}}while(0);if((b|0)>0){t=a;u=b}else{t=1;u=1;b=a}m=f;f=0;v=aa(a,e)|0;w=0;while(1){if((w|0)>=(a|0)){break}cq(+h[q+368>>3]*+h[m>>3],p,o);x=j+(f<<3)|0;y=k+(f<<3)|0;z=0;while(1){if((z|0)>=(u|0)){break}h[x>>3]=+h[p>>3];h[y>>3]=+h[o>>3];x=x+(v<<3)|0;y=y+(v<<3)|0;z=z+1|0}w=w+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;x=j;y=k;k=l;A=+h[q+352>>3]- +h[q+384>>3];z=0;while(1){if((z|0)>=(b|0)){break}B=+h[q+392>>3]- +h[m>>3];w=0;while(1){if((w|0)>=(t|0)){break}h[x>>3]=B*+h[x>>3]- +h[q+344>>3];h[y>>3]=(-0.0-B)*+h[y>>3]-A;l=k;k=l+4|0;c[l>>2]=0;w=w+1|0;x=x+(e<<3)|0;y=y+(e<<3)|0}z=z+1|0;m=m+(d<<3)|0}r=0;s=r;i=n;return s|0}function d$(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0;n=i;o=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((o|0)==0){p=1;q=p;i=n;return q|0}do{if((c[o>>2]|0)!=504){m=dd(o)|0;r=m;if((m|0)==0){break}p=r;q=p;i=n;return q|0}}while(0);if((b|0)>0){s=a;t=b}else{s=1;t=1;b=a}r=0;m=f;f=0;u=aa(a,e)|0;v=0;while(1){if((v|0)>=(a|0)){break}w=+h[m>>3]+ +h[o+344>>3];x=j+(f<<3)|0;y=0;while(1){if((y|0)>=(t|0)){break}h[x>>3]=w;x=x+(u<<3)|0;y=y+1|0}v=v+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;x=j;j=k;k=l;y=0;while(1){if((y|0)>=(b|0)){break}z=+h[o+384>>3]-(+h[m>>3]+ +h[o+352>>3]);A=z*z;v=0;while(1){if((v|0)>=(s|0)){break}w=+h[x>>3];B=+Q(w*w+A);if(+h[o+24>>3]<0.0){B=-0.0-B}if(B==0.0){C=0.0}else{C=+cv(w/B,z/B)}l=0;if(B==0.0){if(+h[o+368>>3]<0.0){D=-90.0}else{D=0.0;l=1;if((r|0)==0){g=b0(o+360|0,3,220968,213832,5609,213416,(f=i,i=i+8|0,c[f>>2]=o+276,f)|0)|0;i=f;r=g}}}else{D=90.0- +cu(+R(+(B*+h[o+400>>3]),+(+h[o+376>>3])))*2.0}h[x>>3]=C*+h[o+376>>3];h[j>>3]=D;g=k;k=g+4|0;c[g>>2]=l;v=v+1|0;x=x+(e<<3)|0;j=j+(e<<3)|0}y=y+1|0;m=m+(d<<3)|0}p=r;q=p;i=n;return q|0}function d0(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0.0,C=0.0,D=0.0,E=0.0;n=i;i=i+16|0;o=n|0;p=n+8|0;q=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((q|0)==0){r=1;s=r;i=n;return s|0}do{if((c[q>>2]|0)!=504){m=dd(q)|0;t=m;if((m|0)==0){break}r=t;s=r;i=n;return s|0}}while(0);if((b|0)>0){u=a;v=b}else{u=1;v=1;b=a}t=0;m=f;f=0;w=aa(a,e)|0;x=0;while(1){if((x|0)>=(a|0)){break}cq(+h[q+368>>3]*+h[m>>3],p,o);y=j+(f<<3)|0;z=k+(f<<3)|0;A=0;while(1){if((A|0)>=(v|0)){break}h[y>>3]=+h[p>>3];h[z>>3]=+h[o>>3];y=y+(w<<3)|0;z=z+(w<<3)|0;A=A+1|0}x=x+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;y=j;z=k;k=l;B=+h[q+352>>3]- +h[q+384>>3];A=0;while(1){if((A|0)>=(b|0)){break}l=0;if(+h[m>>3]==-90.0){C=0.0;if(+h[q+368>>3]>=0.0){l=1;if((t|0)==0){j=b0(q+360|0,4,220952,213832,5691,213192,(g=i,i=i+8|0,c[g>>2]=q+276,g)|0)|0;i=g;t=j}}}else{D=+h[q+392>>3];E=+cr((90.0- +h[m>>3])/2.0);C=D*+R(+E,+(+h[q+368>>3]))}x=0;while(1){if((x|0)>=(u|0)){break}h[y>>3]=C*+h[y>>3]- +h[q+344>>3];h[z>>3]=(-0.0-C)*+h[z>>3]-B;j=k;k=j+4|0;c[j>>2]=l;x=x+1|0;y=y+(e<<3)|0;z=z+(e<<3)|0}A=A+1|0;m=m+(d<<3)|0}r=t;s=r;i=n;return s|0}function d1(a,b,d,e,f,g,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0;m=a;a=b;b=d;d=e;e=f;f=g;g=i;i=j;j=k;k=l;if((m|0)==0){n=1;o=n;return o|0}if(+h[m+24>>3]==0.0){n=dN(m,a,b,d,e,f,g,i,j,k)|0;o=n;return o|0}do{if((c[m>>2]|0)!=601){l=de(m)|0;if((l|0)==0){break}n=l;o=n;return o|0}}while(0);if((b|0)>0){p=a;q=b}else{p=1;q=1;b=a}l=f;f=0;r=aa(a,e)|0;s=0;while(1){if((s|0)>=(a|0)){break}t=+h[l>>3]+ +h[m+344>>3];u=i+(f<<3)|0;v=0;while(1){if((v|0)>=(q|0)){break}h[u>>3]=t;u=u+(r<<3)|0;v=v+1|0}s=s+1|0;f=f+e|0;l=l+(d<<3)|0}l=g;u=i;i=j;j=k;v=0;while(1){if((v|0)>=(b|0)){break}w=+h[m+384>>3]-(+h[l>>3]+ +h[m+352>>3]);x=w*w;s=0;while(1){if((s|0)>=(p|0)){break}t=+h[u>>3];y=+Q(t*t+x);if(+h[m+24>>3]<0.0){y=-0.0-y}if(y==0.0){z=0.0}else{z=+cv(t/y,w/y)}A=(+h[m+384>>3]-y)/+h[m+376>>3];B=+co(A);if(B==0.0){C=0.0}else{C=z*(y/+h[m+8>>3])/B}h[u>>3]=C;h[i>>3]=A;k=j;j=k+4|0;c[k>>2]=0;s=s+1|0;u=u+(e<<3)|0;i=i+(e<<3)|0}v=v+1|0;l=l+(d<<3)|0}n=0;o=n;return o|0}function d2(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0.0,w=0,x=0,y=0.0,z=0,A=0,B=0.0;n=i;i=i+16|0;o=n|0;p=n+8|0;q=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((q|0)==0){r=1;s=r;i=n;return s|0}if(+h[q+24>>3]==0.0){r=dO(q,a,b,d,e,f,g,j,k,l)|0;s=r;i=n;return s|0}do{if((c[q>>2]|0)!=601){m=de(q)|0;if((m|0)==0){break}r=m;s=r;i=n;return s|0}}while(0);if((b|0)>0){t=a;u=b}else{t=1;u=1;b=a}v=+h[q+352>>3]- +h[q+384>>3];m=f;f=0;w=aa(a,e)|0;x=0;while(1){if((x|0)>=(a|0)){break}y=+h[q+8>>3]*+h[m>>3];z=j+(f<<3)|0;A=0;while(1){if((A|0)>=(u|0)){break}h[z>>3]=y;z=z+(w<<3)|0;A=A+1|0}x=x+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;z=j;j=k;k=l;A=0;while(1){if((A|0)>=(b|0)){break}B=+h[q+384>>3]- +h[q+376>>3]*+h[m>>3];y=+co(+h[m>>3])/B;x=0;while(1){if((x|0)>=(t|0)){break}cq(y*+h[z>>3],p,o);h[z>>3]=B*+h[p>>3]- +h[q+344>>3];h[j>>3]=(-0.0-B)*+h[o>>3]-v;l=k;k=l+4|0;c[l>>2]=0;x=x+1|0;z=z+(e<<3)|0;j=j+(e<<3)|0}A=A+1|0;m=m+(d<<3)|0}r=0;s=r;i=n;return s|0}function d3(a,b,d,e,f,g,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0;m=a;a=b;b=d;d=e;e=f;f=g;g=i;i=j;j=k;k=l;if((m|0)==0){n=1;o=n;return o|0}do{if((c[m>>2]|0)!=602){l=df(m)|0;if((l|0)==0){break}n=l;o=n;return o|0}}while(0);if((b|0)>0){p=a;q=b}else{p=1;q=1;b=a}l=f;f=0;r=aa(a,e)|0;s=0;while(1){if((s|0)>=(a|0)){break}t=+h[l>>3]+ +h[m+344>>3];u=i+(f<<3)|0;v=0;while(1){if((v|0)>=(q|0)){break}h[u>>3]=t;u=u+(r<<3)|0;v=v+1|0}s=s+1|0;f=f+e|0;l=l+(d<<3)|0}l=g;u=i;i=j;j=k;v=0;while(1){if((v|0)>=(b|0)){break}w=+h[l>>3]+ +h[m+352>>3];x=+P(+(w*+h[m+376>>3]));s=0;while(1){if((s|0)>=(p|0)){break}t=+h[u>>3];if(x<1.0e-12){h[u>>3]=t*+h[m+376>>3];h[i>>3]=0.0}else{if(+P(+(x-90.0))<1.0e-12){h[u>>3]=0.0;if(w<0.0){y=-0.0- +P(+90.0)}else{y=+P(+90.0)}h[i>>3]=y}else{if(w>0.0){z=90.0}else{z=-90.0}A=0.0;B=t*t;C=w- +h[m+368>>3]*z;D=B+C*C;E=-999.0;k=0;while(1){if((k|0)>=64){break}if(E<-100.0){F=(z+A)/2.0}else{G=D/(D-E);if(G<.1){G=.1}else{if(G>.9){G=.9}}F=z-G*(z-A)}C=w- +h[m+368>>3]*F;H=+cr(F);G=B+C*(C- +h[m+384>>3]/H);if(+P(+G)<1.0e-12){I=1978;break}if(+P(+(z-A))<1.0e-12){I=1980;break}if(G>0.0){z=F;D=G}else{A=F;E=G}k=k+1|0}if((I|0)==1978){I=0}else if((I|0)==1980){I=0}E=+h[m+8>>3]-C*H;A=t*H;do{if(E==0.0){if(A!=0.0){I=1989;break}h[u>>3]=0.0}else{I=1989}}while(0);if((I|0)==1989){I=0;C=+cv(A,E);h[u>>3]=C/+cp(F)}h[i>>3]=F}}k=j;j=k+4|0;c[k>>2]=0;s=s+1|0;u=u+(e<<3)|0;i=i+(e<<3)|0}v=v+1|0;l=l+(d<<3)|0}n=0;o=n;return o|0}function d4(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0;n=i;i=i+16|0;o=n|0;p=n+8|0;q=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((q|0)==0){r=1;s=r;i=n;return s|0}do{if((c[q>>2]|0)!=602){m=df(q)|0;if((m|0)==0){break}r=m;s=r;i=n;return s|0}}while(0);if((b|0)>0){t=a;u=b}else{t=1;u=1;b=a}m=f;f=0;v=aa(a,e)|0;w=0;while(1){if((w|0)>=(a|0)){break}x=j+(f<<3)|0;y=0;while(1){if((y|0)>=(u|0)){break}h[x>>3]=+h[m>>3];x=x+(v<<3)|0;y=y+1|0}w=w+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;x=j;j=k;k=l;y=0;while(1){if((y|0)>=(b|0)){break}z=+h[m>>3]*3.141592653589793/180.0;cq(+h[m>>3],p,o);w=0;while(1){if((w|0)>=(t|0)){break}if(+h[p>>3]==0.0){h[x>>3]=+h[q+368>>3]*+h[x>>3]- +h[q+344>>3];h[j>>3]=-0.0- +h[q+352>>3]}else{A=+h[x>>3]*+h[p>>3];B=+h[o>>3]/+h[p>>3];C=+h[q+8>>3]*B;D=C*+cp(A);h[x>>3]=D- +h[q+344>>3];D=+h[q+8>>3];C=D*(B*(1.0- +co(A))+z);h[j>>3]=C- +h[q+352>>3]}l=k;k=l+4|0;c[l>>2]=0;w=w+1|0;x=x+(e<<3)|0;j=j+(e<<3)|0}y=y+1|0;m=m+(d<<3)|0}r=0;s=r;i=n;return s|0}function d5(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0.0,A=0,B=0,C=0.0,D=0.0,E=0.0;n=i;o=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((o|0)==0){p=1;q=p;i=n;return q|0}do{if((c[o>>2]|0)!=701){m=dg(o)|0;r=m;if((m|0)==0){break}p=r;q=p;i=n;return q|0}}while(0);if((b|0)>0){s=a;t=b}else{s=1;t=1;b=a}r=0;m=f;f=0;u=aa(a,e)|0;v=0;while(1){if((v|0)>=(a|0)){break}w=(+h[m>>3]+ +h[o+344>>3])*+h[o+376>>3];x=j+(f<<3)|0;y=0;while(1){if((y|0)>=(t|0)){break}h[x>>3]=w;x=x+(u<<3)|0;y=y+1|0}v=v+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;x=j;j=k;k=l;y=0;while(1){if((y|0)>=(b|0)){break}z=(+h[m>>3]+ +h[o+352>>3])*+h[o+376>>3];v=0;while(1){if((v|0)>=(s|0)){break}w=+h[x>>3];L2631:do{if(+P(+w)<=1.0){if(+P(+z)<=3.0){A=2067;break}h[x>>3]=0.0;h[j>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;if((r|0)==0){l=b0(o+360|0,3,220864,213832,6327,213416,(B=i,i=i+8|0,c[B>>2]=o+276,B)|0)|0;i=B;r=l}}else{do{if(+P(+w)<=7.0){if(+P(+z)>1.0){break}A=2067;break L2631}}while(0);h[x>>3]=0.0;h[j>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;if((r|0)==0){l=b0(o+360|0,3,220864,213832,6335,213416,(B=i,i=i+8|0,c[B>>2]=o+276,B)|0)|0;i=B;r=l}}}while(0);if((A|0)==2067){A=0;if(w<-1.0){w=w+8.0}if(w>5.0){w=w-6.0;C=-1.0/+Q(w*w+1.0+z*z);D=(-0.0-C)*w;E=(-0.0-C)*z}else{if(w>3.0){w=w-4.0;D=-1.0/+Q(w*w+1.0+z*z);C=D*w;E=(-0.0-D)*z}else{if(w>1.0){w=w-2.0;C=1.0/+Q(w*w+1.0+z*z);D=(-0.0-C)*w;E=C*z}else{if(z>1.0){z=z-2.0;E=1.0/+Q(w*w+1.0+z*z);D=(-0.0-E)*z;C=E*w}else{if(z<-1.0){z=z+2.0;E=-1.0/+Q(w*w+1.0+z*z);D=(-0.0-E)*z;C=(-0.0-E)*w}else{D=1.0/+Q(w*w+1.0+z*z);C=D*w;E=D*z}}}}}do{if(D==0.0){if(C!=0.0){A=2087;break}h[x>>3]=0.0}else{A=2087}}while(0);if((A|0)==2087){A=0;h[x>>3]=+cv(C,D)}h[j>>3]=+ct(E);l=k;k=l+4|0;c[l>>2]=0}v=v+1|0;x=x+(e<<3)|0;j=j+(e<<3)|0}y=y+1|0;m=m+(d<<3)|0}p=r;q=p;i=n;return q|0}function d6(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0,M=0.0,N=0.0;n=i;i=i+32|0;o=n|0;p=n+8|0;q=n+16|0;r=n+24|0;s=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((s|0)==0){t=1;u=t;i=n;return u|0}do{if((c[s>>2]|0)!=701){m=dg(s)|0;v=m;if((m|0)==0){break}t=v;u=t;i=n;return u|0}}while(0);if((b|0)>0){w=a;x=b}else{w=1;x=1;b=a}v=0;m=f;f=0;y=aa(a,e)|0;z=0;while(1){if((z|0)>=(a|0)){break}cq(+h[m>>3],q,o);A=j+(f<<3)|0;B=k+(f<<3)|0;C=0;while(1){if((C|0)>=(x|0)){break}h[A>>3]=+h[o>>3];h[B>>3]=+h[q>>3];A=A+(y<<3)|0;B=B+(y<<3)|0;C=C+1|0}z=z+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;A=j;B=k;k=l;C=0;while(1){if((C|0)>=(b|0)){break}cq(+h[m>>3],r,p);z=0;while(1){if((z|0)>=(w|0)){break}D=+h[p>>3]*+h[A>>3];E=+h[p>>3]*+h[B>>3];F=+h[r>>3];l=0;G=F;if(D>G){l=1;G=D}if(E>G){l=2;G=E}if(-0.0-D>G){l=3;G=-0.0-D}if(-0.0-E>G){l=4;G=-0.0-E}if(-0.0-F>G){l=5;G=-0.0-F}switch(l|0){case 1:{H=E/G;I=F/G;J=0.0;K=0.0;break};case 2:{H=(-0.0-D)/G;I=F/G;J=2.0;K=0.0;break};case 5:{H=E/G;I=D/G;J=0.0;K=-2.0;break};case 3:{H=(-0.0-E)/G;I=F/G;J=4.0;K=0.0;break};case 4:{H=D/G;I=F/G;J=6.0;K=0.0;break};default:{H=E/G;I=(-0.0-D)/G;J=0.0;K=2.0}}l=0;if(+P(+H)>1.0){if(+P(+H)>1.000000000001){l=1;if((v|0)==0){j=b0(s+360|0,4,220848,213832,6529,213192,(L=i,i=i+8|0,c[L>>2]=s+276,L)|0)|0;i=L;v=j}}if(H<0.0){M=-0.0- +P(+1.0)}else{M=+P(+1.0)}H=M}if(+P(+I)>1.0){if(+P(+I)>1.000000000001){l=1;if((v|0)==0){j=b0(s+360|0,4,220848,213832,6536,213192,(L=i,i=i+8|0,c[L>>2]=s+276,L)|0)|0;i=L;v=j}}if(I<0.0){N=-0.0- +P(+1.0)}else{N=+P(+1.0)}I=N}h[A>>3]=+h[s+368>>3]*(H+J)- +h[s+344>>3];h[B>>3]=+h[s+368>>3]*(I+K)- +h[s+352>>3];j=k;k=j+4|0;c[j>>2]=l;z=z+1|0;A=A+(e<<3)|0;B=B+(e<<3)|0}C=C+1|0;m=m+(d<<3)|0}t=v;u=t;i=n;return u|0}function d7(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0.0,A=0,B=0,C=0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,R=0.0,S=0.0;n=i;o=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((o|0)==0){p=1;q=p;i=n;return q|0}do{if((c[o>>2]|0)!=702){m=dh(o)|0;r=m;if((m|0)==0){break}p=r;q=p;i=n;return q|0}}while(0);if((b|0)>0){s=a;t=b}else{s=1;t=1;b=a}r=0;m=f;f=0;u=aa(a,e)|0;v=0;while(1){if((v|0)>=(a|0)){break}w=(+h[m>>3]+ +h[o+344>>3])*+h[o+376>>3];x=j+(f<<3)|0;y=0;while(1){if((y|0)>=(t|0)){break}h[x>>3]=w;x=x+(u<<3)|0;y=y+1|0}v=v+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;x=j;j=k;k=l;y=0;while(1){if((y|0)>=(b|0)){break}z=(+h[m>>3]+ +h[o+352>>3])*+h[o+376>>3];v=0;while(1){if((v|0)>=(s|0)){break}w=+h[x>>3];L2801:do{if(+P(+w)<=1.0){if(+P(+z)<=3.0){A=2195;break}h[x>>3]=0.0;h[j>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;if((r|0)==0){l=b0(o+360|0,3,220792,213832,6700,213416,(B=i,i=i+8|0,c[B>>2]=o+276,B)|0)|0;i=B;r=l}}else{do{if(+P(+w)<=7.0){if(+P(+z)>1.0){break}A=2195;break L2801}}while(0);h[x>>3]=0.0;h[j>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;if((r|0)==0){l=b0(o+360|0,3,220792,213832,6708,213416,(B=i,i=i+8|0,c[B>>2]=o+276,B)|0)|0;i=B;r=l}}}while(0);if((A|0)==2195){A=0;if(w<-1.0){w=w+8.0}if(w>5.0){C=4;w=w-6.0}else{if(w>3.0){C=3;w=w-4.0}else{if(w>1.0){C=2;w=w-2.0}else{if(z>1.0){C=0;z=z-2.0}else{if(z<-1.0){C=5;z=z+2.0}else{C=1}}}}}D=w*w;E=z*z;F=D*(D*(D*(D*(D*(D*.025843750685453415+.25795793533325195)+-.6293006539344788)+.5485238432884216)+-.22797055542469025)+-.07629968971014023)+-.2729269564151764;G=D*(D*(D*(D*(1.715475082397461+D*-.5302233695983887)+ -1.7411445379257202)+.48051509261131287)+-.014715650118887424)+-.028194520622491837;H=D*(D*(D*(D*-.8318046927452087+.9893810153007507)+.30803316831588745)+-.5680093765258789)+.27058160305023193;I=D*(1.5088008642196655+D*(D*.08693841099739075+-.9367857575416565))+-.6044155955314636;J=D*(D*.3388744592666626+ -1.4160192012786865)+.934120774269104;K=D*.5203223824501038+-.6391530632972717;L=.14381584525108337;M=F+E*(G+E*(H+E*(I+E*(J+E*(K+E*L)))));M=w+w*(1.0-D)*M;F=E*(E*(E*(E*(E*(E*.025843750685453415+.25795793533325195)+-.6293006539344788)+.5485238432884216)+-.22797055542469025)+-.07629968971014023)+-.2729269564151764;G=E*(E*(E*(E*(1.715475082397461+E*-.5302233695983887)+ -1.7411445379257202)+.48051509261131287)+-.014715650118887424)+-.028194520622491837;H=E*(E*(E*(E*-.8318046927452087+.9893810153007507)+.30803316831588745)+-.5680093765258789)+.27058160305023193;I=E*(1.5088008642196655+E*(E*.08693841099739075+-.9367857575416565))+-.6044155955314636;J=E*(E*.3388744592666626+ -1.4160192012786865)+.934120774269104;K=E*.5203223824501038+-.6391530632972717;L=.14381584525108337;N=F+D*(G+D*(H+D*(I+D*(J+D*(K+D*L)))));N=z+z*(1.0-E)*N;E=1.0/+Q(M*M+N*N+1.0);switch(C|0){case 1:{O=E;R=M*O;S=N*O;break};case 2:{R=E;O=(-0.0-M)*R;S=N*R;break};case 3:{O=-0.0-E;R=M*O;S=(-0.0-N)*O;break};case 4:{R=-0.0-E;O=(-0.0-M)*R;S=(-0.0-N)*R;break};case 5:{S=-0.0-E;O=(-0.0-N)*S;R=(-0.0-M)*S;break};default:{S=E;O=(-0.0-N)*S;R=M*S}}do{if(O==0.0){if(R!=0.0){A=2222;break}h[x>>3]=0.0}else{A=2222}}while(0);if((A|0)==2222){A=0;h[x>>3]=+cv(R,O)}h[j>>3]=+ct(S);l=k;k=l+4|0;c[l>>2]=0}v=v+1|0;x=x+(e<<3)|0;j=j+(e<<3)|0}y=y+1|0;m=m+(d<<3)|0}p=r;q=p;i=n;return q|0}function d8(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0,W=0.0,X=0.0;n=i;i=i+32|0;o=n|0;p=n+8|0;q=n+16|0;r=n+24|0;s=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((s|0)==0){t=1;u=t;i=n;return u|0}do{if((c[s>>2]|0)!=702){m=dh(s)|0;v=m;if((m|0)==0){break}t=v;u=t;i=n;return u|0}}while(0);if((b|0)>0){w=a;x=b}else{w=1;x=1;b=a}v=0;m=f;f=0;y=aa(a,e)|0;z=0;while(1){if((z|0)>=(a|0)){break}cq(+h[m>>3],q,o);A=j+(f<<3)|0;B=k+(f<<3)|0;C=0;while(1){if((C|0)>=(x|0)){break}h[A>>3]=+h[o>>3];h[B>>3]=+h[q>>3];A=A+(y<<3)|0;B=B+(y<<3)|0;C=C+1|0}z=z+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;A=j;B=k;k=l;C=0;while(1){if((C|0)>=(b|0)){break}cq(+h[m>>3],r,p);z=0;while(1){if((z|0)>=(w|0)){break}D=+h[p>>3]*+h[A>>3];E=+h[p>>3]*+h[B>>3];F=+h[r>>3];l=0;G=F;if(D>G){l=1;G=D}if(E>G){l=2;G=E}if(-0.0-D>G){l=3;G=-0.0-D}if(-0.0-E>G){l=4;G=-0.0-E}if(-0.0-F>G){l=5;G=-0.0-F}switch(l|0){case 2:{H=-0.0-D;I=F;J=2.0;K=0.0;break};case 3:{H=-0.0-E;I=F;J=4.0;K=0.0;break};case 5:{H=E;I=D;J=0.0;K=-2.0;break};case 4:{H=D;I=F;J=6.0;K=0.0;break};case 1:{H=E;I=F;J=0.0;K=0.0;break};default:{H=E;I=-0.0-D;J=0.0;K=2.0}}D=H/G;E=I/G;G=D*D;F=E*E;L=1.0-G;M=1.0-F;N=+P(+(D*E));if(G>1.0000000168623835e-16){O=G*G}else{O=0.0}Q=O;if(F>1.0000000168623835e-16){R=F*F}else{R=0.0}S=R;if(N>1.0000000168623835e-16){T=G*F}else{T=0.0}N=T;U=D*(G+L*(1.374848484992981+F*(-.1316167116165161*L+.004869491793215275*G+M*(.08097013086080551*G+.14118963479995728+-.2815285325050354*F+.15384112298488617*N+-.1782512068748474*Q+.10695946961641312*S))+G*(-.15959623456001282-L*(-.021776249632239342*G+.07591962069272995))));D=E*(F+M*(1.374848484992981+G*(-.1316167116165161*M+.004869491793215275*F+L*(.08097013086080551*F+.14118963479995728+-.2815285325050354*G+.15384112298488617*N+-.1782512068748474*S+.10695946961641312*Q))+F*(-.15959623456001282-M*(-.021776249632239342*F+.07591962069272995))));l=0;if(+P(+U)>1.0){if(+P(+U)>1.0000001000000012){l=1;if((v|0)==0){j=b0(s+360|0,4,220752,213832,6983,213192,(V=i,i=i+8|0,c[V>>2]=s+276,V)|0)|0;i=V;v=j}}if(U<0.0){W=-0.0- +P(+1.0)}else{W=+P(+1.0)}U=W}if(+P(+D)>1.0){if(+P(+D)>1.0000001000000012){l=1;if((v|0)==0){j=b0(s+360|0,4,220752,213832,6990,213192,(V=i,i=i+8|0,c[V>>2]=s+276,V)|0)|0;i=V;v=j}}if(D<0.0){X=-0.0- +P(+1.0)}else{X=+P(+1.0)}D=X}h[A>>3]=+h[s+368>>3]*(U+J)- +h[s+344>>3];h[B>>3]=+h[s+368>>3]*(D+K)- +h[s+352>>3];j=k;k=j+4|0;c[j>>2]=l;z=z+1|0;A=A+(e<<3)|0;B=B+(e<<3)|0}C=C+1|0;m=m+(d<<3)|0}t=v;u=t;i=n;return u|0}
function d9(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0.0,z=0,A=0,B=0.0,C=0,D=0,E=0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0;n=i;i=i+16|0;o=n|0;p=n+8|0;q=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((q|0)==0){r=1;s=r;i=n;return s|0}do{if((c[q>>2]|0)!=703){m=di(q)|0;t=m;if((m|0)==0){break}r=t;s=r;i=n;return s|0}}while(0);if((b|0)>0){u=a;v=b}else{u=1;v=1;b=a}t=0;m=f;f=0;w=aa(a,e)|0;x=0;while(1){if((x|0)>=(a|0)){break}y=(+h[m>>3]+ +h[q+344>>3])*+h[q+376>>3];z=j+(f<<3)|0;A=0;while(1){if((A|0)>=(v|0)){break}h[z>>3]=y;z=z+(w<<3)|0;A=A+1|0}x=x+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;z=j;j=k;k=l;A=0;while(1){if((A|0)>=(b|0)){break}B=(+h[m>>3]+ +h[q+352>>3])*+h[q+376>>3];x=0;while(1){if((x|0)>=(u|0)){break}y=+h[z>>3];L2991:do{if(+P(+y)<=1.0){if(+P(+B)<=3.0){C=2339;break}h[z>>3]=0.0;h[j>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;if((t|0)==0){l=b0(q+360|0,3,220648,213832,7126,213416,(D=i,i=i+8|0,c[D>>2]=q+276,D)|0)|0;i=D;t=l}}else{do{if(+P(+y)<=7.0){if(+P(+B)>1.0){break}C=2339;break L2991}}while(0);h[z>>3]=0.0;h[j>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;if((t|0)==0){l=b0(q+360|0,3,220648,213832,7134,213416,(D=i,i=i+8|0,c[D>>2]=q+276,D)|0)|0;i=D;t=l}}}while(0);L3007:do{if((C|0)==2339){C=0;if(y<-1.0){y=y+8.0}if(y>5.0){E=4;y=y-6.0}else{if(y>3.0){E=3;y=y-4.0}else{if(y>1.0){E=2;y=y-2.0}else{if(B>1.0){E=0;B=B-2.0}else{if(B<-1.0){E=5;B=B+2.0}else{E=1}}}}}l=+P(+y)>+P(+B)|0;if((l|0)!=0){if(y==0.0){F=0.0;G=1.0;H=1.0;I=0.0}else{J=15.0*B/y;K=+cp(J);F=K/(+co(J)-.7071067811865475);G=F*F+1.0;I=y*y*(1.0-1.0/+Q(1.0+G));H=1.0-I}}else{if(B==0.0){F=0.0;G=1.0;H=1.0;I=0.0}else{J=15.0*y/B;cq(J,p,o);F=+h[p>>3]/(+h[o>>3]-.7071067811865475);G=F*F+1.0;I=B*B*(1.0-1.0/+Q(1.0+G));H=1.0-I}}do{if(H<-1.0){if(H>=-1.000000000001){H=-1.0;I=2.0;J=0.0;break}h[z>>3]=0.0;h[j>>3]=0.0;g=k;k=g+4|0;c[g>>2]=1;if((t|0)==0){g=b0(q+360|0,3,220648,213832,7197,213416,(D=i,i=i+8|0,c[D>>2]=q+276,D)|0)|0;i=D;t=g}break L3007}else{J=+Q(I*(2.0-I)/G)}}while(0);switch(E|0){case 5:{L=-0.0-H;if((l|0)!=0){M=J;if(y<0.0){M=-0.0-M}N=M*F}else{N=J;if(B<0.0){N=-0.0-N}M=N*F}break};case 4:{M=-0.0-H;if((l|0)!=0){N=J;if(y<0.0){N=-0.0-N}L=N*F}else{L=J;if(B<0.0){L=-0.0-L}N=L*F}break};case 1:{N=H;if((l|0)!=0){M=J;if(y<0.0){M=-0.0-M}L=M*F}else{L=J;if(B<0.0){L=-0.0-L}M=L*F}break};case 3:{N=-0.0-H;if((l|0)!=0){M=J;if(y>0.0){M=-0.0-M}L=(-0.0-M)*F}else{L=J;if(B<0.0){L=-0.0-L}M=(-0.0-L)*F}break};case 2:{M=H;if((l|0)!=0){N=J;if(y>0.0){N=-0.0-N}L=(-0.0-N)*F}else{L=J;if(B<0.0){L=-0.0-L}N=(-0.0-L)*F}break};default:{L=H;if((l|0)!=0){M=J;if(y<0.0){M=-0.0-M}N=(-0.0-M)*F}else{N=J;if(B>0.0){N=-0.0-N}M=(-0.0-N)*F}}}do{if(N==0.0){if(M!=0.0){C=2424;break}h[z>>3]=0.0}else{C=2424}}while(0);if((C|0)==2424){C=0;h[z>>3]=+cv(M,N)}h[j>>3]=+ct(L);l=k;k=l+4|0;c[l>>2]=0}}while(0);x=x+1|0;z=z+(e<<3)|0;j=j+(e<<3)|0}A=A+1|0;m=m+(d<<3)|0}r=t;s=r;i=n;return s|0}function ea(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,R=0.0,S=0,T=0.0,U=0.0,V=0,W=0.0,X=0.0;n=i;i=i+32|0;o=n|0;p=n+8|0;q=n+16|0;r=n+24|0;s=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((s|0)==0){t=1;u=t;i=n;return u|0}do{if((c[s>>2]|0)!=703){m=di(s)|0;v=m;if((m|0)==0){break}t=v;u=t;i=n;return u|0}}while(0);if((b|0)>0){w=a;x=b}else{w=1;x=1;b=a}v=0;m=f;f=0;y=aa(a,e)|0;z=0;while(1){if((z|0)>=(a|0)){break}cq(+h[m>>3],q,o);A=j+(f<<3)|0;B=k+(f<<3)|0;C=0;while(1){if((C|0)>=(x|0)){break}h[A>>3]=+h[o>>3];h[B>>3]=+h[q>>3];A=A+(y<<3)|0;B=B+(y<<3)|0;C=C+1|0}z=z+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;A=j;B=k;k=l;C=0;while(1){if((C|0)>=(b|0)){break}cq(+h[m>>3],r,p);z=0;while(1){if((z|0)>=(w|0)){break}if(+P(+(+h[m>>3]))==90.0){h[A>>3]=-0.0- +h[s+344>>3];if(+h[m>>3]<0.0){D=-0.0- +P(+(+h[s+368>>3]*2.0))}else{D=+P(+(+h[s+368>>3]*2.0))}h[B>>3]=D- +h[s+352>>3];l=k;k=l+4|0;c[l>>2]=0}else{E=+h[p>>3]*+h[A>>3];F=+h[p>>3]*+h[B>>3];G=+h[r>>3];l=0;H=G;if(E>H){l=1;H=E}if(F>H){l=2;H=F}if(-0.0-E>H){l=3;H=-0.0-E}if(-0.0-F>H){l=4;H=-0.0-F}if(-0.0-G>H){l=5;H=-0.0-G}I=1.0-H;switch(l|0){case 1:{J=F;K=G;if(I<1.0e-8){L=+h[m>>3]*3.141592653589793/180.0;M=+Y(+(+h[B>>3]),+(+h[A>>3]));I=(M*M+L*L)/2.0}N=0.0;O=0.0;break};case 2:{J=-0.0-E;K=G;if(I<1.0e-8){L=+h[m>>3]*3.141592653589793/180.0;M=+Y(+(+h[B>>3]),+(+h[A>>3]))-1.5707963267948966;I=(M*M+L*L)/2.0}N=2.0;O=0.0;break};case 3:{J=-0.0-F;K=G;if(I<1.0e-8){L=+h[m>>3]*3.141592653589793/180.0;M=+Y(+(+h[B>>3]),+(+h[A>>3]));if(M<0.0){R=-0.0- +P(3.141592653589793)}else{R=+P(3.141592653589793)}M=M-R;I=(M*M+L*L)/2.0}N=4.0;O=0.0;break};case 4:{J=E;K=G;if(I<1.0e-8){L=+h[m>>3]*3.141592653589793/180.0;M=+Y(+(+h[B>>3]),+(+h[A>>3]))+1.5707963267948966;I=(M*M+L*L)/2.0}N=6.0;O=0.0;break};case 5:{J=F;K=E;if(I<1.0e-8){L=(+h[m>>3]+90.0)*3.141592653589793/180.0;I=L*L/2.0}N=0.0;O=-2.0;break};default:{J=F;K=-0.0-E;if(I<1.0e-8){L=(90.0- +h[m>>3])*3.141592653589793/180.0;I=L*L/2.0}N=0.0;O=2.0}}E=0.0;F=0.0;if(J!=0.0){S=2494}else{if(K!=0.0){S=2494}}if((S|0)==2494){S=0;if(-0.0-J>+P(+K)){T=K/J;U=T*T+1.0;E=-0.0- +Q(I/(1.0-1.0/+Q(1.0+U)));G=+cu(T);F=E/15.0*(G- +ct(T/+Q(U+U)))}else{if(J>+P(+K)){T=K/J;U=T*T+1.0;E=+Q(I/(1.0-1.0/+Q(1.0+U)));G=+cu(T);F=E/15.0*(G- +ct(T/+Q(U+U)))}else{if(-0.0-K>=+P(+J)){T=J/K;U=T*T+1.0;F=-0.0- +Q(I/(1.0-1.0/+Q(1.0+U)));G=+cu(T);E=F/15.0*(G- +ct(T/+Q(U+U)))}else{if(K>=+P(+J)){T=J/K;U=T*T+1.0;F=+Q(I/(1.0-1.0/+Q(1.0+U)));I=+cu(T);E=F/15.0*(I- +ct(T/+Q(U+U)))}}}}}l=0;if(+P(+E)>1.0){if(+P(+E)>1.000000000001){l=1;if((v|0)==0){j=b0(s+360|0,4,220640,213832,7504,213192,(V=i,i=i+8|0,c[V>>2]=s+276,V)|0)|0;i=V;v=j}}if(E<0.0){W=-0.0- +P(+1.0)}else{W=+P(+1.0)}E=W}if(+P(+F)>1.0){if(+P(+F)>1.000000000001){l=1;if((v|0)==0){j=b0(s+360|0,4,220640,213832,7511,213192,(V=i,i=i+8|0,c[V>>2]=s+276,V)|0)|0;i=V;v=j}}if(F<0.0){X=-0.0- +P(+1.0)}else{X=+P(+1.0)}F=X}h[A>>3]=+h[s+368>>3]*(E+N)- +h[s+344>>3];h[B>>3]=+h[s+368>>3]*(F+O)- +h[s+352>>3];j=k;k=j+4|0;c[j>>2]=l}z=z+1|0;A=A+(e<<3)|0;B=B+(e<<3)|0}C=C+1|0;m=m+(d<<3)|0}t=v;u=t;i=n;return u|0}function eb(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0.0,t=0.0,u=0,v=0,w=0,x=0,y=0.0,z=0.0,A=0.0,B=0,C=0,D=0,E=0.0,F=0,G=0;n=i;o=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((o|0)==0){p=1;q=p;i=n;return q|0}do{if((c[o>>2]|0)!=801){m=dj(o)|0;r=m;if((m|0)==0){break}p=r;q=p;i=n;return q|0}}while(0);s=+h[o+416>>3]+1.0e-12;t=+h[o+440>>3]*+h[o+400>>3];if((b|0)>0){u=a;v=b}else{u=1;v=1;b=a}r=0;m=f;f=0;w=aa(a,e)|0;x=0;while(1){if((x|0)>=(a|0)){break}y=+h[o+376>>3]*(+h[m>>3]+ +h[o+344>>3]);z=+O((+h[m>>3]+180.0)*+h[o+424>>3])*2.0+1.0;A=z*+h[o+416>>3]+-180.0;A=+h[o+376>>3]*(+h[m>>3]-A);B=j+(f<<3)|0;C=k+(f<<3)|0;D=0;while(1){if((D|0)>=(v|0)){break}h[B>>3]=y;h[C>>3]=A;B=B+(w<<3)|0;C=C+(w<<3)|0;D=D+1|0}x=x+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;B=j;C=k;k=l;D=0;while(1){if((D|0)>=(b|0)){break}z=+h[o+376>>3]*(+h[m>>3]+ +h[o+352>>3]);E=+P(+z);l=0;if(E<=+h[o+408>>3]){A=+ct(z/+h[o+392>>3]);x=0;while(1){if((x|0)>=(u|0)){break}h[C>>3]=A;j=k;k=j+4|0;c[j>>2]=0;x=x+1|0;B=B+(e<<3)|0;C=C+(e<<3)|0}}else{if(E<=t){if((c[o+452>>2]|0)!=0){F=1}else{F=+h[m>>3]>0.0}j=F?0:1;z=+h[o+400>>3]-E/+h[o+416>>3];if(z==0.0){y=1.0e9;A=90.0}else{A=1.0-z*z/+h[o+32>>3];if(A<-1.0){y=0.0;A=0.0;l=1;if((r|0)==0){g=b0(o+360|0,3,220584,213832,7706,213416,(G=i,i=i+8|0,c[G>>2]=o+276,G)|0)|0;i=G;r=g}}else{y=1.0/z;A=+ct(A)}}if(+h[m>>3]<0.0){A=-0.0-A}x=0;while(1){if((x|0)>=(u|0)){break}if((j|0)!=0){g=~~+O(+h[B>>3]/+h[o+416>>3]);if(((g+(c[o+448>>2]|0)|0)%2|0|0)!=0){g=C;h[g>>3]=+h[g>>3]- +h[o+416>>3]}else{g=C;h[g>>3]=+h[g>>3]+ +h[o+416>>3]}}y=y*+h[C>>3];if(y!=0.0){y=y- +h[C>>3]}g=B;h[g>>3]=+h[g>>3]+y;h[C>>3]=A;if((c[o+272>>2]&2|0)!=0){if(s<=+P(+y)){l=1;if((r|0)==0){g=b0(o+360|0,3,220584,213832,7735,213416,(G=i,i=i+8|0,c[G>>2]=o+276,G)|0)|0;i=G;r=g}}}g=k;k=g+4|0;c[g>>2]=l;x=x+1|0;B=B+(e<<3)|0;C=C+(e<<3)|0}}else{x=0;while(1){if((x|0)>=(u|0)){break}h[B>>3]=0.0;h[C>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;x=x+1|0;B=B+(e<<3)|0;C=C+(e<<3)|0}if((r|0)==0){l=b0(o+360|0,3,220584,213832,7749,213416,(G=i,i=i+8|0,c[G>>2]=o+276,G)|0)|0;i=G;r=l}}}D=D+1|0;m=m+(d<<3)|0}p=r;q=p;i=n;return q|0}function ec(a,b,d,e,f,g,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0.0,v=0.0,w=0,x=0,y=0,z=0.0,A=0;m=a;a=b;b=d;d=e;e=f;f=g;g=i;i=j;j=k;k=l;if((m|0)==0){n=1;o=n;return o|0}do{if((c[m>>2]|0)!=801){l=dj(m)|0;if((l|0)==0){break}n=l;o=n;return o|0}}while(0);if((b|0)>0){p=a;q=b}else{p=1;q=1;b=a}l=f;f=0;r=aa(a,e)|0;s=0;while(1){if((s|0)>=(a|0)){break}t=+h[m+368>>3]*+h[l>>3]- +h[m+344>>3];u=+O((+h[l>>3]+180.0)*+h[m+424>>3])*2.0+1.0;v=u*+h[m+416>>3]+-180.0;v=+h[m+368>>3]*(+h[l>>3]-v);w=i+(f<<3)|0;x=j+(f<<3)|0;y=0;while(1){if((y|0)>=(q|0)){break}h[w>>3]=t;h[x>>3]=v;w=w+(r<<3)|0;x=x+(r<<3)|0;y=y+1|0}s=s+1|0;f=f+e|0;l=l+(d<<3)|0}l=g;w=i;x=j;j=k;y=0;while(1){if((y|0)>=(b|0)){break}v=+cp(+h[l>>3]);u=+P(+v);if(u<=+h[m+384>>3]){z=+h[m+432>>3]*v- +h[m+352>>3];s=0;while(1){if((s|0)>=(p|0)){break}h[x>>3]=z;k=j;j=k+4|0;c[k>>2]=0;s=s+1|0;w=w+(e<<3)|0;x=x+(e<<3)|0}}else{if((c[m+452>>2]|0)!=0){A=1}else{A=+h[l>>3]>0.0}k=A?0:1;v=+Q(+h[m+32>>3]*(1.0-u));t=v-1.0;z=+h[m+440>>3]*(+h[m+400>>3]-v);if(+h[l>>3]<0.0){z=-0.0-z}z=z- +h[m+352>>3];s=0;while(1){if((s|0)>=(p|0)){break}if((k|0)!=0){i=~~+O((+h[w>>3]+ +h[m+344>>3])/+h[m+440>>3]);if(((i+(c[m+448>>2]|0)|0)%2|0|0)!=0){i=x;h[i>>3]=+h[i>>3]- +h[m+440>>3]}else{i=x;h[i>>3]=+h[i>>3]+ +h[m+440>>3]}}i=w;h[i>>3]=+h[i>>3]+ +h[x>>3]*t;h[x>>3]=z;i=j;j=i+4|0;c[i>>2]=0;if(180.0<+h[w>>3]){h[w>>3]=360.0- +h[w>>3]}s=s+1|0;w=w+(e<<3)|0;x=x+(e<<3)|0}}y=y+1|0;l=l+(d<<3)|0}n=0;o=n;return o|0}function ed(a,b,d,e,f,g,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0.0,A=0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0,H=0;n=i;o=a;a=b;b=d;d=e;e=f;f=g;g=j;j=k;k=l;l=m;if((o|0)==0){p=1;q=p;i=n;return q|0}do{if((c[o>>2]|0)!=802){m=dk(o)|0;r=m;if((m|0)==0){break}p=r;q=p;i=n;return q|0}}while(0);if((b|0)>0){s=a;t=b}else{s=1;t=1;b=a}r=0;m=f;f=0;u=aa(a,e)|0;v=0;while(1){if((v|0)>=(a|0)){break}w=(+h[m>>3]+ +h[o+344>>3])*+h[o+376>>3];x=j+(f<<3)|0;y=0;while(1){if((y|0)>=(t|0)){break}h[x>>3]=w;x=x+(u<<3)|0;y=y+1|0}v=v+1|0;f=f+e|0;m=m+(d<<3)|0}m=g;x=j;j=k;k=l;y=0;while(1){if((y|0)>=(b|0)){break}z=(+h[m>>3]+ +h[o+352>>3])*+h[o+376>>3];v=0;while(1){if((v|0)>=(s|0)){break}w=+h[x>>3];do{if(w<=0.0){if(0.0>=z){A=2676;break}B=-0.0-w-z;C=w-z;h[x>>3]=-180.0}else{A=2676}}while(0);if((A|0)==2676){A=0;do{if(w<0.0){if(z>0.0){A=2679;break}B=w-z;C=w+z;h[x>>3]=-90.0}else{A=2679}}while(0);if((A|0)==2679){A=0;do{if(0.0<=w){if(z>=0.0){A=2682;break}B=w+z;C=-0.0-w+z;h[x>>3]=0.0}else{A=2682}}while(0);if((A|0)==2682){A=0;B=-0.0-w+z;C=-0.0-w-z;h[x>>3]=90.0}}}D=B+45.0;E=C+90.0;F=+P(+E);if(F<=90.0){if(F<=45.0){l=x;h[l>>3]=+h[l>>3]+D;h[j>>3]=+ct(E/67.5);G=0;if((c[o+272>>2]&2|0)!=0){if(45.000000000001<+P(+B)){G=1;if((r|0)==0){l=b0(o+360|0,3,220552,213832,8028,213416,(H=i,i=i+8|0,c[H>>2]=o+276,H)|0)|0;i=H;r=l}}}l=k;k=l+4|0;c[l>>2]=G}else{D=(90.0-F)/45.0;if(w==0.0){if(z<=0.0){h[x>>3]=0.0}else{h[x>>3]=180.0}}else{if(z==0.0){if(w<0.0){h[x>>3]=270.0}else{h[x>>3]=90.0}}else{l=x;h[l>>3]=+h[l>>3]+(B/D+45.0)}}if(D<+h[o+392>>3]){h[j>>3]=90.0-D*+h[o+400>>3]}else{h[j>>3]=+ct(1.0-D*D/3.0)}if(E<0.0){h[j>>3]=-0.0- +h[j>>3]}G=0;if((c[o+272>>2]&2|0)!=0){do{if(E<-45.0){if(E+90.0+1.0e-12>=+P(+B)){break}G=1;if((r|0)==0){l=b0(o+360|0,3,220552,213832,8067,213416,(H=i,i=i+8|0,c[H>>2]=o+276,H)|0)|0;i=H;r=l}}}while(0)}l=k;k=l+4|0;c[l>>2]=G}}else{h[x>>3]=0.0;h[j>>3]=0.0;l=k;k=l+4|0;c[l>>2]=1;if((r|0)==0){l=b0(o+360|0,3,220552,213832,8079,213416,(H=i,i=i+8|0,c[H>>2]=o+276,H)|0)|0;i=H;r=l}}v=v+1|0;x=x+(e<<3)|0;j=j+(e<<3)|0}y=y+1|0;m=m+(d<<3)|0}p=r;q=p;i=n;return q|0}function ee(a,b,d,e,f,g,i,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0.0,v=0,w=0,x=0,y=0.0,z=0.0,A=0.0;m=a;a=b;b=d;d=e;e=f;f=g;g=i;i=j;j=k;k=l;if((m|0)==0){n=1;o=n;return o|0}do{if((c[m>>2]|0)!=802){l=dk(m)|0;if((l|0)==0){break}n=l;o=n;return o|0}}while(0);if((b|0)>0){p=a;q=b}else{p=1;q=1;b=a}l=f;f=0;r=aa(a,e)|0;s=0;while(1){if((s|0)>=(a|0)){break}t=+h[l>>3];if(180.0<=+P(+t)){t=+be(+t,+360.0);if(t<-180.0){t=t+360.0}else{if(180.0<=t){t=t-360.0}}}t=t+180.0;u=+be(+t,+90.0);v=i+(f<<3)|0;w=j+(f<<3)|0;x=0;while(1){if((x|0)>=(q|0)){break}h[v>>3]=u;h[w>>3]=t-180.0;v=v+(r<<3)|0;w=w+(r<<3)|0;x=x+1|0}s=s+1|0;f=f+e|0;l=l+(d<<3)|0}l=g;v=i;w=j;j=k;x=0;while(1){if((x|0)>=(b|0)){break}t=+cp(+h[l>>3]);u=+P(+t);s=0;while(1){if((s|0)>=(p|0)){break}if(u<=+h[m+384>>3]){y=+h[v>>3];z=67.5*t}else{if(+h[l>>3]<+h[m+408>>3]){A=+Q((1.0-u)*3.0)}else{A=(90.0- +h[l>>3])*+h[m+416>>3]}y=(+h[v>>3]-45.0)*A+45.0;z=(2.0-A)*45.0;if(+h[l>>3]<0.0){z=-0.0-z}}y=y-45.0;z=z-90.0;if(+h[w>>3]<-90.0){h[v>>3]=+h[m+368>>3]*(-0.0-y+z)- +h[m+344>>3];h[w>>3]=+h[m+368>>3]*(-0.0-y-z)- +h[m+352>>3]}else{if(+h[w>>3]<0.0){h[v>>3]=+h[m+368>>3]*(y+z)- +h[m+344>>3];h[w>>3]=+h[m+368>>3]*(-0.0-y+z)- +h[m+352>>3]}else{if(+h[w>>3]<90.0){h[v>>3]=+h[m+368>>3]*(y-z)- +h[m+344>>3];h[w>>3]=+h[m+368>>3]*(y+z)- +h[m+352>>3]}else{h[v>>3]=+h[m+368>>3]*(-0.0-y-z)- +h[m+344>>3];h[w>>3]=+h[m+368>>3]*(y-z)- +h[m+352>>3]}}}k=j;j=k+4|0;c[k>>2]=0;s=s+1|0;v=v+(e<<3)|0;w=w+(e<<3)|0}x=x+1|0;l=l+(d<<3)|0}n=0;o=n;return o|0}function ef(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}c[b>>2]=0;a=b+4|0;ft(a|0,0,8)|0;fu(b+4|0,215168)|0;fu(b+12|0,214176)|0;h[b+16>>3]=9.87654321e+107;h[b+24>>3]=0.0;h[b+32>>3]=0.0;a=0;while(1){if((a|0)>=7){break}h[b+40+(a<<3)>>3]=9.87654321e+107;a=a+1|0}a=0;while(1){if((a|0)>=6){break}h[b+96+(a<<3)>>3]=0.0;a=a+1|0}c[b+144>>2]=0;c[b+148>>2]=0;c[b+152>>2]=0;c[b+156>>2]=0;c[b+160>>2]=0;c[b+164>>2]=0;c[b+168>>2]=0;c[b+172>>2]=0;d=0;e=d;return e|0}function eg(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}if((c[b+152>>2]|0)!=0){fo(c[b+152>>2]|0);c[b+152>>2]=0}d=0;e=d;return e|0}function eh(b){b=b|0;var d=0,e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0,s=0.0,t=0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0;d=i;i=i+56|0;e=d|0;f=d+16|0;g=d+24|0;j=d+32|0;k=d+40|0;l=d+48|0;m=b;if((m|0)==0){n=1;o=n;i=d;return o|0}if(+h[m+16>>3]==9.87654321e+107){b=b0(m+152|0,2,c[53014]|0,217616,227,217448,(p=i,i=i+1|0,i=i+7&-8,c[p>>2]=0,p)|0)|0;i=p;n=b;o=n;i=d;return o|0}b=m+8|0;ft(b|0,0,4)|0;a[m+15|0]=0;cx(4,m+4|0);cx(3,m+12|0);h[m+96>>3]=0.0;b=e;ft(b|0,0,9)|0;fv(e|0,m+4|0,4)|0;if((a[m+12|0]|0)!=32){b=e+4|0;q=m+12|0;aR(b|0,217304,(p=i,i=i+8|0,c[p>>2]=q,p)|0)|0;i=p}r=+h[m+24>>3];s=+h[m+32>>3];p=ei(e|0,+h[m+16>>3],r,s,f,g,j,k,l,m+152|0)|0;if((p|0)!=0){n=p;o=n;i=d;return o|0}if((c[j>>2]|0)!=0){do{if((c[j>>2]|0)==3){if(r!=0.0){break}if(s!=0.0){break}s=1.0}}while(0);if(r==0.0){r=299792458.0/s}else{s=299792458.0/r}if((a[f]|0)==70){h[m+96>>3]=r}else{if((a[f]|0)!=86){h[m+96>>3]=s}else{if((a[g]|0)==70){h[m+96>>3]=r}else{h[m+96>>3]=s}}}}h[m+104>>3]=+h[k>>3];h[m+112>>3]=+h[l>>3];if((a[f]|0)==70){if((bi(m+4|0,217064)|0)==0){c[m>>2]=0;c[m+164>>2]=0;c[m+168>>2]=0}else{if((bi(m+4|0,217032)|0)==0){c[m>>2]=1;c[m+164>>2]=10;c[m+168>>2]=50}else{if((bi(m+4|0,216944)|0)==0){c[m>>2]=2;c[m+164>>2]=28;c[m+168>>2]=32}else{if((bi(m+4|0,216864)|0)==0){c[m>>2]=3;c[m+164>>2]=6;c[m+168>>2]=42}else{if((bi(m+4|0,216776)|0)==0){c[m>>2]=4;c[m+164>>2]=48;c[m+168>>2]=4}}}}}}else{if((a[f]|0)==87){if((bi(m+4|0,216632)|0)==0){c[m>>2]=10;c[m+164>>2]=0;c[m+168>>2]=0}else{if((bi(m+4|0,216520)|0)==0){c[m>>2]=11;c[m+164>>2]=18;c[m+168>>2]=40}else{if((bi(m+4|0,216392)|0)==0){c[m>>2]=12;c[m+164>>2]=26;c[m+168>>2]=24}}}}else{if((a[f]|0)==65){if((bi(m+4|0,216352)|0)==0){c[m>>2]=20;c[m+164>>2]=0;c[m+168>>2]=0}}else{if((a[f]|0)==86){if((bi(m+4|0,216264)|0)==0){c[m>>2]=30;c[m+164>>2]=0;c[m+168>>2]=0}else{if((bi(m+4|0,216128)|0)==0){c[m>>2]=31;c[m+164>>2]=12;c[m+168>>2]=46}}}}}}c[m+144>>2]=0;if((a[g]|0)==70){if((a[f]|0)==70){c[m+160>>2]=0;c[m+172>>2]=0}else{if((a[f]|0)==87){c[m+160>>2]=14;c[m+172>>2]=30}else{if((a[f]|0)==65){c[m+160>>2]=20;c[m+172>>2]=2}else{if((a[f]|0)==86){c[m+160>>2]=34;c[m+172>>2]=22}}}}l=m|0;c[l>>2]=(c[l>>2]|0)+100}else{do{if((a[g]|0)==87){t=2889}else{if((a[g]|0)==119){t=2889;break}do{if((a[g]|0)==65){t=2906}else{if((a[g]|0)==97){t=2906;break}if((a[g]|0)==86){if((a[f]|0)==70){c[m+160>>2]=22;c[m+172>>2]=34}else{if((a[f]|0)==87){c[m+160>>2]=8;c[m+172>>2]=36}else{if((a[f]|0)==65){c[m+160>>2]=16;c[m+172>>2]=44}else{if((a[f]|0)==86){c[m+160>>2]=0;c[m+172>>2]=0}}}}l=m|0;c[l>>2]=(c[l>>2]|0)+400}}}while(0);if((t|0)==2906){if((a[f]|0)==70){c[m+160>>2]=2;c[m+172>>2]=20}else{if((a[f]|0)==87){c[m+160>>2]=38;c[m+172>>2]=52}else{if((a[f]|0)==65){c[m+160>>2]=0;c[m+172>>2]=0}else{if((a[f]|0)==86){c[m+160>>2]=44;c[m+172>>2]=16}}}}if((a[g]|0)==65){l=m|0;c[l>>2]=(c[l>>2]|0)+300}else{c[m+144>>2]=2;l=m|0;c[l>>2]=(c[l>>2]|0)+600}}}}while(0);if((t|0)==2889){if((a[f]|0)==70){c[m+160>>2]=30;c[m+172>>2]=14}else{if((a[f]|0)==87){c[m+160>>2]=0;c[m+172>>2]=0}else{if((a[f]|0)==65){c[m+160>>2]=52;c[m+172>>2]=38}else{if((a[f]|0)==86){c[m+160>>2]=36;c[m+172>>2]=8}}}}if((a[g]|0)==87){g=m|0;c[g>>2]=(c[g>>2]|0)+200}else{c[m+144>>2]=1;g=m|0;c[g>>2]=(c[g>>2]|0)+500}}}if((c[m+144>>2]|0)!=0){s=+h[k>>3];if(+h[m+40>>3]==9.87654321e+107){h[m+40>>3]=0.0}if(+h[m+48>>3]==9.87654321e+107){h[m+48>>3]=0.0}if(+h[m+56>>3]==9.87654321e+107){h[m+56>>3]=0.0}if(+h[m+64>>3]==9.87654321e+107){h[m+64>>3]=1.0}if(+h[m+72>>3]==9.87654321e+107){h[m+72>>3]=0.0}if(+h[m+80>>3]==9.87654321e+107){h[m+80>>3]=0.0}if(+h[m+88>>3]==9.87654321e+107){h[m+88>>3]=0.0}r=+h[m+56>>3];u=+h[m+64>>3];v=+h[m+72>>3];w=+h[m+88>>3];x=+h[m+40>>3]*+h[m+48>>3];y=x/+co(+h[m+80>>3]);x=+ct(y*s-u*+cp(r));y=y-v*+cp(r);h[m+104>>3]=-0.0- +cr(w);z=+co(x);A=z*+co(w);z=y/(A*+co(w));k=m+112|0;h[k>>3]=+h[k>>3]*z;h[m+120>>3]=x+w;h[m+128>>3]=(u-v*s)*+cp(r);h[m+136>>3]=1.0/y}n=0;o=n;i=d;return o|0}function ei(b,d,e,f,g,j,k,l,m,n){b=b|0;d=+d;e=+e;f=+f;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;var o=0,p=0,q=0,r=0,s=0.0,t=0,u=0,v=0,w=0,x=0,y=0;o=i;i=i+352|0;p=o+8|0;q=o+16|0;r=o+24|0;s=d;d=e;e=f;t=g;g=j;j=k;k=l;l=m;m=n;n=em(b,p|0,o|0,0,0,t,g,j,m)|0;b=n;if((n|0)!=0){u=b;v=u;i=o;return v|0}if((a1(213568,g|0)|0)!=0){n=b0(m,2,c[53012]|0,217616,919,213280,(w=i,i=i+1|0,i=i+7&-8,c[w>>2]=0,w)|0)|0;i=w;u=n;v=u;i=o;return v|0}do{if(((c[j>>2]|0)%3|0|0)!=0){if(d!=0.0){break}if(e!=0.0){break}n=b0(m,2,c[53012]|0,217616,925,213144,(w=i,i=i+1|0,i=i+7&-8,c[w>>2]=0,w)|0)|0;i=w;u=n;v=u;i=o;return v|0}}while(0);fu(q|0,p|0)|0;if((m|0)!=0){x=c[m>>2]|0}else{x=0}c[r+320>>2]=x;x=eq(q|0,s,d,e,r)|0;b=x;if((x|0)!=0){b=2;if((m|0)!=0){c[m>>2]=c[r+320>>2];c[c[m>>2]>>2]=b}else{fo(c[r+320>>2]|0)}u=b;v=u;i=o;return v|0}e=0.0;d=0.0;if((a[t]|0)==70){if((bi(p|0,217064)|0)==0){e=1.0}else{if((bi(p|0,217032)|0)==0){e=+h[r+112>>3]}else{if((bi(p|0,216944)|0)==0){e=+h[r+128>>3]}else{if((bi(p|0,216864)|0)==0){e=+h[r+144>>3]}else{if((bi(p|0,216776)|0)==0){e=+h[r+160>>3]}}}}}if((a[g]|0)==70){h[k>>3]=+h[r+24>>3];d=1.0}else{do{if((a[g]|0)==87){y=2994}else{if((a[g]|0)==119){y=2994;break}do{if((a[g]|0)==65){y=2997}else{if((a[g]|0)==97){y=2997;break}if((a[g]|0)==86){h[k>>3]=+h[r+96>>3];d=+h[r+216>>3]}}}while(0);if((y|0)==2997){h[k>>3]=+h[r+88>>3];d=+h[r+200>>3]}}}while(0);if((y|0)==2994){h[k>>3]=+h[r+64>>3];d=+h[r+184>>3]}}}else{do{if((a[t]|0)==87){y=3006}else{if((a[t]|0)==119){y=3006;break}do{if((a[t]|0)==65){y=3030}else{if((a[t]|0)==97){y=3030;break}if((a[t]|0)==86){if((bi(p|0,216264)|0)==0){e=1.0}else{if((bi(p|0,216128)|0)==0){e=+h[r+304>>3]}}if((a[g]|0)==70){h[k>>3]=+h[r+24>>3];d=+h[r+208>>3]}else{do{if((a[g]|0)==87){y=3056}else{if((a[g]|0)==119){y=3056;break}do{if((a[g]|0)==65){y=3059}else{if((a[g]|0)==97){y=3059;break}if((a[g]|0)==86){h[k>>3]=+h[r+96>>3];d=1.0}}}while(0);if((y|0)==3059){h[k>>3]=+h[r+88>>3];d=+h[r+288>>3]}}}while(0);if((y|0)==3056){h[k>>3]=+h[r+64>>3];d=+h[r+272>>3]}}}}}while(0);if((y|0)==3030){if((bi(p|0,216352)|0)==0){e=1.0}if((a[g]|0)==70){h[k>>3]=+h[r+24>>3];d=+h[r+192>>3]}else{do{if((a[g]|0)==87){y=3036}else{if((a[g]|0)==119){y=3036;break}do{if((a[g]|0)==65){y=3039}else{if((a[g]|0)==97){y=3039;break}if((a[g]|0)==86){h[k>>3]=+h[r+96>>3];d=+h[r+296>>3]}}}while(0);if((y|0)==3039){h[k>>3]=+h[r+88>>3];d=1.0}}}while(0);if((y|0)==3036){h[k>>3]=+h[r+64>>3];d=+h[r+256>>3]}}}}}while(0);if((y|0)==3006){if((bi(p|0,216632)|0)==0){e=1.0}else{if((bi(p|0,216520)|0)==0){e=+h[r+224>>3]}else{if((bi(p|0,216392)|0)==0){e=+h[r+240>>3]}}}if((a[g]|0)==70){h[k>>3]=+h[r+24>>3];d=+h[r+176>>3]}else{do{if((a[g]|0)==87){y=3018}else{if((a[g]|0)==119){y=3018;break}do{if((a[g]|0)==65){y=3021}else{if((a[g]|0)==97){y=3021;break}if((a[g]|0)==86){h[k>>3]=+h[r+96>>3];d=+h[r+280>>3]}}}while(0);if((y|0)==3021){h[k>>3]=+h[r+88>>3];d=+h[r+264>>3]}}}while(0);if((y|0)==3018){h[k>>3]=+h[r+64>>3];d=1.0}}}}h[l>>3]=d*e;u=0;v=u;i=o;return v|0}function ej(a,b,d,e,f,g,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0.0,v=0;k=i;l=a;a=b;b=d;d=e;e=f;f=g;g=j;j=0;if((l|0)==0){m=1;n=m;i=k;return n|0}o=l+152|0;do{if((c[l>>2]|0)==0){p=eh(l)|0;j=p;if((p|0)==0){break}m=j;n=m;i=k;return n|0}}while(0);p=e;e=f;q=g;r=0;while(1){if((r|0)>=(a|0)){break}h[e>>3]=+h[l+104>>3]+ +h[p>>3]*+h[l+112>>3];s=q;q=s+4|0;c[s>>2]=0;r=r+1|0;p=p+(b<<3)|0;e=e+(d<<3)|0}if((c[l+144>>2]|0)!=0){e=f;r=0;while(1){if((r|0)>=(a|0)){break}t=+cu(+h[e>>3]);u=+cp(t+ +h[l+120>>3]);h[e>>3]=(u+ +h[l+128>>3])*+h[l+136>>3];r=r+1|0;e=e+(d<<3)|0}}if((c[l+160>>2]|0)!=0){e=bu[c[l+160>>2]&63](+h[l+96>>3],a,d,d,f,f,g)|0;r=e;do{if((e|0)!=0){if((r|0)==4){j=3;break}if((r|0)==2){b=b0(o,2,c[53008]|0,217616,555,215816,(v=i,i=i+1|0,i=i+7&-8,c[v>>2]=0,v)|0)|0;i=v;m=b;n=m;i=k;return n|0}else{b=b0(o,r,c[53008]|0,217616,558,c[212104+(r<<2)>>2]|0,(v=i,i=i+1|0,i=i+7&-8,c[v>>2]=0,v)|0)|0;i=v;m=b;n=m;i=k;return n|0}}}while(0)}if((c[l+164>>2]|0)!=0){r=bu[c[l+164>>2]&63](+h[l+96>>3],a,d,d,f,f,g)|0;g=r;do{if((r|0)!=0){if((g|0)==4){j=3;break}if((g|0)==2){f=b0(o,2,c[53008]|0,217616,571,215816,(v=i,i=i+1|0,i=i+7&-8,c[v>>2]=0,v)|0)|0;i=v;m=f;n=m;i=k;return n|0}else{f=b0(o,g,c[53008]|0,217616,574,c[212104+(g<<2)>>2]|0,(v=i,i=i+1|0,i=i+7&-8,c[v>>2]=0,v)|0)|0;i=v;m=f;n=m;i=k;return n|0}}}while(0)}if((j|0)!=0){g=o;o=j;r=c[53008]|0;f=c[212104+(j<<2)>>2]|0;b0(g,o,r,217616,580,f,(v=i,i=i+1|0,i=i+7&-8,c[v>>2]=0,v)|0)|0;i=v}m=j;n=m;i=k;return n|0}function ek(a,b,d,e,f,g,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0.0;k=i;l=a;a=b;b=d;d=e;e=f;f=g;g=j;j=0;if((l|0)==0){m=1;n=m;i=k;return n|0}o=l+152|0;do{if((c[l>>2]|0)==0){p=eh(l)|0;j=p;if((p|0)==0){break}m=j;n=m;i=k;return n|0}}while(0);if((c[l+168>>2]|0)!=0){p=bu[c[l+168>>2]&63](+h[l+96>>3],a,b,d,e,f,g)|0;q=p;do{if((p|0)!=0){if((q|0)==4){j=4;break}if((q|0)==2){r=b0(o,2,c[53016]|0,217616,622,215816,(s=i,i=i+1|0,i=i+7&-8,c[s>>2]=0,s)|0)|0;i=s;m=r;n=m;i=k;return n|0}else{r=b0(o,q,c[53016]|0,217616,625,c[212104+(q<<2)>>2]|0,(s=i,i=i+1|0,i=i+7&-8,c[s>>2]=0,s)|0)|0;i=s;m=r;n=m;i=k;return n|0}}}while(0)}else{t=f;q=e;u=g;v=0;while(1){if((v|0)>=(a|0)){break}h[t>>3]=+h[q>>3];e=u;u=e+4|0;c[e>>2]=0;v=v+1|0;q=q+(b<<3)|0;t=t+(d<<3)|0}}if((c[l+172>>2]|0)!=0){b=bu[c[l+172>>2]&63](+h[l+96>>3],a,d,d,f,f,g)|0;q=b;do{if((b|0)!=0){if((q|0)==4){j=4;break}if((q|0)==2){e=b0(o,2,c[53016]|0,217616,648,215816,(s=i,i=i+1|0,i=i+7&-8,c[s>>2]=0,s)|0)|0;i=s;m=e;n=m;i=k;return n|0}else{e=b0(o,q,c[53016]|0,217616,651,c[212104+(q<<2)>>2]|0,(s=i,i=i+1|0,i=i+7&-8,c[s>>2]=0,s)|0)|0;i=s;m=e;n=m;i=k;return n|0}}}while(0)}if((c[l+144>>2]|0)!=0){t=f;u=g;v=0;while(1){if((v|0)>=(a|0)){break}if((c[u>>2]|0)==0){w=+h[t>>3]/+h[l+136>>3]- +h[l+128>>3];if(+P(+w)<=1.0){x=+ct(w);h[t>>3]=+cr(x- +h[l+120>>3])}else{c[u>>2]=1}}v=v+1|0;t=t+(d<<3)|0;u=u+4|0}}t=f;u=g;v=0;while(1){if((v|0)>=(a|0)){break}g=u;u=g+4|0;if((c[g>>2]|0)==0){g=t;h[g>>3]=+h[g>>3]- +h[l+104>>3];g=t;h[g>>3]=+h[g>>3]/+h[l+112>>3]}v=v+1|0;t=t+(d<<3)|0}if((j|0)!=0){d=o;o=j;t=c[53016]|0;v=c[212104+(j<<2)>>2]|0;b0(d,o,t,217616,685,v,(s=i,i=i+1|0,i=i+7&-8,c[s>>2]=0,s)|0)|0;i=s}m=j;n=m;i=k;return n|0}function el(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;return em(a,b,c,d,e,f,g,h,0)|0}function em(b,d,e,f,g,h,j,k,l){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;m=i;i=i+56|0;n=m|0;o=m+16|0;p=m+48|0;q=d;d=e;e=f;f=g;g=h;h=j;j=k;k=l;l=0;if((k|0)!=0){c[k>>2]=0}aR(n|0,215520,(r=i,i=i+8|0,c[r>>2]=b,r)|0)|0;i=r;a[n+8|0]=0;if((av(n|0,217064,4)|0)==0){b=o|0;fu(b|0,215400)|0;b=p|0;fu(b|0,215336)|0;s=70}else{if((av(n|0,217032,4)|0)==0){b=o|0;fu(b|0,215304)|0;b=p|0;fu(b|0,215232)|0;s=70}else{if((av(n|0,216944,4)|0)==0){b=o|0;fu(b|0,215192)|0;b=p|0;fu(b|0,215176)|0;s=70}else{if((av(n|0,216864,4)|0)==0){b=o|0;fu(b|0,215144)|0;b=p|0;fu(b|0,215112)|0;s=70}else{if((av(n|0,216776,4)|0)==0){b=o|0;fu(b|0,214976)|0;b=p|0;fu(b|0,214808)|0;s=70;l=1}else{if((av(n|0,216632,4)|0)==0){b=o|0;fu(b|0,214656)|0;b=p|0;fu(b|0,214544)|0;s=87}else{if((av(n|0,216520,4)|0)==0){b=o|0;fu(b|0,214432)|0;b=p|0;fu(b|0,214808)|0;s=87;l=1}else{if((av(n|0,216392,4)|0)==0){b=o|0;fu(b|0,214288)|0;b=p|0;fu(b|0,222632)|0;s=87;l=1}else{if((av(n|0,216352,4)|0)==0){b=o|0;fu(b|0,214184)|0;b=p|0;fu(b|0,214544)|0;s=65}else{do{if((av(n|0,216264,4)|0)==0){b=o|0;fu(b|0,214144)|0;b=p|0;fu(b|0,214808)|0;s=86}else{if((av(n|0,216128,4)|0)==0){b=o|0;fu(b|0,214104)|0;b=p|0;fu(b|0,222632)|0;s=86;break}else{b=b0(k,2,c[53010]|0,217616,781,214048,(r=i,i=i+8|0,c[r>>2]=n,r)|0)|0;i=r;t=b;u=t;i=m;return u|0}}}while(0)}}}}}}}}}b=a[n+5|0]|0;v=b;do{if((b<<24>>24|0)==32){if((bi(n+4|0,215168)|0)==0){v=s;break}w=b0(k,2,c[53010]|0,217616,790,213944,(r=i,i=i+8|0,c[r>>2]=n+4,r)|0)|0;i=r;t=w;u=t;i=m;return u|0}else{if((a[n+4|0]|0)!=45){w=b0(k,2,c[53010]|0,217616,797,213896,(r=i,i=i+8|0,c[r>>2]=n,r)|0)|0;i=r;t=w;u=t;i=m;return u|0}do{if((bi(n+5|0,213824)|0)==0){x=147}else{if((bi(n+5|0,213776)|0)==0){x=147;break}if((v<<24>>24|0)==71){if((a[n+6|0]|0)!=82){w=b0(k,2,c[53010]|0,217616,806,213944,(r=i,i=i+8|0,c[r>>2]=v<<24>>24,r)|0)|0;i=r;t=w;u=t;i=m;return u|0}do{if((a[n+7|0]|0)==73){v=119}else{if((a[n+7|0]|0)==65){v=97;break}else{w=b0(k,2,c[53010]|0,217616,818,213944,(r=i,i=i+8|0,c[r>>2]=v<<24>>24,r)|0)|0;i=r;t=w;u=t;i=m;return u|0}}}while(0)}else{if((a[n+6|0]|0)!=50){w=b0(k,2,c[53010]|0,217616,824,213728,(r=i,i=i+8|0,c[r>>2]=v<<24>>24,r)|0)|0;i=r;t=w;u=t;i=m;return u|0}do{if((a[n+7|0]|0)!=(s<<24>>24|0)){if((a[n+7|0]|0)==63){break}w=b0(k,2,c[53010]|0,217616,828,213624,(r=i,i=i+8|0,c[r>>2]=n,r)|0)|0;i=r;t=w;u=t;i=m;return u|0}}while(0);if((a[n+7|0]|0)==(a[n+5|0]|0)){w=n+4|0;aR(w|0,215168,(r=i,i=i+1|0,i=i+7&-8,c[r>>2]=0,r)|0)|0;i=r}}}}while(0)}}while(0);if((aI(213584,v<<24>>24|0)|0)!=0){if((s<<24>>24|0)==86){l=l+2|0}}else{do{if((v<<24>>24|0)==86){if((aI(213584,s<<24>>24|0)|0)!=0){l=l+2|0}}else{if((aI(213568,v<<24>>24|0)|0)!=0){break}x=b0(k,2,c[53010]|0,217616,849,213496,(r=i,i=i+8|0,c[r>>2]=n,r)|0)|0;i=r;t=x;u=t;i=m;return u|0}}while(0)}if((q|0)!=0){r=q;k=n|0;fv(r|0,k|0,4)|0;a[q+4|0]=0}if((d|0)!=0){q=d;d=n+5|0;fu(q|0,d|0)|0}if((e|0)!=0){d=e;e=o|0;fu(d|0,e|0)|0}if((f|0)!=0){e=f;f=p|0;fu(e|0,f|0)|0}if((g|0)!=0){a[g]=s}if((h|0)!=0){a[h]=v}if((j|0)!=0){c[j>>2]=l}t=0;u=t;i=m;return u|0}function en(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;g=i;i=i+32|0;h=g|0;j=b;b=d;d=e;e=f;f=h;c[f>>2]=c[53018];c[f+4>>2]=c[53019];c[f+8>>2]=c[53020];c[f+12>>2]=c[53021];c[f+16>>2]=c[53022];c[f+20>>2]=c[53023];c[f+24>>2]=c[53024];if((d|0)!=(j|0)){f=d;k=j;fv(f|0,k|0,8)|0}a[d+8|0]=0;cy(9,d);a[e]=0;k=-1;do{if((av(d|0,217064,4)|0)==0){l=213}else{if((av(d|0,216264,4)|0)==0){l=213;break}if((av(d|0,212600,4)|0)==0){l=213}}}while(0);if((l|0)==213){f=d+4|0;j=f;if((a[f]|0)!=0){if((bi(j|0,212576)|0)==0){f=e;fu(f|0,212928)|0}else{do{if((bi(j|0,212528)|0)==0){f=e;fu(f|0,212824)|0}else{if((bi(j|0,212432)|0)==0){f=e;fu(f|0,212784)|0;break}else{m=-1;n=m;i=g;return n|0}}}while(0)}a[j]=0;k=0}j=(b|0)%256|0;do{if(0<(j|0)){if((j|0)>7){l=227;break}f=e;o=c[h+(j-1<<2)>>2]|0;fu(f|0,o|0)|0;k=0}else{l=227}}while(0);if((l|0)==227){if((j|0)!=0){k=2}}if((bi(d|0,216264)|0)==0){if((a[e]|0)!=0){j=(b|0)/256|0;if((j|0)==0){b=d;fu(b|0,216520)|0}else{if((j|0)==1){j=d;fu(j|0,216776)|0}else{k=2}}}}else{if((bi(d|0,212600)|0)==0){j=d;fu(j|0,221848)|0;if((k|0)<0){k=0}}}}m=k;n=m;i=g;return n|0}function eo(a,b,c,d,e,f,g,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0,K=0.0,L=0.0;l=i;i=i+32|0;m=l|0;n=l+8|0;o=l+16|0;p=l+24|0;q=a;a=b;b=c;c=d;d=e;e=f;f=g;g=j;j=k;if((b|0)>0){r=a;s=b}else{r=1;s=1;b=a}if(+h[q+32>>3]==0.0){if(+h[q+8>>3]==0.0){t=+be(+(+h[q>>3]+180.0- +h[q+16>>3]),+360.0);u=g;v=j;w=e;x=f;y=0;while(1){if((y|0)>=(b|0)){break}z=0;while(1){if((z|0)>=(r|0)){break}h[u>>3]=+h[w>>3]+t;h[v>>3]=+h[x>>3];if(+h[q>>3]>=0.0){if(+h[u>>3]<0.0){k=u;h[k>>3]=+h[k>>3]+360.0}}else{if(+h[u>>3]>0.0){k=u;h[k>>3]=+h[k>>3]-360.0}}if(+h[u>>3]>360.0){k=u;h[k>>3]=+h[k>>3]-360.0}else{if(+h[u>>3]<-360.0){k=u;h[k>>3]=+h[k>>3]+360.0}}u=u+(d<<3)|0;v=v+(d<<3)|0;w=w+(c<<3)|0;x=x+(c<<3)|0;z=z+1|0}y=y+1|0}}else{t=+be(+(+h[q>>3]+ +h[q+16>>3]),+360.0);u=g;v=j;w=e;x=f;y=0;while(1){if((y|0)>=(b|0)){break}z=0;while(1){if((z|0)>=(r|0)){break}h[u>>3]=t- +h[w>>3];h[v>>3]=-0.0- +h[x>>3];if(+h[q>>3]>=0.0){if(+h[u>>3]<0.0){k=u;h[k>>3]=+h[k>>3]+360.0}}else{if(+h[u>>3]>0.0){k=u;h[k>>3]=+h[k>>3]-360.0}}if(+h[u>>3]>360.0){k=u;h[k>>3]=+h[k>>3]-360.0}else{if(+h[u>>3]<-360.0){k=u;h[k>>3]=+h[k>>3]+360.0}}u=u+(d<<3)|0;v=v+(d<<3)|0;w=w+(c<<3)|0;x=x+(c<<3)|0;z=z+1|0}y=y+1|0}}A=0;B=A;i=l;return B|0}w=e;e=0;k=aa(a,d)|0;z=0;while(1){if((z|0)>=(a|0)){break}C=+h[w>>3]- +h[q+16>>3];u=g+(e<<3)|0;y=0;while(1){if((y|0)>=(s|0)){break}h[u>>3]=C;u=u+(k<<3)|0;y=y+1|0}z=z+1|0;e=e+d|0;w=w+(c<<3)|0}x=f;u=g;v=j;y=0;while(1){if((y|0)>=(b|0)){break}cq(+h[x>>3],p,n);D=+h[n>>3]*+h[q+24>>3];E=+h[n>>3]*+h[q+32>>3];F=+h[p>>3]*+h[q+24>>3];G=+h[p>>3]*+h[q+32>>3];z=0;while(1){if((z|0)>=(r|0)){break}C=+h[u>>3];cq(C,o,m);H=G-D*+h[m>>3];if(+P(+H)<1.0e-5){I=-0.0- +co(+h[x>>3]+ +h[q+8>>3]);H=I+D*(1.0- +h[m>>3])}I=(-0.0- +h[n>>3])*+h[o>>3];do{if(H!=0.0){J=314}else{if(I!=0.0){J=314;break}if(+h[q+8>>3]<90.0){t=C+180.0}else{t=-0.0-C}}}while(0);if((J|0)==314){J=0;t=+cv(I,H)}h[u>>3]=+h[q>>3]+t;if(+h[q>>3]>=0.0){if(+h[u>>3]<0.0){j=u;h[j>>3]=+h[j>>3]+360.0}}else{if(+h[u>>3]>0.0){j=u;h[j>>3]=+h[j>>3]-360.0}}if(+h[u>>3]>360.0){j=u;h[j>>3]=+h[j>>3]-360.0}else{if(+h[u>>3]<-360.0){j=u;h[j>>3]=+h[j>>3]+360.0}}if(+be(+C,+180.0)==0.0){h[v>>3]=+h[x>>3]+ +h[m>>3]*+h[q+8>>3];if(+h[v>>3]>90.0){h[v>>3]=180.0- +h[v>>3]}if(+h[v>>3]<-90.0){h[v>>3]=-180.0- +h[v>>3]}}else{K=F+E*+h[m>>3];if(+P(+K)>.99){if(K<0.0){L=-0.0- +P(+(+cs(+Q(H*H+I*I))))}else{L=+P(+(+cs(+Q(H*H+I*I))))}h[v>>3]=L}else{h[v>>3]=+ct(K)}}z=z+1|0;u=u+(d<<3)|0;v=v+(d<<3)|0}y=y+1|0;x=x+(c<<3)|0}A=0;B=A;i=l;return B|0}function ep(a,b,c,d,e,f,g,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0,K=0.0,L=0.0;l=i;i=i+32|0;m=l|0;n=l+8|0;o=l+16|0;p=l+24|0;q=a;a=b;b=c;c=d;d=e;e=f;f=g;g=j;j=k;if((b|0)>0){r=a;s=b}else{r=1;s=1;b=a}if(+h[q+32>>3]==0.0){if(+h[q+8>>3]==0.0){t=+be(+(+h[q+16>>3]-180.0- +h[q>>3]),+360.0);u=e;v=f;w=g;x=j;y=0;while(1){if((y|0)>=(b|0)){break}z=0;while(1){if((z|0)>=(r|0)){break}h[w>>3]=+be(+(+h[u>>3]+t),+360.0);h[x>>3]=+h[v>>3];if(+h[w>>3]>180.0){k=w;h[k>>3]=+h[k>>3]-360.0}else{if(+h[w>>3]<-180.0){k=w;h[k>>3]=+h[k>>3]+360.0}}w=w+(d<<3)|0;x=x+(d<<3)|0;u=u+(c<<3)|0;v=v+(c<<3)|0;z=z+1|0}y=y+1|0}}else{t=+be(+(+h[q+16>>3]+ +h[q>>3]),+360.0);u=e;v=f;w=g;x=j;y=0;while(1){if((y|0)>=(b|0)){break}z=0;while(1){if((z|0)>=(r|0)){break}h[w>>3]=+be(+(t- +h[u>>3]),+360.0);h[x>>3]=-0.0- +h[v>>3];if(+h[w>>3]>180.0){k=w;h[k>>3]=+h[k>>3]-360.0}else{if(+h[w>>3]<-180.0){k=w;h[k>>3]=+h[k>>3]+360.0}}w=w+(d<<3)|0;x=x+(d<<3)|0;u=u+(c<<3)|0;v=v+(c<<3)|0;z=z+1|0}y=y+1|0}}A=0;B=A;i=l;return B|0}u=e;e=0;k=aa(a,d)|0;z=0;while(1){if((z|0)>=(a|0)){break}C=+h[u>>3]- +h[q>>3];w=g+(e<<3)|0;x=j;y=0;while(1){if((y|0)>=(s|0)){break}h[w>>3]=C;w=w+(k<<3)|0;y=y+1|0}z=z+1|0;e=e+d|0;u=u+(c<<3)|0}v=f;w=g;x=j;y=0;while(1){if((y|0)>=(b|0)){break}cq(+h[v>>3],o,m);D=+h[m>>3]*+h[q+24>>3];E=+h[m>>3]*+h[q+32>>3];F=+h[o>>3]*+h[q+24>>3];G=+h[o>>3]*+h[q+32>>3];z=0;while(1){if((z|0)>=(r|0)){break}C=+h[w>>3];cq(C,p,n);H=G-D*+h[n>>3];if(+P(+H)<1.0e-5){I=-0.0- +co(+h[v>>3]+ +h[q+8>>3]);H=I+D*(1.0- +h[n>>3])}I=(-0.0- +h[m>>3])*+h[p>>3];do{if(H!=0.0){J=402}else{if(I!=0.0){J=402;break}if(+h[q+8>>3]<90.0){t=C-180.0}else{t=-0.0-C}}}while(0);if((J|0)==402){J=0;t=+cv(I,H)}h[w>>3]=+be(+(+h[q+16>>3]+t),+360.0);if(+h[w>>3]>180.0){j=w;h[j>>3]=+h[j>>3]-360.0}else{if(+h[w>>3]<-180.0){j=w;h[j>>3]=+h[j>>3]+360.0}}if(+be(+C,+180.0)==0.0){h[x>>3]=+h[v>>3]+ +h[n>>3]*+h[q+8>>3];if(+h[x>>3]>90.0){h[x>>3]=180.0- +h[x>>3]}if(+h[x>>3]<-90.0){h[x>>3]=-180.0- +h[x>>3]}}else{K=F+E*+h[n>>3];if(+P(+K)>.99){if(K<0.0){L=-0.0- +P(+(+cs(+Q(H*H+I*I))))}else{L=+P(+(+cs(+Q(H*H+I*I))))}h[x>>3]=L}else{h[x>>3]=+ct(K)}}z=z+1|0;w=w+(d<<3)|0;x=x+(d<<3)|0}y=y+1|0;v=v+(c<<3)|0}A=0;B=A;i=l;return B|0}function eq(a,b,d,e,f){a=a|0;b=+b;d=+d;e=+e;f=f|0;var g=0,j=0,k=0.0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0.0;g=i;j=a;k=b;b=d;d=e;a=f;if((a|0)==0){l=1;m=l;i=g;return m|0}f=a+320|0;n=1;if(b==0.0){if(d==0.0){n=0;h[a+8>>3]=1.0}else{h[a+8>>3]=d}h[a>>3]=299792458.0/+h[a+8>>3]}else{h[a>>3]=b;h[a+8>>3]=299792458.0/b}c[a+320>>2]=0;c[a+16>>2]=0;c[a+20>>2]=0;do{if((bi(j|0,214136)|0)==0){if(k!=0.0){h[a+24>>3]=k;c[a+16>>2]=1;break}o=b0(f,3,c[53006]|0,213560,99,213e3,(p=i,i=i+1|0,i=i+7&-8,c[p>>2]=0,p)|0)|0;i=p;l=o;m=l;i=g;return m|0}else{do{if((bi(j|0,212568)|0)==0){if(k!=0.0){h[a+24>>3]=k/6.283185307179586;c[a+16>>2]=1;break}o=b0(f,3,c[53006]|0,213560,107,213e3,(p=i,i=i+1|0,i=i+7&-8,c[p>>2]=0,p)|0)|0;i=p;l=o;m=l;i=g;return m|0}else{do{if((bi(j|0,221688)|0)==0){if(k!=0.0){h[a+24>>3]=k/6.6260755e-34;c[a+16>>2]=1;break}o=b0(f,3,c[53006]|0,213560,115,213e3,(p=i,i=i+1|0,i=i+7&-8,c[p>>2]=0,p)|0)|0;i=p;l=o;m=l;i=g;return m|0}else{do{if((bi(j|0,221392)|0)==0){if(k!=0.0){h[a+24>>3]=k*299792458.0;c[a+16>>2]=1;break}o=b0(f,3,c[53006]|0,213560,123,213e3,(p=i,i=i+1|0,i=i+7&-8,c[p>>2]=0,p)|0)|0;i=p;l=o;m=l;i=g;return m|0}else{if((bi(j|0,221096)|0)==0){h[a+24>>3]=+h[a>>3]*(1.0-k/299792458.0);c[a+20>>2]=1}else{do{if((bi(j|0,220856)|0)==0){if(k!=0.0){h[a+24>>3]=299792458.0/k;c[a+16>>2]=1;break}o=b0(f,3,c[53006]|0,213560,135,213e3,(p=i,i=i+1|0,i=i+7&-8,c[p>>2]=0,p)|0)|0;i=p;l=o;m=l;i=g;return m|0}else{do{if((bi(j|0,220576)|0)==0){q=k/299792458.0+1.0;if(q!=0.0){h[a+24>>3]=+h[a>>3]/q;c[a+20>>2]=1;break}o=b0(f,3,c[53006]|0,213560,144,216912,(p=i,i=i+1|0,i=i+7&-8,c[p>>2]=0,p)|0)|0;i=p;l=o;m=l;i=g;return m|0}else{do{if((bi(j|0,220480)|0)==0){q=1.0+k;if(q!=0.0){h[a+24>>3]=+h[a>>3]/q;c[a+20>>2]=1;break}o=b0(f,3,c[53006]|0,213560,153,216912,(p=i,i=i+1|0,i=i+7&-8,c[p>>2]=0,p)|0)|0;i=p;l=o;m=l;i=g;return m|0}else{do{if((bi(j|0,220336)|0)==0){if(k!=0.0){q=1.0/k;q=q*q;r=2554.0e5/(41.0e12-q);r=r+294981.0e5/(146.0e12-q);r=r+1.000064328;h[a+24>>3]=299792458.0/(k*r);c[a+16>>2]=1;break}o=b0(f,3,c[53006]|0,213560,161,216912,(p=i,i=i+1|0,i=i+7&-8,c[p>>2]=0,p)|0)|0;i=p;l=o;m=l;i=g;return m|0}else{do{if((bi(j|0,220208)|0)==0){b=k/299792458.0;if(+P(+b)!=1.0){h[a+24>>3]=+h[a>>3]*(1.0-b)/+Q(1.0-b*b);c[a+20>>2]=1;break}o=b0(f,3,c[53006]|0,213560,175,216912,(p=i,i=i+1|0,i=i+7&-8,c[p>>2]=0,p)|0)|0;i=p;l=o;m=l;i=g;return m|0}else{if((bi(j|0,220040)|0)!=0){o=b0(f,2,c[53006]|0,213560,191,219640,(p=i,i=i+8|0,c[p>>2]=j,p)|0)|0;i=p;l=o;m=l;i=g;return m|0}if(+P(+k)==1.0){o=b0(f,3,c[53006]|0,213560,183,216912,(p=i,i=i+1|0,i=i+7&-8,c[p>>2]=0,p)|0)|0;i=p;l=o;m=l;i=g;return m|0}else{h[a+24>>3]=+h[a>>3]*(1.0-k)/+Q(1.0-k*k);c[a+20>>2]=1;break}}}while(0)}}while(0)}}while(0)}}while(0)}}while(0)}}}while(0)}}while(0)}}while(0)}}while(0);r=1.0;p=0;while(1){if((p|0)>=4){break}q=r*+h[a+24>>3]/299792458.0;q=q*q;s=41.0e12-q;t=146.0e12-q;r=1.000064328+(2554.0e5/s+294981.0e5/t);p=p+1|0}k=r-2.0*q*(2554.0e5/(s*s)+294981.0e5/(t*t));q=+h[a+24>>3]/+h[a>>3];h[a+40>>3]=+h[a+24>>3]*6.6260755e-34;h[a+32>>3]=+h[a+24>>3]*6.283185307179586;h[a+48>>3]=+h[a+24>>3]/299792458.0;h[a+56>>3]=(1.0-q)*299792458.0;h[a+64>>3]=299792458.0/+h[a+24>>3];h[a+88>>3]=+h[a+64>>3]/r;h[a+72>>3]=(1.0/q-1.0)*299792458.0;h[a+80>>3]=+h[a+72>>3]/299792458.0;h[a+96>>3]=(1.0-q*q)*299792458.0/(q*q+1.0);h[a+104>>3]=+h[a+96>>3]/299792458.0;q=1.0/+Q(1.0- +h[a+104>>3]*+h[a+104>>3]);h[a+112>>3]=.15915494309189535;h[a+120>>3]=1.0/+h[a+112>>3];h[a+128>>3]=1.5091889610977116e+33;h[a+136>>3]=1.0/+h[a+128>>3];h[a+144>>3]=299792458.0;h[a+152>>3]=1.0/+h[a+144>>3];h[a+160>>3]=(-0.0- +h[a>>3])/299792458.0;h[a+168>>3]=1.0/+h[a+160>>3];h[a+176>>3]=(-0.0- +h[a+24>>3])/+h[a+64>>3];h[a+184>>3]=1.0/+h[a+176>>3];h[a+192>>3]=+h[a+176>>3]*k;h[a+200>>3]=1.0/+h[a+192>>3];h[a+208>>3]=(-0.0-q)*+h[a>>3]/(+h[a+96>>3]+299792458.0);h[a+216>>3]=1.0/+h[a+208>>3];h[a+224>>3]=+h[a+8>>3]/299792458.0;h[a+232>>3]=1.0/+h[a+224>>3];h[a+240>>3]=+h[a+8>>3];h[a+248>>3]=1.0/+h[a+240>>3];h[a+256>>3]=k;h[a+264>>3]=1.0/+h[a+256>>3];h[a+272>>3]=q*+h[a+8>>3]/(299792458.0- +h[a+96>>3]);h[a+280>>3]=1.0/+h[a+272>>3];h[a+288>>3]=+h[a+272>>3]/k;h[a+296>>3]=1.0/+h[a+288>>3];h[a+304>>3]=299792458.0;h[a+312>>3]=1.0/+h[a+304>>3];if((n|0)!=0){c[a+16>>2]=1;c[a+20>>2]=1}else{h[a>>3]=0.0;h[a+8>>3]=0.0;if((c[a+16>>2]|0)!=0){h[a+56>>3]=0.0;h[a+72>>3]=0.0;h[a+80>>3]=0.0;h[a+96>>3]=0.0;h[a+104>>3]=0.0}else{h[a+24>>3]=0.0;h[a+32>>3]=0.0;h[a+40>>3]=0.0;h[a+48>>3]=0.0;h[a+64>>3]=0.0;h[a+88>>3]=0.0;h[a+176>>3]=0.0;h[a+184>>3]=0.0;h[a+192>>3]=0.0;h[a+200>>3]=0.0;h[a+256>>3]=0.0;h[a+264>>3]=0.0}h[a+160>>3]=0.0;h[a+168>>3]=0.0;h[a+208>>3]=0.0;h[a+216>>3]=0.0;h[a+224>>3]=0.0;h[a+232>>3]=0.0;h[a+240>>3]=0.0;h[a+248>>3]=0.0;h[a+272>>3]=0.0;h[a+280>>3]=0.0;h[a+288>>3]=0.0;h[a+296>>3]=0.0}l=0;m=l;i=g;return m|0}function er(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0,k=0,l=0;j=b;b=d;d=e;e=0;k=f;f=g;g=i;i=0;while(1){if((i|0)>=(j|0)){break}if(+h[k>>3]!=0.0){h[f>>3]=299792458.0/+h[k>>3];l=g;g=l+4|0;c[l>>2]=0}else{l=g;g=l+4|0;c[l>>2]=1;e=4}k=k+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}return e|0}function es(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0,k=0,l=0;j=b;b=d;d=e;e=0;k=f;f=g;g=i;i=0;while(1){if((i|0)>=(j|0)){break}if(+h[k>>3]!=0.0){h[f>>3]=299792458.0/+h[k>>3];l=g;g=l+4|0;c[l>>2]=0}else{l=g;g=l+4|0;c[l>>2]=1;e=4}k=k+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}return e|0}function et(a,b,c,d,e,f,g){a=+a;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0.0,i=0,j=0,k=0;h=a;i=b;b=d;d=f;f=g;g=er(h,i,c,b,e,d,f)|0;if((g|0)!=0){j=g;k=j;return k|0}else{j=eu(h,i,b,b,d,d,f)|0;k=j;return k|0}return 0}function eu(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0,k=0,l=0,m=0.0;j=b;b=d;d=e;e=0;k=f;f=g;g=i;i=0;while(1){if((i|0)>=(j|0)){break}if(+h[k>>3]!=0.0){a=1.0;l=0;while(1){if((l|0)>=4){break}m=a/+h[k>>3];m=m*m;a=2554.0e5/(41.0e12-m);a=a+294981.0e5/(146.0e12-m);a=a+1.000064328;l=l+1|0}h[f>>3]=+h[k>>3]/a;l=g;g=l+4|0;c[l>>2]=0}else{l=g;g=l+4|0;c[l>>2]=1;e=4}k=k+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}return e|0}function ev(a,b,c,d,e,f,g){a=+a;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0.0,i=0,j=0,k=0;h=a;i=b;b=d;d=f;f=g;g=ew(h,i,c,b,e,d,f)|0;if((g|0)!=0){j=g;k=j;return k|0}else{j=es(h,i,b,b,d,d,f)|0;k=j;return k|0}return 0}function ew(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0,k=0,l=0.0,m=0;j=b;b=d;d=e;e=0;k=f;f=g;g=i;i=0;while(1){if((i|0)>=(j|0)){break}if(+h[k>>3]!=0.0){a=1.0/+h[k>>3];a=a*a;l=2554.0e5/(41.0e12-a);l=l+294981.0e5/(146.0e12-a);l=l+1.000064328;h[f>>3]=+h[k>>3]*l;m=g;g=m+4|0;c[m>>2]=0}else{m=g;g=m+4|0;c[m>>2]=1;e=4}k=k+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}return e|0}function ex(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0.0,k=0,l=0;j=a;k=b;b=d;d=e;a=j*j;e=f;f=g;g=i;i=0;while(1){if((i|0)>=(k|0)){break}j=+h[e>>3]*+h[e>>3];h[f>>3]=(a-j)*299792458.0/(a+j);l=g;g=l+4|0;c[l>>2]=0;e=e+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}return 0}function ey(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0.0,k=0,l=0,m=0;j=a;k=b;b=d;d=e;e=0;l=f;f=g;g=i;i=0;while(1){if((i|0)>=(k|0)){break}a=+h[l>>3]+299792458.0;if(a!=0.0){h[f>>3]=j*+Q((299792458.0- +h[l>>3])/a);m=g;g=m+4|0;c[m>>2]=0}else{m=g;g=m+4|0;c[m>>2]=1;e=4}l=l+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}return e|0}function ez(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0.0,k=0,l=0;j=a;k=b;b=d;d=e;a=j*j;e=f;f=g;g=i;i=0;while(1){if((i|0)>=(k|0)){break}j=+h[e>>3]*+h[e>>3];h[f>>3]=(j-a)*299792458.0/(j+a);l=g;g=l+4|0;c[l>>2]=0;e=e+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}return 0}function eA(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0.0,k=0,l=0,m=0;j=a;k=b;b=d;d=e;e=0;l=f;f=g;g=i;i=0;while(1){if((i|0)>=(k|0)){break}a=299792458.0- +h[l>>3];if(a!=0.0){h[f>>3]=j*+Q((+h[l>>3]+299792458.0)/a);m=g;g=m+4|0;c[m>>2]=0}else{m=g;g=m+4|0;c[m>>2]=1;e=4}l=l+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}return e|0}function eB(a,b,c,d,e,f,g){a=+a;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0.0,i=0,j=0,k=0;h=a;i=b;b=d;d=f;f=g;g=ew(h,i,c,b,e,d,f)|0;if((g|0)!=0){j=g;k=j;return k|0}else{j=ez(h,i,b,b,d,d,f)|0;k=j;return k|0}return 0}function eC(a,b,c,d,e,f,g){a=+a;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0.0,i=0,j=0,k=0;h=a;i=b;b=d;d=f;f=g;g=eA(h,i,c,b,e,d,f)|0;if((g|0)!=0){j=g;k=j;return k|0}else{j=eu(h,i,b,b,d,d,f)|0;k=j;return k|0}return 0}function eD(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0,k=0;j=b;b=d;d=e;e=f;f=g;g=i;i=0;while(1){if((i|0)>=(j|0)){break}h[f>>3]=+h[e>>3]*6.283185307179586;k=g;g=k+4|0;c[k>>2]=0;e=e+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}return 0}function eE(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0,k=0;j=b;b=d;d=e;e=f;f=g;g=i;i=0;while(1){if((i|0)>=(j|0)){break}h[f>>3]=+h[e>>3]/6.283185307179586;k=g;g=k+4|0;c[k>>2]=0;e=e+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}return 0}function eF(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0,k=0;j=b;b=d;d=e;e=f;f=g;g=i;i=0;while(1){if((i|0)>=(j|0)){break}h[f>>3]=+h[e>>3]*6.6260755e-34;k=g;g=k+4|0;c[k>>2]=0;e=e+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}return 0}function eG(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0,k=0;j=b;b=d;d=e;e=f;f=g;g=i;i=0;while(1){if((i|0)>=(j|0)){break}h[f>>3]=+h[e>>3]/6.6260755e-34;k=g;g=k+4|0;c[k>>2]=0;e=e+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}return 0}function eH(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0,k=0;j=b;b=d;d=e;e=f;f=g;g=i;i=0;while(1){if((i|0)>=(j|0)){break}h[f>>3]=+h[e>>3]/299792458.0;k=g;g=k+4|0;c[k>>2]=0;e=e+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}return 0}function eI(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0,k=0;j=b;b=d;d=e;e=f;f=g;g=i;i=0;while(1){if((i|0)>=(j|0)){break}h[f>>3]=+h[e>>3]*299792458.0;k=g;g=k+4|0;c[k>>2]=0;e=e+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}return 0}function eJ(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0.0,k=0,l=0,m=0,n=0;j=a;k=b;b=d;d=e;if(j==0.0){l=2;m=l;return m|0}a=299792458.0/j;e=f;f=g;g=i;i=0;while(1){if((i|0)>=(k|0)){break}h[f>>3]=a*(j- +h[e>>3]);n=g;g=n+4|0;c[n>>2]=0;e=e+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}l=0;m=l;return m|0}function eK(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0,k=0.0,l=0;j=b;b=d;d=e;k=a/299792458.0;e=f;f=g;g=i;i=0;while(1){if((i|0)>=(j|0)){break}h[f>>3]=k*(299792458.0- +h[e>>3]);l=g;g=l+4|0;c[l>>2]=0;e=e+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}return 0}function eL(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0.0,k=0,l=0,m=0,n=0;j=a;k=b;b=d;d=e;if(j==0.0){l=2;m=l;return m|0}a=299792458.0/j;e=f;f=g;g=i;i=0;while(1){if((i|0)>=(k|0)){break}h[f>>3]=a*+h[e>>3]-299792458.0;n=g;g=n+4|0;c[n>>2]=0;e=e+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}l=0;m=l;return m|0}function eM(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0,k=0.0,l=0;j=b;b=d;d=e;k=a/299792458.0;e=f;f=g;g=i;i=0;while(1){if((i|0)>=(j|0)){break}h[f>>3]=k*(+h[e>>3]+299792458.0);l=g;g=l+4|0;c[l>>2]=0;e=e+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}return 0}function eN(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0.0,k=0,l=0,m=0,n=0;j=a;k=b;b=d;d=e;if(j==0.0){l=2;m=l;return m|0}a=1.0/j;e=f;f=g;g=i;i=0;while(1){if((i|0)>=(k|0)){break}h[f>>3]=a*+h[e>>3]-1.0;n=g;g=n+4|0;c[n>>2]=0;e=e+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}l=0;m=l;return m|0}function eO(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0.0,k=0,l=0;j=a;k=b;b=d;d=e;e=f;f=g;g=i;i=0;while(1){if((i|0)>=(k|0)){break}h[f>>3]=j*(+h[e>>3]+1.0);l=g;g=l+4|0;c[l>>2]=0;e=e+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}return 0}function eP(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0,k=0;j=b;b=d;d=e;e=f;f=g;g=i;i=0;while(1){if((i|0)>=(j|0)){break}h[f>>3]=+h[e>>3]/299792458.0;k=g;g=k+4|0;c[k>>2]=0;e=e+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}return 0}function eQ(a,b,d,e,f,g,i){a=+a;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;var j=0,k=0;j=b;b=d;d=e;e=f;f=g;g=i;i=0;while(1){if((i|0)>=(j|0)){break}h[f>>3]=+h[e>>3]*299792458.0;k=g;g=k+4|0;c[k>>2]=0;e=e+(b<<3)|0;f=f+(d<<3)|0;i=i+1|0}return 0}function eR(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;f=i;g=a;a=b;b=d;d=e;if((d|0)==0){j=1;k=j;i=f;return k|0}e=d+52|0;do{if((c[d+52>>2]|0)!=0){if((c[d>>2]|0)==-1){break}fo(c[d+52>>2]|0)}}while(0);c[d+52>>2]=0;if((a|0)<=0){l=b0(e,3,c[52998]|0,213488,74,212952,(m=i,i=i+8|0,c[m>>2]=a,m)|0)|0;i=m;j=l;k=j;i=f;return k|0}do{if((b|0)!=0){n=a;o=0;while(1){if((o|0)>=(a|0)){p=704;break}if((c[b+(o<<2)>>2]|0)<0){break}n=aa(n,c[b+(o<<2)>>2]|0)|0;o=o+1|0}if((p|0)==704){break}l=b0(e,3,c[52998]|0,213488,84,212448,(m=i,i=i+8|0,c[m>>2]=c[b+(o<<2)>>2],m)|0)|0;i=m;j=l;k=j;i=f;return k|0}else{n=0}}while(0);do{if((c[d>>2]|0)==-1){p=708}else{if((c[d+56>>2]|0)!=137){p=708;break}o=0;while(1){if((o|0)>=(c[d+60>>2]|0)){break}if((c[(c[d+88>>2]|0)+(o<<2)>>2]|0)==1){c[(c[d+88>>2]|0)+(o<<2)>>2]=0}o=o+1|0}if((c[d+92>>2]|0)==1){c[d+92>>2]=0}}}while(0);if((p|0)==708){c[d+56>>2]=0;c[d+60>>2]=0;c[d+64>>2]=0;c[d+72>>2]=0;c[d+76>>2]=0;c[d+80>>2]=0;c[d+84>>2]=0;c[d+88>>2]=0;c[d+92>>2]=0}if((c[d>>2]|0)==-1){c[d+36>>2]=0;c[d+40>>2]=0;c[d+44>>2]=0;c[d+48>>2]=0;c[d+68>>2]=0}do{if((g|0)!=0){p=726}else{if((c[d+8>>2]|0)==0){p=726;break}if((c[d+12>>2]|0)==0){p=726;break}if((c[d+16>>2]|0)==0){p=726;break}if((c[d+20>>2]|0)==0){p=726;break}if((c[d+24>>2]|0)==0){p=726}}}while(0);if((p|0)==726){do{if((c[d+56>>2]|0)==137){if((c[d+60>>2]|0)>=(a|0)){if((c[d+64>>2]|0)>=(n|0)){break}}l=d;eS(l)|0}}while(0);if((g|0)!=0){p=732}else{if((c[d+8>>2]|0)==0){p=732}}if((p|0)==732){do{if((c[d+72>>2]|0)!=0){c[d+8>>2]=c[d+72>>2]}else{l=fp(a,4)|0;c[d+8>>2]=l;if((l|0)!=0){c[d+56>>2]=137;c[d+60>>2]=a;c[d+72>>2]=c[d+8>>2];break}l=b0(e,2,c[52998]|0,213488,149,c[53002]|0,(m=i,i=i+1|0,i=i+7&-8,c[m>>2]=0,m)|0)|0;i=m;j=l;k=j;i=f;return k|0}}while(0)}if((g|0)!=0){p=740}else{if((c[d+12>>2]|0)==0){p=740}}if((p|0)==740){do{if((c[d+76>>2]|0)!=0){c[d+12>>2]=c[d+76>>2]}else{l=fp(a,4)|0;c[d+12>>2]=l;if((l|0)!=0){c[d+56>>2]=137;c[d+60>>2]=a;c[d+76>>2]=c[d+12>>2];break}l=b0(e,2,c[52998]|0,213488,165,c[53002]|0,(m=i,i=i+1|0,i=i+7&-8,c[m>>2]=0,m)|0)|0;i=m;j=l;k=j;i=f;return k|0}}while(0)}if((g|0)!=0){p=748}else{if((c[d+16>>2]|0)==0){p=748}}if((p|0)==748){do{if((c[d+80>>2]|0)!=0){c[d+16>>2]=c[d+80>>2]}else{l=fp(a,8)|0;c[d+16>>2]=l;if((l|0)!=0){c[d+56>>2]=137;c[d+60>>2]=a;c[d+80>>2]=c[d+16>>2];break}l=b0(e,2,c[52998]|0,213488,181,c[53002]|0,(m=i,i=i+1|0,i=i+7&-8,c[m>>2]=0,m)|0)|0;i=m;j=l;k=j;i=f;return k|0}}while(0)}if((g|0)!=0){p=756}else{if((c[d+20>>2]|0)==0){p=756}}if((p|0)==756){if((c[d+84>>2]|0)!=0){c[d+20>>2]=c[d+84>>2]}else{l=fp(a,4)|0;c[d+20>>2]=l;if((l|0)==0){l=b0(e,2,c[52998]|0,213488,197,c[53002]|0,(m=i,i=i+1|0,i=i+7&-8,c[m>>2]=0,m)|0)|0;i=m;j=l;k=j;i=f;return k|0}c[d+56>>2]=137;c[d+60>>2]=a;c[d+64>>2]=n;c[d+84>>2]=c[d+20>>2];l=fp(a,4)|0;c[d+88>>2]=l;if((l|0)==0){l=b0(e,2,c[52998]|0,213488,206,c[53002]|0,(m=i,i=i+1|0,i=i+7&-8,c[m>>2]=0,m)|0)|0;i=m;j=l;k=j;i=f;return k|0}do{if((b|0)!=0){o=0;while(1){if((o|0)>=(a|0)){p=771;break}if((c[b+(o<<2)>>2]|0)!=0){l=fp(c[b+(o<<2)>>2]|0,8)|0;c[(c[d+20>>2]|0)+(o<<2)>>2]=l;if((l|0)==0){break}c[(c[d+88>>2]|0)+(o<<2)>>2]=c[(c[d+20>>2]|0)+(o<<2)>>2]}o=o+1|0}if((p|0)==771){break}l=b0(e,2,c[52998]|0,213488,214,c[53002]|0,(m=i,i=i+1|0,i=i+7&-8,c[m>>2]=0,m)|0)|0;i=m;j=l;k=j;i=f;return k|0}}while(0)}}if((g|0)!=0){p=776}else{if((c[d+24>>2]|0)==0){p=776}}if((p|0)==776){if((c[d+92>>2]|0)!=0){c[d+24>>2]=c[d+92>>2]}else{do{if((n|0)!=0){p=fp(n,8)|0;c[d+24>>2]=p;if((p|0)!=0){c[d+56>>2]=137;c[d+60>>2]=a;c[d+64>>2]=n;c[d+92>>2]=c[d+24>>2];break}p=b0(e,2,c[52998]|0,213488,231,c[53002]|0,(m=i,i=i+1|0,i=i+7&-8,c[m>>2]=0,m)|0)|0;i=m;j=p;k=j;i=f;return k|0}}while(0)}}}c[d>>2]=0;c[d+4>>2]=a;o=0;while(1){if((o|0)>=(a|0)){break}c[(c[d+12>>2]|0)+(o<<2)>>2]=-1;h[(c[d+16>>2]|0)+(o<<3)>>3]=0.0;if((b|0)!=0){c[(c[d+8>>2]|0)+(o<<2)>>2]=c[b+(o<<2)>>2];m=c[(c[d+20>>2]|0)+(o<<2)>>2]|0;q=m;if((m|0)!=0){m=0;while(1){if((m|0)>=(c[b+(o<<2)>>2]|0)){break}e=q;q=e+8|0;h[e>>3]=+(m|0);m=m+1|0}}}else{c[(c[d+8>>2]|0)+(o<<2)>>2]=0}o=o+1|0}q=c[d+24>>2]|0;while(1){if(q>>>0>=((c[d+24>>2]|0)+(n<<3)|0)>>>0){break}h[q>>3]=9.87654321e+107;q=q+8|0}j=0;k=j;i=f;return k|0}function eS(a){a=a|0;var b=0,d=0,e=0;b=a;if((b|0)==0){d=1;e=d;return e|0}if((c[b>>2]|0)!=-1){a=0;while(1){if((a|0)>=(c[b+60>>2]|0)){break}if((c[(c[b+88>>2]|0)+(a<<2)>>2]|0)==1){c[(c[b+88>>2]|0)+(a<<2)>>2]=0}a=a+1|0}if((c[b+92>>2]|0)==1){c[b+92>>2]=0}if((c[b+56>>2]|0)==137){if((c[b+8>>2]|0)==(c[b+72>>2]|0)){c[b+8>>2]=0}if((c[b+12>>2]|0)==(c[b+76>>2]|0)){c[b+12>>2]=0}if((c[b+16>>2]|0)==(c[b+80>>2]|0)){c[b+16>>2]=0}if((c[b+20>>2]|0)==(c[b+84>>2]|0)){c[b+20>>2]=0}if((c[b+24>>2]|0)==(c[b+92>>2]|0)){c[b+24>>2]=0}if((c[b+72>>2]|0)!=0){fo(c[b+72>>2]|0)}if((c[b+76>>2]|0)!=0){fo(c[b+76>>2]|0)}if((c[b+80>>2]|0)!=0){fo(c[b+80>>2]|0)}if((c[b+84>>2]|0)!=0){a=0;while(1){if((a|0)>=(c[b+60>>2]|0)){break}if((c[(c[b+88>>2]|0)+(a<<2)>>2]|0)!=0){fo(c[(c[b+88>>2]|0)+(a<<2)>>2]|0)}a=a+1|0}fo(c[b+84>>2]|0);fo(c[b+88>>2]|0)}if((c[b+92>>2]|0)!=0){fo(c[b+92>>2]|0)}}if((c[b+36>>2]|0)!=0){fo(c[b+36>>2]|0)}if((c[b+40>>2]|0)!=0){fo(c[b+40>>2]|0)}if((c[b+44>>2]|0)!=0){fo(c[b+44>>2]|0)}if((c[b+48>>2]|0)!=0){fo(c[b+48>>2]|0)}}c[b+56>>2]=0;c[b+60>>2]=0;c[b+64>>2]=0;c[b+72>>2]=0;c[b+76>>2]=0;c[b+80>>2]=0;c[b+84>>2]=0;c[b+88>>2]=0;c[b+92>>2]=0;c[b+36>>2]=0;c[b+40>>2]=0;c[b+44>>2]=0;c[b+48>>2]=0;c[b+68>>2]=0;if((c[b+52>>2]|0)!=0){fo(c[b+52>>2]|0);c[b+52>>2]=0}c[b>>2]=0;d=0;e=d;return e|0}function eT(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0.0,t=0.0,u=0.0;b=i;d=a;if((d|0)==0){e=1;f=e;i=b;return f|0}a=d+52|0;g=c[d+4>>2]|0;j=g;if((g|0)<1){g=b0(a,3,c[52994]|0,213488,670,215056,(k=i,i=i+8|0,c[k>>2]=j,k)|0)|0;i=k;e=g;f=e;i=b;return f|0}if((c[d+8>>2]|0)==0){g=b0(a,2,c[52994]|0,213488,676,221352,(k=i,i=i+1|0,i=i+7&-8,c[k>>2]=0,k)|0)|0;i=k;e=g;f=e;i=b;return f|0}c[d+28>>2]=1;g=0;while(1){if((g|0)>=(j|0)){break}if((c[(c[d+8>>2]|0)+(g<<2)>>2]|0)<1){l=878;break}m=d+28|0;c[m>>2]=aa(c[m>>2]|0,c[(c[d+8>>2]|0)+(g<<2)>>2]|0)|0;g=g+1|0}if((l|0)==878){m=b0(a,3,c[52994]|0,213488,683,214872,(k=i,i=i+8|0,c[k>>2]=c[(c[d+8>>2]|0)+(g<<2)>>2],k)|0)|0;i=k;e=m;f=e;i=b;return f|0}if((c[d+12>>2]|0)==0){m=b0(a,2,c[52994]|0,213488,694,221352,(k=i,i=i+1|0,i=i+7&-8,c[k>>2]=0,k)|0)|0;i=k;e=m;f=e;i=b;return f|0}g=0;while(1){if((g|0)>=(j|0)){break}n=c[(c[d+12>>2]|0)+(g<<2)>>2]|0;if((n|0)<0){l=886;break}g=g+1|0}if((l|0)==886){m=b0(a,3,c[52994]|0,213488,701,214728,(k=i,i=i+8|0,c[k>>2]=n,k)|0)|0;i=k;e=m;f=e;i=b;return f|0}do{if((c[d+16>>2]|0)!=0){if((c[d+20>>2]|0)==0){break}if((c[d+24>>2]|0)==0){break}g=0;while(1){if((g|0)>=(c[d+60>>2]|0)){break}do{if((c[(c[d+88>>2]|0)+(g<<2)>>2]|0)==1){m=c[(c[d+20>>2]|0)+(g<<2)>>2]|0;c[(c[d+88>>2]|0)+(g<<2)>>2]=m;if((m|0)==0){break}c[d+56>>2]=137}}while(0);g=g+1|0}do{if((c[d+92>>2]|0)==1){m=c[d+24>>2]|0;c[d+92>>2]=m;if((m|0)==0){break}c[d+56>>2]=137}}while(0);if((c[d>>2]|0)!=137){l=905}else{if((c[d+68>>2]|0)<(j|0)){l=905}}do{if((l|0)==905){if((c[d+36>>2]|0)!=0){fo(c[d+36>>2]|0)}if((c[d+40>>2]|0)!=0){fo(c[d+40>>2]|0)}if((c[d+44>>2]|0)!=0){fo(c[d+44>>2]|0)}if((c[d+48>>2]|0)!=0){fo(c[d+48>>2]|0)}m=fp(j,4)|0;c[d+36>>2]=m;if((m|0)==0){m=b0(a,2,c[52994]|0,213488,737,c[53002]|0,(k=i,i=i+1|0,i=i+7&-8,c[k>>2]=0,k)|0)|0;i=k;e=m;f=e;i=b;return f|0}m=fp(j,4)|0;c[d+40>>2]=m;if((m|0)==0){fo(c[d+36>>2]|0);m=b0(a,2,c[52994]|0,213488,742,c[53002]|0,(k=i,i=i+1|0,i=i+7&-8,c[k>>2]=0,k)|0)|0;i=k;e=m;f=e;i=b;return f|0}m=fp(j,8)|0;c[d+44>>2]=m;if((m|0)==0){fo(c[d+36>>2]|0);fo(c[d+40>>2]|0);m=b0(a,2,c[52994]|0,213488,748,c[53002]|0,(k=i,i=i+1|0,i=i+7&-8,c[k>>2]=0,k)|0)|0;i=k;e=m;f=e;i=b;return f|0}m=(aa(j,c[d+28>>2]|0)|0)<<1;o=fp((m|0)/(c[c[d+8>>2]>>2]|0)|0,8)|0;c[d+48>>2]=o;if((o|0)!=0){c[d+68>>2]=j;break}fo(c[d+36>>2]|0);fo(c[d+40>>2]|0);fo(c[d+44>>2]|0);o=b0(a,2,c[52994]|0,213488,756,c[53002]|0,(k=i,i=i+1|0,i=i+7&-8,c[k>>2]=0,k)|0)|0;i=k;e=o;f=e;i=b;return f|0}}while(0);o=c[d+8>>2]|0;g=0;L1217:while(1){if((g|0)>=(j|0)){l=950;break}c[(c[d+36>>2]|0)+(g<<2)>>2]=0;if((c[o>>2]|0)>1){m=c[(c[d+20>>2]|0)+(g<<2)>>2]|0;p=m;if((m|0)==0){c[(c[d+36>>2]|0)+(g<<2)>>2]=1}else{m=0;while(1){if((m|0)>=((c[o>>2]|0)-1|0)){break}q=c[(c[d+36>>2]|0)+(g<<2)>>2]|0;if((q|0)==0){if(+h[p+(m<<3)>>3]<+h[p+(m+1<<3)>>3]){c[(c[d+36>>2]|0)+(g<<2)>>2]=1}else{if(+h[p+(m<<3)>>3]>+h[p+(m+1<<3)>>3]){c[(c[d+36>>2]|0)+(g<<2)>>2]=-1}}}else if((q|0)==1){if(+h[p+(m<<3)>>3]>+h[p+(m+1<<3)>>3]){l=937;break L1217}}else if((q|0)==(-1|0)){if(+h[p+(m<<3)>>3]<+h[p+(m+1<<3)>>3]){l=940;break L1217}}m=m+1|0}}if((c[(c[d+36>>2]|0)+(g<<2)>>2]|0)==0){l=946;break}}g=g+1|0;o=o+4|0}if((l|0)==937){fo(c[d+36>>2]|0);fo(c[d+40>>2]|0);fo(c[d+44>>2]|0);fo(c[d+48>>2]|0);o=b0(a,3,c[52994]|0,213488,792,214576,(k=i,i=i+1|0,i=i+7&-8,c[k>>2]=0,k)|0)|0;i=k;e=o;f=e;i=b;return f|0}else if((l|0)==940){fo(c[d+36>>2]|0);fo(c[d+40>>2]|0);fo(c[d+44>>2]|0);fo(c[d+48>>2]|0);o=b0(a,3,c[52994]|0,213488,805,214464,(k=i,i=i+1|0,i=i+7&-8,c[k>>2]=0,k)|0)|0;i=k;e=o;f=e;i=b;return f|0}else if((l|0)==946){fo(c[d+36>>2]|0);fo(c[d+40>>2]|0);fo(c[d+44>>2]|0);fo(c[d+48>>2]|0);o=b0(a,3,c[52994]|0,213488,819,214368,(k=i,i=i+1|0,i=i+7&-8,c[k>>2]=0,k)|0)|0;i=k;e=o;f=e;i=b;return f|0}else if((l|0)==950){o=c[d+24>>2]|0;m=c[d+48>>2]|0;q=(c[d+48>>2]|0)+(j<<3)|0;r=0;while(1){if((r|0)>=(c[d+28>>2]|0)){break}g=0;while(1){if((g|0)>=(j|0)){break}if((c[c[d+8>>2]>>2]|0)>1){p=c[c[d+20>>2]>>2]|0;if((p|0)==0){s=1.0}else{s=+h[p+8>>3]- +h[p>>3]}t=+h[o>>3];if(s!=0.0){t=t-(+h[o+(j<<3)>>3]- +h[o>>3])*.5/s}u=t;h[m+(g<<3)>>3]=u;h[q+(g<<3)>>3]=u}else{u=+h[o>>3];h[m+(g<<3)>>3]=u;h[q+(g<<3)>>3]=u}g=g+1|0;o=o+8|0}o=o+(-j<<3)|0;n=0;while(1){if((n|0)>=(c[c[d+8>>2]>>2]|0)){break}g=0;while(1){if((g|0)>=(j|0)){break}if(+h[q+(g<<3)>>3]<+h[o>>3]){h[q+(g<<3)>>3]=+h[o>>3]}if(+h[m+(g<<3)>>3]>+h[o>>3]){h[m+(g<<3)>>3]=+h[o>>3]}do{if((c[c[d+8>>2]>>2]|0)>1){if((n|0)!=((c[c[d+8>>2]>>2]|0)-1|0)){break}p=c[c[d+20>>2]>>2]|0;if((p|0)==0){s=1.0}else{s=+h[p+(n<<3)>>3]- +h[p+(n-1<<3)>>3]}t=+h[o>>3];if(s!=0.0){t=t+(+h[o>>3]- +h[o+(-j<<3)>>3])*.5/s}if(+h[q+(g<<3)>>3]<t){h[q+(g<<3)>>3]=t}if(+h[m+(g<<3)>>3]>t){h[m+(g<<3)>>3]=t}}}while(0);g=g+1|0;o=o+8|0}n=n+1|0}m=m+(j<<1<<3)|0;q=q+(j<<1<<3)|0;r=r+(c[c[d+8>>2]>>2]|0)|0}c[d>>2]=137;e=0;f=e;i=b;return f|0}}}while(0);d=b0(a,2,c[52994]|0,213488,709,221352,(k=i,i=i+1|0,i=i+7&-8,c[k>>2]=0,k)|0)|0;i=k;e=d;f=e;i=b;return f|0}function eU(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0.0,v=0,w=0.0,x=0,y=0,z=0,A=0,B=0,C=0;j=i;k=a;a=b;b=d;d=e;e=f;f=g;if((k|0)==0){l=1;m=l;i=j;return m|0}g=k+52|0;do{if((c[k>>2]|0)!=137){n=eT(k)|0;o=n;if((n|0)==0){break}l=o;m=l;i=j;return m|0}}while(0);n=c[k+4>>2]|0;o=0;p=d;d=e;e=f;f=0;while(1){if((f|0)>=(a|0)){break}q=c[k+8>>2]|0;r=0;while(1){if((r|0)>=(n|0)){s=1089;break}t=c[(c[k+12>>2]|0)+(r<<2)>>2]|0;u=+h[p+(t<<3)>>3]+ +h[(c[k+16>>2]|0)+(r<<3)>>3];v=c[(c[k+20>>2]|0)+(r<<2)>>2]|0;if((v|0)==0){w=u}else{v=v-8|0;if((c[q>>2]|0)==1){if(+h[v+8>>3]-.5>u){s=1023;break}if(u>+h[v+8>>3]+.5){s=1023;break}w=u}else{if((c[(c[k+36>>2]|0)+(r<<2)>>2]|0)==1){if(u<+h[v+8>>3]){if(+h[v+8>>3]-(+h[v+16>>3]- +h[v+8>>3])*.5>u){s=1029;break}x=1}else{if(+h[v+(c[q>>2]<<3)>>3]<u){if(u>+h[v+(c[q>>2]<<3)>>3]+(+h[v+(c[q>>2]<<3)>>3]- +h[v+((c[q>>2]|0)-1<<3)>>3])*.5){s=1034;break}x=(c[q>>2]|0)-1|0}else{x=1;while(1){if((x|0)>=(c[q>>2]|0)){break}if(u>=+h[v+(x<<3)>>3]){if(+h[v+(x<<3)>>3]==u){if(u<+h[v+(x+1<<3)>>3]){s=1042;break}}if(+h[v+(x<<3)>>3]<u){if(u<=+h[v+(x+1<<3)>>3]){s=1045;break}}}x=x+1|0}if((s|0)==1042){s=0}else if((s|0)==1045){s=0}}}}else{if(u>+h[v+8>>3]){if(+h[v+8>>3]+(+h[v+8>>3]- +h[v+16>>3])*.5<u){s=1054;break}x=1}else{if(u<+h[v+(c[q>>2]<<3)>>3]){if(+h[v+(c[q>>2]<<3)>>3]-(+h[v+((c[q>>2]|0)-1<<3)>>3]- +h[v+(c[q>>2]<<3)>>3])*.5>u){s=1059;break}x=(c[q>>2]|0)-1|0}else{x=1;while(1){if((x|0)>=(c[q>>2]|0)){break}if(u<=+h[v+(x<<3)>>3]){if(+h[v+(x<<3)>>3]==u){if(u>+h[v+(x+1<<3)>>3]){s=1067;break}}if(+h[v+(x<<3)>>3]>u){if(u>=+h[v+(x+1<<3)>>3]){s=1070;break}}}x=x+1|0}if((s|0)==1067){s=0}else if((s|0)==1070){s=0}}}}w=+(x|0)+(u- +h[v+(x<<3)>>3])/(+h[v+(x+1<<3)>>3]- +h[v+(x<<3)>>3])}}if(w<.5){s=1080;break}if(w>+(c[q>>2]|0)+.5){s=1080;break}y=~~+O(w);c[(c[k+40>>2]|0)+(r<<2)>>2]=y-1;h[(c[k+44>>2]|0)+(r<<3)>>3]=w- +(y|0);if((y|0)==0){z=(c[k+40>>2]|0)+(r<<2)|0;c[z>>2]=(c[z>>2]|0)+1;z=(c[k+44>>2]|0)+(r<<3)|0;h[z>>3]=+h[z>>3]-1.0}else{do{if((y|0)==(c[q>>2]|0)){if((c[q>>2]|0)<=1){break}z=(c[k+40>>2]|0)+(r<<2)|0;c[z>>2]=(c[z>>2]|0)-1;z=(c[k+44>>2]|0)+(r<<3)|0;h[z>>3]=+h[z>>3]+1.0}}while(0)}r=r+1|0;q=q+4|0}if((s|0)==1054){s=0;c[e>>2]=1;q=b0(g,4,c[52992]|0,213488,1001,c[53004]|0,(A=i,i=i+1|0,i=i+7&-8,c[A>>2]=0,A)|0)|0;i=A;o=q}else if((s|0)==1080){s=0;c[e>>2]=1;q=b0(g,4,c[52992]|0,213488,1039,c[53004]|0,(A=i,i=i+1|0,i=i+7&-8,c[A>>2]=0,A)|0)|0;i=A;o=q}else if((s|0)==1034){s=0;c[e>>2]=1;q=b0(g,4,c[52992]|0,213488,973,c[53004]|0,(A=i,i=i+1|0,i=i+7&-8,c[A>>2]=0,A)|0)|0;i=A;o=q}else if((s|0)==1029){s=0;c[e>>2]=1;q=b0(g,4,c[52992]|0,213488,961,c[53004]|0,(A=i,i=i+1|0,i=i+7&-8,c[A>>2]=0,A)|0)|0;i=A;o=q}else if((s|0)==1023){s=0;c[e>>2]=1;q=b0(g,4,c[52992]|0,213488,945,c[53004]|0,(A=i,i=i+1|0,i=i+7&-8,c[A>>2]=0,A)|0)|0;i=A;o=q}else if((s|0)==1089){s=0;r=0;while(1){if((r|0)>=(n|0)){break}t=c[(c[k+12>>2]|0)+(r<<2)>>2]|0;h[d+(t<<3)>>3]=0.0;r=r+1|0}q=1<<n;y=0;while(1){if((y|0)>=(q|0)){break}v=0;u=1.0;r=n-1|0;while(1){if((r|0)<0){break}v=aa(v,c[(c[k+8>>2]|0)+(r<<2)>>2]|0)|0;v=v+(c[(c[k+40>>2]|0)+(r<<2)>>2]|0)|0;if((y&1<<r|0)!=0){if((c[(c[k+8>>2]|0)+(r<<2)>>2]|0)>1){v=v+1|0}u=u*+h[(c[k+44>>2]|0)+(r<<3)>>3]}else{u=u*(1.0- +h[(c[k+44>>2]|0)+(r<<3)>>3])}r=r-1|0}if(u!=0.0){z=(c[k+24>>2]|0)+((aa(v,n)|0)<<3)|0;r=0;while(1){if((r|0)>=(n|0)){break}t=c[(c[k+12>>2]|0)+(r<<2)>>2]|0;B=z;z=B+8|0;C=d+(t<<3)|0;h[C>>3]=+h[C>>3]+ +h[B>>3]*u;r=r+1|0}if(u==1.0){s=1111;break}}y=y+1|0}if((s|0)==1111){s=0}c[e>>2]=0}else if((s|0)==1059){s=0;c[e>>2]=1;y=b0(g,4,c[52992]|0,213488,1013,c[53004]|0,(A=i,i=i+1|0,i=i+7&-8,c[A>>2]=0,A)|0)|0;i=A;o=y}p=p+(b<<3)|0;d=d+(b<<3)|0;e=e+4|0;f=f+1|0}l=o;m=l;i=j;return m|0}function eV(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0.0,A=0,B=0.0,C=0.0;j=i;k=a;a=b;b=d;d=e;e=f;f=g;if((k|0)==0){l=1;m=l;i=j;return m|0}g=k+52|0;do{if((c[k>>2]|0)!=137){n=eT(k)|0;o=n;if((n|0)==0){break}l=o;m=l;i=j;return m|0}}while(0);n=c[k+4>>2]|0;p=0;q=0;if((n|0)>1){q=1<<n;p=fp(q,4)|0}o=0;r=d;d=e;e=f;f=0;while(1){if((f|0)>=(a|0)){break}s=0;t=0;while(1){if((t|0)>=(n|0)){break}c[(c[k+40>>2]|0)+(t<<2)>>2]=0;t=t+1|0}u=0;while(1){if((u|0)>=(c[k+28>>2]|0)){break}L1486:do{if((c[c[k+40>>2]>>2]|0)==0){do{if((s|0)==0){if((eW(k,r)|0)!=0){break}v=1143;break L1486}}while(0);u=u+(c[c[k+8>>2]>>2]|0)|0;w=(c[k+40>>2]|0)+4|0;c[w>>2]=(c[w>>2]|0)+1;s=eX(k)|0;u=u-1|0}else{v=1143}}while(0);if((v|0)==1143){v=0;if((n|0)==1){if(+h[r>>3]==+h[c[k+24>>2]>>3]){v=1145;break}if((u|0)<((c[k+28>>2]|0)-1|0)){if(+h[(c[k+24>>2]|0)+(u<<3)>>3]<=+h[r>>3]){if(+h[r>>3]<=+h[(c[k+24>>2]|0)+(u+1<<3)>>3]){v=1151}else{v=1149}}else{v=1149}do{if((v|0)==1149){v=0;if(+h[(c[k+24>>2]|0)+(u<<3)>>3]<+h[r>>3]){break}if(+h[r>>3]>=+h[(c[k+24>>2]|0)+(u+1<<3)>>3]){v=1151}}}while(0);if((v|0)==1151){v=0;if((c[c[k+20>>2]>>2]|0)==0){v=1153;break}if(+h[(c[c[k+20>>2]>>2]|0)+(u<<3)>>3]!=+h[(c[c[k+20>>2]>>2]|0)+(u+1<<3)>>3]){v=1153;break}}}}else{if((s|0)==0){w=0;while(1){if((w|0)>=(q|0)){break}x=0;t=n-1|0;while(1){if((t|0)<0){break}x=aa(x,c[(c[k+8>>2]|0)+(t<<2)>>2]|0)|0;x=x+(c[(c[k+40>>2]|0)+(t<<2)>>2]|0)|0;do{if((w&1<<t|0)!=0){if((c[(c[k+8>>2]|0)+(t<<2)>>2]|0)<=1){break}x=x+1|0}}while(0);t=t-1|0}c[p+(w<<2)>>2]=(c[k+24>>2]|0)+((aa(x,n)|0)<<3);w=w+1|0}if((eY(k,r,0,p,0)|0)==0){v=1170;break}}w=c[k+40>>2]|0;c[w>>2]=(c[w>>2]|0)+1;s=eX(k)|0}}u=u+1|0}if((v|0)==1153){v=0;c[c[k+40>>2]>>2]=u;h[c[k+44>>2]>>3]=(+h[r>>3]- +h[(c[k+24>>2]|0)+(u<<3)>>3])/(+h[(c[k+24>>2]|0)+(u+1<<3)>>3]- +h[(c[k+24>>2]|0)+(u<<3)>>3])}else if((v|0)==1170){v=0}else if((v|0)==1145){v=0;c[c[k+40>>2]>>2]=0;h[c[k+44>>2]>>3]=0.0}if((u|0)==(c[k+28>>2]|0)){if((n|0)==1){do{if(+h[c[k+48>>2]>>3]<=+h[r>>3]){if(+h[r>>3]>+h[(c[k+48>>2]|0)+8>>3]){break}s=c[k+24>>2]|0;y=0;while(1){if((y|0)>=2){break}if((y|0)!=0){s=s+((c[c[k+8>>2]>>2]|0)-2<<3)|0}z=(+h[r>>3]- +h[s>>3])/(+h[s+8>>3]- +h[s>>3]);if((y|0)==0){if(-.5<=z){if(z<=0.0){v=1186;break}}}else{do{if(1.0<=z){if(z>1.5){break}c[c[k+40>>2]>>2]=(c[c[k+8>>2]>>2]|0)-1;h[c[k+44>>2]>>3]=z-1.0;u=0}}while(0)}y=y+1|0}if((v|0)==1186){v=0;c[c[k+40>>2]>>2]=0;h[c[k+44>>2]>>3]=z;u=0}}}while(0)}}if((u|0)==(c[k+28>>2]|0)){c[e>>2]=1;s=b0(g,5,c[52996]|0,213488,1259,c[53005]|0,(A=i,i=i+1|0,i=i+7&-8,c[A>>2]=0,A)|0)|0;i=A;o=s}else{s=c[k+8>>2]|0;t=0;while(1){if((t|0)>=(n|0)){break}B=+((c[(c[k+40>>2]|0)+(t<<2)>>2]|0)+1|0)+ +h[(c[k+44>>2]|0)+(t<<3)>>3];do{if(B<.5){v=1204}else{if(B>+(c[s>>2]|0)+.5){v=1204;break}x=c[(c[k+20>>2]|0)+(t<<2)>>2]|0;if((x|0)==0){C=B}else{x=x-8|0;if((c[s>>2]|0)==1){C=+h[x+8>>3]}else{w=~~B;C=+h[x+(w<<3)>>3];if((w|0)<(c[s>>2]|0)){C=C+(B- +(w|0))*(+h[x+(w+1<<3)>>3]- +h[x+(w<<3)>>3])}}}y=c[(c[k+12>>2]|0)+(t<<2)>>2]|0;h[d+(y<<3)>>3]=C- +h[(c[k+16>>2]|0)+(t<<3)>>3]}}while(0);if((v|0)==1204){v=0;c[e>>2]=1;w=b0(g,5,c[52996]|0,213488,1270,c[53005]|0,(A=i,i=i+1|0,i=i+7&-8,c[A>>2]=0,A)|0)|0;i=A;o=w}t=t+1|0;s=s+4|0}c[e>>2]=0}r=r+(b<<3)|0;d=d+(b<<3)|0;e=e+4|0;f=f+1|0}if((p|0)!=0){fo(p)}l=o;m=l;i=j;return m|0}function eW(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0.0,p=0,q=0;d=a;a=b;b=c[d+4>>2]|0;e=1<<b;f=0;g=0;i=0;j=0;while(1){if((j|0)>=(e|0)){k=1255;break}l=0;m=b-1|0;while(1){if((m|0)<=0){break}l=aa(l,c[(c[d+8>>2]|0)+(m<<2)>>2]|0)|0;l=l+(c[(c[d+40>>2]|0)+(m<<2)>>2]|0)|0;if((j&1<<m|0)!=0){if((c[(c[d+8>>2]|0)+(m<<2)>>2]|0)>1){l=l+1|0}}m=m-1|0}l=l<<1;if((j&1|0)!=0){l=l+1|0}l=aa(l,b)|0;n=(c[d+48>>2]|0)+(l<<3)|0;m=0;while(1){if((m|0)>=(b|0)){break}o=+h[a+(c[(c[d+12>>2]|0)+(m<<2)>>2]<<3)>>3];if(+P(+(+h[n>>3]-o))<1.0e-10){f=f|1<<m}else{if(+h[n>>3]<o){g=g|1<<m}else{if(+h[n>>3]>o){i=i|1<<m}}}m=m+1|0;n=n+8|0}if((g|f|0)==(e-1|0)){if((i|f|0)==(e-1|0)){k=1252;break}}j=j+1|0}if((k|0)==1252){p=0;q=p;return q|0}else if((k|0)==1255){p=1;q=p;return q|0}return 0}function eX(a){a=a|0;var b=0,d=0,e=0,f=0;b=a;a=0;d=c[b+8>>2]|0;e=0;while(1){if((e|0)>=(c[b+4>>2]|0)){break}if((c[(c[b+40>>2]|0)+(e<<2)>>2]|0)==(c[d>>2]|0)){c[(c[b+40>>2]|0)+(e<<2)>>2]=0;f=(c[b+40>>2]|0)+(e+1<<2)|0;c[f>>2]=(c[f>>2]|0)+1}else{do{if((c[(c[b+40>>2]|0)+(e<<2)>>2]|0)==((c[d>>2]|0)-1|0)){if((c[d>>2]|0)<=1){break}a=1}}while(0)}e=e+1|0;d=d+4|0}return a|0}function eY(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,j=0,k=0,l=0,m=0,n=0.0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0.0,w=0,x=0,y=0,z=0,A=0.0,B=0,C=0,D=0;g=i;i=i+192|0;j=g|0;k=g+64|0;l=a;a=b;b=d;d=e;e=f;f=c[l+4>>2]|0;m=1<<f;n=1.0;o=0;while(1){if((o|0)>=(b|0)){break}n=n/2.0;o=o+1|0}o=0;p=0;q=0;r=0;while(1){if((r|0)>=(m|0)){break}s=0;while(1){if((s|0)>=(f|0)){break}h[k+(s<<3)>>3]=0.0;if((b|0)!=0){t=n*+((c[e+(s<<2)>>2]|0)>>>0>>>0)}else{t=0.0}h[(c[l+44>>2]|0)+(s<<3)>>3]=t;if((r&1<<s|0)!=0){u=(c[l+44>>2]|0)+(s<<3)|0;h[u>>3]=+h[u>>3]+n}s=s+1|0}u=0;while(1){if((u|0)>=(m|0)){break}v=1.0;s=0;while(1){if((s|0)>=(f|0)){break}if((u&1<<s|0)!=0){v=v*+h[(c[l+44>>2]|0)+(s<<3)>>3]}else{v=v*(1.0- +h[(c[l+44>>2]|0)+(s<<3)>>3])}s=s+1|0}if(v!=0.0){w=c[d+(u<<2)>>2]|0;s=0;while(1){if((s|0)>=(f|0)){break}x=w;w=x+8|0;y=k+(s<<3)|0;h[y>>3]=+h[y>>3]+ +h[x>>3]*v;s=s+1|0}if(v==1.0){z=1301;break}}u=u+1|0}if((z|0)==1301){z=0}u=0;s=0;while(1){if((s|0)>=(f|0)){break}A=+h[a+(c[(c[l+12>>2]|0)+(s<<2)>>2]<<3)>>3];if(+P(+(+h[k+(s<<3)>>3]-A))<1.0e-10){u=u|1<<s}else{if(+h[k+(s<<3)>>3]<A){o=o|1<<s}else{if(+h[k+(s<<3)>>3]>A){p=p|1<<s}}}s=s+1|0}if((u|0)==(m-1|0)){z=1317;break}q=q|u;r=r+1|0}if((z|0)==1317){B=0;C=B;i=g;return C|0}do{if((o|q|0)==(m-1|0)){if((p|q|0)!=(m-1|0)){break}if((b|0)==31){n=n/2.0;s=0;while(1){if((s|0)>=(f|0)){break}h[(c[l+44>>2]|0)+(s<<3)>>3]=n*(+((c[e+(s<<2)>>2]|0)>>>0>>>0)*2.0+1.0);s=s+1|0}B=0;C=B;i=g;return C|0}r=0;while(1){if((r|0)>=(m|0)){z=1343;break}s=0;while(1){if((s|0)>=(f|0)){break}if((b|0)!=0){D=c[e+(s<<2)>>2]<<1}else{D=0}c[j+(s<<2)>>2]=D;if((r&1<<s|0)!=0){u=j+(s<<2)|0;c[u>>2]=(c[u>>2]|0)+1}s=s+1|0}if((eY(l,a,b+1|0,d,j|0)|0)==0){break}r=r+1|0}if((z|0)==1343){break}B=0;C=B;i=g;return C|0}}while(0);B=1;C=B;i=g;return C|0}function eZ(b){b=b|0;var d=0,e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;d=i;e=b;b=0;f=0;g=0;j=0;k=0;l=0;m=0;if((e|0)==0){n=1;o=n;i=d;return o|0}p=e+1584|0;do{if((c[e>>2]|0)!=-1){if((c[e+1592>>2]|0)!=(c[55488]|0)){break}if((c[e+716>>2]|0)==(c[e+1660>>2]|0)){c[e+716>>2]=0}if((c[e+712>>2]|0)==(c[e+1656>>2]|0)){c[e+712>>2]=0}if((c[e+1660>>2]|0)!=0){fo(c[e+1660>>2]|0)}if((c[e+1656>>2]|0)!=0){q=0;while(1){if((q|0)>=(c[e+704>>2]|0)){break}eS((c[e+1656>>2]|0)+(q*96|0)|0)|0;q=q+1|0}fo(c[e+1656>>2]|0)}}}while(0);c[e+704>>2]=0;c[e+708>>2]=0;c[e+716>>2]=0;c[e+712>>2]=0;q=c[e+4>>2]|0;r=fp(q,4)|0;s=r;if((r|0)==0){r=b0(p,2,c[52956]|0,213392,98,c[52968]|0,(t=i,i=i+1|0,i=i+7&-8,c[t>>2]=0,t)|0)|0;i=t;n=r;o=n;i=d;return o|0}r=0;u=0;while(1){if((u|0)>=(q|0)){break}cy(72,(c[e+28>>2]|0)+(u*72|0)|0);if((bi((c[e+28>>2]|0)+(u*72|0)+4|0,212920)|0)!=0){c[s+(u<<2)>>2]=-1}else{v=r;r=v+1|0;c[s+(u<<2)>>2]=v}u=u+1|0}L1799:do{if((r|0)==0){w=0}else{v=fp(r,72)|0;b=v;do{if((v|0)!=0){x=fp(r,4)|0;j=x;if((x|0)==0){break}x=fp(r,4)|0;k=x;if((x|0)==0){break}x=fp(r,72)|0;f=x;if((x|0)==0){break}x=fp(r,72)|0;g=x;if((x|0)==0){break}x=fp(r,4)|0;l=x;if((x|0)==0){break}x=fp(r,4)|0;m=x;if((x|0)==0){break}x=0;while(1){if((x|0)>=(r|0)){break}c[j+(x<<2)>>2]=1;c[k+(x<<2)>>2]=1;c[l+(x<<2)>>2]=1;x=x+1|0}y=0;while(1){if((y|0)>=(c[e+76>>2]|0)){break}x=c[s+((c[(c[e+84>>2]|0)+(y*80|0)>>2]|0)-1<<2)>>2]|0;if((x|0)>=0){z=c[(c[e+84>>2]|0)+(y*80|0)+4>>2]|0;if((z|0)==1){A=f+(x*72|0)|0;B=(c[e+84>>2]|0)+(y*80|0)+8|0;fu(A|0,B|0)|0;cy(72,f+(x*72|0)|0)}else if((z|0)==2){fu(g+(x*72|0)|0,(c[e+84>>2]|0)+(y*80|0)+8|0)|0;cy(72,g+(x*72|0)|0)}else if((z|0)==0){fu(b+(x*72|0)|0,(c[e+84>>2]|0)+(y*80|0)+8|0)|0;cy(72,b+(x*72|0)|0)}}y=y+1|0}y=0;while(1){if((y|0)>=(c[e+64>>2]|0)){break}x=c[s+((c[(c[e+72>>2]|0)+(y<<4)>>2]|0)-1<<2)>>2]|0;if((x|0)>=0){z=c[(c[e+72>>2]|0)+(y<<4)+4>>2]|0;if((z|0)==1){c[j+(x<<2)>>2]=~~(+h[(c[e+72>>2]|0)+(y<<4)+8>>3]+.5)}else if((z|0)==2){c[k+(x<<2)>>2]=~~(+h[(c[e+72>>2]|0)+(y<<4)+8>>3]+.5)}else if((z|0)==3){c[l+(x<<2)>>2]=~~(+h[(c[e+72>>2]|0)+(y<<4)+8>>3]+.5)}}y=y+1|0}x=0;while(1){if((x|0)>=(r|0)){break}if((a[b+(x*72|0)|0]|0)==0){C=1414;break}if((a[f+(x*72|0)|0]|0)==0){C=1414;break}c[m+(x<<2)>>2]=-1;y=0;L1846:while(1){if((y|0)>=(u|0)){break}do{if((bi(b+(x*72|0)|0,b+(y*72|0)|0)|0)==0){if((bi(f+(x*72|0)|0,f+(y*72|0)|0)|0)!=0){break}if((c[j+(x<<2)>>2]|0)!=(c[j+(y<<2)>>2]|0)){break}if((c[k+(x<<2)>>2]|0)==(c[k+(y<<2)>>2]|0)){C=1421;break L1846}}}while(0);y=y+1|0}if((C|0)==1421){C=0;c[m+(x<<2)>>2]=c[m+(y<<2)>>2]}if((y|0)==(x|0)){c[m+(x<<2)>>2]=c[e+704>>2];z=e+704|0;c[z>>2]=(c[z>>2]|0)+1}x=x+1|0}if((C|0)==1414){z=b0(p,5,c[52956]|0,213392,187,212368,(t=i,i=i+1|0,i=i+7&-8,c[t>>2]=0,t)|0)|0;i=t;w=z;break L1799}z=fp(c[e+704>>2]|0,96)|0;c[e+712>>2]=z;if((z|0)==0){z=b0(p,2,c[52956]|0,213392,212,c[52968]|0,(t=i,i=i+1|0,i=i+7&-8,c[t>>2]=0,t)|0)|0;i=t;w=z;break L1799}c[e+1656>>2]=c[e+712>>2];x=0;while(1){if((x|0)>=(r|0)){break}D=(c[e+712>>2]|0)+((c[m+(x<<2)>>2]|0)*96|0)|0;if((c[l+(x<<2)>>2]|0)>(c[D+4>>2]|0)){c[D+4>>2]=c[l+(x<<2)>>2]}x=x+1|0}z=0;while(1){if((z|0)>=(c[e+704>>2]|0)){break}B=eR(1,c[(c[e+712>>2]|0)+(z*96|0)+4>>2]|0,0,(c[e+712>>2]|0)+(z*96|0)|0)|0;w=B;if((B|0)!=0){C=1439;break}z=z+1|0}if((C|0)==1439){if((w|0)==3){w=5}B=p;A=w;E=c[52956]|0;F=c[211864+(w<<2)>>2]|0;b0(B,A,E,213392,230,F,(t=i,i=i+1|0,i=i+7&-8,c[t>>2]=0,t)|0)|0;i=t;break L1799}u=0;while(1){if((u|0)>=(q|0)){break}F=c[s+(u<<2)>>2]|0;x=F;if((F|0)>=0){G=(c[l+(x<<2)>>2]|0)-1|0;D=(c[e+712>>2]|0)+((c[m+(x<<2)>>2]|0)*96|0)|0;c[(c[D+12>>2]|0)+(G<<2)>>2]=u;h[(c[D+16>>2]|0)+(G<<3)>>3]=+h[(c[e+20>>2]|0)+(u<<3)>>3]}u=u+1|0}z=0;L1895:while(1){if((z|0)>=(c[e+704>>2]|0)){break}G=0;while(1){if((G|0)>=(c[(c[e+712>>2]|0)+(z*96|0)+4>>2]|0)){break}if((c[(c[(c[e+712>>2]|0)+(z*96|0)+12>>2]|0)+(G<<2)>>2]|0)<0){C=1455;break L1895}G=G+1|0}z=z+1|0}if((C|0)==1455){y=b0(p,5,c[52956]|0,213392,255,221608,(t=i,i=i+1|0,i=i+7&-8,c[t>>2]=0,t)|0)|0;i=t;w=y;break L1799}x=0;while(1){if((x|0)>=(r|0)){break}if((a[g+(x*72|0)|0]|0)!=0){y=e+708|0;c[y>>2]=(c[y>>2]|0)+1}x=x+1|0}y=e+708|0;c[y>>2]=(c[y>>2]|0)+(c[e+704>>2]|0);y=fp(c[e+708>>2]|0,180)|0;c[e+716>>2]=y;if((y|0)==0){c[e+708>>2]=0;y=b0(p,2,c[52956]|0,213392,278,c[52968]|0,(t=i,i=i+1|0,i=i+7&-8,c[t>>2]=0,t)|0)|0;i=t;w=y;break L1799}c[e+1660>>2]=c[e+716>>2];y=c[e+716>>2]|0;z=0;while(1){if((z|0)>=(c[e+704>>2]|0)){break}F=1;x=0;while(1){if((x|0)>=(r|0)){break}if((c[m+(x<<2)>>2]|0)==(z|0)){if((F|0)!=0){c[y>>2]=x+1;c[y+4>>2]=c[l+(x<<2)>>2];c[y+8>>2]=99;E=y+12|0;A=b+(x*72|0)|0;fu(E|0,A|0)|0;c[y+84>>2]=c[j+(x<<2)>>2];c[y+88>>2]=c[k+(x<<2)>>2];A=y+92|0;E=f+(x*72|0)|0;fu(A|0,E|0)|0;c[y+164>>2]=1;c[y+168>>2]=(c[(c[e+712>>2]|0)+(z*96|0)+4>>2]|0)+1;c[y+172>>2]=c[(c[e+712>>2]|0)+(z*96|0)+8>>2];c[y+176>>2]=(c[e+712>>2]|0)+(z*96|0)+24;c[(c[e+712>>2]|0)+(z*96|0)+92>>2]=1;y=y+180|0;F=0}if((a[g+(x*72|0)|0]|0)!=0){c[y>>2]=x+1;c[y+4>>2]=c[l+(x<<2)>>2];c[y+8>>2]=105;G=(c[y+4>>2]|0)-1|0;E=y+12|0;A=b+(x*72|0)|0;fu(E|0,A|0)|0;c[y+84>>2]=c[j+(x<<2)>>2];c[y+88>>2]=c[k+(x<<2)>>2];A=y+92|0;E=g+(x*72|0)|0;fu(A|0,E|0)|0;c[y+164>>2]=1;c[y+168>>2]=1;c[y+172>>2]=(c[(c[e+712>>2]|0)+(z*96|0)+8>>2]|0)+(G<<2);c[y+176>>2]=(c[(c[e+712>>2]|0)+(z*96|0)+20>>2]|0)+(G<<2);c[(c[(c[e+712>>2]|0)+(z*96|0)+88>>2]|0)+(G<<2)>>2]=1;y=y+180|0}}x=x+1|0}z=z+1|0}w=0;break L1799}}while(0);v=b0(p,2,c[52956]|0,213392,128,c[52968]|0,(t=i,i=i+1|0,i=i+7&-8,c[t>>2]=0,t)|0)|0;i=t;w=v}}while(0);if((s|0)!=0){fo(s)}if((m|0)!=0){fo(m)}if((b|0)!=0){fo(b)}if((j|0)!=0){fo(j)}if((k|0)!=0){fo(k)}if((f|0)!=0){fo(f)}if((g|0)!=0){fo(g)}if((l|0)!=0){fo(l)}if((w|0)!=0){if((c[e+712>>2]|0)!=0){fo(c[e+712>>2]|0)}if((c[e+716>>2]|0)!=0){fo(c[e+716>>2]|0)}}n=w;o=n;i=d;return o|0}function e_(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;d=a;a=b;b=0;if((a|0)==0){e=1;f=e;return f|0}g=c[a>>2]|0;h=0;while(1){if((h|0)>=(c[d>>2]|0)){break}b=b|(bW(g)|0);h=h+1|0;g=g+1664|0}fo(c[a>>2]|0);c[d>>2]=0;c[a>>2]=0;e=b;f=e;return f|0}function e$(e,f,g,j,k){e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;var l=0,n=0,p=0,q=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0;l=i;i=i+264|0;n=1;p=0;q=i;i=i+168|0;c[q>>2]=0;while(1)switch(n|0){case 1:t=l|0;u=l+72|0;v=l+80|0;w=l+88|0;x=l+96|0;y=l+104|0;z=l+112|0;A=l+120|0;B=l+128|0;C=e;D=f;E=g;F=j;G=k;H=0;I=0;J=0;K=0;if((G|0)!=0){n=2;break}else{n=3;break};case 2:c[G>>2]=0;n=3;break;case 3:c[D>>2]=0;c[v>>2]=0;n=4;break;case 4:if((c[v>>2]|0)<17){n=5;break}else{n=7;break};case 5:h[F+(c[v>>2]<<3)>>3]=0.0;h[B+(c[v>>2]<<3)>>3]=0.0;n=6;break;case 6:c[v>>2]=(c[v>>2]|0)+1;n=4;break;case 7:h[y>>3]=1.0;h[z>>3]=1.0;h[E>>3]=1.0;an(6,C|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;L=fy(222200,n,q)|0;n=465;break;case 465:if((L|0)!=0){n=8;break}else{n=9;break};case 8:M=ag(2,G|0,9,c[52954]|0,221520,138,219208,(N=i,i=i+8|0,c[N>>2]=C,N)|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;i=N;O=M;n=464;break;case 9:c[55494]=1;if((c[55514]|0)!=0){n=21;break}else{n=10;break};case 10:c[55514]=1;if((c[55494]|0)!=0){n=12;break}else{n=11;break};case 11:c[55494]=1;n=12;break;case 12:if((c[55548]|0)!=0){n=14;break}else{n=13;break};case 13:c[55548]=c[m>>2];n=14;break;case 14:if((c[55544]|0)!=0){n=16;break}else{n=15;break};case 15:c[55544]=c[o>>2];n=16;break;case 16:if((c[55538]|0)!=0){n=17;break}else{n=18;break};case 17:if((c[(c[55538]|0)+(c[55530]<<2)>>2]|0)!=0){n=20;break}else{n=19;break};case 18:if(0){n=20;break}else{n=19;break};case 19:ao(4);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;M=ap(2,c[55548]|0,16384)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;c[(c[55538]|0)+(c[55530]<<2)>>2]=M;n=20;break;case 20:ao(8);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;n=21;break;case 21:n=22;break;case 22:c[55502]=0;if((c[55504]|0)!=0){n=23;break}else{n=24;break};case 23:c[55502]=(c[55526]|0)-(c[55542]|0);c[55504]=0;n=24;break;case 24:P=c[55526]|0;a[P]=a[222072]|0;Q=P;R=c[55494]|0;R=R+(c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]|0)|0;n=25;break;case 25:n=26;break;case 26:M=b[8+(R<<8)+(d[P]<<1)>>1]|0;R=M;if((M|0)>0){n=27;break}else{n=30;break};case 27:if((b[206856+(R<<1)>>1]|0)!=0){n=28;break}else{n=29;break};case 28:c[55506]=R;c[55510]=P;n=29;break;case 29:P=P+1|0;n=26;break;case 30:R=-R|0;n=31;break;case 31:S=b[206856+(R<<1)>>1]|0;c[55542]=Q;c[55542]=(c[55542]|0)+(-(c[55502]|0)|0);c[55546]=P-(c[55542]|0);a[222072]=a[P]|0;a[P]=0;c[55526]=P;n=32;break;case 32:switch(S|0){case 19:{n=101;break};case 20:{n=104;break};case 21:{n=107;break};case 22:{n=110;break};case 23:{n=124;break};case 24:{n=127;break};case 25:{n=130;break};case 26:{n=133;break};case 27:{n=136;break};case 28:{n=139;break};case 29:{n=142;break};case 30:{n=145;break};case 31:{n=148;break};case 32:{n=151;break};case 33:{n=154;break};case 34:{n=157;break};case 35:{n=160;break};case 36:{n=163;break};case 37:{n=166;break};case 38:{n=169;break};case 39:{n=172;break};case 40:{n=175;break};case 41:{n=178;break};case 42:{n=181;break};case 43:{n=184;break};case 44:{n=187;break};case 45:{n=190;break};case 46:{n=193;break};case 47:{n=196;break};case 48:{n=199;break};case 49:{n=202;break};case 50:{n=205;break};case 51:{n=208;break};case 52:{n=211;break};case 53:{n=214;break};case 54:{n=217;break};case 55:{n=220;break};case 56:{n=223;break};case 57:{n=226;break};case 58:{n=229;break};case 59:{n=232;break};case 60:{n=235;break};case 61:{n=238;break};case 62:{n=241;break};case 63:{n=244;break};case 64:{n=247;break};case 65:{n=250;break};case 66:{n=253;break};case 67:{n=256;break};case 68:{n=259;break};case 69:{n=262;break};case 70:{n=265;break};case 71:{n=268;break};case 72:{n=271;break};case 73:{n=274;break};case 74:{n=277;break};case 75:{n=280;break};case 76:{n=283;break};case 77:{n=286;break};case 78:{n=289;break};case 79:{n=292;break};case 80:{n=295;break};case 81:{n=298;break};case 82:{n=301;break};case 83:{n=304;break};case 84:{n=307;break};case 85:{n=310;break};case 86:{n=313;break};case 87:{n=316;break};case 88:{n=319;break};case 89:{n=322;break};case 90:{n=325;break};case 91:{n=328;break};case 0:{n=33;break};case 92:{n=331;break};case 93:{n=334;break};case 94:{n=337;break};case 1:{n=34;break};case 95:{n=340;break};case 96:{n=343;break};case 97:{n=346;break};case 98:{n=349;break};case 99:{n=352;break};case 100:{n=355;break};case 101:{n=358;break};case 102:{n=361;break};case 103:{n=364;break};case 104:{n=367;break};case 105:{n=370;break};case 106:{n=373;break};case 107:{n=378;break};case 108:{n=381;break};case 109:{n=384;break};case 110:{n=387;break};case 111:{n=390;break};case 112:{n=396;break};case 113:{n=402;break};case 114:{n=408;break};case 2:{n=41;break};case 115:{n=414;break};case 116:{n=417;break};case 117:{n=420;break};case 120:case 121:case 122:case 123:case 124:case 125:{n=423;break};case 118:{n=443;break};case 119:{n=450;break};case 3:{n=51;break};case 4:{n=54;break};case 5:{n=57;break};case 6:{n=60;break};case 7:{n=63;break};case 8:{n=66;break};case 9:{n=69;break};case 10:{n=72;break};case 11:{n=75;break};case 12:{n=80;break};case 13:case 14:{n=85;break};case 15:{n=91;break};case 16:case 17:case 18:{n=96;break};default:{n=462;break}}break;case 33:a[P]=a[222072]|0;P=(c[55510]|0)+1|0;R=c[55506]|0;n=31;break;case 34:if((c[55546]|0)>0){n=35;break}else{n=36;break};case 35:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=36;break;case 36:if((c[55538]|0)!=0){n=37;break}else{n=38;break};case 37:if((c[(c[55538]|0)+(c[55530]<<2)>>2]|0)!=0){n=40;break}else{n=39;break};case 38:if(0){n=40;break}else{n=39;break};case 39:ao(4);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;M=ap(2,c[55548]|0,16384)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;c[(c[55538]|0)+(c[55530]<<2)>>2]=M;n=40;break;case 40:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=1;n=463;break;case 41:if((c[55546]|0)>0){n=42;break}else{n=43;break};case 42:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=43;break;case 43:M=H;H=M+1|0;if((M|0)!=0){n=44;break}else{n=45;break};case 44:c[55494]=11;n=50;break;case 45:if((c[55538]|0)!=0){n=46;break}else{n=47;break};case 46:if((c[(c[55538]|0)+(c[55530]<<2)>>2]|0)!=0){n=49;break}else{n=48;break};case 47:if(0){n=49;break}else{n=48;break};case 48:ao(4);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;M=ap(2,c[55548]|0,16384)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;c[(c[55538]|0)+(c[55530]<<2)>>2]=M;n=49;break;case 49:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=1;n=50;break;case 50:n=463;break;case 51:if((c[55546]|0)>0){n=52;break}else{n=53;break};case 52:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=53;break;case 53:M=ag(2,G|0,1,c[52954]|0,221520,162,217904,(N=i,i=i+8|0,c[N>>2]=C,N)|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;i=N;K=M;c[55494]=11;n=463;break;case 54:if((c[55546]|0)>0){n=55;break}else{n=56;break};case 55:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=56;break;case 56:h[z>>3]=10.0;c[55494]=9;n=463;break;case 57:if((c[55546]|0)>0){n=58;break}else{n=59;break};case 58:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=59;break;case 59:c[D>>2]=1;ak(2,40,c[55542]|0);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;c[55494]=3;n=463;break;case 60:if((c[55546]|0)>0){n=61;break}else{n=62;break};case 61:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=62;break;case 62:c[D>>2]=2;ak(2,40,c[55542]|0);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;c[55494]=3;n=463;break;case 63:if((c[55546]|0)>0){n=64;break}else{n=65;break};case 64:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=65;break;case 65:c[D>>2]=3;ak(2,40,c[55542]|0);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;c[55494]=3;n=463;break;case 66:if((c[55546]|0)>0){n=67;break}else{n=68;break};case 67:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=68;break;case 68:M=ag(2,G|0,2,c[52954]|0,221520,192,216592,(N=i,i=i+8|0,c[N>>2]=C,N)|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;i=N;K=M;c[55494]=11;n=463;break;case 69:if((c[55546]|0)>0){n=70;break}else{n=71;break};case 70:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=71;break;case 71:n=463;break;case 72:if((c[55546]|0)>0){n=73;break}else{n=74;break};case 73:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=74;break;case 74:h[y>>3]=+h[y>>3]/2.0;ak(2,40,c[55542]|0);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;c[55494]=3;n=463;break;case 75:if((c[55546]|0)>0){n=76;break}else{n=77;break};case 76:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=77;break;case 77:n=78;break;case 78:a[P]=a[222072]|0;M=Q+0+(-(c[55502]|0)|0)|0;P=M;c[55526]=M;c[55542]=Q;c[55542]=(c[55542]|0)+(-(c[55502]|0)|0);c[55546]=P-(c[55542]|0);a[222072]=a[P]|0;a[P]=0;c[55526]=P;n=79;break;case 79:c[55494]=3;n=463;break;case 80:if((c[55546]|0)>0){n=81;break}else{n=82;break};case 81:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=82;break;case 82:M=I;I=M+1|0;if((M|0)!=0){n=83;break}else{n=84;break};case 83:c[55494]=11;n=84;break;case 84:n=463;break;case 85:if((c[55546]|0)>0){n=86;break}else{n=87;break};case 86:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=87;break;case 87:M=I;I=M+1|0;if((M|0)!=0){n=88;break}else{n=89;break};case 88:c[55494]=11;n=90;break;case 89:h[y>>3]=+h[y>>3]*-1.0;n=90;break;case 90:n=463;break;case 91:if((c[55546]|0)>0){n=92;break}else{n=93;break};case 92:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=93;break;case 93:I=0;n=94;break;case 94:a[P]=a[222072]|0;M=Q+0+(-(c[55502]|0)|0)|0;P=M;c[55526]=M;c[55542]=Q;c[55542]=(c[55542]|0)+(-(c[55502]|0)|0);c[55546]=P-(c[55542]|0);a[222072]=a[P]|0;a[P]=0;c[55526]=P;n=95;break;case 95:c[55494]=7;n=463;break;case 96:if((c[55546]|0)>0){n=97;break}else{n=98;break};case 97:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=98;break;case 98:I=0;n=99;break;case 99:a[P]=a[222072]|0;M=Q+0+(-(c[55502]|0)|0)|0;P=M;c[55526]=M;c[55542]=Q;c[55542]=(c[55542]|0)+(-(c[55502]|0)|0);c[55546]=P-(c[55542]|0);a[222072]=a[P]|0;a[P]=0;c[55526]=P;n=100;break;case 100:c[55494]=5;n=463;break;case 101:if((c[55546]|0)>0){n=102;break}else{n=103;break};case 102:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=103;break;case 103:H=((H|0)!=0^1)&1;c[55494]=11;n=463;break;case 104:if((c[55546]|0)>0){n=105;break}else{n=106;break};case 105:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=106;break;case 106:M=ag(2,G|0,3,c[52954]|0,221520,246,215472,(N=i,i=i+8|0,c[N>>2]=C,N)|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;i=N;K=M;c[55494]=11;n=463;break;case 107:if((c[55546]|0)>0){n=108;break}else{n=109;break};case 108:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=109;break;case 109:J=J+1|0;I=0;c[55504]=1;n=463;break;case 110:if((c[55546]|0)>0){n=111;break}else{n=112;break};case 111:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=112;break;case 112:J=J-1|0;if((J|0)!=0){n=113;break}else{n=114;break};case 113:c[55504]=1;n=123;break;case 114:a[(c[55542]|0)+((c[55546]|0)-1)|0]=0;if((c[55538]|0)!=0){n=115;break}else{n=116;break};case 115:T=c[(c[55538]|0)+(c[55530]<<2)>>2]|0;n=117;break;case 116:T=0;n=117;break;case 117:M=T;U=at(4,(c[55542]|0)+1|0,u|0,A|0,B|0,G|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;K=U;aj(8,M|0);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;if((c[u>>2]|0)!=0){n=118;break}else{n=119;break};case 118:M=ag(2,G|0,4,c[52954]|0,221520,272,214688,(N=i,i=i+8|0,c[N>>2]=C,N)|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;i=N;K=M;n=119;break;case 119:if((K|0)!=0){n=120;break}else{n=121;break};case 120:c[55494]=11;n=122;break;case 121:h[z>>3]=+h[z>>3]*+h[A>>3];c[55494]=9;n=122;break;case 122:n=123;break;case 123:n=463;break;case 124:if((c[55546]|0)>0){n=125;break}else{n=126;break};case 125:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=126;break;case 126:c[55504]=1;n=463;break;case 127:if((c[55546]|0)>0){n=128;break}else{n=129;break};case 128:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=129;break;case 129:h[z>>3]=.1;c[55494]=7;n=463;break;case 130:if((c[55546]|0)>0){n=131;break}else{n=132;break};case 131:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=132;break;case 132:h[z>>3]=.01;c[55494]=7;n=463;break;case 133:if((c[55546]|0)>0){n=134;break}else{n=135;break};case 134:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=135;break;case 135:h[z>>3]=.001;c[55494]=7;n=463;break;case 136:if((c[55546]|0)>0){n=137;break}else{n=138;break};case 137:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=138;break;case 138:h[z>>3]=1.0e-6;c[55494]=7;n=463;break;case 139:if((c[55546]|0)>0){n=140;break}else{n=141;break};case 140:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=141;break;case 141:h[z>>3]=1.0e-9;c[55494]=7;n=463;break;case 142:if((c[55546]|0)>0){n=143;break}else{n=144;break};case 143:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=144;break;case 144:h[z>>3]=1.0e-12;c[55494]=7;n=463;break;case 145:if((c[55546]|0)>0){n=146;break}else{n=147;break};case 146:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=147;break;case 147:h[z>>3]=1.0e-15;c[55494]=7;n=463;break;case 148:if((c[55546]|0)>0){n=149;break}else{n=150;break};case 149:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=150;break;case 150:h[z>>3]=1.0e-18;c[55494]=7;n=463;break;case 151:if((c[55546]|0)>0){n=152;break}else{n=153;break};case 152:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=153;break;case 153:h[z>>3]=1.0e-21;c[55494]=7;n=463;break;case 154:if((c[55546]|0)>0){n=155;break}else{n=156;break};case 155:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=156;break;case 156:h[z>>3]=1.0e-24;c[55494]=7;n=463;break;case 157:if((c[55546]|0)>0){n=158;break}else{n=159;break};case 158:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=159;break;case 159:h[z>>3]=10.0;c[55494]=7;n=463;break;case 160:if((c[55546]|0)>0){n=161;break}else{n=162;break};case 161:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=162;break;case 162:h[z>>3]=100.0;c[55494]=7;n=463;break;case 163:if((c[55546]|0)>0){n=164;break}else{n=165;break};case 164:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=165;break;case 165:h[z>>3]=1.0e3;c[55494]=7;n=463;break;case 166:if((c[55546]|0)>0){n=167;break}else{n=168;break};case 167:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=168;break;case 168:h[z>>3]=1.0e6;c[55494]=7;n=463;break;case 169:if((c[55546]|0)>0){n=170;break}else{n=171;break};case 170:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=171;break;case 171:h[z>>3]=1.0e9;c[55494]=7;n=463;break;case 172:if((c[55546]|0)>0){n=173;break}else{n=174;break};case 173:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=174;break;case 174:h[z>>3]=1.0e12;c[55494]=7;n=463;break;case 175:if((c[55546]|0)>0){n=176;break}else{n=177;break};case 176:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=177;break;case 177:h[z>>3]=1.0e15;c[55494]=7;n=463;break;case 178:if((c[55546]|0)>0){n=179;break}else{n=180;break};case 179:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=180;break;case 180:h[z>>3]=1.0e18;c[55494]=7;n=463;break;case 181:if((c[55546]|0)>0){n=182;break}else{n=183;break};case 182:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=183;break;case 183:h[z>>3]=1.0e+21;c[55494]=7;n=463;break;case 184:if((c[55546]|0)>0){n=185;break}else{n=186;break};case 185:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=186;break;case 186:h[z>>3]=1.0e+24;c[55494]=7;n=463;break;case 187:if((c[55546]|0)>0){n=188;break}else{n=189;break};case 188:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=189;break;case 189:M=ag(2,G|0,9,c[52954]|0,221520,391,219208,(N=i,i=i+8|0,c[N>>2]=C,N)|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;i=N;K=M;c[55494]=11;n=463;break;case 190:if((c[55546]|0)>0){n=191;break}else{n=192;break};case 191:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=192;break;case 192:M=B+16|0;h[M>>3]=+h[M>>3]+1.0;M=B+64|0;h[M>>3]=+h[M>>3]-1.0;c[55494]=9;n=463;break;case 193:if((c[55546]|0)>0){n=194;break}else{n=195;break};case 194:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=195;break;case 195:h[z>>3]=+h[z>>3]*31557600.0;M=B+64|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 196:if((c[55546]|0)>0){n=197;break}else{n=198;break};case 197:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=198;break;case 198:M=B+96|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 199:if((c[55546]|0)>0){n=200;break}else{n=201;break};case 200:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=201;break;case 201:h[z>>3]=+h[z>>3]*1.0e-10;M=B+56|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 202:if((c[55546]|0)>0){n=203;break}else{n=204;break};case 203:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=204;break;case 204:h[z>>3]=+h[z>>3]/60.0;M=B|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 205:if((c[55546]|0)>0){n=206;break}else{n=207;break};case 206:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=207;break;case 207:h[z>>3]=+h[z>>3]/3600.0;M=B|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 208:if((c[55546]|0)>0){n=209;break}else{n=210;break};case 209:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=210;break;case 210:h[z>>3]=+h[z>>3]*149598.0e6;M=B+56|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 211:if((c[55546]|0)>0){n=212;break}else{n=213;break};case 212:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=213;break;case 213:h[z>>3]=+h[z>>3]*1.0e-28;M=B+56|0;h[M>>3]=+h[M>>3]+2.0;c[55494]=9;n=463;break;case 214:if((c[55546]|0)>0){n=215;break}else{n=216;break};case 215:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=216;break;case 216:M=B+72|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 217:if((c[55546]|0)>0){n=218;break}else{n=219;break};case 218:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=219;break;case 219:M=B+80|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 220:if((c[55546]|0)>0){n=221;break}else{n=222;break};case 221:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=222;break;case 222:M=B+88|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 223:if((c[55546]|0)>0){n=224;break}else{n=225;break};case 224:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=225;break;case 225:h[z>>3]=+h[z>>3]*8.0;M=B+88|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 226:if((c[55546]|0)>0){n=227;break}else{n=228;break};case 227:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=228;break;case 228:M=B+16|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 229:if((c[55546]|0)>0){n=230;break}else{n=231;break};case 230:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=231;break;case 231:M=B+40|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 232:if((c[55546]|0)>0){n=233;break}else{n=234;break};case 233:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=234;break;case 234:M=B+80|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 235:if((c[55546]|0)>0){n=236;break}else{n=237;break};case 236:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=237;break;case 237:M=B+96|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 238:if((c[55546]|0)>0){n=239;break}else{n=240;break};case 239:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=240;break;case 240:h[z>>3]=+h[z>>3]*3.333333333333333e-30;M=B+16|0;h[M>>3]=+h[M>>3]+1.0;M=B+56|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 241:if((c[55546]|0)>0){n=242;break}else{n=243;break};case 242:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=243;break;case 243:h[z>>3]=+h[z>>3]*86400.0;M=B+64|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 244:if((c[55546]|0)>0){n=245;break}else{n=246;break};case 245:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=246;break;case 246:M=B|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 247:if((c[55546]|0)>0){n=248;break}else{n=249;break};case 248:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=249;break;case 249:h[z>>3]=+h[z>>3]*1.0e-7;M=B+48|0;h[M>>3]=+h[M>>3]+1.0;M=B+56|0;h[M>>3]=+h[M>>3]+2.0;M=B+64|0;h[M>>3]=+h[M>>3]-2.0;c[55494]=9;n=463;break;case 250:if((c[55546]|0)>0){n=251;break}else{n=252;break};case 251:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=252;break;case 252:h[z>>3]=+h[z>>3]*1.6021765e-19;M=B+48|0;h[M>>3]=+h[M>>3]+1.0;M=B+56|0;h[M>>3]=+h[M>>3]+2.0;M=B+64|0;h[M>>3]=+h[M>>3]-2.0;c[55494]=9;n=463;break;case 253:if((c[55546]|0)>0){n=254;break}else{n=255;break};case 254:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=255;break;case 255:M=B+48|0;h[M>>3]=+h[M>>3]-1.0;M=B+56|0;h[M>>3]=+h[M>>3]-2.0;M=B+64|0;h[M>>3]=+h[M>>3]+3.0;M=B+16|0;h[M>>3]=+h[M>>3]+2.0;c[55494]=9;n=463;break;case 256:if((c[55546]|0)>0){n=257;break}else{n=258;break};case 257:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=258;break;case 258:h[z>>3]=+h[z>>3]*1.0e-4;M=B+48|0;h[M>>3]=+h[M>>3]+1.0;M=B+64|0;h[M>>3]=+h[M>>3]+1.0;M=B+16|0;h[M>>3]=+h[M>>3]-1.0;c[55494]=9;n=463;break;case 259:if((c[55546]|0)>0){n=260;break}else{n=261;break};case 260:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=261;break;case 261:h[z>>3]=+h[z>>3]*.001;M=B+48|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 262:if((c[55546]|0)>0){n=263;break}else{n=264;break};case 263:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=264;break;case 264:M=B+48|0;h[M>>3]=+h[M>>3]+1.0;M=B+56|0;h[M>>3]=+h[M>>3]+2.0;M=B+64|0;h[M>>3]=+h[M>>3]+2.0;M=B+16|0;h[M>>3]=+h[M>>3]-2.0;c[55494]=9;n=463;break;case 265:if((c[55546]|0)>0){n=266;break}else{n=267;break};case 266:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=267;break;case 267:h[z>>3]=+h[z>>3]*3600.0;M=B+64|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 268:if((c[55546]|0)>0){n=269;break}else{n=270;break};case 269:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=270;break;case 270:M=B+64|0;h[M>>3]=+h[M>>3]-1.0;c[55494]=9;n=463;break;case 271:if((c[55546]|0)>0){n=272;break}else{n=273;break};case 272:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=273;break;case 273:M=B+48|0;h[M>>3]=+h[M>>3]+1.0;M=B+56|0;h[M>>3]=+h[M>>3]+2.0;M=B+64|0;h[M>>3]=+h[M>>3]-2.0;c[55494]=9;n=463;break;case 274:if((c[55546]|0)>0){n=275;break}else{n=276;break};case 275:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=276;break;case 276:h[z>>3]=+h[z>>3]*1.0e-26;M=B+48|0;h[M>>3]=+h[M>>3]+1.0;M=B+64|0;h[M>>3]=+h[M>>3]-2.0;c[55494]=9;n=463;break;case 277:if((c[55546]|0)>0){n=278;break}else{n=279;break};case 278:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=279;break;case 279:M=B+32|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 280:if((c[55546]|0)>0){n=281;break}else{n=282;break};case 281:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=282;break;case 282:M=B+40|0;h[M>>3]=+h[M>>3]+1.0;M=B+8|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 283:if((c[55546]|0)>0){n=284;break}else{n=285;break};case 284:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=285;break;case 285:M=B+40|0;h[M>>3]=+h[M>>3]+1.0;M=B+8|0;h[M>>3]=+h[M>>3]+1.0;M=B+56|0;h[M>>3]=+h[M>>3]-2.0;c[55494]=9;n=463;break;case 286:if((c[55546]|0)>0){n=287;break}else{n=288;break};case 287:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=288;break;case 288:h[z>>3]=+h[z>>3]*9460730472580800.0;M=B+56|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 289:if((c[55546]|0)>0){n=290;break}else{n=291;break};case 290:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=291;break;case 291:M=B+56|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 292:if((c[55546]|0)>0){n=293;break}else{n=294;break};case 293:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=294;break;case 294:M=B+104|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 295:if((c[55546]|0)>0){n=296;break}else{n=297;break};case 296:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=297;break;case 297:h[z>>3]=+h[z>>3]/36.0e5;M=B|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 298:if((c[55546]|0)>0){n=299;break}else{n=300;break};case 299:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=300;break;case 300:h[z>>3]=+h[z>>3]*60.0;M=B+64|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 301:if((c[55546]|0)>0){n=302;break}else{n=303;break};case 302:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=303;break;case 303:M=B+24|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 304:if((c[55546]|0)>0){n=305;break}else{n=306;break};case 305:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=306;break;case 306:M=B+48|0;h[M>>3]=+h[M>>3]+1.0;M=B+56|0;h[M>>3]=+h[M>>3]+1.0;M=B+64|0;h[M>>3]=+h[M>>3]-2.0;c[55494]=9;n=463;break;case 307:if((c[55546]|0)>0){n=308;break}else{n=309;break};case 308:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=309;break;case 309:M=B+48|0;h[M>>3]=+h[M>>3]+1.0;M=B+56|0;h[M>>3]=+h[M>>3]+2.0;M=B+64|0;h[M>>3]=+h[M>>3]-1.0;M=B+16|0;h[M>>3]=+h[M>>3]-2.0;c[55494]=9;n=463;break;case 310:if((c[55546]|0)>0){n=311;break}else{n=312;break};case 311:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=312;break;case 312:M=B+48|0;h[M>>3]=+h[M>>3]+1.0;M=B+56|0;h[M>>3]=+h[M>>3]-1.0;M=B+64|0;h[M>>3]=+h[M>>3]-2.0;c[55494]=9;n=463;break;case 313:if((c[55546]|0)>0){n=314;break}else{n=315;break};case 314:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=315;break;case 315:h[z>>3]=+h[z>>3]*30857.0e12;M=B+56|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 316:if((c[55546]|0)>0){n=317;break}else{n=318;break};case 317:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=318;break;case 318:M=B+96|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 319:if((c[55546]|0)>0){n=320;break}else{n=321;break};case 320:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=321;break;case 321:M=B+112|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 322:if((c[55546]|0)>0){n=323;break}else{n=324;break};case 323:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=324;break;case 324:h[z>>3]=+h[z>>3]*795774715.4594767;M=B+56|0;h[M>>3]=+h[M>>3]-2.0;M=B+64|0;h[M>>3]=+h[M>>3]-1.0;M=B+8|0;h[M>>3]=+h[M>>3]-1.0;c[55494]=9;n=463;break;case 325:if((c[55546]|0)>0){n=326;break}else{n=327;break};case 326:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=327;break;case 327:h[z>>3]=+h[z>>3]*57.29577951308232;M=B|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 328:if((c[55546]|0)>0){n=329;break}else{n=330;break};case 329:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=330;break;case 330:h[z>>3]=+h[z>>3]*2.1798719988638e-18;M=B+48|0;h[M>>3]=+h[M>>3]+1.0;M=B+56|0;h[M>>3]=+h[M>>3]+2.0;M=B+64|0;h[M>>3]=+h[M>>3]-2.0;c[55494]=9;n=463;break;case 331:if((c[55546]|0)>0){n=332;break}else{n=333;break};case 332:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=333;break;case 333:M=B+48|0;h[M>>3]=+h[M>>3]-1.0;M=B+56|0;h[M>>3]=+h[M>>3]-2.0;M=B+64|0;h[M>>3]=+h[M>>3]+1.0;M=B+16|0;h[M>>3]=+h[M>>3]+2.0;c[55494]=9;n=463;break;case 334:if((c[55546]|0)>0){n=335;break}else{n=336;break};case 335:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=336;break;case 336:M=B+64|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 337:if((c[55546]|0)>0){n=338;break}else{n=339;break};case 338:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=339;break;case 339:h[z>>3]=+h[z>>3]*3.8268e+26;M=B+48|0;h[M>>3]=+h[M>>3]+1.0;M=B+56|0;h[M>>3]=+h[M>>3]+2.0;M=B+64|0;h[M>>3]=+h[M>>3]-3.0;c[55494]=9;n=463;break;case 340:if((c[55546]|0)>0){n=341;break}else{n=342;break};case 341:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=342;break;case 342:h[z>>3]=+h[z>>3]*1.9891e+30;M=B+48|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 343:if((c[55546]|0)>0){n=344;break}else{n=345;break};case 344:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=345;break;case 345:h[z>>3]=+h[z>>3]*69599.0e4;M=B+56|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 346:if((c[55546]|0)>0){n=347;break}else{n=348;break};case 347:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=348;break;case 348:M=B+8|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 349:if((c[55546]|0)>0){n=350;break}else{n=351;break};case 350:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=351;break;case 351:M=B+120|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 352:if((c[55546]|0)>0){n=353;break}else{n=354;break};case 353:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=354;break;case 354:M=B+48|0;h[M>>3]=+h[M>>3]+1.0;M=B+64|0;h[M>>3]=+h[M>>3]+1.0;M=B+16|0;h[M>>3]=+h[M>>3]-1.0;c[55494]=9;n=463;break;case 355:if((c[55546]|0)>0){n=356;break}else{n=357;break};case 356:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=357;break;case 357:h[z>>3]=+h[z>>3]*1.6605387e-27;M=B+48|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 358:if((c[55546]|0)>0){n=359;break}else{n=360;break};case 359:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=360;break;case 360:M=B+48|0;h[M>>3]=+h[M>>3]+1.0;M=B+56|0;h[M>>3]=+h[M>>3]+1.0;M=B+64|0;h[M>>3]=+h[M>>3]-2.0;M=B+16|0;h[M>>3]=+h[M>>3]-1.0;c[55494]=9;n=463;break;case 361:if((c[55546]|0)>0){n=362;break}else{n=363;break};case 362:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=363;break;case 363:M=B+128|0;h[M>>3]=+h[M>>3]+1.0;c[55494]=9;n=463;break;case 364:if((c[55546]|0)>0){n=365;break}else{n=366;break};case 365:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=366;break;case 366:M=B+48|0;h[M>>3]=+h[M>>3]+1.0;M=B+56|0;h[M>>3]=+h[M>>3]+2.0;M=B+64|0;h[M>>3]=+h[M>>3]-3.0;c[55494]=9;n=463;break;case 367:if((c[55546]|0)>0){n=368;break}else{n=369;break};case 368:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=369;break;case 369:M=B+48|0;h[M>>3]=+h[M>>3]+1.0;M=B+56|0;h[M>>3]=+h[M>>3]+2.0;M=B+64|0;h[M>>3]=+h[M>>3]+1.0;M=B+16|0;h[M>>3]=+h[M>>3]-1.0;c[55494]=9;n=463;break;case 370:if((c[55546]|0)>0){n=371;break}else{n=372;break};case 371:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=372;break;case 372:M=ag(2,G|0,9,c[52954]|0,221520,830,219208,(N=i,i=i+8|0,c[N>>2]=C,N)|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;i=N;K=M;c[55494]=11;n=463;break;case 373:if((c[55546]|0)>0){n=374;break}else{n=375;break};case 374:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=375;break;case 375:M=I;I=M+1|0;if((M|0)!=0){n=376;break}else{n=377;break};case 376:c[55494]=11;n=377;break;case 377:n=463;break;case 378:if((c[55546]|0)>0){n=379;break}else{n=380;break};case 379:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=380;break;case 380:am(10,c[55542]|0,213936,(N=i,i=i+8|0,c[N>>2]=v,N)|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;i=N;h[y>>3]=+h[y>>3]*+(c[v>>2]|0);ah(2,z|0,B|0,y|0,E|0,F|0);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;I=0;c[55494]=1;n=463;break;case 381:if((c[55546]|0)>0){n=382;break}else{n=383;break};case 382:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=383;break;case 383:am(10,c[55542]|0,213272,(N=i,i=i+8|0,c[N>>2]=v,N)|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;i=N;h[y>>3]=+h[y>>3]*+(c[v>>2]|0);ah(2,z|0,B|0,y|0,E|0,F|0);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;I=0;c[55494]=1;n=463;break;case 384:if((c[55546]|0)>0){n=385;break}else{n=386;break};case 385:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=386;break;case 386:am(10,c[55542]|0,212808,(N=i,i=i+16|0,c[N>>2]=v,c[N+8>>2]=w,N)|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;i=N;h[y>>3]=+h[y>>3]*(+(c[v>>2]|0)/+(c[w>>2]|0));ah(2,z|0,B|0,y|0,E|0,F|0);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;I=0;c[55494]=1;n=463;break;case 387:if((c[55546]|0)>0){n=388;break}else{n=389;break};case 388:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=389;break;case 389:am(10,c[55542]|0,221840,(N=i,i=i+8|0,c[N>>2]=t,N)|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;i=N;am(2,t|0,221536,x|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;h[y>>3]=+h[y>>3]*+h[x>>3];ah(2,z|0,B|0,y|0,E|0,F|0);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;I=0;c[55494]=1;n=463;break;case 390:if((c[55546]|0)>0){n=391;break}else{n=392;break};case 391:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=392;break;case 392:M=I;I=M+1|0;if((M|0)!=0){n=393;break}else{n=394;break};case 393:c[55494]=11;n=395;break;case 394:ah(2,z|0,B|0,y|0,E|0,F|0);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;c[55494]=1;n=395;break;case 395:n=463;break;case 396:if((c[55546]|0)>0){n=397;break}else{n=398;break};case 397:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=398;break;case 398:if((I|0)!=0){n=399;break}else{n=400;break};case 399:c[55494]=11;n=401;break;case 400:ah(2,z|0,B|0,y|0,E|0,F|0);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;ak(2,40,c[55542]|0);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;c[55494]=1;n=401;break;case 401:n=463;break;case 402:if((c[55546]|0)>0){n=403;break}else{n=404;break};case 403:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=404;break;case 404:if((I|0)!=0){n=405;break}else{n=406;break};case 405:c[55494]=11;n=407;break;case 406:ah(2,z|0,B|0,y|0,E|0,F|0);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;c[55494]=1;n=407;break;case 407:n=463;break;case 408:if((c[55546]|0)>0){n=409;break}else{n=410;break};case 409:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=410;break;case 410:M=I;I=M+1|0;if((M|0)!=0){n=411;break}else{n=412;break};case 411:c[55494]=11;n=413;break;case 412:ah(2,z|0,B|0,y|0,E|0,F|0);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;h[y>>3]=-1.0;c[55494]=1;n=413;break;case 413:n=463;break;case 414:if((c[55546]|0)>0){n=415;break}else{n=416;break};case 415:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=416;break;case 416:ah(2,z|0,B|0,y|0,E|0,F|0);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;H=((H|0)!=0^1)&1;c[55494]=11;n=463;break;case 417:if((c[55546]|0)>0){n=418;break}else{n=419;break};case 418:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=419;break;case 419:M=ag(2,G|0,5,c[52954]|0,221520,924,221256,(N=i,i=i+8|0,c[N>>2]=C,N)|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;i=N;K=M;c[55494]=11;n=463;break;case 420:if((c[55546]|0)>0){n=421;break}else{n=422;break};case 421:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=422;break;case 422:n=463;break;case 423:if((((c[55494]|0)-1|0)/2|0|0)==4){n=424;break}else{n=425;break};case 424:ah(2,z|0,B|0,y|0,E|0,F|0);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;n=425;break;case 425:ai(4)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;if((H|0)!=0){n=426;break}else{n=427;break};case 426:M=ag(2,G|0,6,c[52954]|0,221520,942,220976,(N=i,i=i+8|0,c[N>>2]=C,N)|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;i=N;K=M;n=436;break;case 427:if((J|0)!=0){n=428;break}else{n=429;break};case 428:M=ag(2,G|0,7,c[52954]|0,221520,945,220760,(N=i,i=i+8|0,c[N>>2]=C,N)|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;i=N;K=M;n=435;break;case 429:if((I|0)==1){n=430;break}else{n=431;break};case 430:M=ag(2,G|0,2,c[52954]|0,221520,948,216592,(N=i,i=i+8|0,c[N>>2]=C,N)|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;i=N;K=M;n=434;break;case 431:if((I|0)!=0){n=432;break}else{n=433;break};case 432:M=ag(2,G|0,8,c[52954]|0,221520,951,220504,(N=i,i=i+8|0,c[N>>2]=C,N)|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;i=N;K=M;n=433;break;case 433:n=434;break;case 434:n=435;break;case 435:n=436;break;case 436:if((K|0)!=0){n=437;break}else{n=442;break};case 437:c[v>>2]=0;n=438;break;case 438:if((c[v>>2]|0)<17){n=439;break}else{n=441;break};case 439:h[F+(c[v>>2]<<3)>>3]=0.0;h[E>>3]=0.0;n=440;break;case 440:c[v>>2]=(c[v>>2]|0)+1;n=438;break;case 441:n=442;break;case 442:O=K;n=464;break;case 443:if((c[55546]|0)>0){n=444;break}else{n=445;break};case 444:c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]=(a[(c[55542]|0)+((c[55546]|0)-1)|0]|0)==10;n=445;break;case 445:n=446;break;case 446:M=as(2,c[55542]|0,c[55546]|0,1,c[55544]|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;if((M|0)!=0){n=447;break}else{n=448;break};case 447:n=448;break;case 448:n=449;break;case 449:n=463;break;case 450:V=P-(c[55542]|0)-1|0;a[P]=a[222072]|0;if((c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+44>>2]|0)==0){n=451;break}else{n=452;break};case 451:c[55498]=c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+16>>2];c[c[(c[55538]|0)+(c[55530]<<2)>>2]>>2]=c[55548];c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+44>>2]=1;n=452;break;case 452:if((c[55526]|0)>>>0<=((c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+4>>2]|0)+(c[55498]|0)|0)>>>0){n=453;break}else{n=456;break};case 453:c[55526]=(c[55542]|0)+V;M=ai(2)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;R=M;M=an(4,R|0)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;W=M;Q=(c[55542]|0)+(c[55502]|0)|0;if((W|0)!=0){n=454;break}else{n=455;break};case 454:M=(c[55526]|0)+1|0;c[55526]=M;P=M;R=W;n=25;break;case 455:P=c[55526]|0;n=31;break;case 456:M=ai(6)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;if((M|0)==1){n=457;break}else if((M|0)==0){n=458;break}else if((M|0)==2){n=459;break}else{n=460;break};case 457:c[55522]=0;c[55526]=(c[55542]|0)+(c[55502]|0);S=(((c[55494]|0)-1|0)/2|0)+120|0;n=32;break;case 458:c[55526]=(c[55542]|0)+V;M=ai(2)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;R=M;P=c[55526]|0;Q=(c[55542]|0)+(c[55502]|0)|0;n=25;break;case 459:c[55526]=(c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+4>>2]|0)+(c[55498]|0);M=ai(2)|0;if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;R=M;P=c[55526]|0;Q=(c[55542]|0)+(c[55502]|0)|0;n=31;break;case 460:n=461;break;case 461:n=463;break;case 462:aj(6,220384);if((r|0)!=0&(s|0)!=0){p=fz(c[r>>2]|0,q)|0;if((p|0)>0){n=-1;break}else return 0}r=s=0;n=463;break;case 463:n=22;break;case 464:i=l;return O|0;case-1:if((p|0)==7){L=s;n=465}r=s=0;break}return 0}function e0(a){a=a|0;var b=0;b=a;return fk(b,fx(b|0)|0)|0}function e1(){var a=0,b=0,d=0,e=0;if((c[55538]|0)==0){a=1;c[55538]=fe(a<<2)|0;if((c[55538]|0)==0){fb(218912)}b=c[55538]|0;d=a<<2;ft(b|0,0,d|0)|0;c[55534]=a;c[55530]=0;return}if((c[55530]|0)>>>0<((c[55534]|0)-1|0)>>>0){return}d=8;a=(c[55534]|0)+d|0;c[55538]=fm(c[55538]|0,a<<2)|0;if((c[55538]|0)==0){fb(218912)}b=(c[55538]|0)+(c[55534]<<2)|0;e=d<<2;ft(b|0,0,e|0)|0;c[55534]=a;return}function e2(a,b){a=a|0;b=b|0;var d=0;d=fe(48)|0;if((d|0)==0){fb(220240)}c[d+12>>2]=b;c[d+4>>2]=fe((c[d+12>>2]|0)+2|0)|0;if((c[d+4>>2]|0)==0){fb(220240)}c[d+20>>2]=1;fd(d,a);return d|0}function e3(){var b=0;c[55498]=c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+16>>2];b=c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+8>>2]|0;c[55526]=b;c[55542]=b;c[55548]=c[c[(c[55538]|0)+(c[55530]<<2)>>2]>>2];a[222072]=a[c[55526]|0]|0;return}function e4(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=b;b=d;d=c[55526]|0;a[d]=a[222072]|0;if(d>>>0>=((c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+4>>2]|0)+2|0)>>>0){f=e;g=f&255;h=d;i=h-1|0;d=i;a[i]=g;j=b;c[55542]=j;k=d;l=a[k]|0;a[222072]=l;m=d;c[55526]=m;return}n=(c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+4>>2]|0)+((c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+12>>2]|0)+2)|0;o=(c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+4>>2]|0)+((c[55498]|0)+2)|0;while(1){if(o>>>0<=(c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+4>>2]|0)>>>0){break}p=o-1|0;o=p;q=n-1|0;n=q;a[q]=a[p]|0}d=d+(n-o)|0;b=b+(n-o)|0;o=c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+12>>2]|0;c[55498]=o;c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+16>>2]=o;if(d>>>0<((c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+4>>2]|0)+2|0)>>>0){fb(218760)}f=e;g=f&255;h=d;i=h-1|0;d=i;a[i]=g;j=b;c[55542]=j;k=d;l=a[k]|0;a[222072]=l;m=d;c[55526]=m;return}function e5(b){b=b|0;var d=0,e=0,f=0;d=b;e1();if((c[55538]|0)!=0){e=c[(c[55538]|0)+(c[55530]<<2)>>2]|0}else{e=0}if((e|0)==(d|0)){return}if((c[55538]|0)!=0){if((c[(c[55538]|0)+(c[55530]<<2)>>2]|0)!=0){f=1557}}else{if(0){f=1557}}if((f|0)==1557){a[c[55526]|0]=a[222072]|0;c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+8>>2]=c[55526];c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+16>>2]=c[55498]}c[(c[55538]|0)+(c[55530]<<2)>>2]=d;e3();c[55522]=1;return}function e6(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0.0;f=a;a=b;b=c;c=e;g=+R(+(+h[f>>3]),+(+h[b>>3]));e=d;h[e>>3]=+h[e>>3]*g;e=0;while(1){if((e|0)>=17){break}d=c+(e<<3)|0;h[d>>3]=+h[d>>3]+ +h[b>>3]*+h[a+(e<<3)>>3];h[a+(e<<3)>>3]=0.0;e=e+1|0}h[b>>3]=1.0;h[f>>3]=1.0;return}function e7(){var a=0,b=0;while(1){if((c[55538]|0)!=0){a=c[(c[55538]|0)+(c[55530]<<2)>>2]|0}else{a=0}if((a|0)==0){break}if((c[55538]|0)!=0){b=c[(c[55538]|0)+(c[55530]<<2)>>2]|0}else{b=0}ff(b);c[(c[55538]|0)+(c[55530]<<2)>>2]=0;fi()}fg(c[55538]|0);c[55538]=0;fl()|0;return 0}function e8(){var e=0,f=0;e=c[55494]|0;e=e+(c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+28>>2]|0)|0;f=(c[55542]|0)+(c[55502]|0)|0;while(1){if(f>>>0>=(c[55526]|0)>>>0){break}if((a[f]|0)!=0){e=b[8+(e<<8)+(d[f]<<1)>>1]|0}else{e=c[208480+(e<<2)>>2]|0}if((b[206856+(e<<1)>>1]|0)!=0){c[55506]=e;c[55510]=f}f=f+1|0}return e|0}function e9(a){a=a|0;var d=0,e=0,f=0;d=a;a=c[55526]|0;d=c[208480+(d<<2)>>2]|0;e=(d|0)==0|0;if((e|0)==0){if((b[206856+(d<<1)>>1]|0)!=0){c[55506]=d;c[55510]=a}}if((e|0)!=0){f=0;return f|0}else{f=d;return f|0}return 0}function fa(){var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;b=c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+4>>2]|0;d=c[55542]|0;if((c[55526]|0)>>>0>((c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+4>>2]|0)+((c[55498]|0)+1)|0)>>>0){fb(218664)}if((c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+40>>2]|0)==0){if(((c[55526]|0)-(c[55542]|0)-(c[55502]|0)|0)==1){e=1;f=e;return f|0}else{e=2;f=e;return f|0}}g=(c[55526]|0)-(c[55542]|0)-1|0;h=0;while(1){if((h|0)>=(g|0)){break}i=d;d=i+1|0;j=b;b=j+1|0;a[j]=a[i]|0;h=h+1|0}if((c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+44>>2]|0)==2){c[55498]=0;c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+16>>2]=0}else{h=(c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+12>>2]|0)-g-1|0;while(1){if((h|0)>0){break}if((c[55538]|0)!=0){k=c[(c[55538]|0)+(c[55530]<<2)>>2]|0}else{k=0}b=k;d=(c[55526]|0)-(c[b+4>>2]|0)|0;if((c[b+20>>2]|0)!=0){if((c[b+12>>2]<<1|0)<=0){i=b+12|0;c[i>>2]=(c[i>>2]|0)+(((c[b+12>>2]|0)>>>0)/8|0)}else{i=b+12|0;c[i>>2]=c[i>>2]<<1}c[b+4>>2]=fm(c[b+4>>2]|0,(c[b+12>>2]|0)+2|0)|0}else{c[b+4>>2]=0}if((c[b+4>>2]|0)==0){fb(218512)}c[55526]=(c[b+4>>2]|0)+d;h=(c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+12>>2]|0)-g-1|0}if((h|0)>8192){h=8192}c[(bc()|0)>>2]=0;while(1){k=a4(c[55548]|0)|0;d=aZ(k|0,(c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+4>>2]|0)+g|0,h|0)|0;c[55498]=d;if((d|0)>=0){break}if((c[(bc()|0)>>2]|0)!=4){l=1628;break}c[(bc()|0)>>2]=0;aK(c[55548]|0)}if((l|0)==1628){fb(218376)}c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+16>>2]=c[55498]}if((c[55498]|0)==0){if((g|0)==(c[55502]|0)){m=1;fc(c[55548]|0)}else{m=2;c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+44>>2]=2}}else{m=0}if(((c[55498]|0)+g|0)>>>0>(c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+12>>2]|0)>>>0){l=fm(c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+4>>2]|0,(c[55498]|0)+g+(c[55498]>>1)|0)|0;c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+4>>2]=l;if((c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+4>>2]|0)==0){fb(218232)}}c[55498]=(c[55498]|0)+g;a[(c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+4>>2]|0)+(c[55498]|0)|0]=0;a[(c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+4>>2]|0)+((c[55498]|0)+1)|0]=0;c[55542]=c[(c[(c[55538]|0)+(c[55530]<<2)>>2]|0)+4>>2];e=m;f=e;return f|0}function fb(a){a=a|0;var b=0;aC(c[n>>2]|0,219256,(b=i,i=i+8|0,c[b>>2]=a,b)|0)|0;i=b;aV(222200,2)}function fc(a){a=a|0;var b=0,d=0,e=0,f=0;b=a;if((c[55538]|0)!=0){if((c[(c[55538]|0)+(c[55530]<<2)>>2]|0)==0){d=1651}}else{if(!0){d=1651}}if((d|0)==1651){e1();d=e2(c[55548]|0,16384)|0;c[(c[55538]|0)+(c[55530]<<2)>>2]=d}if((c[55538]|0)!=0){e=c[(c[55538]|0)+(c[55530]<<2)>>2]|0;f=b;fd(e,f);e3();return}else{e=0;f=b;fd(e,f);e3();return}}function fd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0;d=a;a=c[(bc()|0)>>2]|0;fh(d);c[d>>2]=b;c[d+40>>2]=1;if((c[55538]|0)!=0){e=c[(c[55538]|0)+(c[55530]<<2)>>2]|0}else{e=0}if((d|0)==(e|0)){f=d;g=f+24|0;c[g>>2]=0;h=a;i=bc()|0;c[i>>2]=h;return}c[d+32>>2]=1;c[d+36>>2]=0;f=d;g=f+24|0;c[g>>2]=0;h=a;i=bc()|0;c[i>>2]=h;return}function fe(a){a=a|0;return fn(a)|0}function ff(a){a=a|0;var b=0,d=0;b=a;if((b|0)==0){return}if((c[55538]|0)!=0){d=c[(c[55538]|0)+(c[55530]<<2)>>2]|0}else{d=0}if((b|0)==(d|0)){c[(c[55538]|0)+(c[55530]<<2)>>2]=0}if((c[b+20>>2]|0)!=0){fg(c[b+4>>2]|0)}fg(b);return}function fg(a){a=a|0;fo(a);return}function fh(b){b=b|0;var d=0,e=0;d=b;if((d|0)==0){return}c[d+16>>2]=0;a[c[d+4>>2]|0]=0;a[(c[d+4>>2]|0)+1|0]=0;c[d+8>>2]=c[d+4>>2];c[d+28>>2]=1;c[d+44>>2]=0;if((c[55538]|0)!=0){e=c[(c[55538]|0)+(c[55530]<<2)>>2]|0}else{e=0}if((d|0)!=(e|0)){return}e3();return}function fi(){var a=0,b=0;if((c[55538]|0)!=0){if((c[(c[55538]|0)+(c[55530]<<2)>>2]|0)==0){a=1695}}else{if(!0){a=1695}}if((a|0)==1695){return}if((c[55538]|0)!=0){b=c[(c[55538]|0)+(c[55530]<<2)>>2]|0}else{b=0}ff(b);c[(c[55538]|0)+(c[55530]<<2)>>2]=0;if((c[55530]|0)>>>0>0>>>0){c[55530]=(c[55530]|0)-1}do{if((c[55538]|0)!=0){if((c[(c[55538]|0)+(c[55530]<<2)>>2]|0)!=0){break}return}else{if(0){break}return}}while(0);e3();c[55522]=1;return}function fj(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=b;b=d;do{if(b>>>0>=2>>>0){if((a[e+(b-2)|0]|0)!=0){break}if((a[e+(b-1)|0]|0)!=0){break}d=fe(48)|0;if((d|0)==0){fb(220160)}c[d+12>>2]=b-2;f=e;c[d+4>>2]=f;c[d+8>>2]=f;c[d+20>>2]=0;c[d>>2]=0;c[d+16>>2]=c[d+12>>2];c[d+24>>2]=0;c[d+28>>2]=1;c[d+40>>2]=0;c[d+44>>2]=0;e5(d);g=d;h=g;return h|0}}while(0);g=0;h=g;return h|0}function fk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;e=b;b=d;d=b+2|0;f=fe(d)|0;if((f|0)==0){fb(219896)}g=0;while(1){if((g|0)>=(b|0)){break}a[f+g|0]=a[e+g|0]|0;g=g+1|0}a[f+(b+1)|0]=0;a[f+b|0]=0;b=fj(f,d)|0;if((b|0)!=0){h=b;i=h+20|0;c[i>>2]=1;j=b;return j|0}fb(219536);h=b;i=h+20|0;c[i>>2]=1;j=b;return j|0}function fl(){c[55538]=0;c[55530]=0;c[55534]=0;c[55526]=0;c[55514]=0;c[55494]=0;c[55548]=0;c[55544]=0;return 0}function fm(a,b){a=a|0;b=b|0;return fq(a,b)|0}function fn(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ab=0,ac=0,ad=0,ae=0,af=0,ag=0,ah=0,ai=0,aj=0,ak=0,al=0,am=0,an=0,ao=0,ap=0,aq=0,ar=0,as=0,at=0,au=0,av=0,aw=0,ax=0,ay=0,az=0,aA=0,aC=0,aD=0,aE=0,aF=0,aG=0,aH=0,aI=0,aJ=0,aK=0;do{if(a>>>0<245>>>0){if(a>>>0<11>>>0){b=16}else{b=a+11&-8}d=b>>>3;e=c[55664]|0;f=e>>>(d>>>0);if((f&3|0)!=0){g=(f&1^1)+d|0;h=g<<1;i=222696+(h<<2)|0;j=222696+(h+2<<2)|0;h=c[j>>2]|0;k=h+8|0;l=c[k>>2]|0;do{if((i|0)==(l|0)){c[55664]=e&~(1<<g)}else{if(l>>>0<(c[55668]|0)>>>0){aB();return 0}m=l+12|0;if((c[m>>2]|0)==(h|0)){c[m>>2]=i;c[j>>2]=l;break}else{aB();return 0}}}while(0);l=g<<3;c[h+4>>2]=l|3;j=h+(l|4)|0;c[j>>2]=c[j>>2]|1;n=k;return n|0}if(b>>>0<=(c[55666]|0)>>>0){o=b;break}if((f|0)!=0){j=2<<d;l=f<<d&(j|-j);j=(l&-l)-1|0;l=j>>>12&16;i=j>>>(l>>>0);j=i>>>5&8;m=i>>>(j>>>0);i=m>>>2&4;p=m>>>(i>>>0);m=p>>>1&2;q=p>>>(m>>>0);p=q>>>1&1;r=(j|l|i|m|p)+(q>>>(p>>>0))|0;p=r<<1;q=222696+(p<<2)|0;m=222696+(p+2<<2)|0;p=c[m>>2]|0;i=p+8|0;l=c[i>>2]|0;do{if((q|0)==(l|0)){c[55664]=e&~(1<<r)}else{if(l>>>0<(c[55668]|0)>>>0){aB();return 0}j=l+12|0;if((c[j>>2]|0)==(p|0)){c[j>>2]=q;c[m>>2]=l;break}else{aB();return 0}}}while(0);l=r<<3;m=l-b|0;c[p+4>>2]=b|3;q=p;e=q+b|0;c[q+(b|4)>>2]=m|1;c[q+l>>2]=m;l=c[55666]|0;if((l|0)!=0){q=c[55669]|0;d=l>>>3;l=d<<1;f=222696+(l<<2)|0;k=c[55664]|0;h=1<<d;do{if((k&h|0)==0){c[55664]=k|h;s=f;t=222696+(l+2<<2)|0}else{d=222696+(l+2<<2)|0;g=c[d>>2]|0;if(g>>>0>=(c[55668]|0)>>>0){s=g;t=d;break}aB();return 0}}while(0);c[t>>2]=q;c[s+12>>2]=q;c[q+8>>2]=s;c[q+12>>2]=f}c[55666]=m;c[55669]=e;n=i;return n|0}l=c[55665]|0;if((l|0)==0){o=b;break}h=(l&-l)-1|0;l=h>>>12&16;k=h>>>(l>>>0);h=k>>>5&8;p=k>>>(h>>>0);k=p>>>2&4;r=p>>>(k>>>0);p=r>>>1&2;d=r>>>(p>>>0);r=d>>>1&1;g=c[222960+((h|l|k|p|r)+(d>>>(r>>>0))<<2)>>2]|0;r=g;d=g;p=(c[g+4>>2]&-8)-b|0;while(1){g=c[r+16>>2]|0;if((g|0)==0){k=c[r+20>>2]|0;if((k|0)==0){break}else{u=k}}else{u=g}g=(c[u+4>>2]&-8)-b|0;k=g>>>0<p>>>0;r=u;d=k?u:d;p=k?g:p}r=d;i=c[55668]|0;if(r>>>0<i>>>0){aB();return 0}e=r+b|0;m=e;if(r>>>0>=e>>>0){aB();return 0}e=c[d+24>>2]|0;f=c[d+12>>2]|0;do{if((f|0)==(d|0)){q=d+20|0;g=c[q>>2]|0;if((g|0)==0){k=d+16|0;l=c[k>>2]|0;if((l|0)==0){v=0;break}else{w=l;x=k}}else{w=g;x=q}while(1){q=w+20|0;g=c[q>>2]|0;if((g|0)!=0){w=g;x=q;continue}q=w+16|0;g=c[q>>2]|0;if((g|0)==0){break}else{w=g;x=q}}if(x>>>0<i>>>0){aB();return 0}else{c[x>>2]=0;v=w;break}}else{q=c[d+8>>2]|0;if(q>>>0<i>>>0){aB();return 0}g=q+12|0;if((c[g>>2]|0)!=(d|0)){aB();return 0}k=f+8|0;if((c[k>>2]|0)==(d|0)){c[g>>2]=f;c[k>>2]=q;v=f;break}else{aB();return 0}}}while(0);L2449:do{if((e|0)!=0){f=d+28|0;i=222960+(c[f>>2]<<2)|0;do{if((d|0)==(c[i>>2]|0)){c[i>>2]=v;if((v|0)!=0){break}c[55665]=c[55665]&~(1<<c[f>>2]);break L2449}else{if(e>>>0<(c[55668]|0)>>>0){aB();return 0}q=e+16|0;if((c[q>>2]|0)==(d|0)){c[q>>2]=v}else{c[e+20>>2]=v}if((v|0)==0){break L2449}}}while(0);if(v>>>0<(c[55668]|0)>>>0){aB();return 0}c[v+24>>2]=e;f=c[d+16>>2]|0;do{if((f|0)!=0){if(f>>>0<(c[55668]|0)>>>0){aB();return 0}else{c[v+16>>2]=f;c[f+24>>2]=v;break}}}while(0);f=c[d+20>>2]|0;if((f|0)==0){break}if(f>>>0<(c[55668]|0)>>>0){aB();return 0}else{c[v+20>>2]=f;c[f+24>>2]=v;break}}}while(0);if(p>>>0<16>>>0){e=p+b|0;c[d+4>>2]=e|3;f=r+(e+4)|0;c[f>>2]=c[f>>2]|1}else{c[d+4>>2]=b|3;c[r+(b|4)>>2]=p|1;c[r+(p+b)>>2]=p;f=c[55666]|0;if((f|0)!=0){e=c[55669]|0;i=f>>>3;f=i<<1;q=222696+(f<<2)|0;k=c[55664]|0;g=1<<i;do{if((k&g|0)==0){c[55664]=k|g;y=q;z=222696+(f+2<<2)|0}else{i=222696+(f+2<<2)|0;l=c[i>>2]|0;if(l>>>0>=(c[55668]|0)>>>0){y=l;z=i;break}aB();return 0}}while(0);c[z>>2]=e;c[y+12>>2]=e;c[e+8>>2]=y;c[e+12>>2]=q}c[55666]=p;c[55669]=m}n=d+8|0;return n|0}else{if(a>>>0>4294967231>>>0){o=-1;break}f=a+11|0;g=f&-8;k=c[55665]|0;if((k|0)==0){o=g;break}r=-g|0;i=f>>>8;do{if((i|0)==0){A=0}else{if(g>>>0>16777215>>>0){A=31;break}f=(i+1048320|0)>>>16&8;l=i<<f;h=(l+520192|0)>>>16&4;j=l<<h;l=(j+245760|0)>>>16&2;B=14-(h|f|l)+(j<<l>>>15)|0;A=g>>>((B+7|0)>>>0)&1|B<<1}}while(0);i=c[222960+(A<<2)>>2]|0;L2256:do{if((i|0)==0){C=0;D=r;E=0}else{if((A|0)==31){F=0}else{F=25-(A>>>1)|0}d=0;m=r;p=i;q=g<<F;e=0;while(1){B=c[p+4>>2]&-8;l=B-g|0;if(l>>>0<m>>>0){if((B|0)==(g|0)){C=p;D=l;E=p;break L2256}else{G=p;H=l}}else{G=d;H=m}l=c[p+20>>2]|0;B=c[p+16+(q>>>31<<2)>>2]|0;j=(l|0)==0|(l|0)==(B|0)?e:l;if((B|0)==0){C=G;D=H;E=j;break}else{d=G;m=H;p=B;q=q<<1;e=j}}}}while(0);if((E|0)==0&(C|0)==0){i=2<<A;r=k&(i|-i);if((r|0)==0){o=g;break}i=(r&-r)-1|0;r=i>>>12&16;e=i>>>(r>>>0);i=e>>>5&8;q=e>>>(i>>>0);e=q>>>2&4;p=q>>>(e>>>0);q=p>>>1&2;m=p>>>(q>>>0);p=m>>>1&1;I=c[222960+((i|r|e|q|p)+(m>>>(p>>>0))<<2)>>2]|0}else{I=E}if((I|0)==0){J=D;K=C}else{p=I;m=D;q=C;while(1){e=(c[p+4>>2]&-8)-g|0;r=e>>>0<m>>>0;i=r?e:m;e=r?p:q;r=c[p+16>>2]|0;if((r|0)!=0){p=r;m=i;q=e;continue}r=c[p+20>>2]|0;if((r|0)==0){J=i;K=e;break}else{p=r;m=i;q=e}}}if((K|0)==0){o=g;break}if(J>>>0>=((c[55666]|0)-g|0)>>>0){o=g;break}q=K;m=c[55668]|0;if(q>>>0<m>>>0){aB();return 0}p=q+g|0;k=p;if(q>>>0>=p>>>0){aB();return 0}e=c[K+24>>2]|0;i=c[K+12>>2]|0;do{if((i|0)==(K|0)){r=K+20|0;d=c[r>>2]|0;if((d|0)==0){j=K+16|0;B=c[j>>2]|0;if((B|0)==0){L=0;break}else{M=B;N=j}}else{M=d;N=r}while(1){r=M+20|0;d=c[r>>2]|0;if((d|0)!=0){M=d;N=r;continue}r=M+16|0;d=c[r>>2]|0;if((d|0)==0){break}else{M=d;N=r}}if(N>>>0<m>>>0){aB();return 0}else{c[N>>2]=0;L=M;break}}else{r=c[K+8>>2]|0;if(r>>>0<m>>>0){aB();return 0}d=r+12|0;if((c[d>>2]|0)!=(K|0)){aB();return 0}j=i+8|0;if((c[j>>2]|0)==(K|0)){c[d>>2]=i;c[j>>2]=r;L=i;break}else{aB();return 0}}}while(0);L2306:do{if((e|0)!=0){i=K+28|0;m=222960+(c[i>>2]<<2)|0;do{if((K|0)==(c[m>>2]|0)){c[m>>2]=L;if((L|0)!=0){break}c[55665]=c[55665]&~(1<<c[i>>2]);break L2306}else{if(e>>>0<(c[55668]|0)>>>0){aB();return 0}r=e+16|0;if((c[r>>2]|0)==(K|0)){c[r>>2]=L}else{c[e+20>>2]=L}if((L|0)==0){break L2306}}}while(0);if(L>>>0<(c[55668]|0)>>>0){aB();return 0}c[L+24>>2]=e;i=c[K+16>>2]|0;do{if((i|0)!=0){if(i>>>0<(c[55668]|0)>>>0){aB();return 0}else{c[L+16>>2]=i;c[i+24>>2]=L;break}}}while(0);i=c[K+20>>2]|0;if((i|0)==0){break}if(i>>>0<(c[55668]|0)>>>0){aB();return 0}else{c[L+20>>2]=i;c[i+24>>2]=L;break}}}while(0);L2334:do{if(J>>>0<16>>>0){e=J+g|0;c[K+4>>2]=e|3;i=q+(e+4)|0;c[i>>2]=c[i>>2]|1}else{c[K+4>>2]=g|3;c[q+(g|4)>>2]=J|1;c[q+(J+g)>>2]=J;i=J>>>3;if(J>>>0<256>>>0){e=i<<1;m=222696+(e<<2)|0;r=c[55664]|0;j=1<<i;do{if((r&j|0)==0){c[55664]=r|j;O=m;P=222696+(e+2<<2)|0}else{i=222696+(e+2<<2)|0;d=c[i>>2]|0;if(d>>>0>=(c[55668]|0)>>>0){O=d;P=i;break}aB();return 0}}while(0);c[P>>2]=k;c[O+12>>2]=k;c[q+(g+8)>>2]=O;c[q+(g+12)>>2]=m;break}e=p;j=J>>>8;do{if((j|0)==0){Q=0}else{if(J>>>0>16777215>>>0){Q=31;break}r=(j+1048320|0)>>>16&8;i=j<<r;d=(i+520192|0)>>>16&4;B=i<<d;i=(B+245760|0)>>>16&2;l=14-(d|r|i)+(B<<i>>>15)|0;Q=J>>>((l+7|0)>>>0)&1|l<<1}}while(0);j=222960+(Q<<2)|0;c[q+(g+28)>>2]=Q;c[q+(g+20)>>2]=0;c[q+(g+16)>>2]=0;m=c[55665]|0;l=1<<Q;if((m&l|0)==0){c[55665]=m|l;c[j>>2]=e;c[q+(g+24)>>2]=j;c[q+(g+12)>>2]=e;c[q+(g+8)>>2]=e;break}l=c[j>>2]|0;if((Q|0)==31){R=0}else{R=25-(Q>>>1)|0}L2355:do{if((c[l+4>>2]&-8|0)==(J|0)){S=l}else{j=l;m=J<<R;while(1){T=j+16+(m>>>31<<2)|0;i=c[T>>2]|0;if((i|0)==0){break}if((c[i+4>>2]&-8|0)==(J|0)){S=i;break L2355}else{j=i;m=m<<1}}if(T>>>0<(c[55668]|0)>>>0){aB();return 0}else{c[T>>2]=e;c[q+(g+24)>>2]=j;c[q+(g+12)>>2]=e;c[q+(g+8)>>2]=e;break L2334}}}while(0);l=S+8|0;m=c[l>>2]|0;i=c[55668]|0;if(S>>>0<i>>>0){aB();return 0}if(m>>>0<i>>>0){aB();return 0}else{c[m+12>>2]=e;c[l>>2]=e;c[q+(g+8)>>2]=m;c[q+(g+12)>>2]=S;c[q+(g+24)>>2]=0;break}}}while(0);n=K+8|0;return n|0}}while(0);K=c[55666]|0;if(o>>>0<=K>>>0){S=K-o|0;T=c[55669]|0;if(S>>>0>15>>>0){J=T;c[55669]=J+o;c[55666]=S;c[J+(o+4)>>2]=S|1;c[J+K>>2]=S;c[T+4>>2]=o|3}else{c[55666]=0;c[55669]=0;c[T+4>>2]=K|3;S=T+(K+4)|0;c[S>>2]=c[S>>2]|1}n=T+8|0;return n|0}T=c[55667]|0;if(o>>>0<T>>>0){S=T-o|0;c[55667]=S;T=c[55670]|0;K=T;c[55670]=K+o;c[K+(o+4)>>2]=S|1;c[T+4>>2]=o|3;n=T+8|0;return n|0}do{if((c[55652]|0)==0){T=aU(30)|0;if((T-1&T|0)==0){c[55654]=T;c[55653]=T;c[55655]=-1;c[55656]=-1;c[55657]=0;c[55775]=0;c[55652]=(a_(0)|0)&-16^1431655768;break}else{aB();return 0}}}while(0);T=o+48|0;S=c[55654]|0;K=o+47|0;J=S+K|0;R=-S|0;S=J&R;if(S>>>0<=o>>>0){n=0;return n|0}Q=c[55774]|0;do{if((Q|0)!=0){O=c[55772]|0;P=O+S|0;if(P>>>0<=O>>>0|P>>>0>Q>>>0){n=0}else{break}return n|0}}while(0);L2516:do{if((c[55775]&4|0)==0){Q=c[55670]|0;L2518:do{if((Q|0)==0){U=1914}else{P=Q;O=223104;while(1){V=O|0;L=c[V>>2]|0;if(L>>>0<=P>>>0){W=O+4|0;if((L+(c[W>>2]|0)|0)>>>0>P>>>0){break}}L=c[O+8>>2]|0;if((L|0)==0){U=1914;break L2518}else{O=L}}if((O|0)==0){U=1914;break}P=J-(c[55667]|0)&R;if(P>>>0>=2147483647>>>0){X=0;break}e=a9(P|0)|0;L=(e|0)==((c[V>>2]|0)+(c[W>>2]|0)|0);Y=L?e:-1;Z=L?P:0;_=e;$=P;U=1923}}while(0);do{if((U|0)==1914){Q=a9(0)|0;if((Q|0)==-1){X=0;break}P=Q;e=c[55653]|0;L=e-1|0;if((L&P|0)==0){aa=S}else{aa=S-P+(L+P&-e)|0}e=c[55772]|0;P=e+aa|0;if(!(aa>>>0>o>>>0&aa>>>0<2147483647>>>0)){X=0;break}L=c[55774]|0;if((L|0)!=0){if(P>>>0<=e>>>0|P>>>0>L>>>0){X=0;break}}L=a9(aa|0)|0;P=(L|0)==(Q|0);Y=P?Q:-1;Z=P?aa:0;_=L;$=aa;U=1923}}while(0);L2538:do{if((U|0)==1923){L=-$|0;if((Y|0)!=-1){ab=Z;ac=Y;U=1934;break L2516}do{if((_|0)!=-1&$>>>0<2147483647>>>0&$>>>0<T>>>0){P=c[55654]|0;Q=K-$+P&-P;if(Q>>>0>=2147483647>>>0){ad=$;break}if((a9(Q|0)|0)==-1){a9(L|0)|0;X=Z;break L2538}else{ad=Q+$|0;break}}else{ad=$}}while(0);if((_|0)==-1){X=Z}else{ab=ad;ac=_;U=1934;break L2516}}}while(0);c[55775]=c[55775]|4;ae=X;U=1931}else{ae=0;U=1931}}while(0);do{if((U|0)==1931){if(S>>>0>=2147483647>>>0){break}X=a9(S|0)|0;_=a9(0)|0;if(!((_|0)!=-1&(X|0)!=-1&X>>>0<_>>>0)){break}ad=_-X|0;_=ad>>>0>(o+40|0)>>>0;if(_){ab=_?ad:ae;ac=X;U=1934}}}while(0);do{if((U|0)==1934){ae=(c[55772]|0)+ab|0;c[55772]=ae;if(ae>>>0>(c[55773]|0)>>>0){c[55773]=ae}ae=c[55670]|0;L2558:do{if((ae|0)==0){S=c[55668]|0;if((S|0)==0|ac>>>0<S>>>0){c[55668]=ac}c[55776]=ac;c[55777]=ab;c[55779]=0;c[55673]=c[55652];c[55672]=-1;S=0;do{X=S<<1;ad=222696+(X<<2)|0;c[222696+(X+3<<2)>>2]=ad;c[222696+(X+2<<2)>>2]=ad;S=S+1|0;}while(S>>>0<32>>>0);S=ac+8|0;if((S&7|0)==0){af=0}else{af=-S&7}S=ab-40-af|0;c[55670]=ac+af;c[55667]=S;c[ac+(af+4)>>2]=S|1;c[ac+(ab-36)>>2]=40;c[55671]=c[55656]}else{S=223104;while(1){ag=c[S>>2]|0;ah=S+4|0;ai=c[ah>>2]|0;if((ac|0)==(ag+ai|0)){U=1946;break}ad=c[S+8>>2]|0;if((ad|0)==0){break}else{S=ad}}do{if((U|0)==1946){if((c[S+12>>2]&8|0)!=0){break}ad=ae;if(!(ad>>>0>=ag>>>0&ad>>>0<ac>>>0)){break}c[ah>>2]=ai+ab;ad=c[55670]|0;X=(c[55667]|0)+ab|0;_=ad;Z=ad+8|0;if((Z&7|0)==0){aj=0}else{aj=-Z&7}Z=X-aj|0;c[55670]=_+aj;c[55667]=Z;c[_+(aj+4)>>2]=Z|1;c[_+(X+4)>>2]=40;c[55671]=c[55656];break L2558}}while(0);if(ac>>>0<(c[55668]|0)>>>0){c[55668]=ac}S=ac+ab|0;X=223104;while(1){ak=X|0;if((c[ak>>2]|0)==(S|0)){U=1956;break}_=c[X+8>>2]|0;if((_|0)==0){break}else{X=_}}do{if((U|0)==1956){if((c[X+12>>2]&8|0)!=0){break}c[ak>>2]=ac;S=X+4|0;c[S>>2]=(c[S>>2]|0)+ab;S=ac+8|0;if((S&7|0)==0){al=0}else{al=-S&7}S=ac+(ab+8)|0;if((S&7|0)==0){am=0}else{am=-S&7}S=ac+(am+ab)|0;_=S;Z=al+o|0;ad=ac+Z|0;$=ad;K=S-(ac+al)-o|0;c[ac+(al+4)>>2]=o|3;L2595:do{if((_|0)==(c[55670]|0)){T=(c[55667]|0)+K|0;c[55667]=T;c[55670]=$;c[ac+(Z+4)>>2]=T|1}else{if((_|0)==(c[55669]|0)){T=(c[55666]|0)+K|0;c[55666]=T;c[55669]=$;c[ac+(Z+4)>>2]=T|1;c[ac+(T+Z)>>2]=T;break}T=ab+4|0;Y=c[ac+(T+am)>>2]|0;if((Y&3|0)==1){aa=Y&-8;W=Y>>>3;L2603:do{if(Y>>>0<256>>>0){V=c[ac+((am|8)+ab)>>2]|0;R=c[ac+(ab+12+am)>>2]|0;J=222696+(W<<1<<2)|0;do{if((V|0)!=(J|0)){if(V>>>0<(c[55668]|0)>>>0){aB();return 0}if((c[V+12>>2]|0)==(_|0)){break}aB();return 0}}while(0);if((R|0)==(V|0)){c[55664]=c[55664]&~(1<<W);break}do{if((R|0)==(J|0)){an=R+8|0}else{if(R>>>0<(c[55668]|0)>>>0){aB();return 0}L=R+8|0;if((c[L>>2]|0)==(_|0)){an=L;break}aB();return 0}}while(0);c[V+12>>2]=R;c[an>>2]=V}else{J=S;L=c[ac+((am|24)+ab)>>2]|0;O=c[ac+(ab+12+am)>>2]|0;do{if((O|0)==(J|0)){Q=am|16;P=ac+(T+Q)|0;e=c[P>>2]|0;if((e|0)==0){M=ac+(Q+ab)|0;Q=c[M>>2]|0;if((Q|0)==0){ao=0;break}else{ap=Q;aq=M}}else{ap=e;aq=P}while(1){P=ap+20|0;e=c[P>>2]|0;if((e|0)!=0){ap=e;aq=P;continue}P=ap+16|0;e=c[P>>2]|0;if((e|0)==0){break}else{ap=e;aq=P}}if(aq>>>0<(c[55668]|0)>>>0){aB();return 0}else{c[aq>>2]=0;ao=ap;break}}else{P=c[ac+((am|8)+ab)>>2]|0;if(P>>>0<(c[55668]|0)>>>0){aB();return 0}e=P+12|0;if((c[e>>2]|0)!=(J|0)){aB();return 0}M=O+8|0;if((c[M>>2]|0)==(J|0)){c[e>>2]=O;c[M>>2]=P;ao=O;break}else{aB();return 0}}}while(0);if((L|0)==0){break}O=ac+(ab+28+am)|0;V=222960+(c[O>>2]<<2)|0;do{if((J|0)==(c[V>>2]|0)){c[V>>2]=ao;if((ao|0)!=0){break}c[55665]=c[55665]&~(1<<c[O>>2]);break L2603}else{if(L>>>0<(c[55668]|0)>>>0){aB();return 0}R=L+16|0;if((c[R>>2]|0)==(J|0)){c[R>>2]=ao}else{c[L+20>>2]=ao}if((ao|0)==0){break L2603}}}while(0);if(ao>>>0<(c[55668]|0)>>>0){aB();return 0}c[ao+24>>2]=L;J=am|16;O=c[ac+(J+ab)>>2]|0;do{if((O|0)!=0){if(O>>>0<(c[55668]|0)>>>0){aB();return 0}else{c[ao+16>>2]=O;c[O+24>>2]=ao;break}}}while(0);O=c[ac+(T+J)>>2]|0;if((O|0)==0){break}if(O>>>0<(c[55668]|0)>>>0){aB();return 0}else{c[ao+20>>2]=O;c[O+24>>2]=ao;break}}}while(0);ar=ac+((aa|am)+ab)|0;as=aa+K|0}else{ar=_;as=K}T=ar+4|0;c[T>>2]=c[T>>2]&-2;c[ac+(Z+4)>>2]=as|1;c[ac+(as+Z)>>2]=as;T=as>>>3;if(as>>>0<256>>>0){W=T<<1;Y=222696+(W<<2)|0;O=c[55664]|0;L=1<<T;do{if((O&L|0)==0){c[55664]=O|L;at=Y;au=222696+(W+2<<2)|0}else{T=222696+(W+2<<2)|0;V=c[T>>2]|0;if(V>>>0>=(c[55668]|0)>>>0){at=V;au=T;break}aB();return 0}}while(0);c[au>>2]=$;c[at+12>>2]=$;c[ac+(Z+8)>>2]=at;c[ac+(Z+12)>>2]=Y;break}W=ad;L=as>>>8;do{if((L|0)==0){av=0}else{if(as>>>0>16777215>>>0){av=31;break}O=(L+1048320|0)>>>16&8;aa=L<<O;T=(aa+520192|0)>>>16&4;V=aa<<T;aa=(V+245760|0)>>>16&2;R=14-(T|O|aa)+(V<<aa>>>15)|0;av=as>>>((R+7|0)>>>0)&1|R<<1}}while(0);L=222960+(av<<2)|0;c[ac+(Z+28)>>2]=av;c[ac+(Z+20)>>2]=0;c[ac+(Z+16)>>2]=0;Y=c[55665]|0;R=1<<av;if((Y&R|0)==0){c[55665]=Y|R;c[L>>2]=W;c[ac+(Z+24)>>2]=L;c[ac+(Z+12)>>2]=W;c[ac+(Z+8)>>2]=W;break}R=c[L>>2]|0;if((av|0)==31){aw=0}else{aw=25-(av>>>1)|0}L2692:do{if((c[R+4>>2]&-8|0)==(as|0)){ax=R}else{L=R;Y=as<<aw;while(1){ay=L+16+(Y>>>31<<2)|0;aa=c[ay>>2]|0;if((aa|0)==0){break}if((c[aa+4>>2]&-8|0)==(as|0)){ax=aa;break L2692}else{L=aa;Y=Y<<1}}if(ay>>>0<(c[55668]|0)>>>0){aB();return 0}else{c[ay>>2]=W;c[ac+(Z+24)>>2]=L;c[ac+(Z+12)>>2]=W;c[ac+(Z+8)>>2]=W;break L2595}}}while(0);R=ax+8|0;Y=c[R>>2]|0;J=c[55668]|0;if(ax>>>0<J>>>0){aB();return 0}if(Y>>>0<J>>>0){aB();return 0}else{c[Y+12>>2]=W;c[R>>2]=W;c[ac+(Z+8)>>2]=Y;c[ac+(Z+12)>>2]=ax;c[ac+(Z+24)>>2]=0;break}}}while(0);n=ac+(al|8)|0;return n|0}}while(0);X=ae;Z=223104;while(1){az=c[Z>>2]|0;if(az>>>0<=X>>>0){aA=c[Z+4>>2]|0;aC=az+aA|0;if(aC>>>0>X>>>0){break}}Z=c[Z+8>>2]|0}Z=az+(aA-39)|0;if((Z&7|0)==0){aD=0}else{aD=-Z&7}Z=az+(aA-47+aD)|0;ad=Z>>>0<(ae+16|0)>>>0?X:Z;Z=ad+8|0;$=ac+8|0;if(($&7|0)==0){aE=0}else{aE=-$&7}$=ab-40-aE|0;c[55670]=ac+aE;c[55667]=$;c[ac+(aE+4)>>2]=$|1;c[ac+(ab-36)>>2]=40;c[55671]=c[55656];c[ad+4>>2]=27;c[Z>>2]=c[55776];c[Z+4>>2]=c[55777];c[Z+8>>2]=c[55778];c[Z+12>>2]=c[55779];c[55776]=ac;c[55777]=ab;c[55779]=0;c[55778]=Z;Z=ad+28|0;c[Z>>2]=7;if((ad+32|0)>>>0<aC>>>0){$=Z;while(1){Z=$+4|0;c[Z>>2]=7;if(($+8|0)>>>0<aC>>>0){$=Z}else{break}}}if((ad|0)==(X|0)){break}$=ad-ae|0;Z=X+($+4)|0;c[Z>>2]=c[Z>>2]&-2;c[ae+4>>2]=$|1;c[X+$>>2]=$;Z=$>>>3;if($>>>0<256>>>0){K=Z<<1;_=222696+(K<<2)|0;S=c[55664]|0;j=1<<Z;do{if((S&j|0)==0){c[55664]=S|j;aF=_;aG=222696+(K+2<<2)|0}else{Z=222696+(K+2<<2)|0;Y=c[Z>>2]|0;if(Y>>>0>=(c[55668]|0)>>>0){aF=Y;aG=Z;break}aB();return 0}}while(0);c[aG>>2]=ae;c[aF+12>>2]=ae;c[ae+8>>2]=aF;c[ae+12>>2]=_;break}K=ae;j=$>>>8;do{if((j|0)==0){aH=0}else{if($>>>0>16777215>>>0){aH=31;break}S=(j+1048320|0)>>>16&8;X=j<<S;ad=(X+520192|0)>>>16&4;Z=X<<ad;X=(Z+245760|0)>>>16&2;Y=14-(ad|S|X)+(Z<<X>>>15)|0;aH=$>>>((Y+7|0)>>>0)&1|Y<<1}}while(0);j=222960+(aH<<2)|0;c[ae+28>>2]=aH;c[ae+20>>2]=0;c[ae+16>>2]=0;_=c[55665]|0;Y=1<<aH;if((_&Y|0)==0){c[55665]=_|Y;c[j>>2]=K;c[ae+24>>2]=j;c[ae+12>>2]=ae;c[ae+8>>2]=ae;break}Y=c[j>>2]|0;if((aH|0)==31){aI=0}else{aI=25-(aH>>>1)|0}L2746:do{if((c[Y+4>>2]&-8|0)==($|0)){aJ=Y}else{j=Y;_=$<<aI;while(1){aK=j+16+(_>>>31<<2)|0;X=c[aK>>2]|0;if((X|0)==0){break}if((c[X+4>>2]&-8|0)==($|0)){aJ=X;break L2746}else{j=X;_=_<<1}}if(aK>>>0<(c[55668]|0)>>>0){aB();return 0}else{c[aK>>2]=K;c[ae+24>>2]=j;c[ae+12>>2]=ae;c[ae+8>>2]=ae;break L2558}}}while(0);$=aJ+8|0;Y=c[$>>2]|0;_=c[55668]|0;if(aJ>>>0<_>>>0){aB();return 0}if(Y>>>0<_>>>0){aB();return 0}else{c[Y+12>>2]=K;c[$>>2]=K;c[ae+8>>2]=Y;c[ae+12>>2]=aJ;c[ae+24>>2]=0;break}}}while(0);ae=c[55667]|0;if(ae>>>0<=o>>>0){break}Y=ae-o|0;c[55667]=Y;ae=c[55670]|0;$=ae;c[55670]=$+o;c[$+(o+4)>>2]=Y|1;c[ae+4>>2]=o|3;n=ae+8|0;return n|0}}while(0);c[(bc()|0)>>2]=12;n=0;return n|0}function fo(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0;if((a|0)==0){return}b=a-8|0;d=b;e=c[55668]|0;if(b>>>0<e>>>0){aB()}f=c[a-4>>2]|0;g=f&3;if((g|0)==1){aB()}h=f&-8;i=a+(h-8)|0;j=i;L2777:do{if((f&1|0)==0){k=c[b>>2]|0;if((g|0)==0){return}l=-8-k|0;m=a+l|0;n=m;o=k+h|0;if(m>>>0<e>>>0){aB()}if((n|0)==(c[55669]|0)){p=a+(h-4)|0;if((c[p>>2]&3|0)!=3){q=n;r=o;break}c[55666]=o;c[p>>2]=c[p>>2]&-2;c[a+(l+4)>>2]=o|1;c[i>>2]=o;return}p=k>>>3;if(k>>>0<256>>>0){k=c[a+(l+8)>>2]|0;s=c[a+(l+12)>>2]|0;t=222696+(p<<1<<2)|0;do{if((k|0)!=(t|0)){if(k>>>0<e>>>0){aB()}if((c[k+12>>2]|0)==(n|0)){break}aB()}}while(0);if((s|0)==(k|0)){c[55664]=c[55664]&~(1<<p);q=n;r=o;break}do{if((s|0)==(t|0)){u=s+8|0}else{if(s>>>0<e>>>0){aB()}v=s+8|0;if((c[v>>2]|0)==(n|0)){u=v;break}aB()}}while(0);c[k+12>>2]=s;c[u>>2]=k;q=n;r=o;break}t=m;p=c[a+(l+24)>>2]|0;v=c[a+(l+12)>>2]|0;do{if((v|0)==(t|0)){w=a+(l+20)|0;x=c[w>>2]|0;if((x|0)==0){y=a+(l+16)|0;z=c[y>>2]|0;if((z|0)==0){A=0;break}else{B=z;C=y}}else{B=x;C=w}while(1){w=B+20|0;x=c[w>>2]|0;if((x|0)!=0){B=x;C=w;continue}w=B+16|0;x=c[w>>2]|0;if((x|0)==0){break}else{B=x;C=w}}if(C>>>0<e>>>0){aB()}else{c[C>>2]=0;A=B;break}}else{w=c[a+(l+8)>>2]|0;if(w>>>0<e>>>0){aB()}x=w+12|0;if((c[x>>2]|0)!=(t|0)){aB()}y=v+8|0;if((c[y>>2]|0)==(t|0)){c[x>>2]=v;c[y>>2]=w;A=v;break}else{aB()}}}while(0);if((p|0)==0){q=n;r=o;break}v=a+(l+28)|0;m=222960+(c[v>>2]<<2)|0;do{if((t|0)==(c[m>>2]|0)){c[m>>2]=A;if((A|0)!=0){break}c[55665]=c[55665]&~(1<<c[v>>2]);q=n;r=o;break L2777}else{if(p>>>0<(c[55668]|0)>>>0){aB()}k=p+16|0;if((c[k>>2]|0)==(t|0)){c[k>>2]=A}else{c[p+20>>2]=A}if((A|0)==0){q=n;r=o;break L2777}}}while(0);if(A>>>0<(c[55668]|0)>>>0){aB()}c[A+24>>2]=p;t=c[a+(l+16)>>2]|0;do{if((t|0)!=0){if(t>>>0<(c[55668]|0)>>>0){aB()}else{c[A+16>>2]=t;c[t+24>>2]=A;break}}}while(0);t=c[a+(l+20)>>2]|0;if((t|0)==0){q=n;r=o;break}if(t>>>0<(c[55668]|0)>>>0){aB()}else{c[A+20>>2]=t;c[t+24>>2]=A;q=n;r=o;break}}else{q=d;r=h}}while(0);d=q;if(d>>>0>=i>>>0){aB()}A=a+(h-4)|0;e=c[A>>2]|0;if((e&1|0)==0){aB()}do{if((e&2|0)==0){if((j|0)==(c[55670]|0)){B=(c[55667]|0)+r|0;c[55667]=B;c[55670]=q;c[q+4>>2]=B|1;if((q|0)!=(c[55669]|0)){return}c[55669]=0;c[55666]=0;return}if((j|0)==(c[55669]|0)){B=(c[55666]|0)+r|0;c[55666]=B;c[55669]=q;c[q+4>>2]=B|1;c[d+B>>2]=B;return}B=(e&-8)+r|0;C=e>>>3;L2879:do{if(e>>>0<256>>>0){u=c[a+h>>2]|0;g=c[a+(h|4)>>2]|0;b=222696+(C<<1<<2)|0;do{if((u|0)!=(b|0)){if(u>>>0<(c[55668]|0)>>>0){aB()}if((c[u+12>>2]|0)==(j|0)){break}aB()}}while(0);if((g|0)==(u|0)){c[55664]=c[55664]&~(1<<C);break}do{if((g|0)==(b|0)){D=g+8|0}else{if(g>>>0<(c[55668]|0)>>>0){aB()}f=g+8|0;if((c[f>>2]|0)==(j|0)){D=f;break}aB()}}while(0);c[u+12>>2]=g;c[D>>2]=u}else{b=i;f=c[a+(h+16)>>2]|0;t=c[a+(h|4)>>2]|0;do{if((t|0)==(b|0)){p=a+(h+12)|0;v=c[p>>2]|0;if((v|0)==0){m=a+(h+8)|0;k=c[m>>2]|0;if((k|0)==0){E=0;break}else{F=k;G=m}}else{F=v;G=p}while(1){p=F+20|0;v=c[p>>2]|0;if((v|0)!=0){F=v;G=p;continue}p=F+16|0;v=c[p>>2]|0;if((v|0)==0){break}else{F=v;G=p}}if(G>>>0<(c[55668]|0)>>>0){aB()}else{c[G>>2]=0;E=F;break}}else{p=c[a+h>>2]|0;if(p>>>0<(c[55668]|0)>>>0){aB()}v=p+12|0;if((c[v>>2]|0)!=(b|0)){aB()}m=t+8|0;if((c[m>>2]|0)==(b|0)){c[v>>2]=t;c[m>>2]=p;E=t;break}else{aB()}}}while(0);if((f|0)==0){break}t=a+(h+20)|0;u=222960+(c[t>>2]<<2)|0;do{if((b|0)==(c[u>>2]|0)){c[u>>2]=E;if((E|0)!=0){break}c[55665]=c[55665]&~(1<<c[t>>2]);break L2879}else{if(f>>>0<(c[55668]|0)>>>0){aB()}g=f+16|0;if((c[g>>2]|0)==(b|0)){c[g>>2]=E}else{c[f+20>>2]=E}if((E|0)==0){break L2879}}}while(0);if(E>>>0<(c[55668]|0)>>>0){aB()}c[E+24>>2]=f;b=c[a+(h+8)>>2]|0;do{if((b|0)!=0){if(b>>>0<(c[55668]|0)>>>0){aB()}else{c[E+16>>2]=b;c[b+24>>2]=E;break}}}while(0);b=c[a+(h+12)>>2]|0;if((b|0)==0){break}if(b>>>0<(c[55668]|0)>>>0){aB()}else{c[E+20>>2]=b;c[b+24>>2]=E;break}}}while(0);c[q+4>>2]=B|1;c[d+B>>2]=B;if((q|0)!=(c[55669]|0)){H=B;break}c[55666]=B;return}else{c[A>>2]=e&-2;c[q+4>>2]=r|1;c[d+r>>2]=r;H=r}}while(0);r=H>>>3;if(H>>>0<256>>>0){d=r<<1;e=222696+(d<<2)|0;A=c[55664]|0;E=1<<r;do{if((A&E|0)==0){c[55664]=A|E;I=e;J=222696+(d+2<<2)|0}else{r=222696+(d+2<<2)|0;h=c[r>>2]|0;if(h>>>0>=(c[55668]|0)>>>0){I=h;J=r;break}aB()}}while(0);c[J>>2]=q;c[I+12>>2]=q;c[q+8>>2]=I;c[q+12>>2]=e;return}e=q;I=H>>>8;do{if((I|0)==0){K=0}else{if(H>>>0>16777215>>>0){K=31;break}J=(I+1048320|0)>>>16&8;d=I<<J;E=(d+520192|0)>>>16&4;A=d<<E;d=(A+245760|0)>>>16&2;r=14-(E|J|d)+(A<<d>>>15)|0;K=H>>>((r+7|0)>>>0)&1|r<<1}}while(0);I=222960+(K<<2)|0;c[q+28>>2]=K;c[q+20>>2]=0;c[q+16>>2]=0;r=c[55665]|0;d=1<<K;L2966:do{if((r&d|0)==0){c[55665]=r|d;c[I>>2]=e;c[q+24>>2]=I;c[q+12>>2]=q;c[q+8>>2]=q}else{A=c[I>>2]|0;if((K|0)==31){L=0}else{L=25-(K>>>1)|0}L2972:do{if((c[A+4>>2]&-8|0)==(H|0)){M=A}else{J=A;E=H<<L;while(1){N=J+16+(E>>>31<<2)|0;h=c[N>>2]|0;if((h|0)==0){break}if((c[h+4>>2]&-8|0)==(H|0)){M=h;break L2972}else{J=h;E=E<<1}}if(N>>>0<(c[55668]|0)>>>0){aB()}else{c[N>>2]=e;c[q+24>>2]=J;c[q+12>>2]=q;c[q+8>>2]=q;break L2966}}}while(0);A=M+8|0;B=c[A>>2]|0;E=c[55668]|0;if(M>>>0<E>>>0){aB()}if(B>>>0<E>>>0){aB()}else{c[B+12>>2]=e;c[A>>2]=e;c[q+8>>2]=B;c[q+12>>2]=M;c[q+24>>2]=0;break}}}while(0);q=(c[55672]|0)-1|0;c[55672]=q;if((q|0)==0){O=223112}else{return}while(1){q=c[O>>2]|0;if((q|0)==0){break}else{O=q+8|0}}c[55672]=-1;return}function fp(a,b){a=a|0;b=b|0;var d=0,e=0;do{if((a|0)==0){d=0}else{e=aa(b,a)|0;if((b|a)>>>0<=65535>>>0){d=e;break}d=((e>>>0)/(a>>>0)|0|0)==(b|0)?e:-1}}while(0);b=fn(d)|0;if((b|0)==0){return b|0}if((c[b-4>>2]&3|0)==0){return b|0}ft(b|0,0,d|0)|0;return b|0}function fq(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;if((a|0)==0){d=fn(b)|0;return d|0}if(b>>>0>4294967231>>>0){c[(bc()|0)>>2]=12;d=0;return d|0}if(b>>>0<11>>>0){e=16}else{e=b+11&-8}f=fr(a-8|0,e)|0;if((f|0)!=0){d=f+8|0;return d|0}f=fn(b)|0;if((f|0)==0){d=0;return d|0}e=c[a-4>>2]|0;g=(e&-8)-((e&3|0)==0?8:4)|0;e=g>>>0<b>>>0?g:b;fw(f|0,a|0,e)|0;fo(a);d=f;return d|0}function fr(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;d=a+4|0;e=c[d>>2]|0;f=e&-8;g=a;h=g+f|0;i=h;j=c[55668]|0;if(g>>>0<j>>>0){aB();return 0}k=e&3;if(!((k|0)!=1&g>>>0<h>>>0)){aB();return 0}l=g+(f|4)|0;m=c[l>>2]|0;if((m&1|0)==0){aB();return 0}if((k|0)==0){if(b>>>0<256>>>0){n=0;return n|0}do{if(f>>>0>=(b+4|0)>>>0){if((f-b|0)>>>0>c[55654]<<1>>>0){break}else{n=a}return n|0}}while(0);n=0;return n|0}if(f>>>0>=b>>>0){k=f-b|0;if(k>>>0<=15>>>0){n=a;return n|0}c[d>>2]=e&1|b|2;c[g+(b+4)>>2]=k|3;c[l>>2]=c[l>>2]|1;fs(g+b|0,k);n=a;return n|0}if((i|0)==(c[55670]|0)){k=(c[55667]|0)+f|0;if(k>>>0<=b>>>0){n=0;return n|0}l=k-b|0;c[d>>2]=e&1|b|2;c[g+(b+4)>>2]=l|1;c[55670]=g+b;c[55667]=l;n=a;return n|0}if((i|0)==(c[55669]|0)){l=(c[55666]|0)+f|0;if(l>>>0<b>>>0){n=0;return n|0}k=l-b|0;if(k>>>0>15>>>0){c[d>>2]=e&1|b|2;c[g+(b+4)>>2]=k|1;c[g+l>>2]=k;o=g+(l+4)|0;c[o>>2]=c[o>>2]&-2;p=g+b|0;q=k}else{c[d>>2]=e&1|l|2;e=g+(l+4)|0;c[e>>2]=c[e>>2]|1;p=0;q=0}c[55666]=q;c[55669]=p;n=a;return n|0}if((m&2|0)!=0){n=0;return n|0}p=(m&-8)+f|0;if(p>>>0<b>>>0){n=0;return n|0}q=p-b|0;e=m>>>3;L3079:do{if(m>>>0<256>>>0){l=c[g+(f+8)>>2]|0;k=c[g+(f+12)>>2]|0;o=222696+(e<<1<<2)|0;do{if((l|0)!=(o|0)){if(l>>>0<j>>>0){aB();return 0}if((c[l+12>>2]|0)==(i|0)){break}aB();return 0}}while(0);if((k|0)==(l|0)){c[55664]=c[55664]&~(1<<e);break}do{if((k|0)==(o|0)){r=k+8|0}else{if(k>>>0<j>>>0){aB();return 0}s=k+8|0;if((c[s>>2]|0)==(i|0)){r=s;break}aB();return 0}}while(0);c[l+12>>2]=k;c[r>>2]=l}else{o=h;s=c[g+(f+24)>>2]|0;t=c[g+(f+12)>>2]|0;do{if((t|0)==(o|0)){u=g+(f+20)|0;v=c[u>>2]|0;if((v|0)==0){w=g+(f+16)|0;x=c[w>>2]|0;if((x|0)==0){y=0;break}else{z=x;A=w}}else{z=v;A=u}while(1){u=z+20|0;v=c[u>>2]|0;if((v|0)!=0){z=v;A=u;continue}u=z+16|0;v=c[u>>2]|0;if((v|0)==0){break}else{z=v;A=u}}if(A>>>0<j>>>0){aB();return 0}else{c[A>>2]=0;y=z;break}}else{u=c[g+(f+8)>>2]|0;if(u>>>0<j>>>0){aB();return 0}v=u+12|0;if((c[v>>2]|0)!=(o|0)){aB();return 0}w=t+8|0;if((c[w>>2]|0)==(o|0)){c[v>>2]=t;c[w>>2]=u;y=t;break}else{aB();return 0}}}while(0);if((s|0)==0){break}t=g+(f+28)|0;l=222960+(c[t>>2]<<2)|0;do{if((o|0)==(c[l>>2]|0)){c[l>>2]=y;if((y|0)!=0){break}c[55665]=c[55665]&~(1<<c[t>>2]);break L3079}else{if(s>>>0<(c[55668]|0)>>>0){aB();return 0}k=s+16|0;if((c[k>>2]|0)==(o|0)){c[k>>2]=y}else{c[s+20>>2]=y}if((y|0)==0){break L3079}}}while(0);if(y>>>0<(c[55668]|0)>>>0){aB();return 0}c[y+24>>2]=s;o=c[g+(f+16)>>2]|0;do{if((o|0)!=0){if(o>>>0<(c[55668]|0)>>>0){aB();return 0}else{c[y+16>>2]=o;c[o+24>>2]=y;break}}}while(0);o=c[g+(f+20)>>2]|0;if((o|0)==0){break}if(o>>>0<(c[55668]|0)>>>0){aB();return 0}else{c[y+20>>2]=o;c[o+24>>2]=y;break}}}while(0);if(q>>>0<16>>>0){c[d>>2]=p|c[d>>2]&1|2;y=g+(p|4)|0;c[y>>2]=c[y>>2]|1;n=a;return n|0}else{c[d>>2]=c[d>>2]&1|b|2;c[g+(b+4)>>2]=q|3;d=g+(p|4)|0;c[d>>2]=c[d>>2]|1;fs(g+b|0,q);n=a;return n|0}return 0}function fs(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;d=a;e=d+b|0;f=e;g=c[a+4>>2]|0;L1:do{if((g&1|0)==0){h=c[a>>2]|0;if((g&3|0)==0){return}i=d+(-h|0)|0;j=i;k=h+b|0;l=c[55668]|0;if(i>>>0<l>>>0){aB()}if((j|0)==(c[55669]|0)){m=d+(b+4)|0;if((c[m>>2]&3|0)!=3){n=j;o=k;break}c[55666]=k;c[m>>2]=c[m>>2]&-2;c[d+(4-h)>>2]=k|1;c[e>>2]=k;return}m=h>>>3;if(h>>>0<256>>>0){p=c[d+(8-h)>>2]|0;q=c[d+(12-h)>>2]|0;r=222696+(m<<1<<2)|0;do{if((p|0)!=(r|0)){if(p>>>0<l>>>0){aB()}if((c[p+12>>2]|0)==(j|0)){break}aB()}}while(0);if((q|0)==(p|0)){c[55664]=c[55664]&~(1<<m);n=j;o=k;break}do{if((q|0)==(r|0)){s=q+8|0}else{if(q>>>0<l>>>0){aB()}t=q+8|0;if((c[t>>2]|0)==(j|0)){s=t;break}aB()}}while(0);c[p+12>>2]=q;c[s>>2]=p;n=j;o=k;break}r=i;m=c[d+(24-h)>>2]|0;t=c[d+(12-h)>>2]|0;do{if((t|0)==(r|0)){u=16-h|0;v=d+(u+4)|0;w=c[v>>2]|0;if((w|0)==0){x=d+u|0;u=c[x>>2]|0;if((u|0)==0){y=0;break}else{z=u;A=x}}else{z=w;A=v}while(1){v=z+20|0;w=c[v>>2]|0;if((w|0)!=0){z=w;A=v;continue}v=z+16|0;w=c[v>>2]|0;if((w|0)==0){break}else{z=w;A=v}}if(A>>>0<l>>>0){aB()}else{c[A>>2]=0;y=z;break}}else{v=c[d+(8-h)>>2]|0;if(v>>>0<l>>>0){aB()}w=v+12|0;if((c[w>>2]|0)!=(r|0)){aB()}x=t+8|0;if((c[x>>2]|0)==(r|0)){c[w>>2]=t;c[x>>2]=v;y=t;break}else{aB()}}}while(0);if((m|0)==0){n=j;o=k;break}t=d+(28-h)|0;l=222960+(c[t>>2]<<2)|0;do{if((r|0)==(c[l>>2]|0)){c[l>>2]=y;if((y|0)!=0){break}c[55665]=c[55665]&~(1<<c[t>>2]);n=j;o=k;break L1}else{if(m>>>0<(c[55668]|0)>>>0){aB()}i=m+16|0;if((c[i>>2]|0)==(r|0)){c[i>>2]=y}else{c[m+20>>2]=y}if((y|0)==0){n=j;o=k;break L1}}}while(0);if(y>>>0<(c[55668]|0)>>>0){aB()}c[y+24>>2]=m;r=16-h|0;t=c[d+r>>2]|0;do{if((t|0)!=0){if(t>>>0<(c[55668]|0)>>>0){aB()}else{c[y+16>>2]=t;c[t+24>>2]=y;break}}}while(0);t=c[d+(r+4)>>2]|0;if((t|0)==0){n=j;o=k;break}if(t>>>0<(c[55668]|0)>>>0){aB()}else{c[y+20>>2]=t;c[t+24>>2]=y;n=j;o=k;break}}else{n=a;o=b}}while(0);a=c[55668]|0;if(e>>>0<a>>>0){aB()}y=d+(b+4)|0;z=c[y>>2]|0;do{if((z&2|0)==0){if((f|0)==(c[55670]|0)){A=(c[55667]|0)+o|0;c[55667]=A;c[55670]=n;c[n+4>>2]=A|1;if((n|0)!=(c[55669]|0)){return}c[55669]=0;c[55666]=0;return}if((f|0)==(c[55669]|0)){A=(c[55666]|0)+o|0;c[55666]=A;c[55669]=n;c[n+4>>2]=A|1;c[n+A>>2]=A;return}A=(z&-8)+o|0;s=z>>>3;L100:do{if(z>>>0<256>>>0){g=c[d+(b+8)>>2]|0;t=c[d+(b+12)>>2]|0;h=222696+(s<<1<<2)|0;do{if((g|0)!=(h|0)){if(g>>>0<a>>>0){aB()}if((c[g+12>>2]|0)==(f|0)){break}aB()}}while(0);if((t|0)==(g|0)){c[55664]=c[55664]&~(1<<s);break}do{if((t|0)==(h|0)){B=t+8|0}else{if(t>>>0<a>>>0){aB()}m=t+8|0;if((c[m>>2]|0)==(f|0)){B=m;break}aB()}}while(0);c[g+12>>2]=t;c[B>>2]=g}else{h=e;m=c[d+(b+24)>>2]|0;l=c[d+(b+12)>>2]|0;do{if((l|0)==(h|0)){i=d+(b+20)|0;p=c[i>>2]|0;if((p|0)==0){q=d+(b+16)|0;v=c[q>>2]|0;if((v|0)==0){C=0;break}else{D=v;E=q}}else{D=p;E=i}while(1){i=D+20|0;p=c[i>>2]|0;if((p|0)!=0){D=p;E=i;continue}i=D+16|0;p=c[i>>2]|0;if((p|0)==0){break}else{D=p;E=i}}if(E>>>0<a>>>0){aB()}else{c[E>>2]=0;C=D;break}}else{i=c[d+(b+8)>>2]|0;if(i>>>0<a>>>0){aB()}p=i+12|0;if((c[p>>2]|0)!=(h|0)){aB()}q=l+8|0;if((c[q>>2]|0)==(h|0)){c[p>>2]=l;c[q>>2]=i;C=l;break}else{aB()}}}while(0);if((m|0)==0){break}l=d+(b+28)|0;g=222960+(c[l>>2]<<2)|0;do{if((h|0)==(c[g>>2]|0)){c[g>>2]=C;if((C|0)!=0){break}c[55665]=c[55665]&~(1<<c[l>>2]);break L100}else{if(m>>>0<(c[55668]|0)>>>0){aB()}t=m+16|0;if((c[t>>2]|0)==(h|0)){c[t>>2]=C}else{c[m+20>>2]=C}if((C|0)==0){break L100}}}while(0);if(C>>>0<(c[55668]|0)>>>0){aB()}c[C+24>>2]=m;h=c[d+(b+16)>>2]|0;do{if((h|0)!=0){if(h>>>0<(c[55668]|0)>>>0){aB()}else{c[C+16>>2]=h;c[h+24>>2]=C;break}}}while(0);h=c[d+(b+20)>>2]|0;if((h|0)==0){break}if(h>>>0<(c[55668]|0)>>>0){aB()}else{c[C+20>>2]=h;c[h+24>>2]=C;break}}}while(0);c[n+4>>2]=A|1;c[n+A>>2]=A;if((n|0)!=(c[55669]|0)){F=A;break}c[55666]=A;return}else{c[y>>2]=z&-2;c[n+4>>2]=o|1;c[n+o>>2]=o;F=o}}while(0);o=F>>>3;if(F>>>0<256>>>0){z=o<<1;y=222696+(z<<2)|0;C=c[55664]|0;b=1<<o;do{if((C&b|0)==0){c[55664]=C|b;G=y;H=222696+(z+2<<2)|0}else{o=222696+(z+2<<2)|0;d=c[o>>2]|0;if(d>>>0>=(c[55668]|0)>>>0){G=d;H=o;break}aB()}}while(0);c[H>>2]=n;c[G+12>>2]=n;c[n+8>>2]=G;c[n+12>>2]=y;return}y=n;G=F>>>8;do{if((G|0)==0){I=0}else{if(F>>>0>16777215>>>0){I=31;break}H=(G+1048320|0)>>>16&8;z=G<<H;b=(z+520192|0)>>>16&4;C=z<<b;z=(C+245760|0)>>>16&2;o=14-(b|H|z)+(C<<z>>>15)|0;I=F>>>((o+7|0)>>>0)&1|o<<1}}while(0);G=222960+(I<<2)|0;c[n+28>>2]=I;c[n+20>>2]=0;c[n+16>>2]=0;o=c[55665]|0;z=1<<I;if((o&z|0)==0){c[55665]=o|z;c[G>>2]=y;c[n+24>>2]=G;c[n+12>>2]=n;c[n+8>>2]=n;return}z=c[G>>2]|0;if((I|0)==31){J=0}else{J=25-(I>>>1)|0}L194:do{if((c[z+4>>2]&-8|0)==(F|0)){K=z}else{I=z;G=F<<J;while(1){L=I+16+(G>>>31<<2)|0;o=c[L>>2]|0;if((o|0)==0){break}if((c[o+4>>2]&-8|0)==(F|0)){K=o;break L194}else{I=o;G=G<<1}}if(L>>>0<(c[55668]|0)>>>0){aB()}c[L>>2]=y;c[n+24>>2]=I;c[n+12>>2]=n;c[n+8>>2]=n;return}}while(0);L=K+8|0;F=c[L>>2]|0;J=c[55668]|0;if(K>>>0<J>>>0){aB()}if(F>>>0<J>>>0){aB()}c[F+12>>2]=y;c[L>>2]=y;c[n+8>>2]=F;c[n+12>>2]=K;c[n+24>>2]=0;return}function ft(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=b+e|0;if((e|0)>=20){d=d&255;g=b&3;h=d|d<<8|d<<16|d<<24;i=f&~3;if(g){g=b+4-g|0;while((b|0)<(g|0)){a[b]=d;b=b+1|0}}while((b|0)<(i|0)){c[b>>2]=h;b=b+4|0}}while((b|0)<(f|0)){a[b]=d;b=b+1|0}return b-e|0}function fu(b,c){b=b|0;c=c|0;var d=0;do{a[b+d|0]=a[c+d|0];d=d+1|0}while(a[c+(d-1)|0]|0);return b|0}function fv(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0;while((e|0)<(d|0)){a[b+e|0]=f?0:a[c+e|0]|0;f=f?1:(a[c+e|0]|0)==0;e=e+1|0}return b|0}function fw(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;f=b|0;if((b&3)==(d&3)){while(b&3){if((e|0)==0)return f|0;a[b]=a[d]|0;b=b+1|0;d=d+1|0;e=e-1|0}while((e|0)>=4){c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0;e=e-4|0}}while((e|0)>0){a[b]=a[d]|0;b=b+1|0;d=d+1|0;e=e-1|0}return f|0}function fx(b){b=b|0;var c=0;c=b;while(a[c]|0){c=c+1|0}return c-b|0}function fy(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;t=t+1|0;c[a>>2]=t;while((e|0)<40){if((c[d+(e<<2)>>2]|0)==0){c[d+(e<<2)>>2]=t;c[d+((e<<2)+4)>>2]=b;c[d+((e<<2)+8)>>2]=0;return 0}e=e+2|0}a7(116);a7(111);a7(111);a7(32);a7(109);a7(97);a7(110);a7(121);a7(32);a7(115);a7(101);a7(116);a7(106);a7(109);a7(112);a7(115);a7(32);a7(105);a7(110);a7(32);a7(97);a7(32);a7(102);a7(117);a7(110);a7(99);a7(116);a7(105);a7(111);a7(110);a7(32);a7(99);a7(97);a7(108);a7(108);a7(44);a7(32);a7(98);a7(117);a7(105);a7(108);a7(100);a7(32);a7(119);a7(105);a7(116);a7(104);a7(32);a7(97);a7(32);a7(104);a7(105);a7(103);a7(104);a7(101);a7(114);a7(32);a7(118);a7(97);a7(108);a7(117);a7(101);a7(32);a7(102);a7(111);a7(114);a7(32);a7(77);a7(65);a7(88);a7(95);a7(83);a7(69);a7(84);a7(74);a7(77);a7(80);a7(83);a7(10);ab(0);return 0}function fz(a,b){a=a|0;b=b|0;var d=0,e=0;while((d|0)<20){e=c[b+(d<<2)>>2]|0;if((e|0)==0)break;if((e|0)==(a|0)){return c[b+((d<<2)+4)>>2]|0}d=d+2|0}return 0}function fA(a,b,c){a=a|0;b=b|0;c=c|0;return aR(a|0,b|0,c|0)|0}function fB(a,b,c){a=a|0;b=b|0;c=c|0;return ax(a|0,b|0,c|0)|0}function fC(a){a=a|0;return P(a|0)|0}function fD(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return bf(a|0,b|0,c|0,d|0)|0}function fE(a,b){a=a|0;b=b|0;return bi(a|0,b|0)|0}function fF(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;return bk[a&3](b|0,c|0,d|0,e|0,f|0,g|0,h|0)|0}function fG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;bl[a&3](b|0,c|0,d|0,e|0,f|0)}function fH(a){a=a|0;return bm[a&15]()|0}function fI(a,b){a=a|0;b=b|0;bn[a&15](b|0)}function fJ(a,b,c){a=a|0;b=b|0;c=c|0;bo[a&7](b|0,c|0)}function fK(a,b,c,d,e,f,g,h,i,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;return bp[a&127](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0,k|0)|0}function fL(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return bq[a&15](b|0,c|0,d|0)|0}function fM(a,b){a=a|0;b=b|0;return br[a&15](b|0)|0}function fN(a){a=a|0;bs[a&15]()}function fO(a,b,c){a=a|0;b=b|0;c=c|0;return bt[a&15](b|0,c|0)|0}function fP(a,b,c,d,e,f,g,h){a=a|0;b=+b;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;return bu[a&63](+b,c|0,d|0,e|0,f|0,g|0,h|0)|0}function fQ(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;bv[a&3](b|0,c|0,d|0,e|0,f|0,g|0)}function fR(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return bw[a&3](b|0,c|0,d|0,e|0)|0}function fS(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return bx[a&7](b|0,c|0,d|0,e|0,f|0)|0}function fT(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return by[a&3](b|0,c|0,d|0,e|0,f|0,g|0)|0}function fU(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;ab(0);return 0}function fV(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ab(1)}function fW(){ab(2);return 0}function fX(a){a=a|0;ab(3)}function fY(a,b){a=a|0;b=b|0;ab(4)}function fZ(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;ab(5);return 0}function f_(a,b,c){a=a|0;b=b|0;c=c|0;ab(6);return 0}function f$(a){a=a|0;ab(7);return 0}function f0(){ab(8)}function f1(a,b){a=a|0;b=b|0;ab(9);return 0}function f2(a,b,c,d,e,f,g){a=+a;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;ab(10);return 0}function f3(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ab(11)}function f4(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ab(12);return 0}function f5(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ab(13);return 0}function f6(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ab(14);return 0}
// EMSCRIPTEN_END_FUNCS
var bk=[fU,fU,b0,fU];var bl=[fV,fV,e6,fV];var bm=[fW,fW,e8,fW,e7,fW,fa,fW,cd,fW,b8,fW,cb,fW,fW,fW];var bn=[fX,fX,b9,fX,ce,fX,fb,fX,e5,fX,fX,fX,fX,fX,fX,fX];var bo=[fY,fY,e4,fY,b6,fY,fY,fY];var bp=[fZ,fZ,dW,fZ,dt,fZ,d5,fZ,ed,fZ,ee,fZ,dY,fZ,dm,fZ,ea,fZ,d0,fZ,dG,fZ,d8,fZ,dr,fZ,dq,fZ,d6,fZ,dH,fZ,d_,fZ,dE,fZ,dp,fZ,eb,fZ,du,fZ,ds,fZ,dJ,fZ,dI,fZ,dU,fZ,dB,fZ,dC,fZ,dn,fZ,d7,fZ,dP,fZ,dy,fZ,d$,fZ,dF,fZ,dL,fZ,d4,fZ,dZ,fZ,dM,fZ,d2,fZ,dQ,fZ,dw,fZ,dO,fZ,d1,fZ,dz,fZ,dN,fZ,dv,fZ,dx,fZ,dX,fZ,dR,fZ,d9,fZ,dV,fZ,d3,fZ,dS,fZ,dT,fZ,dK,fZ,dD,fZ,ec,fZ,dA,fZ,fZ,fZ,fZ,fZ,fZ,fZ,fZ,fZ,fZ,fZ,fZ,fZ,fZ,fZ];var bq=[f_,f_,cD,f_,fv,f_,cn,f_,fA,f_,fB,f_,f_,f_,f_,f_];var br=[f$,f$,fC,f$,e9,f$,e0,f$,cc,f$,f$,f$,f$,f$,f$,f$];var bs=[f0,f0,b4,f0,e1,f0,b2,f0,e3,f0,f0,f0,f0,f0,f0,f0];var bt=[f1,f1,e2,f1,fu,f1,b3,f1,fE,f1,f1,f1,f1,f1,f1,f1];var bu=[f2,f2,ev,f2,eK,f2,eH,f2,eA,f2,eD,f2,eP,f2,er,f2,eC,f2,eL,f2,et,f2,ey,f2,eO,f2,eN,f2,eF,f2,es,f2,eG,f2,ex,f2,ez,f2,ew,f2,eM,f2,eI,f2,eB,f2,eQ,f2,eJ,f2,eE,f2,eu,f2,f2,f2,f2,f2,f2,f2,f2,f2,f2,f2];var bv=[f3,f3,b5,f3];var bw=[f4,f4,fD,f4];var bx=[f5,f5,ca,f5,e$,f5,f5,f5];var by=[f6,f6,b7,f6];return{_testSetjmp:fz,_strlen:fx,_free:fo,_getWcs:bQ,_realloc:fq,_strncpy:fv,_memset:ft,_malloc:fn,_saveSetjmp:fy,_memcpy:fw,_pix2sky:bR,_strcpy:fu,_calloc:fp,_sky2pix:bS,runPostSets:bP,stackAlloc:bz,stackSave:bA,stackRestore:bB,setThrew:bC,setTempRet0:bF,setTempRet1:bG,setTempRet2:bH,setTempRet3:bI,setTempRet4:bJ,setTempRet5:bK,setTempRet6:bL,setTempRet7:bM,setTempRet8:bN,setTempRet9:bO,dynCall_iiiiiiii:fF,dynCall_viiiii:fG,dynCall_i:fH,dynCall_vi:fI,dynCall_vii:fJ,dynCall_iiiiiiiiiii:fK,dynCall_iiii:fL,dynCall_ii:fM,dynCall_v:fN,dynCall_iii:fO,dynCall_idiiiiii:fP,dynCall_viiiiii:fQ,dynCall_iiiii:fR,dynCall_iiiiii:fS,dynCall_iiiiiii:fT}})
// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiiiiiii": invoke_iiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_ii": invoke_ii, "invoke_v": invoke_v, "invoke_iii": invoke_iii, "invoke_idiiiiii": invoke_idiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "_strncmp": _strncmp, "_vsnprintf": _vsnprintf, "_sscanf": _sscanf, "_snprintf": _snprintf, "__scanString": __scanString, "__getFloat": __getFloat, "_abort": _abort, "_fprintf": _fprintf, "_sqrt": _sqrt, "_pread": _pread, "_fflush": _fflush, "__reallyNegative": __reallyNegative, "_tan": _tan, "_strchr": _strchr, "_fputc": _fputc, "_clearerr": _clearerr, "_log": _log, "_fabs": _fabs, "___setErrNo": ___setErrNo, "_send": _send, "_write": _write, "_abs": _abs, "_sprintf": _sprintf, "_log10": _log10, "_sin": _sin, "_sysconf": _sysconf, "_longjmp": _longjmp, "_exp": _exp, "_atan": _atan, "_asin": _asin, "_read": _read, "_time": _time, "__formatString": __formatString, "_vfprintf": _vfprintf, "_strstr": _strstr, "_llvm_va_end": _llvm_va_end, "_recv": _recv, "_fileno": _fileno, "_cos": _cos, "_pwrite": _pwrite, "_putchar": _putchar, "_llvm_pow_f64": _llvm_pow_f64, "_sbrk": _sbrk, "_localeconv": _localeconv, "_floor": _floor, "___errno_location": ___errno_location, "_atan2": _atan2, "_fmod": _fmod, "_fwrite": _fwrite, "_acos": _acos, "_vsprintf": _vsprintf, "_strcmp": _strcmp, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "NaN": NaN, "Infinity": Infinity, "_stdin": _stdin, "_stderr": _stderr, "_stdout": _stdout }, buffer);
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _free = Module["_free"] = asm["_free"];
var _getWcs = Module["_getWcs"] = asm["_getWcs"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _pix2sky = Module["_pix2sky"] = asm["_pix2sky"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _sky2pix = Module["_sky2pix"] = asm["_sky2pix"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiiiiiii = Module["dynCall_iiiiiiiiiii"] = asm["dynCall_iiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_idiiiiii = Module["dynCall_idiiiiii"] = asm["dynCall_idiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
if (memoryInitializer) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    applyData(Module['readBinary'](memoryInitializer));
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      applyData(data);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}
Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  initialStackTop = STACKTOP;
  try {
    var ret = Module['_main'](argc, argv, 0);
    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}
function run(args) {
  args = args || Module['arguments'];
  if (preloadStartTime === null) preloadStartTime = Date.now();
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }
  preRun();
  if (runDependencies > 0) {
    // a preRun added a dependency, run will be called later
    return;
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    Module['calledRun'] = true;
    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }
    postRun();
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;
function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  // exit the runtime
  exitRuntime();
  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371
  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;
function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }
  ABORT = true;
  EXITSTATUS = 1;
  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
// {{MODULE_ADDITIONS}}
  
  function string2buffer(str) {
    var buffer = new ArrayBuffer(str.length);
    var view = new Uint8Array(buffer);
    for (var i=0; i < str.length; i += 1) {
      view[i] = str.charCodeAt(i);
    }
    
    return view;
  }
  
  function wcs() {
    this._getWCS = Module.cwrap('getWcs', 'number', ['String', 'number']);
    this._pix2sky = Module.cwrap('pix2sky', 'number', ['number', 'number', 'number', 'number']);
    this._sky2pix = Module.cwrap('sky2pix', 'number', ['number', 'number', 'number', 'number']);
  }
  
  wcs.prototype.init = function(headerStr) {
    var nkeyrec, header, nHeaderBytes, headerPtr, headerHeap;
    
    nkeyrec = (headerStr.length - 1) / 80;
    header = string2buffer(headerStr);
    
    // Allocate string on Emscripten heap and get byte offset
    nHeaderBytes = header.length * header.BYTES_PER_ELEMENT;
    headerPtr = Module._malloc(nHeaderBytes);
    
    headerHeap = new Uint8Array(Module.HEAPU8.buffer, headerPtr, nHeaderBytes);
    headerHeap.set(new Uint8Array(header.buffer));
    
    // Use byte offset to pass header string to libwcs
    this.wcsPtr = this._getWCS(headerHeap.byteOffset, nkeyrec);
    
    // Allocate memory on the Emscripten heap for coordinates
    this.coordinatePtr = Module._malloc(16);
  }
  
  wcs.prototype.pix2sky = function(x, y) {
    var world;
    
    this._pix2sky(this.wcsPtr, x, y, this.coordinatePtr);
    world = new Float64Array(Module.HEAPU8.buffer, this.coordinatePtr, 2);
    
    return [world[0], world[1]];
  }
  
  wcs.prototype.sky2pix = function(ra, dec) {
    var pixcrd;
    
    this._sky2pix(this.wcsPtr, ra, dec, this.coordinatePtr);
    pixcrd = new Float64Array(Module.HEAPU8.buffer, this.coordinatePtr, 2);
    
    return [pixcrd[0], pixcrd[1]];
  }
  
  wcs.version = '0.2.0';
  
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = wcs;
  }
  else {
    window.wcs = wcs;
  }

}());(function() {
  'use strict';
  
  var app = angular.module('GraticulesApp', []);
  
  app.controller('GraticuleCtrl', function($scope) {
    
    $scope.projections = {
      AZP: "Zenithal Perspective",
      SZP: "Slant Zenithal Perspective",
      TAN: "Gnomonic",
      STG: "Stereographic",
      SIN: "Generalized Orthographic",
      NCP: "North Celestial Pole",
      ARC: "Zenithal Equidistant",
      ZPN: "Zenithal Polynomial",
      ZEA: "Zenithal Equal Area",
      AIR: "Airy's",
      CYP: "Cylindrical Perspective",
      CEA: "Cylindrical Equal Area",
      CAR: "Plate Carrée",
      MER: "Mercator",
      SFL: "Sanson-Flamsteed",
      PAR: "Parabolic",
      MOL: "Mollweide",
      AIT: "Aitoff",
      COP: "Conic Perspective",
      COE: "Conic Equal Area",
      COD: "Conic Equidistant",
      COO: "Conic Orthomorphic",
      BON: "Bonne's",
      PCO: "Polyconic",
      TSC: "Tangential Spherical Cube",
      CSC: "COBE Quad-Cube",
      QSC: "Quadrilateral Spherical Cube",
      HPX: "HEALPix"
    };
    
    $scope.projection = 'TAN';
    $scope.name = $scope.projections[$scope.projection];
    $scope.nGraticulesX = 4;
    $scope.nGraticulesY = 4;
    
    $scope.onProjection = function(projection) {
      $scope.projection = projection;
      $scope.name = $scope.projections[projection];
    }
    
  });
  
  app.directive('graticule', function($http) {
    return {
      restrict: 'E',
      link: function postLink(scope, element, attrs) {
        var w, xTicks, yTicks, extent, ready = false;
        
        var margin = {top: 11, right: 20, bottom: 40, left: 50};
        var width = 384;
        var height = 384;
        
        var xRange = d3.scale.identity()
                      .domain([0, width]);
        var yRange = d3.scale.identity()
                      .domain([height, 0]);
        
        var x = d3.scale.ordinal()
            .range( xRange.ticks(scope.nGraticulesX) );
        var y = d3.scale.ordinal()
            .range( yRange.ticks(scope.nGraticulesY) );
            
        var xAxis = d3.svg.axis()
            .orient("bottom")
            .ticks(scope.nGraticulesX);
                
        var yAxis = d3.svg.axis()
            .orient("left")
            .ticks(scope.nGraticulesY);
        
        var svg = d3.select(element[0]).append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        
        var xAxisEl = svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")");
        xAxisEl.append("text")
          .attr("class", "label")
          .attr("x", width)
          .attr("y", -6)
          .style("text-anchor", "end")
          .text("declination");
        
        var yAxisEl = svg.append("g")
            .attr("class", "y axis");
        yAxisEl.append("text")
            .attr("class", "label")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end")
            .text("right ascention");
        
        var imgEl = svg.append("image")
          .attr("xlink:href", "images/1904-66_" + scope.projection + ".png")
          .attr("x", "0")
          .attr("y", "0")
          .attr("width", width + "px")
          .attr("height", height + "px")
        
        var group = svg.append("g");
        group.append("clipPath")
            .attr("id", "clip")
          .append("rect")
            .attr("width", width)
            .attr("height", height);
        
        var gridGroup = group.append("g")
          .attr("clip-path", "url(#clip)")
          .attr("transform", "translate(0, 0)");
        
        scope.$watch('projection', function() {
          imgEl.attr("xlink:href", "images/1904-66_" + scope.projection + ".png")
          
          $http.get('headers/1904-66_' + scope.projection)
            .success(function(data, status, headers, config){
              w = new wcs();
              w.init(data);
              
              xTicks = x.range().map(function(d) {
                d = 0.5 * d + 1; // Convert to FITS reference frame
                return w.pix2sky(d, 1)[1].toFixed(3);
              });
              x.domain(xTicks);
              
              yTicks = y.range().map(function(d) {
                d = 192 - 0.5 * d; // Convert to FITS reference frame
                return w.pix2sky(1, d)[0].toFixed(3);
              });
              y.domain(yTicks);
              
              xAxis.scale(x);
              yAxis.scale(y);
              
              xAxisEl.call(xAxis)
                .selectAll("text")
                  .style("text-anchor", "end")
                  .attr("transform", function(d) {
                    return "rotate(-45)"
                  });
              yAxisEl.call(yAxis);
              
              makeGraticules();
              ready = true;
              
              element.find("image").on("mousemove", function(e) {
                var x = e.offsetX - margin.left;
                var y = e.offsetY - margin.top;
                
                // Convert to FITS reference frame
                x = 0.5 * x + 1;
                y = 192 - 0.5 * y;
                var sky = w.pix2sky(x, y);
                
                scope.$apply(function() {
                  scope.ra = sky[0].toFixed(6) + "°";
                  scope.dec = sky[1].toFixed(6) + "°";
                  scope.x = x;
                  scope.y = y;
                });
                
              });
              
            });
          
        });
        
        scope.$watch('nGraticulesX', function() {
          if (!ready)
            return;
          
          x.range( xRange.ticks(scope.nGraticulesX) );
          xTicks = x.range().map(function(d) {
            d = 0.5 * d + 1; // Convert to FITS reference frame
            return w.pix2sky(d, 1)[1].toFixed(3);
          });
          
          x.domain(xTicks);
          xAxis.scale(x);
          xAxisEl.call(xAxis)
            .selectAll("text")
              .style("text-anchor", "end")
              .attr("transform", function(d) {
                return "rotate(-45)"
              });
          
          makeGraticules();
        });
        scope.$watch('nGraticulesY', function() {
          if (!ready)
            return;
          
          y.range( yRange.ticks(scope.nGraticulesY) );
          yTicks = y.range().map(function(d) {
            d = 192 - 0.5 * d; // Convert to FITS reference frame
            return w.pix2sky(1, d)[0].toFixed(3);
          });
          
          y.domain(yTicks);
          yAxis.scale(y);
          yAxisEl.call(yAxis);
          
          makeGraticules();
        });
        
        var lineFn = d3.svg.line()
            .x(function(d) { return d.x; })
            .y(function(d) { return 384 - d.y; })
            .interpolate("linear");
        
        function makeGraticules() {
          var range, spread;
          
          x.range( xRange.ticks(20) );
          range = x.range();
          spread = range[1] - range[0];
          range.push(range[range.length - 1] + spread);
          range.push(range[range.length - 1] + spread);
          xTicks = range.map(function(d) {
            d = 0.5 * d + 1; // Convert to FITS reference frame
            return w.pix2sky(d, 1)[1];
          });
          
          y.range( yRange.ticks(scope.nGraticulesY) );
          range = y.range();
          spread = range[1] - range[0];
          range.push(range[range.length - 1] + spread);
          range.push(range[range.length - 1] + spread);
          yTicks = range.map(function(d) {
            d = 192 - 0.5 * d; // Convert to FITS reference frame
            return w.pix2sky(1, d)[0];
          });
          
          svg.selectAll("path").remove()
          for (var j = 0; j < yTicks.length; j++) {
            var gridLine = [];
            
            for (var i = 0; i < xTicks.length; i++) {
              var imgcrd = w.sky2pix(yTicks[j], xTicks[i]);
              var point = {
                x: 2.0 * imgcrd[0],
                y: 2.0 * imgcrd[1]
              };
              gridLine.push(point);
            }
            
            gridGroup.append("path")
              .attr("d", lineFn(gridLine))
              .attr("stroke", "#7FFF00")
              .attr("stroke-width", 0.75)
              .attr("fill", "none");
          }
          
          x.range( xRange.ticks(scope.nGraticulesX) );
          range = x.range();
          spread = range[1] - range[0];
          range.push(range[range.length - 1] + spread);
          range.push(range[range.length - 1] + spread);
          xTicks = range.map(function(d) {
            d = 0.5 * d + 1; // Convert to FITS reference frame
            return w.pix2sky(d, 1)[1];
          });
          
          y.range( yRange.ticks(20) );
          range = y.range();
          spread = range[1] - range[0];
          range.push(range[range.length - 1] + spread);
          range.push(range[range.length - 1] + spread);
          yTicks = range.map(function(d) {
            d = 192 - 0.5 * d; // Convert to FITS reference frame
            return w.pix2sky(1, d)[0];
          });
          
          for (var i = 0; i < xTicks.length; i++) {
            var gridLine = [];
            for (var j = 0; j < yTicks.length; j++) {
              var imgcrd = w.sky2pix(yTicks[j], xTicks[i]);
              var point = {
                x: 2.0 * imgcrd[0],
                y: 2.0 * imgcrd[1]
              };
              gridLine.push(point);
            }
            gridGroup.append("path")
              .attr("d", lineFn(gridLine))
              .attr("stroke", "#7FFF00")
              .attr("stroke-width", 0.75)
              .attr("fill", "none");
          }
          
          x.range( xRange.ticks(scope.nGraticulesX) );
          y.range( yRange.ticks(scope.nGraticulesY) );
        }
        
      }
    }
  });
  
})()